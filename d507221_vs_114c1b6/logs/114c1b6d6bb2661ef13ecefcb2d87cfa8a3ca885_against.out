cset: moving following pidspec: 31890
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 1.394706488 seconds)
loading group "string"... done (took 0.500593642 seconds)
loading group "linalg"... done (took 8.394653805 seconds)
loading group "parallel"... done (took 0.1700103 seconds)
loading group "find"... done (took 2.981694454 seconds)
loading group "tuple"... done (took 2.015134894 seconds)
loading group "dates"... done (took 1.37779493 seconds)
loading group "micro"... done (took 0.193017598 seconds)
loading group "io"... done (took 0.52780999 seconds)
loading group "scalar"... done (took 49.163892011 seconds)
loading group "sparse"... done (took 13.330649221 seconds)
loading group "broadcast"... done (took 1.254527148 seconds)
loading group "union"... done (took 9.070367814 seconds)
loading group "simd"... done (took 2.983557664 seconds)
loading group "random"... done (took 11.163003291 seconds)
loading group "problem"... done (took 2.170205789 seconds)
loading group "array"... done (took 24.630606172 seconds)
loading group "misc"... done (took 1.099470808 seconds)
loading group "sort"... done (took 3.673098367 seconds)
loading group "collection"... done (took 18.986995469 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.59398523 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.126058197 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.197702966 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.27623015 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.227432005 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.165141028 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.142921579 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.238184881 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.518075965 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.198467138 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.137924359 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.419025243 seconds)
done (took 5.971114698 seconds)
(2/20) benchmarking "string"...
  (1/4) benchmarking "join"...
  done (took 0.24713096 seconds)
  (2/4) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.241652367 seconds)
    (2/2) benchmarking "String"...
    done (took 0.162309844 seconds)
  done (took 1.07384289 seconds)
  (3/4) benchmarking "replace"...
  done (took 0.075169058 seconds)
  (4/4) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.157950016 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.105939764 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.092674574 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.09058168 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.106037783 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.091353621 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.107522703 seconds)
  done (took 1.425681758 seconds)
done (took 3.497316435 seconds)
(3/20) benchmarking "linalg"...
  (1/2) benchmarking "factorization"...
    (1/64) benchmarking ("eig", "LowerTriangular", 1024)...
    done (took 0.491301792 seconds)
    (2/64) benchmarking ("svdfact", "UpperTriangular", 1024)...
    done (took 0.857257958 seconds)
    (3/64) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.491656497 seconds)
    (4/64) benchmarking ("eigfact", "UpperTriangular", 256)...
    done (took 0.139890063 seconds)
    (5/64) benchmarking ("qr", "Matrix", 256)...
    done (took 0.305772612 seconds)
    (6/64) benchmarking ("lu", "Matrix", 256)...
    done (took 0.286678953 seconds)
    (7/64) benchmarking ("eig", "SymTridiagonal", 256)...
    done (took 0.268599402 seconds)
    (8/64) benchmarking ("qrfact", "Matrix", 1024)...
    done (took 0.195322381 seconds)
    (9/64) benchmarking ("eigfact", "Diagonal", 256)...
    done (took 0.090270039 seconds)
    (10/64) benchmarking ("eig", "LowerTriangular", 256)...
    done (took 0.086906991 seconds)
    (11/64) benchmarking ("lufact", "Tridiagonal", 1024)...
    done (took 0.170278083 seconds)
    (12/64) benchmarking ("schurfact", "Matrix", 1024)...
    done (took 1.39181535 seconds)
    (13/64) benchmarking ("eig", "Bidiagonal", 1024)...
    done (took 0.379085082 seconds)
    (14/64) benchmarking ("eigfact", "Matrix", 1024)...
    done (took 1.944563137 seconds)
    (15/64) benchmarking ("eig", "UpperTriangular", 256)...
    done (took 0.087661296 seconds)
    (16/64) benchmarking ("svdfact", "Matrix", 256)...
    done (took 0.091838887 seconds)
    (17/64) benchmarking ("lufact", "Matrix", 256)...
    done (took 0.126263579 seconds)
    (18/64) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.748264494 seconds)
    (19/64) benchmarking ("qrfact", "Matrix", 256)...
    done (took 0.078317572 seconds)
    (20/64) benchmarking ("eigfact", "Matrix", 256)...
    done (took 0.108306827 seconds)
    (21/64) benchmarking ("svd", "Diagonal", 256)...
    done (took 0.497997037 seconds)
    (22/64) benchmarking ("svdfact", "Diagonal", 256)...
    done (took 0.185988899 seconds)
    (23/64) benchmarking ("lufact", "Matrix", 1024)...
    done (took 0.098463773 seconds)
    (24/64) benchmarking ("schur", "Matrix", 256)...
    done (took 0.118749134 seconds)
    (25/64) benchmarking ("eigfact", "SymTridiagonal", 1024)...
    done (took 0.183369792 seconds)
    (26/64) benchmarking ("svd", "LowerTriangular", 256)...
    done (took 0.130703632 seconds)
    (27/64) benchmarking ("eig", "UpperTriangular", 1024)...
    done (took 0.157285196 seconds)
    (28/64) benchmarking ("eig", "Bidiagonal", 256)...
    done (took 0.099349632 seconds)
    (29/64) benchmarking ("svdfact", "LowerTriangular", 1024)...
    done (took 0.660538178 seconds)
    (30/64) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.128958516 seconds)
    (31/64) benchmarking ("eig", "Matrix", 256)...
    done (took 0.176034801 seconds)
    (32/64) benchmarking ("eigfact", "SymTridiagonal", 256)...
    done (took 0.095228865 seconds)
    (33/64) benchmarking ("eigfact", "UpperTriangular", 1024)...
    done (took 0.154853671 seconds)
    (34/64) benchmarking ("svdfact", "Bidiagonal", 256)...
    done (took 0.181071364 seconds)
    (35/64) benchmarking ("lu", "Tridiagonal", 256)...
    done (took 0.189923781 seconds)
    (36/64) benchmarking ("svd", "UpperTriangular", 256)...
    done (took 0.107363441 seconds)
    (37/64) benchmarking ("svd", "UpperTriangular", 1024)...
    done (took 0.6719002 seconds)
    (38/64) benchmarking ("eig", "SymTridiagonal", 1024)...
    done (took 0.197874657 seconds)
    (39/64) benchmarking ("svd", "Diagonal", 1024)...
    done (took 0.097792845 seconds)
    (40/64) benchmarking ("eigfact", "Diagonal", 1024)...
    done (took 0.098394892 seconds)
    (41/64) benchmarking ("svd", "LowerTriangular", 1024)...
    done (took 0.677162312 seconds)
    (42/64) benchmarking ("lu", "Tridiagonal", 1024)...
    done (took 0.114588418 seconds)
    (43/64) benchmarking ("cholfact", "Matrix", 256)...
    done (took 0.177934621 seconds)
    (44/64) benchmarking ("eig", "Diagonal", 1024)...
    done (took 0.100666583 seconds)
    (45/64) benchmarking ("eigfact", "LowerTriangular", 256)...
    done (took 0.086694374 seconds)
    (46/64) benchmarking ("eigfact", "LowerTriangular", 1024)...
    done (took 0.175908553 seconds)
    (47/64) benchmarking ("svdfact", "Diagonal", 1024)...
    done (took 0.098169932 seconds)
    (48/64) benchmarking ("lufact", "Tridiagonal", 256)...
    done (took 0.090281146 seconds)
    (49/64) benchmarking ("svd", "Bidiagonal", 256)...
    done (took 0.091830722 seconds)
    (50/64) benchmarking ("eig", "Diagonal", 256)...
    done (took 0.083637916 seconds)
    (51/64) benchmarking ("svd", "Bidiagonal", 1024)...
    done (took 0.158640522 seconds)
    (52/64) benchmarking ("eig", "Matrix", 1024)...
    done (took 1.460897722 seconds)
    (53/64) benchmarking ("svdfact", "UpperTriangular", 256)...
    done (took 0.102410489 seconds)
    (54/64) benchmarking ("chol", "Matrix", 1024)...
    done (took 0.165375796 seconds)
    (55/64) benchmarking ("svdfact", "LowerTriangular", 256)...
    done (took 0.091228159 seconds)
    (56/64) benchmarking ("svdfact", "Matrix", 1024)...
    done (took 0.687787942 seconds)
    (57/64) benchmarking ("svd", "Matrix", 256)...
    done (took 0.094427002 seconds)
    (58/64) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.271610753 seconds)
    (59/64) benchmarking ("schurfact", "Matrix", 256)...
    done (took 0.128465181 seconds)
    (60/64) benchmarking ("cholfact", "Matrix", 1024)...
    done (took 0.091328591 seconds)
    (61/64) benchmarking ("chol", "Matrix", 256)...
    done (took 0.088409933 seconds)
    (62/64) benchmarking ("eigfact", "Bidiagonal", 256)...
    done (took 0.0863389 seconds)
    (63/64) benchmarking ("svdfact", "Bidiagonal", 1024)...
    done (took 0.152537664 seconds)
    (64/64) benchmarking ("eigfact", "Bidiagonal", 1024)...
    done (took 0.091368025 seconds)
  done (took 19.653064592 seconds)
  (2/2) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.143447729 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.161891038 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.076503585 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.153281996 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.121289454 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.07894818 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.099385138 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.076528553 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.105887899 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.19259082 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.135501177 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.149998919 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.090080527 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.088327371 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.126076739 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.247098829 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.107141256 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.118416442 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.088303046 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.087934153 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.136368542 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.094682905 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.087948468 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.106237863 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.1693134 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.20105025 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.106833824 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.119303695 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.086969926 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.093883728 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.139713217 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.141949606 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.089097645 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.089511404 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.170808497 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.122786918 seconds)
  done (took 5.094771973 seconds)
done (took 25.420156923 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.424201997 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.078407813 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.077971193 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.096367888 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.079384168 seconds)
  done (took 1.482126169 seconds)
done (took 2.171255987 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/13) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 0.349222096 seconds)
    (2/13) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 0.182740523 seconds)
    (3/13) benchmarking ("BitArray{1}", "90-10")...
    done (took 0.098605558 seconds)
    (4/13) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 0.181853526 seconds)
    (5/13) benchmarking ("BitArray{1}", "50-50")...
    done (took 0.082275201 seconds)
    (6/13) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 0.187096964 seconds)
    (7/13) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 0.175579519 seconds)
    (8/13) benchmarking ("Array{Bool,1}", "10-90")...
    done (took 0.090984622 seconds)
    (9/13) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 0.199351128 seconds)
    (10/13) benchmarking ("Array{Bool,1}", "90-10")...
    done (took 0.079875675 seconds)
    (11/13) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 0.180291962 seconds)
    (12/13) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 0.080913112 seconds)
    (13/13) benchmarking ("BitArray{1}", "10-90")...
    done (took 0.099454331 seconds)
  done (took 2.713496826 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 0.099669998 seconds)
    (2/11) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 0.106784676 seconds)
    (3/11) benchmarking ("BitArray{1}", "90-10")...
    done (took 0.097751386 seconds)
    (4/11) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 0.115747864 seconds)
    (5/11) benchmarking ("BitArray{1}", "50-50")...
    done (took 0.082134188 seconds)
    (6/11) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 0.097960366 seconds)
    (7/11) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 0.113308076 seconds)
    (8/11) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 0.107870415 seconds)
    (9/11) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 0.097161268 seconds)
    (10/11) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 0.107894736 seconds)
    (11/11) benchmarking ("BitArray{1}", "10-90")...
    done (took 0.082678856 seconds)
  done (took 1.804740998 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 0.09740902 seconds)
    (2/11) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 0.103031153 seconds)
    (3/11) benchmarking ("BitArray{1}", "90-10")...
    done (took 0.095446031 seconds)
    (4/11) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 0.112370727 seconds)
    (5/11) benchmarking ("BitArray{1}", "50-50")...
    done (took 0.082266843 seconds)
    (6/11) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 0.09556644 seconds)
    (7/11) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 0.110560851 seconds)
    (8/11) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 0.105677342 seconds)
    (9/11) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 0.094733402 seconds)
    (10/11) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 0.108809192 seconds)
    (11/11) benchmarking ("BitArray{1}", "10-90")...
    done (took 0.082253939 seconds)
  done (took 1.787601597 seconds)
done (took 6.99839491 seconds)
(6/20) benchmarking "tuple"...
  (1/3) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.063160687 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 10.111292587 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.159547545 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.201514521 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.337499363 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.224740259 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.540227311 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.146867057 seconds)
  done (took 13.634189596 seconds)
  (2/3) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.159845912 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.103121361 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.090793533 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.086501581 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.090265298 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.105446789 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.087992932 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.091593409 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.106678702 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.091895706 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.088544117 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.103186963 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.088900818 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.089050324 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.091193755 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.10650587 seconds)
  done (took 2.337777303 seconds)
  (3/3) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.140114054 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.134864356 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.094816782 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.097079712 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.106425618 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.095612413 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.096918834 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.109627515 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.093420655 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.091696442 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.097951814 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.110020694 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.09327644 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.091197966 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.109371767 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.114102798 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.09046276 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.109831052 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.112493569 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.110099171 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.097498623 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.092482789 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.108472528 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.094846455 seconds)
  done (took 3.278116528 seconds)
done (took 19.951746277 seconds)
(7/20) benchmarking "dates"...
  (1/6) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.145337087 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.096212158 seconds)
  done (took 0.946746449 seconds)
  (2/6) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.134421322 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.147358165 seconds)
  done (took 0.990253084 seconds)
  (3/6) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.092722838 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.091625359 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.117239879 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.12955977 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.096064498 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.105966249 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.091589781 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.089534242 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.10831158 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.087150312 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.092315559 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.122631852 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.093307529 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.12063059 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.092282371 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.094279583 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.110711216 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.091359686 seconds)
  done (took 2.539745242 seconds)
  (4/6) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.089980613 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.088816467 seconds)
  done (took 0.89086462 seconds)
  (5/6) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.09187964 seconds)
    (2/7) benchmarking "second"...
    done (took 0.087030389 seconds)
    (3/7) benchmarking "month"...
    done (took 0.090197817 seconds)
    (4/7) benchmarking "year"...
    done (took 0.104626063 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.08692268 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.087312446 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.101765692 seconds)
  done (took 1.362641858 seconds)
  (6/6) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.4798445 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.258073628 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.350854727 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.108707954 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.141189315 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.346251441 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.140669662 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.102043989 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.100529454 seconds)
  done (took 2.776174286 seconds)
done (took 10.218596386 seconds)
(8/20) benchmarking "micro"...
  (1/7) benchmarking "quicksort"...
  done (took 0.089711788 seconds)
  (2/7) benchmarking "parseint"...
  done (took 0.215414713 seconds)
  (3/7) benchmarking "randmatstat"...
  done (took 0.610384143 seconds)
  (4/7) benchmarking "pisum"...
  done (took 0.109462141 seconds)
  (5/7) benchmarking "fib"...
  done (took 0.086981886 seconds)
  (6/7) benchmarking "randmatmul"...
  done (took 0.153481502 seconds)
  (7/7) benchmarking "mandel"...
  done (took 0.272936467 seconds)
done (took 2.255501897 seconds)
(9/20) benchmarking "io"...
  (1/2) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.337052493 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.136438016 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078094496 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.088581472 seconds)
  done (took 1.354283746 seconds)
  (2/2) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.080646458 seconds)
    (2/2) benchmarking "read"...
    done (took 0.097136148 seconds)
  done (took 0.898573782 seconds)
done (took 2.973082648 seconds)
(10/20) benchmarking "scalar"...
  (1/23) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.088010052 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.087306729 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.086232406 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.102051256 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.087062704 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.087583825 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.085818334 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.10168264 seconds)
    (9/24) benchmarking ("zero", "Float32")...
    done (took 0.087114416 seconds)
    (10/24) benchmarking ("one", "Float32")...
    done (took 0.087420351 seconds)
    (11/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.100538829 seconds)
    (12/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.119012142 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.085222205 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.102269255 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.08615367 seconds)
    (16/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.085742298 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.084071034 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.102755994 seconds)
    (19/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.085323278 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.084385194 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.102112035 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.087504088 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.085695493 seconds)
    (24/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.084475038 seconds)
  done (took 2.952110965 seconds)
  (2/23) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.105248386 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.101660397 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.105790831 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.09044669 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.09104183 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.105375223 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.089993098 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.088420983 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.105007723 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.087724286 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.089170809 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.10625612 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.089137507 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.091025211 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.101791225 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.091464645 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.089715687 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.102503076 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.08918566 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.090605274 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.09077736 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.103469443 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.090315486 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.090676383 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.105449177 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.090591634 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.088270983 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.104196573 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.090301327 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.090051052 seconds)
  done (took 3.577467174 seconds)
  (3/23) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.095698512 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.08432678 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.086220421 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.11006694 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.083996417 seconds)
    (6/72) benchmarking ("isodd", "UInt64")...
    done (took 0.086115962 seconds)
    (7/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.098578804 seconds)
    (8/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.085503439 seconds)
    (9/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.087422973 seconds)
    (10/72) benchmarking ("isnan", "Float64")...
    done (took 0.084558087 seconds)
    (11/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.103949631 seconds)
    (12/72) benchmarking ("isequal", "Float64")...
    done (took 0.086804195 seconds)
    (13/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.083190483 seconds)
    (14/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.102012064 seconds)
    (15/72) benchmarking ("isnan", "Complex{Float32}")...
    done (took 0.087879165 seconds)
    (16/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.089152154 seconds)
    (17/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.09438134 seconds)
    (18/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.100497854 seconds)
    (19/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.083701175 seconds)
    (20/72) benchmarking ("isequal", "Complex{Float64}")...
    done (took 0.08612307 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.104260737 seconds)
    (22/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.085308521 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 0.08594921 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.085589309 seconds)
    (25/72) benchmarking ("isequal", "UInt64")...
    done (took 0.101544483 seconds)
    (26/72) benchmarking ("isinteger", "Int64")...
    done (took 0.083433744 seconds)
    (27/72) benchmarking ("isfinite", "Float64")...
    done (took 0.086832309 seconds)
    (28/72) benchmarking ("isequal", "Int64")...
    done (took 0.100929771 seconds)
    (29/72) benchmarking ("isinf", "Float64")...
    done (took 0.088044946 seconds)
    (30/72) benchmarking ("isless", "UInt64")...
    done (took 0.085925302 seconds)
    (31/72) benchmarking ("isequal", "BigInt")...
    done (took 0.087810209 seconds)
    (32/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.105058118 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 0.088462931 seconds)
    (34/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.095755899 seconds)
    (35/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.104804226 seconds)
    (36/72) benchmarking ("isless", "Float64")...
    done (took 0.087139379 seconds)
    (37/72) benchmarking ("iseven", "BigInt")...
    done (took 0.091941449 seconds)
    (38/72) benchmarking ("isnan", "BigInt")...
    done (took 0.099115796 seconds)
    (39/72) benchmarking ("isequal", "Complex{Float32}")...
    done (took 0.088844055 seconds)
    (40/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.083812909 seconds)
    (41/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.082683609 seconds)
    (42/72) benchmarking ("isnan", "Float32")...
    done (took 0.10232202 seconds)
    (43/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.084992394 seconds)
    (44/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.092483229 seconds)
    (45/72) benchmarking ("iseven", "Int64")...
    done (took 0.101826694 seconds)
    (46/72) benchmarking ("isinteger", "Float64")...
    done (took 0.088478289 seconds)
    (47/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.084253633 seconds)
    (48/72) benchmarking ("isfinite", "Complex{Float32}")...
    done (took 0.087265144 seconds)
    (49/72) benchmarking ("isnan", "Complex{Float64}")...
    done (took 0.10287757 seconds)
    (50/72) benchmarking ("isinteger", "Complex{Float32}")...
    done (took 0.089920349 seconds)
    (51/72) benchmarking ("isinf", "Int64")...
    done (took 0.083263941 seconds)
    (52/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.099253359 seconds)
    (53/72) benchmarking ("isinf", "Complex{Float32}")...
    done (took 0.088617205 seconds)
    (54/72) benchmarking ("isfinite", "Complex{Float64}")...
    done (took 0.088639576 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.089696349 seconds)
    (56/72) benchmarking ("isnan", "Int64")...
    done (took 0.098879191 seconds)
    (57/72) benchmarking ("isinteger", "Float32")...
    done (took 0.08837166 seconds)
    (58/72) benchmarking ("isnan", "UInt64")...
    done (took 0.083118709 seconds)
    (59/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.102187935 seconds)
    (60/72) benchmarking ("isless", "Int64")...
    done (took 0.08774059 seconds)
    (61/72) benchmarking ("isinf", "BigInt")...
    done (took 0.0838983 seconds)
    (62/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.083695319 seconds)
    (63/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.107397298 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.087625374 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.09973919 seconds)
    (66/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.108463839 seconds)
    (67/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.08428475 seconds)
    (68/72) benchmarking ("isinteger", "Complex{Float64}")...
    done (took 0.088628902 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.104696244 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.093193384 seconds)
    (71/72) benchmarking ("isinf", "Complex{Float64}")...
    done (took 0.089023485 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.112061757 seconds)
  done (took 7.356411638 seconds)
  (4/23) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.10140905 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.095906528 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.086954733 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.103808477 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.086642518 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.087309535 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.107746012 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.087175333 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.088449813 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.109094013 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.087800056 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.088135791 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.087160648 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.103954781 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.088053997 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.088755687 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.108838456 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.087707 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.205211488 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.103929293 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.088983955 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.090728406 seconds)
  done (took 2.914246113 seconds)
  (5/23) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.231770874 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.093159719 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.134409461 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.116351296 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.104892031 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.116050947 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.092095607 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.093190775 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.105674207 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.096943874 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.094342246 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.107521175 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.104080061 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.096197019 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.111834907 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.096734509 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.105956329 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.097438151 seconds)
  done (took 2.733033322 seconds)
  (6/23) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.101902904 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.088575497 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.124401935 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.090492676 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.088783391 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.087905467 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.110588608 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.108795603 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.104803674 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.090648462 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.094742053 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.088894741 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.105849474 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.089661257 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.089103553 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.104521815 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.092332798 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.090645697 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.11066012 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.094500827 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.09388335 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.111995498 seconds)
  done (took 2.896443332 seconds)
  (7/23) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.103687002 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.089284227 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.120980381 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.092856752 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.089027995 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.087674918 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.110880139 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.089646102 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.09574372 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.10465943 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.089352426 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.088400234 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.119603427 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.089317393 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.094470877 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.105585248 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.090577946 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.089654976 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.103876504 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.090080686 seconds)
  done (took 2.679566035 seconds)
  (8/23) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.161739551 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.119573906 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.10646658 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.112250046 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.12048456 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.104876235 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.113817325 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.122169697 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.105593156 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.131836125 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.104660399 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.104971257 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.128464701 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.109887995 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.104792787 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.12891605 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.112453183 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.128820671 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.105449015 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.104621658 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.13140514 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.104639059 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.127959696 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.106836011 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.106290147 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.121861742 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.10521544 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.110407661 seconds)
  done (took 3.982936918 seconds)
  (9/23) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.090410202 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.087907044 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.087785526 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.104513294 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.088744118 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.086994317 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.08653199 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.10388454 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.088568836 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.087417826 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.104358762 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.088669349 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.089397424 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.087677254 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.103757104 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.088776701 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.089105367 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.103362314 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.089893256 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.089511277 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.089242586 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.104551876 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.089407801 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.08903711 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.103995108 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.090028729 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.08979141 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.088645551 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.104051827 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.089942698 seconds)
  done (took 3.525611587 seconds)
  (10/23) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.102426745 seconds)
    (2/2) benchmarking "in"...
    done (took 0.098316687 seconds)
  done (took 0.939553206 seconds)
  (11/23) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.099303987 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.10305149 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.087792008 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.106071595 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.095955308 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.088959092 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.113710856 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.095300943 seconds)
  done (took 1.531083548 seconds)
  (12/23) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.137336648 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.096098156 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.105054012 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.089433299 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.105569938 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.107243735 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.089378346 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.089822902 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.107739202 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.098638037 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.090006303 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.105223503 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.105509928 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.10988694 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.121944474 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.098053017 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.105409903 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.091330667 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.089306993 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.090238738 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.12047726 seconds)
  done (took 2.893398701 seconds)
  (13/23) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.109471973 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.102891566 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.11657805 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.103511383 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.096238638 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.118343869 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.1009136 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.118974524 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.104591541 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.098183319 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.119223886 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.099884884 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.113381327 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.09851046 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.098186865 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.115599348 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.103335346 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.096803294 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.118062044 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.100375809 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.114278078 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.101907179 seconds)
  done (took 3.09068405 seconds)
  (14/23) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.12110186 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.149293242 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.116879175 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.145476694 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.104489536 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.099192058 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.111403668 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.125557034 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.091332239 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.111656968 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.104248406 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.121604013 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.093788451 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.097136382 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.112863132 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.094388315 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.096286435 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.108901343 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.098751937 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.092860674 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.114103864 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.095274402 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.102621471 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.119836853 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.095807307 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.093128729 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.110517705 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.095990641 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.117013122 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.099812591 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.097014793 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.112478411 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.103671561 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.095846781 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.110932873 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.095585836 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.104242166 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.111759183 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095173305 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.091025377 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.111826649 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.096455123 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.09454622 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.122479726 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.0959384 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.094324884 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.111047536 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.091989875 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.101890503 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.112610774 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.099963901 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.119637001 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.096615213 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.09525296 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.11267349 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.103228423 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.094529337 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.109640761 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.095642468 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.102574168 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.109877154 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.096980041 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.102933345 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.111392643 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.100866981 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.120329295 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.097185828 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.096163541 seconds)
  done (took 8.015777835 seconds)
  (15/23) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.126032229 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.097639634 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.12245213 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.106601039 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.097187452 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.114540113 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.097559379 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.097491049 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.115159556 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.103207124 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.113484555 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.18148676 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.113265076 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.101817213 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.098188305 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.114734585 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.097666317 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.097676215 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.115761661 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.097976336 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.097534378 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.121961457 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.097207941 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.121058512 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.109243409 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.094772447 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.115302294 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.098088678 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.105316914 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.115174895 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.109800264 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.113499936 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.099648456 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.104597966 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.12468193 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.097066364 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.09138741 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.114906997 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.096938558 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.09743779 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.111356417 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.107375734 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.114101868 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.095407225 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.098303205 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.114148372 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.107996361 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.109098069 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.118929119 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.102678993 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.098635608 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.12249326 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.097744062 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.115166539 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.105396517 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.111794732 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.122770039 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.10615508 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.116915325 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.105577118 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.10485944 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.130098095 seconds)
  done (took 7.505280524 seconds)
  (16/23) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.094714111 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.09116439 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.090407636 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.108608353 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.092367165 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.090975075 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.090233053 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.107908656 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.091248729 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.09098751 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.108544751 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.090998364 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.091502967 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.092968025 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.107127277 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.090693718 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.090497113 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.107501155 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.092964358 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.091379561 seconds)
  done (took 2.668543036 seconds)
  (17/23) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.104173186 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.108379652 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.109546493 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.100093802 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.094796089 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.115312864 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.092619327 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.093001475 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.092763889 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.111239872 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.102009373 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.117229874 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.094402836 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.0989577 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.118799744 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.099973901 seconds)
  done (took 2.409192477 seconds)
  (18/23) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.114015564 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.108138893 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.167585179 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.095082282 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.111901757 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.100043464 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.093505765 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.094271154 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.111032684 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.099824635 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.097079818 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.113781928 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.093536831 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.093611256 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.111456845 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.096190517 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.092134904 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.115152552 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.095283585 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.148477473 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.115877258 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.095870289 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.093596331 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.114114894 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.095032757 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.095944269 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.118927614 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.094904248 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.095152608 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.112467416 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.096789957 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.100194701 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.111786076 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.098318491 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.094115452 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.112168936 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.095928944 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.094436506 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.112303107 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.095754423 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.095518817 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.093992707 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.111794465 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.096787643 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.09213097 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.112249516 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.092285391 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.099478057 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.112437712 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.096718796 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.093534539 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.118174577 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.099137909 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.101400125 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.116934852 seconds)
  done (took 6.486083098 seconds)
  (19/23) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.107265911 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.095146395 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.120859491 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.092918829 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.09408653 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.094257401 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.112513753 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.096025597 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.093703605 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.109365914 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.094687517 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.09492016 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.111733576 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.096034478 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.094054556 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.110749476 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.09235747 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.09511481 seconds)
  done (took 2.564675099 seconds)
  (20/23) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.101424568 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.093774329 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.096714908 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.110957963 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.092703985 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.092468717 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.109514773 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.093940988 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.0932077 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.092781473 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.111769482 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.09417366 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.09114589 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.111119895 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.094293603 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.092527684 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.109526729 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.093627787 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.093447509 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.091454568 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.111189437 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.092775232 seconds)
  done (took 2.92895269 seconds)
  (21/23) benchmarking "intfuncs"...
    (1/12) benchmarking ("nextpow2", "Int64", "+")...
    done (took 0.105580816 seconds)
    (2/12) benchmarking ("prevpow2", "UInt64", "-")...
    done (took 0.164849342 seconds)
    (3/12) benchmarking ("prevpow2", "Int64", "+")...
    done (took 0.100248106 seconds)
    (4/12) benchmarking ("nextpow2", "BigInt", "-")...
    done (took 0.1729255 seconds)
    (5/12) benchmarking ("prevpow2", "UInt64", "+")...
    done (took 0.089529521 seconds)
    (6/12) benchmarking ("prevpow2", "Int64", "-")...
    done (took 0.08763579 seconds)
    (7/12) benchmarking ("nextpow2", "UInt64", "-")...
    done (took 0.115835063 seconds)
    (8/12) benchmarking ("nextpow2", "UInt64", "+")...
    done (took 0.089664699 seconds)
    (9/12) benchmarking ("prevpow2", "BigInt", "+")...
    done (took 0.104489076 seconds)
    (10/12) benchmarking ("prevpow2", "BigInt", "-")...
    done (took 0.106579525 seconds)
    (11/12) benchmarking ("nextpow2", "BigInt", "+")...
    done (took 0.089379383 seconds)
    (12/12) benchmarking ("nextpow2", "Int64", "-")...
    done (took 0.087550615 seconds)
  done (took 2.079497409 seconds)
  (22/23) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.123414333 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.12861297 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.112355167 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.093856665 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101779586 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.114676353 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.099893069 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096859003 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.124287234 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.108224062 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.114695231 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.106175422 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.103646236 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.123974883 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.101006612 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.119517579 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.099092125 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096920933 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.112124138 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.114366708 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0960086 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.124205785 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.098461718 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096807453 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.11615833 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.105613491 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.122932689 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.109134204 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.096655355 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.122566186 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.103190373 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.096719554 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.123998056 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.10751625 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.1124767 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.10526217 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.097524577 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.129361238 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.101077087 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.12460372 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.094087405 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.101290311 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.123713131 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.101405103 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.121643937 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.098183422 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.102732308 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.114945664 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.097701981 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.116915244 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.11964052 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.104910931 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.118460228 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.106040124 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.103704141 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.136762162 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.107948573 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.122730241 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.101781311 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.125528464 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.106496478 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.102244609 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.124423844 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.108733768 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.121111564 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.105387253 seconds)
  done (took 8.040236109 seconds)
  (23/23) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.134606933 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.09437574 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.117752501 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.109928145 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.124611132 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.098960742 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.098271658 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.116142867 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.098389918 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.095406565 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.156662161 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.09890663 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.105686057 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.126308942 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.099216565 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.117441979 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.099638728 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.105699886 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.113900852 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.119624706 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.116262789 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.10764902 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.105566862 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.124645545 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.108459143 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.120293676 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.099546093 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.097824264 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.116957532 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.101075919 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.101995877 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.116343942 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.106564377 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.09443736 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.125071465 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.096945932 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.097564132 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.122962041 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.098535445 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.119767918 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.107988155 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.121384344 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.117280489 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.099373635 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.128496551 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.098625364 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.098910532 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.113111297 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.100361546 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.095606048 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.127033793 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.109136856 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.127255744 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.107443184 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.098737579 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.117748661 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.098784431 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.098591822 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.117181912 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104287646 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.123602645 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.100343141 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.119413723 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.116563787 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.098898571 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.107487292 seconds)
  done (took 8.039354105 seconds)
done (took 92.531039172 seconds)
(11/20) benchmarking "sparse"...
  (1/4) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.135657118 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.177516008 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.128312802 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.164004934 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.085163134 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.119369452 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.116718727 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.150517741 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.083444637 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.104396026 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.085868431 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.087137618 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.171720516 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.086087748 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.084626146 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.086040684 seconds)
  done (took 2.637048054 seconds)
  (2/4) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.184949487 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.29423759 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.098904603 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.108267622 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.092146223 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.089287095 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.110554276 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.092142965 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.089584703 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.116892047 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.090349696 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.084748434 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.114886167 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.087360794 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.089309209 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.106998694 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.097426614 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.089203943 seconds)
  done (took 2.815212954 seconds)
  (3/4) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.121329974 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.196923028 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.328457501 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.135194417 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.130128255 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.106232791 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.157127025 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.101964623 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.195382079 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.103078255 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.101371794 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.10694142 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.115196698 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.094074122 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.124724751 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.087882861 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.117463059 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.124745548 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.103629057 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.090650261 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.13249528 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.092455577 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.113221043 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.105899609 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.167388676 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.122408459 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.093196351 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.110623111 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.093088603 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.103372638 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.116394794 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.107239178 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.120237245 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.148039482 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.110616606 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.144343966 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.115151475 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.090483513 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.103373376 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.110014112 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.094868074 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.094116947 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.123189491 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.089719201 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.092884655 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.117773353 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.092824115 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.092539819 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.115527403 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.096866166 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.115967471 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.097405261 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.161096691 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.09751007 seconds)
  done (took 7.245745968 seconds)
  (4/4) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.842342311 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.133831988 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.089929234 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 1.065749858 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.139951466 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.103428859 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.853279855 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.113712874 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.242913736 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.860218784 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.105458917 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.124090917 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.224675635 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.267399112 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 1.248239781 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.342338934 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.728493753 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.103369057 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.13792991 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.13032445 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.118086646 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.116299139 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.110857956 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.502831892 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.090561506 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.110645032 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.099382138 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.122250092 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.144779616 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.111989832 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.095260007 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.184860772 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.278545806 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.194493617 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.093066362 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.090130409 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.10927086 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.153702977 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.253544081 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.201613219 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.183039341 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.087448504 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.109596319 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.100661939 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.109196032 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.108468317 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.165980888 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.158027081 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.179148246 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.094473556 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.12428074 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.101480935 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.117560744 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.145089791 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.108323755 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.341341528 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.345863237 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.091121672 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.11851283 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.10663872 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.251709349 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.111703538 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.221537308 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.117716895 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.20049023 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.109683395 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.817791288 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.153947564 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.11086626 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.098926095 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.098391518 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.116195859 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.099004616 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.179146283 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.465567407 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.123339595 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.095523722 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.108938213 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.201038338 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.111640394 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.091079649 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.169206197 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.094131622 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.116117397 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.106152155 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.104927954 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.174978796 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.257218834 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.102887979 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.119717231 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.097572777 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.12206342 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.094409795 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.218020499 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.214652453 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.143724746 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.21744869 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.118700614 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.150394934 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.171357087 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.117908859 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.156788761 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.118400552 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.108548538 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.117672326 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.209447261 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.125638896 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.112356103 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.09829208 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.100443015 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.147673874 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.096018816 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.120107093 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.15528518 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.538163267 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.17078058 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.089132861 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.114568743 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101217359 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.165677777 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.099346718 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.246678062 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101553159 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.172418672 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.117072558 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.089601569 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.0997172 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.168292752 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.102398293 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.120894162 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.099432662 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.119770854 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.248827809 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.205783302 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.125461717 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.235811922 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.166426401 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.119271242 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.178773027 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.102294047 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.17531057 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.102171633 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.11831941 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.093840376 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.807160795 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.105170314 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.118792223 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.097380317 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.193575882 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.092662424 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.093766043 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.110600779 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.091090559 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.797959396 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.095272175 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.088839569 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.113681156 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.100227848 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.118181048 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.099711582 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.097394987 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.166250806 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.228418328 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.124842733 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.098616808 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.090990989 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.165190051 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.092208108 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.113087433 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.092670783 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.092443072 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.120697231 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.09612109 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.094425908 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.178451222 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.164259511 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.214444904 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.620592096 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.091197914 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.112828886 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.224340531 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.091962422 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.311243698 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.120692989 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.220617406 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.171349762 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.089409847 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.346333708 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.174815851 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.193504507 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.096942188 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.17932955 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.091464128 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.09988963 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.166086529 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.092708165 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.118925569 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.144001557 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.127425029 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.104403286 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 1.262339372 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.112848314 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.236206716 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.090959215 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.175834336 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.093681353 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.102336733 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.312070162 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.112271644 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.110866073 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.168588014 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.096135405 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.112866803 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 3.602972012 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.09451705 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.103293799 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.119193091 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.221699108 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.17049558 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.101407898 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.101228119 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.126533473 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.167024028 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.198671613 seconds)
  done (took 45.119642834 seconds)
done (took 58.594567225 seconds)
(12/20) benchmarking "broadcast"...
  (1/5) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.257879331 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.16447251 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.268791163 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.164047007 seconds)
  done (took 1.734117141 seconds)
  (2/5) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.227584418 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.144294387 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.182385485 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.110087042 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.188736117 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.108362698 seconds)
  done (took 1.765245595 seconds)
  (3/5) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.165765646 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.155013856 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.135469427 seconds)
  done (took 1.259781345 seconds)
  (4/5) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.190420298 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.201433743 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.310406206 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.22034933 seconds)
  done (took 1.819917755 seconds)
  (5/5) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.240521327 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.107360306 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.114565105 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.184582512 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.196615565 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.164338548 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.132196958 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.136465557 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.140343489 seconds)
  done (took 2.269091863 seconds)
done (took 9.656277707 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/192) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.331674932 seconds)
    (2/192) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.181532393 seconds)
    (3/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (true, true))...
    done (took 0.202017611 seconds)
    (4/192) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.189086932 seconds)
    (5/192) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.102477608 seconds)
    (6/192) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.303089021 seconds)
    (7/192) benchmarking ("map", identity, BigInt, false)...
    done (took 0.179450113 seconds)
    (8/192) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.328514903 seconds)
    (9/192) benchmarking ("map", abs, Float64, false)...
    done (took 0.212912399 seconds)
    (10/192) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.11067643 seconds)
    (11/192) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.12366033 seconds)
    (12/192) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.324505642 seconds)
    (13/192) benchmarking ("map", abs, Int8, false)...
    done (took 0.2297796 seconds)
    (14/192) benchmarking ("perf_countnothing", Complex{Float64}, true)...
    done (took 0.121980603 seconds)
    (15/192) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.074964625 seconds)
    (16/192) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.183940214 seconds)
    (17/192) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.159244607 seconds)
    (18/192) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.194905643 seconds)
    (19/192) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.252184404 seconds)
    (20/192) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.209074142 seconds)
    (21/192) benchmarking ("map", identity, Int64, false)...
    done (took 0.178390418 seconds)
    (22/192) benchmarking ("perf_sum", Bool, true)...
    done (took 0.139737443 seconds)
    (23/192) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.344401391 seconds)
    (24/192) benchmarking ("map", identity, BigInt, true)...
    done (took 0.074877276 seconds)
    (25/192) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.162973812 seconds)
    (26/192) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.092828054 seconds)
    (27/192) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.105627982 seconds)
    (28/192) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.116892041 seconds)
    (29/192) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.100571395 seconds)
    (30/192) benchmarking ("perf_sum", Float32, false)...
    done (took 0.119845822 seconds)
    (31/192) benchmarking ("map", *, Complex{Float64}, (true, true))...
    done (took 0.238334896 seconds)
    (32/192) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.11012191 seconds)
    (33/192) benchmarking ("map", *, Complex{Float64}, (false, true))...
    done (took 0.067326793 seconds)
    (34/192) benchmarking ("perf_countequals", "Int8")...
    done (took 0.134639284 seconds)
    (35/192) benchmarking ("map", abs, Int64, true)...
    done (took 0.130644197 seconds)
    (36/192) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.090633453 seconds)
    (37/192) benchmarking ("perf_simplecopy", Complex{Float64}, true)...
    done (took 0.115683969 seconds)
    (38/192) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.158064006 seconds)
    (39/192) benchmarking ("broadcast", *, Complex{Float64}, (true, true))...
    done (took 0.253918908 seconds)
    (40/192) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.18970131 seconds)
    (41/192) benchmarking ("map", abs, Float64, true)...
    done (took 0.07576252 seconds)
    (42/192) benchmarking ("perf_sum", Bool, false)...
    done (took 0.120848053 seconds)
    (43/192) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.239818438 seconds)
    (44/192) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.194832935 seconds)
    (45/192) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.095144893 seconds)
    (46/192) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.248236432 seconds)
    (47/192) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.114879837 seconds)
    (48/192) benchmarking ("broadcast", identity, Complex{Float64}, true)...
    done (took 0.180257807 seconds)
    (49/192) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.072172545 seconds)
    (50/192) benchmarking ("map", abs, Int8, true)...
    done (took 0.076613258 seconds)
    (51/192) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.179354723 seconds)
    (52/192) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.313116157 seconds)
    (53/192) benchmarking ("perf_sum", Float64, false)...
    done (took 0.13858338 seconds)
    (54/192) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.075107602 seconds)
    (55/192) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.071589819 seconds)
    (56/192) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.180869749 seconds)
    (57/192) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.075445407 seconds)
    (58/192) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.094353372 seconds)
    (59/192) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.090370802 seconds)
    (60/192) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.188828903 seconds)
    (61/192) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.214922503 seconds)
    (62/192) benchmarking ("map", abs, BigInt, false)...
    done (took 0.128563596 seconds)
    (63/192) benchmarking ("map", identity, Float32, false)...
    done (took 0.162273184 seconds)
    (64/192) benchmarking ("perf_sum", Int8, true)...
    done (took 0.187811792 seconds)
    (65/192) benchmarking ("perf_countequals", "Float32")...
    done (took 0.112533772 seconds)
    (66/192) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.116576724 seconds)
    (67/192) benchmarking ("map", identity, Float64, true)...
    done (took 0.131040595 seconds)
    (68/192) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.252510184 seconds)
    (69/192) benchmarking ("map", identity, Float32, true)...
    done (took 0.075250462 seconds)
    (70/192) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.138352899 seconds)
    (71/192) benchmarking ("map", abs, Complex{Float64}, true)...
    done (took 0.178357654 seconds)
    (72/192) benchmarking ("broadcast", *, Complex{Float64}, (false, false))...
    done (took 0.146797481 seconds)
    (73/192) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.141729657 seconds)
    (74/192) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.098251573 seconds)
    (75/192) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.075457702 seconds)
    (76/192) benchmarking ("broadcast", *, Complex{Float64}, (false, true))...
    done (took 0.075364868 seconds)
    (77/192) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.093691311 seconds)
    (78/192) benchmarking ("map", identity, Complex{Float64}, false)...
    done (took 0.129381589 seconds)
    (79/192) benchmarking ("map", identity, Complex{Float64}, true)...
    done (took 0.075666958 seconds)
    (80/192) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.179902054 seconds)
    (81/192) benchmarking ("perf_countequals", "Int64")...
    done (took 0.113044861 seconds)
    (82/192) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.075463742 seconds)
    (83/192) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.094908732 seconds)
    (84/192) benchmarking ("perf_countequals", "Bool")...
    done (took 0.141664012 seconds)
    (85/192) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.093169246 seconds)
    (86/192) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.092499374 seconds)
    (87/192) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.181076414 seconds)
    (88/192) benchmarking ("perf_sum", Float64, true)...
    done (took 0.101826825 seconds)
    (89/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (false, true))...
    done (took 0.092067558 seconds)
    (90/192) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.090169305 seconds)
    (91/192) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.091377422 seconds)
    (92/192) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.100783668 seconds)
    (93/192) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.14052585 seconds)
    (94/192) benchmarking ("perf_sum", Complex{Float64}, false)...
    done (took 0.12454574 seconds)
    (95/192) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.100676568 seconds)
    (96/192) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.178241435 seconds)
    (97/192) benchmarking ("perf_sum", Int64, true)...
    done (took 0.117431242 seconds)
    (98/192) benchmarking ("map", identity, Int8, true)...
    done (took 0.129112524 seconds)
    (99/192) benchmarking ("map", *, Complex{Float64}, (false, false))...
    done (took 0.089217003 seconds)
    (100/192) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.091580481 seconds)
    (101/192) benchmarking ("map", abs, Complex{Float64}, false)...
    done (took 0.069553183 seconds)
    (102/192) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.100324717 seconds)
    (103/192) benchmarking ("map", identity, Bool, true)...
    done (took 0.157455803 seconds)
    (104/192) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.07550615 seconds)
    (105/192) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.133198978 seconds)
    (106/192) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.112628604 seconds)
    (107/192) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.069945915 seconds)
    (108/192) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.109952873 seconds)
    (109/192) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.090072514 seconds)
    (110/192) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.182723901 seconds)
    (111/192) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.070769631 seconds)
    (112/192) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.071803884 seconds)
    (113/192) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.075449204 seconds)
    (114/192) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.120038114 seconds)
    (115/192) benchmarking ("map", identity, Int8, false)...
    done (took 0.070998207 seconds)
    (116/192) benchmarking ("map", identity, Bool, false)...
    done (took 0.070335848 seconds)
    (117/192) benchmarking ("map", abs, BigInt, true)...
    done (took 0.075675147 seconds)
    (118/192) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.06789876 seconds)
    (119/192) benchmarking ("map", abs, Bool, false)...
    done (took 0.147434156 seconds)
    (120/192) benchmarking ("perf_simplecopy", Complex{Float64}, false)...
    done (took 0.091461409 seconds)
    (121/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (false, false))...
    done (took 0.093553083 seconds)
    (122/192) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.068253735 seconds)
    (123/192) benchmarking ("perf_sum", Int8, false)...
    done (took 0.124593912 seconds)
    (124/192) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.091746822 seconds)
    (125/192) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.123517658 seconds)
    (126/192) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.089955224 seconds)
    (127/192) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.102502559 seconds)
    (128/192) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.155806572 seconds)
    (129/192) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.134803077 seconds)
    (130/192) benchmarking ("perf_countequals", "Float64")...
    done (took 0.115559707 seconds)
    (131/192) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.093131705 seconds)
    (132/192) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068742166 seconds)
    (133/192) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.090853087 seconds)
    (134/192) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.069478381 seconds)
    (135/192) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.093350447 seconds)
    (136/192) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.11400436 seconds)
    (137/192) benchmarking ("perf_sum", Int64, false)...
    done (took 0.123154482 seconds)
    (138/192) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.0932642 seconds)
    (139/192) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.115657667 seconds)
    (140/192) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.092789623 seconds)
    (141/192) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.076468692 seconds)
    (142/192) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.075988851 seconds)
    (143/192) benchmarking ("perf_sum", Complex{Float64}, true)...
    done (took 0.10272252 seconds)
    (144/192) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.091523958 seconds)
    (145/192) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.070377678 seconds)
    (146/192) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.116262672 seconds)
    (147/192) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.071614558 seconds)
    (148/192) benchmarking ("map", identity, Float64, false)...
    done (took 0.069674351 seconds)
    (149/192) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.121681611 seconds)
    (150/192) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.090870749 seconds)
    (151/192) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.100708753 seconds)
    (152/192) benchmarking ("map", identity, Int64, true)...
    done (took 0.094415269 seconds)
    (153/192) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.072692799 seconds)
    (154/192) benchmarking ("broadcast", abs, Complex{Float64}, true)...
    done (took 0.145116017 seconds)
    (155/192) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.099707478 seconds)
    (156/192) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.11413487 seconds)
    (157/192) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.099514698 seconds)
    (158/192) benchmarking ("perf_countequals", "Complex{Float64}")...
    done (took 0.113348391 seconds)
    (159/192) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.097484236 seconds)
    (160/192) benchmarking ("perf_sum", Float32, true)...
    done (took 0.102527259 seconds)
    (161/192) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.093862526 seconds)
    (162/192) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.119858521 seconds)
    (163/192) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.077397079 seconds)
    (164/192) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.072996797 seconds)
    (165/192) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.094329081 seconds)
    (166/192) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.114408418 seconds)
    (167/192) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.095451074 seconds)
    (168/192) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.099942177 seconds)
    (169/192) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.093308113 seconds)
    (170/192) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.114967832 seconds)
    (171/192) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.076522694 seconds)
    (172/192) benchmarking ("map", abs, Float32, false)...
    done (took 0.12503107 seconds)
    (173/192) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.096812076 seconds)
    (174/192) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.0733684 seconds)
    (175/192) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.077350267 seconds)
    (176/192) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.093310525 seconds)
    (177/192) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.072610728 seconds)
    (178/192) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.098418628 seconds)
    (179/192) benchmarking ("map", abs, Float32, true)...
    done (took 0.07568534 seconds)
    (180/192) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.112926664 seconds)
    (181/192) benchmarking ("map", abs, Bool, true)...
    done (took 0.07587219 seconds)
    (182/192) benchmarking ("perf_countnothing", Complex{Float64}, false)...
    done (took 0.12328096 seconds)
    (183/192) benchmarking ("broadcast", identity, Complex{Float64}, false)...
    done (took 0.073354698 seconds)
    (184/192) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.069546507 seconds)
    (185/192) benchmarking ("map", abs, Int64, false)...
    done (took 0.069620934 seconds)
    (186/192) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.069288171 seconds)
    (187/192) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.090945751 seconds)
    (188/192) benchmarking ("broadcast", abs, Complex{Float64}, false)...
    done (took 0.073718 seconds)
    (189/192) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.073160469 seconds)
    (190/192) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.07176333 seconds)
    (191/192) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.111327025 seconds)
    (192/192) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.071429083 seconds)
  done (took 24.566786403 seconds)
done (took 25.376805676 seconds)
(14/20) benchmarking "simd"...
  (1/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.190831313 seconds)
  (2/72) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.115047142 seconds)
  (3/72) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.102651391 seconds)
  (4/72) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.154278789 seconds)
  (5/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.182424319 seconds)
  (6/72) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.106069517 seconds)
  (7/72) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.138843709 seconds)
  (8/72) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.102914303 seconds)
  (9/72) benchmarking ("inner", "Float64", 4096)...
  done (took 0.109296091 seconds)
  (10/72) benchmarking ("inner", "Float64", 4095)...
  done (took 0.122771488 seconds)
  (11/72) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.091596932 seconds)
  (12/72) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.112755697 seconds)
  (13/72) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.124523568 seconds)
  (14/72) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.16402501 seconds)
  (15/72) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.125316565 seconds)
  (16/72) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.09468668 seconds)
  (17/72) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.091088731 seconds)
  (18/72) benchmarking ("inner", "Int32", 4096)...
  done (took 0.131822887 seconds)
  (19/72) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.117372048 seconds)
  (20/72) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.116738105 seconds)
  (21/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.182905591 seconds)
  (22/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.094863325 seconds)
  (23/72) benchmarking ("inner", "Int64", 4095)...
  done (took 0.130762199 seconds)
  (24/72) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.09384936 seconds)
  (25/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.159007778 seconds)
  (26/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.115875632 seconds)
  (27/72) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.101254021 seconds)
  (28/72) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.101880142 seconds)
  (29/72) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.13589688 seconds)
  (30/72) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.102863129 seconds)
  (31/72) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.10087822 seconds)
  (32/72) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.115306558 seconds)
  (33/72) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.117913972 seconds)
  (34/72) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.116596929 seconds)
  (35/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.113440576 seconds)
  (36/72) benchmarking ("inner", "Int32", 4095)...
  done (took 0.102176771 seconds)
  (37/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.092006213 seconds)
  (38/72) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.0767217 seconds)
  (39/72) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.124467039 seconds)
  (40/72) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.103758662 seconds)
  (41/72) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.112921395 seconds)
  (42/72) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.124980567 seconds)
  (43/72) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.102619227 seconds)
  (44/72) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.094139239 seconds)
  (45/72) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.124096931 seconds)
  (46/72) benchmarking ("inner", "Int64", 4096)...
  done (took 0.102514697 seconds)
  (47/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.091560817 seconds)
  (48/72) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.125625602 seconds)
  (49/72) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.092096292 seconds)
  (50/72) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.101314473 seconds)
  (51/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.115356077 seconds)
  (52/72) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.118670171 seconds)
  (53/72) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.100942031 seconds)
  (54/72) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.089912056 seconds)
  (55/72) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.113319817 seconds)
  (56/72) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.093841714 seconds)
  (57/72) benchmarking ("inner", "Float32", 4095)...
  done (took 0.110648781 seconds)
  (58/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.114877985 seconds)
  (59/72) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.114201844 seconds)
  (60/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.091927251 seconds)
  (61/72) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.115227954 seconds)
  (62/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.094033088 seconds)
  (63/72) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.102633438 seconds)
  (64/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.112659459 seconds)
  (65/72) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.101884724 seconds)
  (66/72) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.091652689 seconds)
  (67/72) benchmarking ("inner", "Float32", 4096)...
  done (took 0.100396248 seconds)
  (68/72) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.127250735 seconds)
  (69/72) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.101438475 seconds)
  (70/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.094272086 seconds)
  (71/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.11401276 seconds)
  (72/72) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.101843751 seconds)
done (took 9.013264457 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.101692761 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.135592286 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.180647412 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.190592548 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.119672688 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.106176272 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.128523161 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.116719903 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.103880724 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.132697075 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.12882202 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.147413601 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.167345721 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.128967012 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.106802918 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.104371571 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.12652963 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.100763998 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.188304511 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.117002117 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.115634071 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.131814768 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.119715479 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.130475114 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.098923301 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.117359703 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.121454797 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.107343826 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.095454469 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.13582554 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.119315482 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.096476439 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.120302892 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.115521688 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.113632852 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.1276283 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.108196612 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.105631453 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.11868926 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.097505113 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.104232231 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.134646623 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.097392099 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.107282317 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.127919115 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.111867676 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.103725046 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.131800196 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.099327032 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.103383563 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.119419959 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.124093601 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.108796281 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.135654907 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.10913298 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.108455283 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.131524445 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.110234896 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.09927592 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.131979628 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.098572657 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.095155358 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.120386758 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.118418901 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.099985245 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.134235759 seconds)
  done (took 8.740326275 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.118784333 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.125898637 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.129560299 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.107726507 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.101375554 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.113028326 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.091629925 seconds)
  done (took 1.642657012 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.097275473 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.168921888 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.190493704 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.190839744 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.167874312 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.199502498 seconds)
    (7/97) benchmarking ("randn", "MersenneTwister", "Complex{Float32}")...
    done (took 0.195973465 seconds)
    (8/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.091913112 seconds)
    (9/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.147990725 seconds)
    (10/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.104153593 seconds)
    (11/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.167372893 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "Complex{Float16}")...
    done (took 0.220599543 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.124502842 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.108089046 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.192696134 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.092011453 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.193931647 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.093479652 seconds)
    (19/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.18859995 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.171676657 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.129582647 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.124396234 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.104332599 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.114377195 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.164950125 seconds)
    (26/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.11627392 seconds)
    (27/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float16}")...
    done (took 0.221067508 seconds)
    (28/97) benchmarking ("randn", "MersenneTwister", "Complex{Float64}")...
    done (took 0.133283965 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.101892573 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.105581068 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.130017575 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.169262107 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.190097708 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.105772886 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.12444362 seconds)
    (36/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float32}")...
    done (took 0.169155434 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.187664747 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.106667232 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.20244893 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.09624819 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.188641425 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.105451973 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.128607655 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.108520405 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.108128981 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.178088934 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.110973633 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.128738836 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.107737482 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.171612 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.126011118 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.166649077 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.126644576 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.107917674 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.103244015 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.131786262 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.176711208 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.131226053 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.174147813 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.134307208 seconds)
    (61/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.166616432 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.191372247 seconds)
    (63/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.189957742 seconds)
    (64/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.168459597 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{Float32}")...
    done (took 0.139867803 seconds)
    (66/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.168300119 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.185470317 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.105945072 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float64}")...
    done (took 0.12447482 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.166005248 seconds)
    (71/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.194476606 seconds)
    (72/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.104478595 seconds)
    (73/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.127606632 seconds)
    (74/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.158549048 seconds)
    (75/97) benchmarking ("randn", "MersenneTwister", "Complex{Float16}")...
    done (took 0.132074689 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.172195646 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.193257816 seconds)
    (78/97) benchmarking ("rand", "MersenneTwister", "Complex{Float64}")...
    done (took 0.10452014 seconds)
    (79/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.127854228 seconds)
    (80/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.097456617 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.105936801 seconds)
    (82/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.115539484 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.162473702 seconds)
    (84/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.105692223 seconds)
    (85/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.128563434 seconds)
    (86/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float16}")...
    done (took 0.111990708 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float64}")...
    done (took 0.127109331 seconds)
    (88/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.10823317 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.097760744 seconds)
    (90/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.138675348 seconds)
    (91/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.109134221 seconds)
    (92/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.104469659 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.134949787 seconds)
    (94/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.106843627 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float32}")...
    done (took 0.10773653 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.196231415 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.102530363 seconds)
  done (took 14.562229453 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.100648791 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.094448656 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.098085876 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.117717738 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.095365721 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.094761459 seconds)
  done (took 1.47512368 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.134752038 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.107010209 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.139316358 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.108852272 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.150728867 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.197059996 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.201227906 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.101339253 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.145124798 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.117410893 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.198270541 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.17887349 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.201968093 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.110271165 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.202343113 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.109746335 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.202598967 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.105943787 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.137894852 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.106372067 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.108114882 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.133779819 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.106798861 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.190615283 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.108803029 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.108968388 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.12546604 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.116906348 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.115910455 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.126886769 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.11106218 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.108532824 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.122805418 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.102653885 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.203987125 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.101403671 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.126578891 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.112166343 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.110412766 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.130954849 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.180311455 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.127974955 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.114921737 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.110326899 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.124871771 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.100457433 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.111261602 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.127103091 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.181500386 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.133283385 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.11046318 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.108640053 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.133469941 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.110919355 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.099894475 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.126371514 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.112884311 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.205969888 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.112078737 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.1229227 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.111491491 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.1106939 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.124438932 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.112798822 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.109251733 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.135111539 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.101964134 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.108495997 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.127744783 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.110187829 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.111018999 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.131173923 seconds)
  done (took 10.253845705 seconds)
done (took 37.520185284 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 1.465876016 seconds)
  done (took 2.339797849 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.021596494 seconds)
  done (took 1.897439194 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 16.812341765 seconds)
  done (took 17.71345634 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.416603433 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.440582116 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.113256708 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.136250063 seconds)
  done (took 2.98228518 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.796388225 seconds)
  done (took 1.686660029 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.274483828 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.250018673 seconds)
  done (took 1.407988322 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.669788927 seconds)
  done (took 1.557244738 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.471514989 seconds)
  done (took 2.352350034 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.275337297 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.228490381 seconds)
  done (took 1.399527943 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.589310965 seconds)
  done (took 1.479291883 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 19.129531792 seconds)
  done (took 20.025550736 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.246868055 seconds)
  done (took 1.143925764 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.278959791 seconds)
  done (took 1.174153897 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 3.365605685 seconds)
  done (took 4.261735379 seconds)
done (took 62.302249646 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.109641334 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.107102067 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.106318616 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.128887784 seconds)
  done (took 1.340910323 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Array{Float32,1} generator")...
    done (took 0.117645144 seconds)
    (2/24) benchmarking ("all", "Array{Float32,1}")...
    done (took 0.108400791 seconds)
    (3/24) benchmarking ("any", "Array{Float64,1} generator")...
    done (took 0.112119643 seconds)
    (4/24) benchmarking ("any", "Array{Int64,1}")...
    done (took 0.13156421 seconds)
    (5/24) benchmarking ("any", "Array{Int16,1} generator")...
    done (took 0.112892348 seconds)
    (6/24) benchmarking ("any", "Array{Float32,1}")...
    done (took 0.108201835 seconds)
    (7/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.13107283 seconds)
    (8/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.110899296 seconds)
    (9/24) benchmarking ("all", "Array{Int64,1}")...
    done (took 0.106334223 seconds)
    (10/24) benchmarking ("all", "Array{Int16,1}")...
    done (took 0.132395463 seconds)
    (11/24) benchmarking ("all", "Array{Float64,1}")...
    done (took 0.107410447 seconds)
    (12/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.106931572 seconds)
    (13/24) benchmarking ("any", "Array{Float32,1} generator")...
    done (took 0.133219333 seconds)
    (14/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.107239019 seconds)
    (15/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.10471742 seconds)
    (16/24) benchmarking ("all", "Array{Float64,1} generator")...
    done (took 0.132952566 seconds)
    (17/24) benchmarking ("all", "Array{Int64,1} generator")...
    done (took 0.111511779 seconds)
    (18/24) benchmarking ("any", "Array{Float64,1}")...
    done (took 0.106970343 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.12969694 seconds)
    (20/24) benchmarking ("any", "Array{Int16,1}")...
    done (took 0.10883461 seconds)
    (21/24) benchmarking ("any", "BitArray")...
    done (took 0.108235679 seconds)
    (22/24) benchmarking ("any", "Array{Int64,1} generator")...
    done (took 0.130602139 seconds)
    (23/24) benchmarking ("all", "Array{Int16,1} generator")...
    done (took 0.111079512 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.110245029 seconds)
  done (took 3.679391882 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.108257646 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.099041569 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.100229001 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.120549929 seconds)
  done (took 1.328309131 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.121677906 seconds)
    (2/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Int16,1}")...
    done (took 0.119633795 seconds)
    (3/24) benchmarking ("==", "Array{Float64,1}")...
    done (took 0.14016648 seconds)
    (4/24) benchmarking ("isequal", "Array{Float64,1}")...
    done (took 0.116599428 seconds)
    (5/24) benchmarking ("==", "Array{Int64,1} == Array{Float32,1}")...
    done (took 0.119558903 seconds)
    (6/24) benchmarking ("==", "Array{Float32,1}")...
    done (took 0.14073765 seconds)
    (7/24) benchmarking ("==", "Array{Int64,1}")...
    done (took 0.107999389 seconds)
    (8/24) benchmarking ("==", "Array{Int64,1} == Array{Int64,1}")...
    done (took 0.105430063 seconds)
    (9/24) benchmarking ("==", "Array{Int16,1}")...
    done (took 0.129302571 seconds)
    (10/24) benchmarking ("==", "Array{Int64,1} == Array{Int16,1}")...
    done (took 0.115942473 seconds)
    (11/24) benchmarking ("isequal", "BitArray")...
    done (took 0.123182785 seconds)
    (12/24) benchmarking ("==", "Array{Int64,1} == UnitRange{Int64}")...
    done (took 0.143169621 seconds)
    (13/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Float64,1}")...
    done (took 0.119413074 seconds)
    (14/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Int64,1}")...
    done (took 0.109932822 seconds)
    (15/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Float32,1}")...
    done (took 0.141134505 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.102514345 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.108890821 seconds)
    (18/24) benchmarking ("isequal", "Array{Int16,1}")...
    done (took 0.142236049 seconds)
    (19/24) benchmarking ("isequal", "Array{Float32,1}")...
    done (took 0.115036998 seconds)
    (20/24) benchmarking ("==", "Array{Int64,1} == Array{Float64,1}")...
    done (took 0.11685568 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.133107041 seconds)
    (22/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.114051175 seconds)
    (23/24) benchmarking ("isequal", "Array{Int64,1}")...
    done (took 0.111991198 seconds)
    (24/24) benchmarking ("isequal", "Array{Int64,1} isequal UnitRange{Int64}")...
    done (took 0.139778609 seconds)
  done (took 3.835574635 seconds)
  (5/13) benchmarking "reductions"...
    (1/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norminf", "Int64")...
    done (took 0.186412832 seconds)
    (2/22) benchmarking ("maxabs", "Float64")...
    done (took 0.120974278 seconds)
    (3/22) benchmarking ("sumabs", "Float64")...
    done (took 0.161864216 seconds)
    (4/22) benchmarking ("LinearAlgebra.norm", "Int64")...
    done (took 0.153356411 seconds)
    (5/22) benchmarking ("sumabs", "Int64")...
    done (took 0.165175407 seconds)
    (6/22) benchmarking ("sumabs2", "Float64")...
    done (took 0.107447824 seconds)
    (7/22) benchmarking ("sumabs2", "Int64")...
    done (took 0.134974673 seconds)
    (8/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_mapreduce", "Float64")...
    done (took 0.138164053 seconds)
    (9/22) benchmarking ("sum", "Int64")...
    done (took 0.114803422 seconds)
    (10/22) benchmarking ("mean", "Int64")...
    done (took 0.109262867 seconds)
    (11/22) benchmarking ("mean", "Float64")...
    done (took 0.134609851 seconds)
    (12/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norminf", "Float64")...
    done (took 0.151838836 seconds)
    (13/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_mapreduce", "Int64")...
    done (took 0.136106519 seconds)
    (14/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norm1", "Float64")...
    done (took 0.112483757 seconds)
    (15/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norm1", "Int64")...
    done (took 0.109344672 seconds)
    (16/22) benchmarking ("LinearAlgebra.norm", "Float64")...
    done (took 0.137206858 seconds)
    (17/22) benchmarking ("var", "Float64")...
    done (took 0.119825497 seconds)
    (18/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_reduce", "Float64")...
    done (took 0.113084632 seconds)
    (19/22) benchmarking ("var", "Int64")...
    done (took 0.176584 seconds)
    (20/22) benchmarking ("sum", "Float64")...
    done (took 0.113184654 seconds)
    (21/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_reduce", "Int64")...
    done (took 0.137751693 seconds)
    (22/22) benchmarking ("maxabs", "Int64")...
    done (took 0.121789359 seconds)
  done (took 3.856737673 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.11483178 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.09960036 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.09441933 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.125675655 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.110773268 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.100637441 seconds)
  done (took 1.552000843 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.101968252 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.092463347 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.094088547 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.114528147 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.097253925 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.092526303 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.091182879 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.116625998 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.093061035 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.093723721 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.115052286 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.092647021 seconds)
  done (took 2.101549471 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.320067789 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.09796875 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.122427896 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.104075047 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.102615638 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.095781197 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.134473047 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.097096664 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.250762449 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.092950475 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.131016977 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.184509386 seconds)
  done (took 2.637178862 seconds)
  (9/13) benchmarking "index"...
    (1/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.194386247 seconds)
    (2/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.13246669 seconds)
    (3/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.238531865 seconds)
    (4/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.34859687 seconds)
    (5/481) benchmarking ("sumcartesian", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.170977681 seconds)
    (6/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.154909081 seconds)
    (7/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.271364155 seconds)
    (8/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.174704525 seconds)
    (9/481) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.166766292 seconds)
    (10/481) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.149700704 seconds)
    (11/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.168712373 seconds)
    (12/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.173406603 seconds)
    (13/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.140592579 seconds)
    (14/481) benchmarking ("sumcolon", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.195875851 seconds)
    (15/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.126481774 seconds)
    (16/481) benchmarking ("sumrange", "BitArray{2}")...
    done (took 0.170327422 seconds)
    (17/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.149050054 seconds)
    (18/481) benchmarking ("sumrange", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.216114051 seconds)
    (19/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.153183671 seconds)
    (20/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.196727146 seconds)
    (21/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.168607111 seconds)
    (22/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.184714647 seconds)
    (23/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.180649778 seconds)
    (24/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.160350968 seconds)
    (25/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.128216889 seconds)
    (26/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.170639481 seconds)
    (27/481) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.109620386 seconds)
    (28/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.11658705 seconds)
    (29/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.176375495 seconds)
    (30/481) benchmarking ("sumrange_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.149887438 seconds)
    (31/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.182654741 seconds)
    (32/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.160835197 seconds)
    (33/481) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.13080206 seconds)
    (34/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.200354366 seconds)
    (35/481) benchmarking ("sumelt", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.211695808 seconds)
    (36/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.182898059 seconds)
    (37/481) benchmarking ("mapr_access", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.256970869 seconds)
    (38/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.144366341 seconds)
    (39/481) benchmarking ("sumlinear_view", "BitArray{2}")...
    done (took 0.158177514 seconds)
    (40/481) benchmarking ("sumlogical", "Array{Float32,2}")...
    done (took 0.199902511 seconds)
    (41/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.24252558 seconds)
    (42/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.130864013 seconds)
    (43/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.197678901 seconds)
    (44/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.140015263 seconds)
    (45/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.142264002 seconds)
    (46/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.169562352 seconds)
    (47/481) benchmarking ("sumvector_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.164714529 seconds)
    (48/481) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.193244208 seconds)
    (49/481) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.12456091 seconds)
    (50/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.132226591 seconds)
    (51/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.191427277 seconds)
    (52/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.186944051 seconds)
    (53/481) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.161815534 seconds)
    (54/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.148810978 seconds)
    (55/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.267604693 seconds)
    (56/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.144287645 seconds)
    (57/481) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.130704377 seconds)
    (58/481) benchmarking ("mapr_access", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.1776779 seconds)
    (59/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.198935042 seconds)
    (60/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.187792639 seconds)
    (61/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.189072486 seconds)
    (62/481) benchmarking ("sumeach", "Array{Float32,2}")...
    done (took 0.11213069 seconds)
    (63/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.18805457 seconds)
    (64/481) benchmarking ("sumlogical", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.201656712 seconds)
    (65/481) benchmarking ("sumvector", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.199162199 seconds)
    (66/481) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.154091938 seconds)
    (67/481) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.149509064 seconds)
    (68/481) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.139179109 seconds)
    (69/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.152544637 seconds)
    (70/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.215900962 seconds)
    (71/481) benchmarking ("sumeach", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.191895931 seconds)
    (72/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.14650781 seconds)
    (73/481) benchmarking ("sum", "3dsubarray")...
    done (took 0.212756643 seconds)
    (74/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.142620991 seconds)
    (75/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.159814329 seconds)
    (76/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.179474972 seconds)
    (77/481) benchmarking ("sumeach_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.141811522 seconds)
    (78/481) benchmarking ("sumcolon", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.21360192 seconds)
    (79/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.156468428 seconds)
    (80/481) benchmarking ("sumlinear", "Array{Float32,2}")...
    done (took 0.13378351 seconds)
    (81/481) benchmarking ("sumeach_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.137869437 seconds)
    (82/481) benchmarking ("sumcartesian", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.145824366 seconds)
    (83/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.115075205 seconds)
    (84/481) benchmarking "5d"...
    done (took 0.198464851 seconds)
    (85/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.112597021 seconds)
    (86/481) benchmarking ("sumlogical", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.226170363 seconds)
    (87/481) benchmarking ("sumlinear", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.120362303 seconds)
    (88/481) benchmarking ("sumlogical", "BitArray{2}")...
    done (took 0.324742744 seconds)
    (89/481) benchmarking ("mapr_access", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.192794107 seconds)
    (90/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.143664585 seconds)
    (91/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.173198971 seconds)
    (92/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.146245867 seconds)
    (93/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.173681653 seconds)
    (94/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.136405747 seconds)
    (95/481) benchmarking ("sumelt", "BitArray{2}")...
    done (took 0.091836884 seconds)
    (96/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.156910909 seconds)
    (97/481) benchmarking ("sumlogical_view", "Array{Int32,2}")...
    done (took 0.149281728 seconds)
    (98/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.169506833 seconds)
    (99/481) benchmarking ("sumeach", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.117399522 seconds)
    (100/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.168219962 seconds)
    (101/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.129495862 seconds)
    (102/481) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.114784569 seconds)
    (103/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.164243302 seconds)
    (104/481) benchmarking ("sumlinear", "Array{Int32,2}")...
    done (took 0.111987708 seconds)
    (105/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.18007361 seconds)
    (106/481) benchmarking ("sumcolon", "BitArray{2}")...
    done (took 0.12257587 seconds)
    (107/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.1769312 seconds)
    (108/481) benchmarking ("sumrange", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.157473762 seconds)
    (109/481) benchmarking ("sumcartesian", "Array{Float64,3}")...
    done (took 0.14616235 seconds)
    (110/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.166103012 seconds)
    (111/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.161712995 seconds)
    (112/481) benchmarking ("sumvector", "Array{Float32,2}")...
    done (took 0.15003628 seconds)
    (113/481) benchmarking ("sumrange_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.178187615 seconds)
    (114/481) benchmarking ("sumlogical", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.204332455 seconds)
    (115/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.121209187 seconds)
    (116/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.121174983 seconds)
    (117/481) benchmarking ("sumlogical", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.228376057 seconds)
    (118/481) benchmarking ("sumrange", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.178871582 seconds)
    (119/481) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.125597581 seconds)
    (120/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.185746852 seconds)
    (121/481) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.182360823 seconds)
    (122/481) benchmarking ("sumvector", "BitArray{2}")...
    done (took 0.164309463 seconds)
    (123/481) benchmarking ("sumcartesian", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.123537645 seconds)
    (124/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.176029516 seconds)
    (125/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.178557965 seconds)
    (126/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.156699846 seconds)
    (127/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.20826488 seconds)
    (128/481) benchmarking ("sumelt", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.126352917 seconds)
    (129/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.122647155 seconds)
    (130/481) benchmarking ("sumcolon_view", "BitArray{2}")...
    done (took 0.151461736 seconds)
    (131/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.158516208 seconds)
    (132/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.171134082 seconds)
    (133/481) benchmarking "ind2sub"...
    done (took 0.142719037 seconds)
    (134/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.142385045 seconds)
    (135/481) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.151491369 seconds)
    (136/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.201447431 seconds)
    (137/481) benchmarking ("sumcartesian", "Array{Float32,2}")...
    done (took 0.115247485 seconds)
    (138/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.151966651 seconds)
    (139/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.166987633 seconds)
    (140/481) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.146692223 seconds)
    (141/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.114849991 seconds)
    (142/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.147828969 seconds)
    (143/481) benchmarking ("sumeach", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.124812666 seconds)
    (144/481) benchmarking ("sumcartesian_view", "Array{Int32,2}")...
    done (took 0.128752962 seconds)
    (145/481) benchmarking ("sumlinear_view", "Array{Float64,3}")...
    done (took 0.162146458 seconds)
    (146/481) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.127760802 seconds)
    (147/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.165725067 seconds)
    (148/481) benchmarking ("sumcolon", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.154359234 seconds)
    (149/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.176870149 seconds)
    (150/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.142942101 seconds)
    (151/481) benchmarking ("sumelt", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.147812919 seconds)
    (152/481) benchmarking ("sumelt", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.158380699 seconds)
    (153/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.145086497 seconds)
    (154/481) benchmarking ("sumrange", "Array{Int32,2}")...
    done (took 0.156474194 seconds)
    (155/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.160590993 seconds)
    (156/481) benchmarking ("sumelt", "1:100000")...
    done (took 0.109552535 seconds)
    (157/481) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.185953128 seconds)
    (158/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.183607131 seconds)
    (159/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.142169485 seconds)
    (160/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.168793058 seconds)
    (161/481) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.176282394 seconds)
    (162/481) benchmarking ("mapr_access", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.195419937 seconds)
    (163/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.159838874 seconds)
    (164/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.141876116 seconds)
    (165/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.172298894 seconds)
    (166/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.116128625 seconds)
    (167/481) benchmarking ("sumlinear", "Array{Float64,3}")...
    done (took 0.135764436 seconds)
    (168/481) benchmarking ("sumeach", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.146322652 seconds)
    (169/481) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.182130345 seconds)
    (170/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.148238453 seconds)
    (171/481) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.201135097 seconds)
    (172/481) benchmarking ("mapr_access", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.193390583 seconds)
    (173/481) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.177768408 seconds)
    (174/481) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.152427094 seconds)
    (175/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.161683204 seconds)
    (176/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.154738915 seconds)
    (177/481) benchmarking ("sumlogical", "Array{Int32,2}")...
    done (took 0.195534804 seconds)
    (178/481) benchmarking ("sumlinear", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.143246568 seconds)
    (179/481) benchmarking ("sumvector_view", "Array{Int32,2}")...
    done (took 0.157833467 seconds)
    (180/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.158211253 seconds)
    (181/481) benchmarking ("sumeach_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.180394822 seconds)
    (182/481) benchmarking ("sumelt_boundscheck", "Array{Float32,2}")...
    done (took 0.111080109 seconds)
    (183/481) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.138621175 seconds)
    (184/481) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.118724709 seconds)
    (185/481) benchmarking ("sumlinear", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.125103997 seconds)
    (186/481) benchmarking ("sumeach", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.143323444 seconds)
    (187/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.128205616 seconds)
    (188/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.189642705 seconds)
    (189/481) benchmarking ("sumrange_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.149991488 seconds)
    (190/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.193791668 seconds)
    (191/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.178219589 seconds)
    (192/481) benchmarking ("sumlinear", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.126725567 seconds)
    (193/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.205961501 seconds)
    (194/481) benchmarking ("sumeach", "1:100000")...
    done (took 0.114834628 seconds)
    (195/481) benchmarking ("sumrange_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.171624684 seconds)
    (196/481) benchmarking ("sumvector", "1:100000")...
    done (took 0.162081983 seconds)
    (197/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.153094557 seconds)
    (198/481) benchmarking ("sumlogical", "1:100000")...
    done (took 0.176356633 seconds)
    (199/481) benchmarking ("sumlogical", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.202746575 seconds)
    (200/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.164540162 seconds)
    (201/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.153711142 seconds)
    (202/481) benchmarking ("sumlinear", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.172473734 seconds)
    (203/481) benchmarking ("sumelt_boundscheck", "Array{Float64,3}")...
    done (took 0.111104186 seconds)
    (204/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.11577533 seconds)
    (205/481) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.145526726 seconds)
    (206/481) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.150672604 seconds)
    (207/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.125231985 seconds)
    (208/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.14851294 seconds)
    (209/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.128063202 seconds)
    (210/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.204294847 seconds)
    (211/481) benchmarking ("sumvector_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.181880654 seconds)
    (212/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.137437199 seconds)
    (213/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.20389136 seconds)
    (214/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.175255141 seconds)
    (215/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.1885482 seconds)
    (216/481) benchmarking ("sumelt", "Array{Float64,3}")...
    done (took 0.133633016 seconds)
    (217/481) benchmarking "4d"...
    done (took 0.151587228 seconds)
    (218/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.155349382 seconds)
    (219/481) benchmarking ("sumrange", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.179640484 seconds)
    (220/481) benchmarking ("sumeach_view", "Array{Int32,2}")...
    done (took 0.169874638 seconds)
    (221/481) benchmarking ("sumeach", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.143685751 seconds)
    (222/481) benchmarking ("sumcolon_view", "Array{Float32,2}")...
    done (took 0.147830149 seconds)
    (223/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.205059434 seconds)
    (224/481) benchmarking ("sumelt", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.128916219 seconds)
    (225/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.204802531 seconds)
    (226/481) benchmarking ("sumvector", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.180201937 seconds)
    (227/481) benchmarking ("sumvector", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.165501654 seconds)
    (228/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.207091977 seconds)
    (229/481) benchmarking ("sumrange", "Array{Float32,2}")...
    done (took 0.15289522 seconds)
    (230/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.145399994 seconds)
    (231/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.136371711 seconds)
    (232/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.17377228 seconds)
    (233/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.126842037 seconds)
    (234/481) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.175442703 seconds)
    (235/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.134559898 seconds)
    (236/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.11878461 seconds)
    (237/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.166245128 seconds)
    (238/481) benchmarking ("sumeach_view", "Array{Float64,3}")...
    done (took 0.126403514 seconds)
    (239/481) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.153925651 seconds)
    (240/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.191698029 seconds)
    (241/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.132369153 seconds)
    (242/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.190243197 seconds)
    (243/481) benchmarking ("sumlogical_view", "Array{Float32,2}")...
    done (took 0.146600451 seconds)
    (244/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.181737494 seconds)
    (245/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.114485841 seconds)
    (246/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.152466748 seconds)
    (247/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.161951875 seconds)
    (248/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.158187978 seconds)
    (249/481) benchmarking ("sumelt_boundscheck", "BitArray{2}")...
    done (took 0.097031658 seconds)
    (250/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.15839157 seconds)
    (251/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.206649837 seconds)
    (252/481) benchmarking ("sumelt_boundscheck", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.162364059 seconds)
    (253/481) benchmarking ("sumvector_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.143806174 seconds)
    (254/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.184546024 seconds)
    (255/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.120029012 seconds)
    (256/481) benchmarking ("mapr_access", "BitArray{2}")...
    done (took 0.322455142 seconds)
    (257/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.173118914 seconds)
    (258/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.187505371 seconds)
    (259/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.125745963 seconds)
    (260/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.151067007 seconds)
    (261/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.158960544 seconds)
    (262/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.173115317 seconds)
    (263/481) benchmarking ("sumvector_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.149313804 seconds)
    (264/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.196345123 seconds)
    (265/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.128098682 seconds)
    (266/481) benchmarking ("sumvector", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.216225843 seconds)
    (267/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.179287669 seconds)
    (268/481) benchmarking ("sumvector_view", "Array{Float32,2}")...
    done (took 0.131265728 seconds)
    (269/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.120088256 seconds)
    (270/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.160717108 seconds)
    (271/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.136513848 seconds)
    (272/481) benchmarking ("sumrange_view", "BitArray{2}")...
    done (took 0.151921771 seconds)
    (273/481) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.139747672 seconds)
    (274/481) benchmarking ("sumcolon", "1:100000")...
    done (took 0.174528348 seconds)
    (275/481) benchmarking ("sumcartesian_view", "Array{Float32,2}")...
    done (took 0.131524248 seconds)
    (276/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.19497962 seconds)
    (277/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.12426143 seconds)
    (278/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.185734871 seconds)
    (279/481) benchmarking ("sumvector", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.161820635 seconds)
    (280/481) benchmarking "3d"...
    done (took 0.158856278 seconds)
    (281/481) benchmarking ("sum", "3darray")...
    done (took 0.137661394 seconds)
    (282/481) benchmarking ("sumlinear", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.150080133 seconds)
    (283/481) benchmarking ("sumlogical", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.207741625 seconds)
    (284/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.180828453 seconds)
    (285/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.182841351 seconds)
    (286/481) benchmarking ("sumcolon", "Array{Int32,2}")...
    done (took 0.151055208 seconds)
    (287/481) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.175156446 seconds)
    (288/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.169534772 seconds)
    (289/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.110868572 seconds)
    (290/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.140787296 seconds)
    (291/481) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.119627365 seconds)
    (292/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.197137791 seconds)
    (293/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.117743184 seconds)
    (294/481) benchmarking ("sumcolon", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.187274381 seconds)
    (295/481) benchmarking ("mapr_access", "Array{Float32,2}")...
    done (took 0.155584173 seconds)
    (296/481) benchmarking ("mapr_access", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.196652533 seconds)
    (297/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.184846193 seconds)
    (298/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.149230151 seconds)
    (299/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.154277904 seconds)
    (300/481) benchmarking ("sumeach", "Array{Float64,3}")...
    done (took 0.115338102 seconds)
    (301/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.177986996 seconds)
    (302/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.135907924 seconds)
    (303/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.198981952 seconds)
    (304/481) benchmarking ("sumelt", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.122475276 seconds)
    (305/481) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.14941299 seconds)
    (306/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.172188414 seconds)
    (307/481) benchmarking ("sumcartesian_view", "BitArray{2}")...
    done (took 0.141573507 seconds)
    (308/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.119389379 seconds)
    (309/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.172554026 seconds)
    (310/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.254733963 seconds)
    (311/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.161952858 seconds)
    (312/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.157669212 seconds)
    (313/481) benchmarking ("sumeach", "BitArray{2}")...
    done (took 0.121972389 seconds)
    (314/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.25182183 seconds)
    (315/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.142161048 seconds)
    (316/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.121153597 seconds)
    (317/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.172944746 seconds)
    (318/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.157589833 seconds)
    (319/481) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.145192633 seconds)
    (320/481) benchmarking ("sumeach_view", "Array{Float32,2}")...
    done (took 0.166595852 seconds)
    (321/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.161835261 seconds)
    (322/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.153310945 seconds)
    (323/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.15115587 seconds)
    (324/481) benchmarking ("sumcartesian", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.148583955 seconds)
    (325/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.193070335 seconds)
    (326/481) benchmarking ("mapr_access", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.17421311 seconds)
    (327/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.178552153 seconds)
    (328/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.159796392 seconds)
    (329/481) benchmarking ("sumrange_view", "Array{Float32,2}")...
    done (took 0.160326274 seconds)
    (330/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.148067226 seconds)
    (331/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.174168512 seconds)
    (332/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.182668881 seconds)
    (333/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.134513234 seconds)
    (334/481) benchmarking ("sumcartesian_view", "Array{Float64,3}")...
    done (took 0.1347756 seconds)
    (335/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.172261464 seconds)
    (336/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.179567259 seconds)
    (337/481) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.191507574 seconds)
    (338/481) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.120231596 seconds)
    (339/481) benchmarking ("sumvector", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.181784591 seconds)
    (340/481) benchmarking ("sumvector", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.156855661 seconds)
    (341/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.183827148 seconds)
    (342/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.184779226 seconds)
    (343/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.127192379 seconds)
    (344/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.193644408 seconds)
    (345/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.117560434 seconds)
    (346/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.14939958 seconds)
    (347/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.152160473 seconds)
    (348/481) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113119785 seconds)
    (349/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.172463247 seconds)
    (350/481) benchmarking ("mapr_access", "Array{Int32,2}")...
    done (took 0.181571811 seconds)
    (351/481) benchmarking ("sumlinear", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.120323052 seconds)
    (352/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.185702627 seconds)
    (353/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.159711808 seconds)
    (354/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.119611891 seconds)
    (355/481) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.141800934 seconds)
    (356/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.134342683 seconds)
    (357/481) benchmarking ("sumcolon", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.17979494 seconds)
    (358/481) benchmarking ("sumelt", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.127726358 seconds)
    (359/481) benchmarking ("sumcartesian", "Array{Int32,2}")...
    done (took 0.118609359 seconds)
    (360/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.193557992 seconds)
    (361/481) benchmarking ("sumeach", "Array{Int32,2}")...
    done (took 0.144553197 seconds)
    (362/481) benchmarking ("sumrange", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.168041882 seconds)
    (363/481) benchmarking ("sumcolon", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.218714341 seconds)
    (364/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.118553187 seconds)
    (365/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.180162451 seconds)
    (366/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.134586806 seconds)
    (367/481) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.117912351 seconds)
    (368/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.152521852 seconds)
    (369/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.131698478 seconds)
    (370/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.145627621 seconds)
    (371/481) benchmarking ("sumlinear_view", "Array{Float32,2}")...
    done (took 0.160270543 seconds)
    (372/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.191353421 seconds)
    (373/481) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.122707643 seconds)
    (374/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.186394601 seconds)
    (375/481) benchmarking ("sumlinear", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.15252595 seconds)
    (376/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.1754975 seconds)
    (377/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.145282166 seconds)
    (378/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.15637505 seconds)
    (379/481) benchmarking "sub2ind"...
    done (took 1.323119429 seconds)
    (380/481) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.117161863 seconds)
    (381/481) benchmarking ("sumlogical", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.207067915 seconds)
    (382/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.137966637 seconds)
    (383/481) benchmarking ("sumlinear_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.208207218 seconds)
    (384/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.163833888 seconds)
    (385/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.163213669 seconds)
    (386/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.182576 seconds)
    (387/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.137240694 seconds)
    (388/481) benchmarking ("sumeach", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.176057538 seconds)
    (389/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.135362097 seconds)
    (390/481) benchmarking "6d"...
    done (took 0.232868021 seconds)
    (391/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.151827499 seconds)
    (392/481) benchmarking ("sumrange", "1:100000")...
    done (took 0.1802836 seconds)
    (393/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.120185555 seconds)
    (394/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.155457754 seconds)
    (395/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.128731222 seconds)
    (396/481) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.123053164 seconds)
    (397/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.166292993 seconds)
    (398/481) benchmarking ("sumvector", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.156101388 seconds)
    (399/481) benchmarking ("sumeach_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.156404253 seconds)
    (400/481) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.12716319 seconds)
    (401/481) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.179806108 seconds)
    (402/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.134846197 seconds)
    (403/481) benchmarking ("sumcolon_view", "Array{Int32,2}")...
    done (took 0.135201088 seconds)
    (404/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.157413767 seconds)
    (405/481) benchmarking ("sumlogical", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.209624369 seconds)
    (406/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.139680047 seconds)
    (407/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.19612133 seconds)
    (408/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.173470683 seconds)
    (409/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.152169475 seconds)
    (410/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.162186832 seconds)
    (411/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.18687944 seconds)
    (412/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.118805286 seconds)
    (413/481) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.177757536 seconds)
    (414/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.156936455 seconds)
    (415/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.159864554 seconds)
    (416/481) benchmarking ("sumelt", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.13878975 seconds)
    (417/481) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.148327647 seconds)
    (418/481) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.127250569 seconds)
    (419/481) benchmarking ("sumrange", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.224127929 seconds)
    (420/481) benchmarking ("sumelt_boundscheck", "Array{Int32,2}")...
    done (took 0.115566593 seconds)
    (421/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.170769967 seconds)
    (422/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.162462664 seconds)
    (423/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.181724435 seconds)
    (424/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.160019923 seconds)
    (425/481) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.147199397 seconds)
    (426/481) benchmarking ("sumcolon", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.165873923 seconds)
    (427/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.153512458 seconds)
    (428/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.164290387 seconds)
    (429/481) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.117248468 seconds)
    (430/481) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.166306635 seconds)
    (431/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.156530965 seconds)
    (432/481) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.149237575 seconds)
    (433/481) benchmarking ("sumlinear", "1:100000")...
    done (took 0.116053684 seconds)
    (434/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.184050017 seconds)
    (435/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.146579015 seconds)
    (436/481) benchmarking ("sumvector", "Array{Int32,2}")...
    done (took 0.178803332 seconds)
    (437/481) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.130995547 seconds)
    (438/481) benchmarking ("sumlinear_view", "Array{Int32,2}")...
    done (took 0.162732139 seconds)
    (439/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.204525235 seconds)
    (440/481) benchmarking ("sumelt", "Array{Float32,2}")...
    done (took 0.11302143 seconds)
    (441/481) benchmarking ("sumeach", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.149180253 seconds)
    (442/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.255360654 seconds)
    (443/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.171204971 seconds)
    (444/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.207336704 seconds)
    (445/481) benchmarking ("sumvector_view", "BitArray{2}")...
    done (took 0.126546377 seconds)
    (446/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.12502176 seconds)
    (447/481) benchmarking ("sumeach_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.160654619 seconds)
    (448/481) benchmarking ("sumcartesian_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.146124219 seconds)
    (449/481) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.177034132 seconds)
    (450/481) benchmarking ("sumrange", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.158662611 seconds)
    (451/481) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.145591423 seconds)
    (452/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.117917466 seconds)
    (453/481) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.157786424 seconds)
    (454/481) benchmarking ("sumeach_view", "BitArray{2}")...
    done (took 0.146066947 seconds)
    (455/481) benchmarking ("sumlogical_view", "BitArray{2}")...
    done (took 0.134501899 seconds)
    (456/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.181995163 seconds)
    (457/481) benchmarking ("mapr_access", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.157975378 seconds)
    (458/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.175170245 seconds)
    (459/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.196906166 seconds)
    (460/481) benchmarking "2d"...
    done (took 0.125222505 seconds)
    (461/481) benchmarking "7d"...
    done (took 0.26690414 seconds)
    (462/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.133118264 seconds)
    (463/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.157793547 seconds)
    (464/481) benchmarking ("sumcartesian", "BitArray{2}")...
    done (took 0.131734809 seconds)
    (465/481) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.118781071 seconds)
    (466/481) benchmarking ("sumlinear", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.127422792 seconds)
    (467/481) benchmarking ("sumeach", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.150187268 seconds)
    (468/481) benchmarking ("sumelt", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.129078931 seconds)
    (469/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.197993585 seconds)
    (470/481) benchmarking ("sumrange", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.225859809 seconds)
    (471/481) benchmarking ("sumcolon", "Array{Float32,2}")...
    done (took 0.152155416 seconds)
    (472/481) benchmarking ("sumrange_view", "Array{Int32,2}")...
    done (took 0.160952727 seconds)
    (473/481) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.125104958 seconds)
    (474/481) benchmarking ("sumelt", "Array{Int32,2}")...
    done (took 0.115725398 seconds)
    (475/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.145452017 seconds)
    (476/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.152598481 seconds)
    (477/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.166584217 seconds)
    (478/481) benchmarking ("sumcolon", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.155822206 seconds)
    (479/481) benchmarking ("sumcartesian", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.161571081 seconds)
    (480/481) benchmarking ("sumlinear", "BitArray{2}")...
    done (took 0.093906113 seconds)
    (481/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.127359712 seconds)
  done (took 79.381630331 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("collect", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 0.152266283 seconds)
    (2/8) benchmarking ("collect", "Array{Float64,1}")...
    done (took 0.138335086 seconds)
    (3/8) benchmarking ("comprehension_collect", "Array{Float64,1}")...
    done (took 0.154075836 seconds)
    (4/8) benchmarking ("comprehension_iteration", "Array{Float64,1}")...
    done (took 0.208742623 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 0.180367517 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 0.27333245 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Array{Float64,1}")...
    done (took 0.214462482 seconds)
    (8/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 0.231645674 seconds)
  done (took 2.543540584 seconds)
  (11/13) benchmarking "cat"...
    (1/16) benchmarking ("hvcat", 500)...
    done (took 0.114167871 seconds)
    (2/16) benchmarking ("hcat_setind", 5)...
    done (took 0.144848181 seconds)
    (3/16) benchmarking ("hvcat_setind", 500)...
    done (took 0.131497314 seconds)
    (4/16) benchmarking ("hvcat", 5)...
    done (took 0.130319627 seconds)
    (5/16) benchmarking ("hcat", 500)...
    done (took 0.099419497 seconds)
    (6/16) benchmarking ("catnd_setind", 5)...
    done (took 0.415893026 seconds)
    (7/16) benchmarking ("vcat_setind", 500)...
    done (took 0.171205693 seconds)
    (8/16) benchmarking ("hvcat_setind", 5)...
    done (took 0.110717997 seconds)
    (9/16) benchmarking ("vcat", 5)...
    done (took 0.149326658 seconds)
    (10/16) benchmarking ("catnd_setind", 500)...
    done (took 0.13731349 seconds)
    (11/16) benchmarking ("vcat", 500)...
    done (took 0.122165202 seconds)
    (12/16) benchmarking ("catnd", 5)...
    done (took 0.509269124 seconds)
    (13/16) benchmarking ("vcat_setind", 5)...
    done (took 0.105573948 seconds)
    (14/16) benchmarking ("hcat_setind", 500)...
    done (took 0.129552323 seconds)
    (15/16) benchmarking ("catnd", 500)...
    done (took 0.11229594 seconds)
    (16/16) benchmarking ("hcat", 5)...
    done (took 0.122603606 seconds)
  done (took 3.688991336 seconds)
  (12/13) benchmarking "subarray"...
    (1/8) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.47892847 seconds)
    (2/8) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.506563246 seconds)
    (3/8) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.661573554 seconds)
    (4/8) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.270123369 seconds)
    (5/8) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.239068432 seconds)
    (6/8) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.189702263 seconds)
    (7/8) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.690356172 seconds)
    (8/8) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.181285589 seconds)
  done (took 11.203585196 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.148730022 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.13613162 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.389960793 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.234216639 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.189779595 seconds)
  done (took 2.093553773 seconds)
done (took 120.133915433 seconds)
(18/20) benchmarking "misc"...
  (1/6) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.118334571 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.11193634 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.111719828 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.139824685 seconds)
  done (took 1.468877751 seconds)
  (2/6) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.165854975 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.08174119 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.083398249 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.104958551 seconds)
  done (took 1.427738221 seconds)
  (3/6) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.423987921 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.080995587 seconds)
  done (took 1.529121966 seconds)
  (4/6) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.142191051 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.129671383 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.151401337 seconds)
  done (took 1.431568341 seconds)
  (5/6) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.13348421 seconds)
  done (took 1.128479428 seconds)
  (6/6) benchmarking "parse"...
    (1/3) benchmarking "Int"...
    done (took 0.11589955 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.107076936 seconds)
    (3/3) benchmarking "DateTime"...
    done (took 0.216528578 seconds)
  done (took 1.442656886 seconds)
done (took 9.427657094 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.113741101 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.911594035 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.418095238 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.123212512 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.699134262 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.412390288 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.408455302 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.160114024 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.162081188 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.122928797 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.121379045 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.683807851 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.419182547 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.861316239 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 1.37807309 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.887442499 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.682524872 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.100681172 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.131302085 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.101163898 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 1.387937759 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.123020012 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.10241793 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.100057583 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.704051431 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.409303175 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.099475064 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.905742779 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.100170574 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.102767018 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.412800261 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.100658214 seconds)
  done (took 20.438102917 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.112785312 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.156710431 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.132536147 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.101990025 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.101916672 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.125324525 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.112712514 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.111553578 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.190660607 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.09866503 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.145627089 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.099370194 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.125127528 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.125225564 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.125420721 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.098351515 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.126267392 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.103502899 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.107786835 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.126115179 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.123105675 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.098950548 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.124357035 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.104660274 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.100722494 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.145265029 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.10094827 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.112625218 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.122938501 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.105060602 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.104345582 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.099584011 seconds)
  done (took 4.779094942 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.15432669 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.165445983 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.134869122 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.137542585 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.172356316 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.102545988 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.211479778 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.13866312 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.188257652 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.100757738 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.12052256 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.123558649 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.160412354 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.101116158 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.150148765 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.100299285 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.101829599 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.127041966 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.108480492 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.101031014 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.146017419 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.099069175 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.101303179 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.126728842 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.102068679 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.12226312 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.124717694 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.112296023 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.098774357 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.129237028 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.105081506 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.099638058 seconds)
  done (took 5.07608332 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.118545473 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.113952656 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.120948622 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.149545807 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.110492151 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.112514788 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.141159676 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.111281047 seconds)
  done (took 1.992776911 seconds)
done (took 33.286668039 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/33) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.131049899 seconds)
    (2/33) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.118682152 seconds)
    (3/33) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.119441921 seconds)
    (4/33) benchmarking ("Set", "Any", "loop")...
    done (took 0.140613618 seconds)
    (5/33) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.172572833 seconds)
    (6/33) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.134614039 seconds)
    (7/33) benchmarking ("Vector", "String", "loop")...
    done (took 0.116504772 seconds)
    (8/33) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.10847934 seconds)
    (9/33) benchmarking ("Vector", "Int", "loop")...
    done (took 0.138346164 seconds)
    (10/33) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.121006151 seconds)
    (11/33) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.099195636 seconds)
    (12/33) benchmarking ("Dict", "String", "loop")...
    done (took 0.107101787 seconds)
    (13/33) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.146249846 seconds)
    (14/33) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.111845084 seconds)
    (15/33) benchmarking ("Set", "String", "iterator")...
    done (took 0.200841695 seconds)
    (16/33) benchmarking ("Set", "String", "loop")...
    done (took 0.115471688 seconds)
    (17/33) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.204462731 seconds)
    (18/33) benchmarking ("Set", "Any", "iterator")...
    done (took 0.174178531 seconds)
    (19/33) benchmarking ("Set", "Int", "loop")...
    done (took 0.133743978 seconds)
    (20/33) benchmarking ("Vector", "Any", "loop")...
    done (took 0.117021953 seconds)
    (21/33) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.109171431 seconds)
    (22/33) benchmarking ("Dict", "String", "iterator")...
    done (took 0.20675682 seconds)
    (23/33) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.111948794 seconds)
    (24/33) benchmarking ("Dict", "Int", "loop")...
    done (took 0.109148319 seconds)
    (25/33) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.20233615 seconds)
    (26/33) benchmarking ("Vector", "String", "iterator")...
    done (took 0.103741943 seconds)
    (27/33) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.195908417 seconds)
    (28/33) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.111002886 seconds)
    (29/33) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.111435989 seconds)
    (30/33) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.128997653 seconds)
    (31/33) benchmarking ("Set", "Int", "iterator")...
    done (took 0.175665754 seconds)
    (32/33) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.138854432 seconds)
    (33/33) benchmarking ("Dict", "Any", "loop")...
    done (took 0.109700114 seconds)
  done (took 5.526343322 seconds)
  (2/6) benchmarking "iteration"...
    (1/30) benchmarking ("Set", "String", "next")...
    done (took 0.197357399 seconds)
    (2/30) benchmarking ("Set", "Any", "start")...
    done (took 0.112102216 seconds)
    (3/30) benchmarking ("Set", "Int", "done")...
    done (took 0.1362494 seconds)
    (4/30) benchmarking ("Dict", "Int", "done")...
    done (took 0.10932601 seconds)
    (5/30) benchmarking ("Dict", "String", "start")...
    done (took 0.110862776 seconds)
    (6/30) benchmarking ("BitSet", "Int", "done")...
    done (took 0.133341899 seconds)
    (7/30) benchmarking ("Dict", "String", "next")...
    done (took 0.193416339 seconds)
    (8/30) benchmarking ("Vector", "Int", "done")...
    done (took 0.134856693 seconds)
    (9/30) benchmarking ("Vector", "String", "done")...
    done (took 0.109005684 seconds)
    (10/30) benchmarking ("Vector", "Any", "done")...
    done (took 0.108538311 seconds)
    (11/30) benchmarking ("Dict", "String", "done")...
    done (took 0.10826678 seconds)
    (12/30) benchmarking ("Vector", "Int", "next")...
    done (took 0.205662746 seconds)
    (13/30) benchmarking ("Set", "Int", "next")...
    done (took 0.114275149 seconds)
    (14/30) benchmarking ("Vector", "Int", "start")...
    done (took 0.134711337 seconds)
    (15/30) benchmarking ("Dict", "Int", "start")...
    done (took 0.112973506 seconds)
    (16/30) benchmarking ("Vector", "Any", "next")...
    done (took 0.100111778 seconds)
    (17/30) benchmarking ("Dict", "Any", "next")...
    done (took 0.222626366 seconds)
    (18/30) benchmarking ("Set", "String", "start")...
    done (took 0.112308066 seconds)
    (19/30) benchmarking ("Vector", "String", "next")...
    done (took 0.099834489 seconds)
    (20/30) benchmarking ("Set", "Any", "next")...
    done (took 0.112168323 seconds)
    (21/30) benchmarking ("Vector", "String", "start")...
    done (took 0.106261241 seconds)
    (22/30) benchmarking ("Dict", "Any", "done")...
    done (took 0.108382204 seconds)
    (23/30) benchmarking ("Dict", "Int", "next")...
    done (took 0.231908798 seconds)
    (24/30) benchmarking ("Vector", "Any", "start")...
    done (took 0.105103369 seconds)
    (25/30) benchmarking ("Set", "String", "done")...
    done (took 0.108736937 seconds)
    (26/30) benchmarking ("Set", "Any", "done")...
    done (took 0.135299598 seconds)
    (27/30) benchmarking ("Set", "Int", "start")...
    done (took 0.112168108 seconds)
    (28/30) benchmarking ("BitSet", "Int", "next")...
    done (took 0.113790821 seconds)
    (29/30) benchmarking ("BitSet", "Int", "start")...
    done (took 0.135654098 seconds)
    (30/30) benchmarking ("Dict", "Any", "start")...
    done (took 0.112489194 seconds)
  done (took 4.958647477 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.121338983 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.121887955 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.151790952 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.175129048 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.137210522 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.146170735 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.128477668 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.123201122 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.15723806 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.104239287 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.116632191 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.164570386 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.119268982 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.112546118 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.134067272 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.120611844 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.12516482 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.129680561 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.11133595 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.119159046 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.1493804 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.121083461 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.126157997 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.137542773 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.101475242 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.108818987 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.139126435 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.119294592 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.110447127 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.143748648 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.10678096 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.106417275 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.130162792 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.139070155 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.104704786 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.142068109 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.129224269 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.11431072 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.142545571 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.136549576 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.105880649 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.1312176 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.12963811 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.155746852 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.129825605 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.116894225 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.114206032 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.142249609 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.102374374 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.12028522 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.169846026 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.103505272 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.124289448 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.127420599 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.10240503 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.111671653 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.103684032 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.133409075 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.118417149 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.104714794 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.15438582 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.111073509 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.113347122 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.130679336 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.114525337 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.102143414 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.127858828 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.107972229 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.129380165 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.10905757 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.165058454 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.103929935 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.115201646 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.142442711 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.114226027 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.114914609 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.13027104 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.116015721 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.113402653 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.134276498 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.117448972 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.106423479 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.130727368 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.121621288 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.12451494 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.142325176 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.117031224 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.115485914 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.105367798 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.13159533 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.121672124 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.103631433 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.136813895 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.117246419 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.103477035 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.132479306 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.117534738 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.114990212 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.126346508 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.12972813 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.1066236 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.102270465 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.154405054 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.107495668 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.107840638 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.13992027 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.145284277 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.102236302 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.143320384 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.116560858 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.103380329 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.137839407 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.10767061 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.102979609 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.145783952 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.12098381 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.110307713 seconds)
  done (took 15.523295656 seconds)
  (4/6) benchmarking "optimizations"...
    (1/20) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.301133568 seconds)
    (2/20) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.28632604 seconds)
    (3/20) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.168898932 seconds)
    (4/20) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.290075849 seconds)
    (5/20) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.143874976 seconds)
    (6/20) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.191312216 seconds)
    (7/20) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.281085672 seconds)
    (8/20) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.284312749 seconds)
    (9/20) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.103918851 seconds)
    (10/20) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.16924329 seconds)
    (11/20) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.179646215 seconds)
    (12/20) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.226224055 seconds)
    (13/20) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.132480698 seconds)
    (14/20) benchmarking ("BitSet", "Int8")...
    done (took 0.131284606 seconds)
    (15/20) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.28562622 seconds)
    (16/20) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.338543336 seconds)
    (17/20) benchmarking ("BitSet", "UInt16")...
    done (took 0.160723771 seconds)
    (18/20) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.14155837 seconds)
    (19/20) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.167545718 seconds)
    (20/20) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.116302442 seconds)
  done (took 5.136942268 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/79) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.129755615 seconds)
    (2/79) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.138568165 seconds)
    (3/79) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.153010981 seconds)
    (4/79) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.13188991 seconds)
    (5/79) benchmarking ("BitSet", "Int", "last")...
    done (took 0.11413735 seconds)
    (6/79) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.146870483 seconds)
    (7/79) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.10373501 seconds)
    (8/79) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.12592038 seconds)
    (9/79) benchmarking ("BitSet", "Int", "first")...
    done (took 0.142222663 seconds)
    (10/79) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.114841151 seconds)
    (11/79) benchmarking ("Vector", "String", "push!")...
    done (took 0.105282623 seconds)
    (12/79) benchmarking ("Set", "String", "in", "false")...
    done (took 0.145377553 seconds)
    (13/79) benchmarking ("BitSet", "Int", "length")...
    done (took 0.117446502 seconds)
    (14/79) benchmarking ("Set", "Int", "first")...
    done (took 0.119597699 seconds)
    (15/79) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.145182843 seconds)
    (16/79) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.138177141 seconds)
    (17/79) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.110255316 seconds)
    (18/79) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.136207458 seconds)
    (19/79) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.126143908 seconds)
    (20/79) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.107395663 seconds)
    (21/79) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.120042401 seconds)
    (22/79) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.129956764 seconds)
    (23/79) benchmarking ("Dict", "String", "getindex")...
    done (took 0.111789903 seconds)
    (24/79) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.151418963 seconds)
    (25/79) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.123293423 seconds)
    (26/79) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.113860897 seconds)
    (27/79) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.128834842 seconds)
    (28/79) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.109550308 seconds)
    (29/79) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.11048663 seconds)
    (30/79) benchmarking ("Vector", "Int", "last")...
    done (took 0.137820923 seconds)
    (31/79) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.109397648 seconds)
    (32/79) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.121433898 seconds)
    (33/79) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.137554417 seconds)
    (34/79) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.097330735 seconds)
    (35/79) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.117309885 seconds)
    (36/79) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.118272503 seconds)
    (37/79) benchmarking ("Vector", "Int", "length")...
    done (took 0.136109828 seconds)
    (38/79) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.107461862 seconds)
    (39/79) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.107565424 seconds)
    (40/79) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.132515049 seconds)
    (41/79) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.120223875 seconds)
    (42/79) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.11581822 seconds)
    (43/79) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.138489623 seconds)
    (44/79) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.089959531 seconds)
    (45/79) benchmarking ("Dict", "Int", "first")...
    done (took 0.122664394 seconds)
    (46/79) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.100046021 seconds)
    (47/79) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.14316679 seconds)
    (48/79) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.116900032 seconds)
    (49/79) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.097534934 seconds)
    (50/79) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.122860771 seconds)
    (51/79) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.142795403 seconds)
    (52/79) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.120040753 seconds)
    (53/79) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.110156935 seconds)
    (54/79) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.152253158 seconds)
    (55/79) benchmarking ("Dict", "Int", "length")...
    done (took 0.111319654 seconds)
    (56/79) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.120071234 seconds)
    (57/79) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.141322877 seconds)
    (58/79) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.118797316 seconds)
    (59/79) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.107825978 seconds)
    (60/79) benchmarking ("Vector", "Int", "push!")...
    done (took 0.128496717 seconds)
    (61/79) benchmarking ("Vector", "String", "getindex")...
    done (took 0.103832022 seconds)
    (62/79) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.107360288 seconds)
    (63/79) benchmarking ("Vector", "Int", "first")...
    done (took 0.112723274 seconds)
    (64/79) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.1463336 seconds)
    (65/79) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.114906679 seconds)
    (66/79) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.147662856 seconds)
    (67/79) benchmarking ("Set", "String", "in", "true")...
    done (took 0.121715888 seconds)
    (68/79) benchmarking ("Vector", "Any", "push!")...
    done (took 0.104375015 seconds)
    (69/79) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.107811711 seconds)
    (70/79) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.134568417 seconds)
    (71/79) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.107837689 seconds)
    (72/79) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.118097325 seconds)
    (73/79) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.152286734 seconds)
    (74/79) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.113787256 seconds)
    (75/79) benchmarking ("Set", "Int", "length")...
    done (took 0.110473732 seconds)
    (76/79) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.143008074 seconds)
    (77/79) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.113305126 seconds)
    (78/79) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.085157441 seconds)
    (79/79) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.137596366 seconds)
  done (took 10.720712159 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("Dict", "Int", "filter")...
    done (took 0.133965643 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.114519387 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.122181079 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.166331301 seconds)
    (5/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.117199789 seconds)
    (6/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.109319221 seconds)
    (7/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.141476278 seconds)
    (8/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.122780771 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.118617389 seconds)
    (10/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.150586765 seconds)
    (11/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.119588191 seconds)
    (12/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.116994333 seconds)
    (13/28) benchmarking ("Dict", "Any", "filter")...
    done (took 0.152640214 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.114365339 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.113815439 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.146080748 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.119704559 seconds)
    (18/28) benchmarking ("Dict", "String", "filter")...
    done (took 0.140957424 seconds)
    (19/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.149612477 seconds)
    (20/28) benchmarking ("Dict", "Int", "filter!")...
    done (took 0.131318336 seconds)
    (21/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.118555243 seconds)
    (22/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.13686721 seconds)
    (23/28) benchmarking ("Set", "String", "filter")...
    done (took 0.117592089 seconds)
    (24/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.114662829 seconds)
    (25/28) benchmarking ("Dict", "String", "filter!")...
    done (took 0.159161243 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.116801825 seconds)
    (27/28) benchmarking ("Dict", "Any", "filter!")...
    done (took 0.130601873 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.147075885 seconds)
  done (took 4.68339525 seconds)
done (took 47.563839204 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 2.150261735 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.349167682 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 2.134082539 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.133832397 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 2.14168321 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 2.164430168 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.131857476 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 2.134193021 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 3.42614263 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 2.103337462 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.137463672 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 2.134267024 seconds)
done (took 27.179290909 seconds)
(2/20) benchmarking "string"...
  (1/4) benchmarking "join"...
  done (took 2.135000039 seconds)
  (2/4) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.683445005 seconds)
    (2/2) benchmarking "String"...
    done (took 1.426542 seconds)
  done (took 4.141070999 seconds)
  (3/4) benchmarking "replace"...
  done (took 2.125913212 seconds)
  (4/4) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 2.125760082 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.371658179 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 2.12332832 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 2.139532171 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.1259851 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.124940772 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.125739959 seconds)
  done (took 15.169056253 seconds)
done (took 24.604530992 seconds)
(3/20) benchmarking "linalg"...
  (1/2) benchmarking "factorization"...
    (1/64) benchmarking ("eig", "LowerTriangular", 1024)...
    done (took 2.160351545 seconds)
    (2/64) benchmarking ("svdfact", "UpperTriangular", 1024)...
    done (took 2.295576795 seconds)
    (3/64) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.364499183 seconds)
    (4/64) benchmarking ("eigfact", "UpperTriangular", 256)...
    done (took 2.124741016 seconds)
    (5/64) benchmarking ("qr", "Matrix", 256)...
    done (took 2.129922544 seconds)
    (6/64) benchmarking ("lu", "Matrix", 256)...
    done (took 2.122581241 seconds)
    (7/64) benchmarking ("eig", "SymTridiagonal", 256)...
    done (took 2.122512976 seconds)
    (8/64) benchmarking ("qrfact", "Matrix", 1024)...
    done (took 2.138905474 seconds)
    (9/64) benchmarking ("eigfact", "Diagonal", 256)...
    done (took 2.128767318 seconds)
    (10/64) benchmarking ("eig", "LowerTriangular", 256)...
    done (took 2.128014047 seconds)
    (11/64) benchmarking ("lufact", "Tridiagonal", 1024)...
    done (took 1.50962656 seconds)
    (12/64) benchmarking ("schurfact", "Matrix", 1024)...
    done (took 2.400973126 seconds)
    (13/64) benchmarking ("eig", "Bidiagonal", 1024)...
    done (took 2.141973713 seconds)
    (14/64) benchmarking ("eigfact", "Matrix", 1024)...
    done (took 2.506618675 seconds)
    (15/64) benchmarking ("eig", "UpperTriangular", 256)...
    done (took 2.13065532 seconds)
    (16/64) benchmarking ("svdfact", "Matrix", 256)...
    done (took 2.157465527 seconds)
    (17/64) benchmarking ("lufact", "Matrix", 256)...
    done (took 2.140806104 seconds)
    (18/64) benchmarking ("svd", "Matrix", 1024)...
    done (took 2.357531873 seconds)
    (19/64) benchmarking ("qrfact", "Matrix", 256)...
    done (took 2.130054215 seconds)
    (20/64) benchmarking ("eigfact", "Matrix", 256)...
    done (took 2.177107145 seconds)
    (21/64) benchmarking ("svd", "Diagonal", 256)...
    done (took 2.109367064 seconds)
    (22/64) benchmarking ("svdfact", "Diagonal", 256)...
    done (took 2.12206463 seconds)
    (23/64) benchmarking ("lufact", "Matrix", 1024)...
    done (took 2.170557396 seconds)
    (24/64) benchmarking ("schur", "Matrix", 256)...
    done (took 2.134165188 seconds)
    (25/64) benchmarking ("eigfact", "SymTridiagonal", 1024)...
    done (took 2.137980637 seconds)
    (26/64) benchmarking ("svd", "LowerTriangular", 256)...
    done (took 2.137077386 seconds)
    (27/64) benchmarking ("eig", "UpperTriangular", 1024)...
    done (took 2.161863748 seconds)
    (28/64) benchmarking ("eig", "Bidiagonal", 256)...
    done (took 2.131937337 seconds)
    (29/64) benchmarking ("svdfact", "LowerTriangular", 1024)...
    done (took 2.322631158 seconds)
    (30/64) benchmarking ("lu", "Matrix", 1024)...
    done (took 2.170793175 seconds)
    (31/64) benchmarking ("eig", "Matrix", 256)...
    done (took 2.161713622 seconds)
    (32/64) benchmarking ("eigfact", "SymTridiagonal", 256)...
    done (took 2.136396878 seconds)
    (33/64) benchmarking ("eigfact", "UpperTriangular", 1024)...
    done (took 2.154264503 seconds)
    (34/64) benchmarking ("svdfact", "Bidiagonal", 256)...
    done (took 2.127953378 seconds)
    (35/64) benchmarking ("lu", "Tridiagonal", 256)...
    done (took 2.129482899 seconds)
    (36/64) benchmarking ("svd", "UpperTriangular", 256)...
    done (took 2.137852155 seconds)
    (37/64) benchmarking ("svd", "UpperTriangular", 1024)...
    done (took 2.309944565 seconds)
    (38/64) benchmarking ("eig", "SymTridiagonal", 1024)...
    done (took 2.127714402 seconds)
    (39/64) benchmarking ("svd", "Diagonal", 1024)...
    done (took 2.107474683 seconds)
    (40/64) benchmarking ("eigfact", "Diagonal", 1024)...
    done (took 2.155513868 seconds)
    (41/64) benchmarking ("svd", "LowerTriangular", 1024)...
    done (took 2.319583738 seconds)
    (42/64) benchmarking ("lu", "Tridiagonal", 1024)...
    done (took 2.13028624 seconds)
    (43/64) benchmarking ("cholfact", "Matrix", 256)...
    done (took 2.137875752 seconds)
    (44/64) benchmarking ("eig", "Diagonal", 1024)...
    done (took 2.136222387 seconds)
    (45/64) benchmarking ("eigfact", "LowerTriangular", 256)...
    done (took 2.128965116 seconds)
    (46/64) benchmarking ("eigfact", "LowerTriangular", 1024)...
    done (took 2.164285289 seconds)
    (47/64) benchmarking ("svdfact", "Diagonal", 1024)...
    done (took 2.127363144 seconds)
    (48/64) benchmarking ("lufact", "Tridiagonal", 256)...
    done (took 1.233617082 seconds)
    (49/64) benchmarking ("svd", "Bidiagonal", 256)...
    done (took 2.143005852 seconds)
    (50/64) benchmarking ("eig", "Diagonal", 256)...
    done (took 2.154107967 seconds)
    (51/64) benchmarking ("svd", "Bidiagonal", 1024)...
    done (took 2.205061336 seconds)
    (52/64) benchmarking ("eig", "Matrix", 1024)...
    done (took 2.491368056 seconds)
    (53/64) benchmarking ("svdfact", "UpperTriangular", 256)...
    done (took 2.134622396 seconds)
    (54/64) benchmarking ("chol", "Matrix", 1024)...
    done (took 2.152271546 seconds)
    (55/64) benchmarking ("svdfact", "LowerTriangular", 256)...
    done (took 2.129456769 seconds)
    (56/64) benchmarking ("svdfact", "Matrix", 1024)...
    done (took 2.338508007 seconds)
    (57/64) benchmarking ("svd", "Matrix", 256)...
    done (took 2.130332055 seconds)
    (58/64) benchmarking ("qr", "Matrix", 1024)...
    done (took 2.161764793 seconds)
    (59/64) benchmarking ("schurfact", "Matrix", 256)...
    done (took 2.152023788 seconds)
    (60/64) benchmarking ("cholfact", "Matrix", 1024)...
    done (took 2.152220793 seconds)
    (61/64) benchmarking ("chol", "Matrix", 256)...
    done (took 2.13720987 seconds)
    (62/64) benchmarking ("eigfact", "Bidiagonal", 256)...
    done (took 2.125582684 seconds)
    (63/64) benchmarking ("svdfact", "Bidiagonal", 1024)...
    done (took 2.182875831 seconds)
    (64/64) benchmarking ("eigfact", "Bidiagonal", 1024)...
    done (took 2.13322704 seconds)
  done (took 138.85103218 seconds)
  (2/2) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 2.132112868 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 2.128890851 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 2.125949204 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 2.131738851 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 2.126462146 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.128116697 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.130524768 seconds)
    (8/36) benchmarking "gemv"...
    done (took 2.130053126 seconds)
    (9/36) benchmarking "syr!"...
    done (took 2.127777447 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 2.152543848 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 2.13048311 seconds)
    (12/36) benchmarking "her!"...
    done (took 2.12840526 seconds)
    (13/36) benchmarking "trsv"...
    done (took 2.131710046 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.074003064 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.142605626 seconds)
    (16/36) benchmarking "herk!"...
    done (took 2.154153766 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.133545761 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.129367782 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.138927914 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.130093724 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 2.154613075 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 2.129164796 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 2.127657864 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.127316085 seconds)
    (25/36) benchmarking "symm"...
    done (took 2.158340431 seconds)
    (26/36) benchmarking "herk"...
    done (took 2.198783911 seconds)
    (27/36) benchmarking "syrk"...
    done (took 2.153601994 seconds)
    (28/36) benchmarking "trsm"...
    done (took 2.138780239 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.137449192 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.131064358 seconds)
    (31/36) benchmarking "gemm"...
    done (took 2.161259971 seconds)
    (32/36) benchmarking "symm!"...
    done (took 2.178394397 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.689920309 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 1.997855132 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 2.142857315 seconds)
    (36/36) benchmarking "trmm"...
    done (took 2.134050735 seconds)
  done (took 77.406834265 seconds)
done (took 217.292396131 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.006866194 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 1.956562714 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.099800974 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 1.96302266 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 1.94754884 seconds)
  done (took 11.011477044 seconds)
done (took 12.049910269 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/13) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 1.314794684 seconds)
    (2/13) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 1.316099523 seconds)
    (3/13) benchmarking ("BitArray{1}", "90-10")...
    done (took 1.187604959 seconds)
    (4/13) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 1.318132921 seconds)
    (5/13) benchmarking ("BitArray{1}", "50-50")...
    done (took 1.161602778 seconds)
    (6/13) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 1.332081552 seconds)
    (7/13) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 1.298387767 seconds)
    (8/13) benchmarking ("Array{Bool,1}", "10-90")...
    done (took 1.149225825 seconds)
    (9/13) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 1.236395469 seconds)
    (10/13) benchmarking ("Array{Bool,1}", "90-10")...
    done (took 1.206787067 seconds)
    (11/13) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 1.245983032 seconds)
    (12/13) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 1.179781714 seconds)
    (13/13) benchmarking ("BitArray{1}", "10-90")...
    done (took 1.161910021 seconds)
  done (took 17.146624803 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 1.405333047 seconds)
    (2/11) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 2.143470286 seconds)
    (3/11) benchmarking ("BitArray{1}", "90-10")...
    done (took 1.200143926 seconds)
    (4/11) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 1.381903194 seconds)
    (5/11) benchmarking ("BitArray{1}", "50-50")...
    done (took 1.178392023 seconds)
    (6/11) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 1.41272235 seconds)
    (7/11) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 1.451010717 seconds)
    (8/11) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 2.145425913 seconds)
    (9/11) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 1.293714384 seconds)
    (10/11) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 1.177812594 seconds)
    (11/11) benchmarking ("BitArray{1}", "10-90")...
    done (took 1.156417955 seconds)
  done (took 16.986598308 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 1.40412788 seconds)
    (2/11) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 2.143650785 seconds)
    (3/11) benchmarking ("BitArray{1}", "90-10")...
    done (took 1.203210222 seconds)
    (4/11) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 1.402005389 seconds)
    (5/11) benchmarking ("BitArray{1}", "50-50")...
    done (took 1.180811637 seconds)
    (6/11) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 1.413637357 seconds)
    (7/11) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 1.445091494 seconds)
    (8/11) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 2.145088163 seconds)
    (9/11) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 1.282028649 seconds)
    (10/11) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 1.180970776 seconds)
    (11/11) benchmarking ("BitArray{1}", "10-90")...
    done (took 1.155450051 seconds)
  done (took 16.995843495 seconds)
done (took 52.169549126 seconds)
(6/20) benchmarking "tuple"...
  (1/3) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.169037576 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 1.230245617 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.166826626 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.156659618 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.151908808 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.152190383 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.158090562 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.153027807 seconds)
  done (took 10.377078799 seconds)
  (2/3) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.149728199 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.152109692 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.151152289 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.150142961 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.149933463 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.151035959 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.152053771 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.151709475 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.149754282 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.15167718 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.150962677 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.152788567 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.150609005 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.153095502 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.151555505 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.15160858 seconds)
  done (took 19.463187752 seconds)
  (3/3) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.15243467 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 1.151117566 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 1.152468092 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 1.150075382 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.151338304 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.152607091 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 1.15363064 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 1.151773254 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 1.151442862 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 1.150758803 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 1.153765284 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 1.154096544 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 1.151937086 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 1.152320232 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.152005687 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 1.152853977 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.153943018 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 1.152059407 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 1.156780151 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 1.151750258 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 1.153980968 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 1.153707012 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 1.15354304 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 1.1529158 seconds)
  done (took 28.705747306 seconds)
done (took 59.584973723 seconds)
(7/20) benchmarking "dates"...
  (1/6) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.141354619 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.146334462 seconds)
  done (took 5.330288882 seconds)
  (2/6) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.21091921 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.212719417 seconds)
  done (took 3.466447232 seconds)
  (3/6) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.154056909 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.153502193 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.154009424 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.153239589 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.152811111 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.152764643 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.153053628 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.153296293 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.153092464 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.155109611 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.152528154 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.152493256 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.155769963 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.152249773 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.153490278 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.154701329 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.1536041 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.154185096 seconds)
  done (took 21.805868334 seconds)
  (4/6) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.168042613 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.173072444 seconds)
  done (took 3.385710464 seconds)
  (5/6) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.281382012 seconds)
    (2/7) benchmarking "second"...
    done (took 1.196034365 seconds)
    (3/7) benchmarking "month"...
    done (took 1.258394285 seconds)
    (4/7) benchmarking "year"...
    done (took 1.251105348 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.195205047 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.174915435 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.195849845 seconds)
  done (took 9.596463381 seconds)
  (6/6) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.155429728 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.356175071 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.482641873 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.741513695 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.155992153 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.159501174 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.054210571 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.160514738 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.16110787 seconds)
  done (took 13.471872898 seconds)
done (took 58.097788892 seconds)
(8/20) benchmarking "micro"...
  (1/7) benchmarking "quicksort"...
  done (took 2.149420952 seconds)
  (2/7) benchmarking "parseint"...
  done (took 2.203250118 seconds)
  (3/7) benchmarking "randmatstat"...
  done (took 2.154083861 seconds)
  (4/7) benchmarking "pisum"...
  done (took 2.168022804 seconds)
  (5/7) benchmarking "fib"...
  done (took 1.495106329 seconds)
  (6/7) benchmarking "randmatmul"...
  done (took 2.193326155 seconds)
  (7/7) benchmarking "mandel"...
  done (took 2.142592156 seconds)
done (took 15.551488609 seconds)
(9/20) benchmarking "io"...
  (1/2) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 2.121058788 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.120011575 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 2.130454075 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 2.156988575 seconds)
  done (took 9.572615773 seconds)
  (2/2) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.143959405 seconds)
    (2/2) benchmarking "read"...
    done (took 1.463514699 seconds)
  done (took 4.653384955 seconds)
done (took 15.273907033 seconds)
(10/20) benchmarking "scalar"...
  (1/23) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.156022583 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.157816217 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.156248966 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.158273001 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.156233669 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.156704092 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.157151107 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.158133891 seconds)
    (9/24) benchmarking ("zero", "Float32")...
    done (took 1.155056444 seconds)
    (10/24) benchmarking ("one", "Float32")...
    done (took 1.1555415 seconds)
    (11/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.157234554 seconds)
    (12/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.157682333 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.157113269 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.157633667 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.156210794 seconds)
    (16/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.156827787 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.15799834 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.157426948 seconds)
    (19/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.158509409 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.157700956 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.157835766 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.158327127 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.157289766 seconds)
    (24/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.156684068 seconds)
  done (took 28.81711515 seconds)
  (2/23) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.159291655 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.157650961 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.156452528 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.159074213 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.158679562 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.158238407 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.15962668 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.158917162 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.159066036 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.158414787 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.158244584 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.160008259 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.157288519 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.159164104 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.158380351 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.15955004 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.157952853 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.158513063 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.159451577 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.159606726 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.159169573 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.159783407 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.161709282 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.159752364 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.158632477 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.158869106 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.159764161 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.160768698 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.16004469 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.159196533 seconds)
  done (took 35.820079221 seconds)
  (3/23) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.161390925 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.160712815 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.159553755 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.159493754 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.16140479 seconds)
    (6/72) benchmarking ("isodd", "UInt64")...
    done (took 1.160364445 seconds)
    (7/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.158810822 seconds)
    (8/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.160912846 seconds)
    (9/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.160258265 seconds)
    (10/72) benchmarking ("isnan", "Float64")...
    done (took 1.158729056 seconds)
    (11/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.159688098 seconds)
    (12/72) benchmarking ("isequal", "Float64")...
    done (took 1.160890611 seconds)
    (13/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.160647688 seconds)
    (14/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.161596411 seconds)
    (15/72) benchmarking ("isnan", "Complex{Float32}")...
    done (took 1.158452393 seconds)
    (16/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.162588798 seconds)
    (17/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.162673402 seconds)
    (18/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.162222252 seconds)
    (19/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.159037167 seconds)
    (20/72) benchmarking ("isequal", "Complex{Float64}")...
    done (took 1.160621895 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.160873529 seconds)
    (22/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.160462783 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 1.161196186 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.160313402 seconds)
    (25/72) benchmarking ("isequal", "UInt64")...
    done (took 1.162268757 seconds)
    (26/72) benchmarking ("isinteger", "Int64")...
    done (took 1.160798076 seconds)
    (27/72) benchmarking ("isfinite", "Float64")...
    done (took 1.160316608 seconds)
    (28/72) benchmarking ("isequal", "Int64")...
    done (took 1.161099444 seconds)
    (29/72) benchmarking ("isinf", "Float64")...
    done (took 1.161532506 seconds)
    (30/72) benchmarking ("isless", "UInt64")...
    done (took 1.161812805 seconds)
    (31/72) benchmarking ("isequal", "BigInt")...
    done (took 1.160956271 seconds)
    (32/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.162541011 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 1.161148941 seconds)
    (34/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.161199907 seconds)
    (35/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.162380821 seconds)
    (36/72) benchmarking ("isless", "Float64")...
    done (took 1.161515334 seconds)
    (37/72) benchmarking ("iseven", "BigInt")...
    done (took 1.162359213 seconds)
    (38/72) benchmarking ("isnan", "BigInt")...
    done (took 1.160947028 seconds)
    (39/72) benchmarking ("isequal", "Complex{Float32}")...
    done (took 1.161805455 seconds)
    (40/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.162811272 seconds)
    (41/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.16137575 seconds)
    (42/72) benchmarking ("isnan", "Float32")...
    done (took 1.161448429 seconds)
    (43/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.162060538 seconds)
    (44/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.162622789 seconds)
    (45/72) benchmarking ("iseven", "Int64")...
    done (took 1.162605515 seconds)
    (46/72) benchmarking ("isinteger", "Float64")...
    done (took 1.163015889 seconds)
    (47/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.16204137 seconds)
    (48/72) benchmarking ("isfinite", "Complex{Float32}")...
    done (took 1.162797152 seconds)
    (49/72) benchmarking ("isnan", "Complex{Float64}")...
    done (took 1.164335904 seconds)
    (50/72) benchmarking ("isinteger", "Complex{Float32}")...
    done (took 1.161465901 seconds)
    (51/72) benchmarking ("isinf", "Int64")...
    done (took 1.162497539 seconds)
    (52/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.163730065 seconds)
    (53/72) benchmarking ("isinf", "Complex{Float32}")...
    done (took 1.163542542 seconds)
    (54/72) benchmarking ("isfinite", "Complex{Float64}")...
    done (took 1.163627415 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.161315228 seconds)
    (56/72) benchmarking ("isnan", "Int64")...
    done (took 1.162781425 seconds)
    (57/72) benchmarking ("isinteger", "Float32")...
    done (took 1.16274627 seconds)
    (58/72) benchmarking ("isnan", "UInt64")...
    done (took 1.163994485 seconds)
    (59/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.164956452 seconds)
    (60/72) benchmarking ("isless", "Int64")...
    done (took 1.162461387 seconds)
    (61/72) benchmarking ("isinf", "BigInt")...
    done (took 1.163889206 seconds)
    (62/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.162669104 seconds)
    (63/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.16524753 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.16359108 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.163087924 seconds)
    (66/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.162645971 seconds)
    (67/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.163982417 seconds)
    (68/72) benchmarking ("isinteger", "Complex{Float64}")...
    done (took 1.164173178 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.164850198 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.164459597 seconds)
    (71/72) benchmarking ("isinf", "Complex{Float64}")...
    done (took 1.163593288 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.165588095 seconds)
  done (took 84.713035716 seconds)
  (4/23) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.163062441 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.165342411 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.163519267 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.164336486 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.166536817 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.164141733 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.164895261 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.165343147 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.164224418 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.164447397 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.165010923 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.163358762 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.164026522 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.167180146 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.164662594 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.164307783 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.167149211 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.165909739 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.164429649 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.165634617 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.163979937 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.165955655 seconds)
  done (took 26.681479118 seconds)
  (5/23) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.164817656 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.16527754 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.163663693 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.166119418 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.167719124 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.167250842 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.165356829 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.166584085 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.166679238 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.163832075 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.16732501 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.165780322 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.168755619 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.164983151 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.166386096 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.169754929 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.167583377 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.169439028 seconds)
  done (took 22.051949172 seconds)
  (6/23) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.167097136 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.166642302 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.165374745 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.167039221 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.167053567 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.165204468 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.164874188 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.165350846 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.167876475 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.166929629 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.16700727 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.16780017 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.167161769 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.164985458 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.165351436 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.167349546 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.167714473 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.167159294 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.165910922 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.166173838 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.16655882 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.166986719 seconds)
  done (took 26.719057421 seconds)
  (7/23) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.167564477 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.167964312 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.167652188 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.166306467 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.167697844 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.16746225 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.167381577 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.167796536 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.168229062 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.169804059 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.168947623 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.168813832 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.171901983 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.169826465 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.168603722 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.169283458 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.16886989 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.167758927 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.16798982 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.168294826 seconds)
  done (took 24.425913112 seconds)
  (8/23) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.171080268 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.169397349 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.170439457 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.17023172 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.171049645 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.169696541 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.171978218 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.171381672 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.170213862 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.171442071 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.168967445 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.171511647 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.169851047 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.169694441 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.168504453 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.172205857 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.170637473 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.169507754 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.170150021 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.172995608 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.171596041 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.170735261 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.17218883 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.170789957 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.171371364 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.170594559 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.170684406 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.172962149 seconds)
  done (took 33.839182183 seconds)
  (9/23) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.170393188 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.170419609 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.172113924 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.169577397 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.17077161 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.170183316 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.170850639 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.173242134 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.171562189 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.170852977 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.171473857 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.170678797 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.171672878 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.17145453 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.172864146 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.172995549 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.172014231 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.173053864 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.170382193 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.171823735 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.174164111 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.172616137 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.17136254 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.172107851 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.172322171 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.170258976 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.176052846 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.171192172 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.173937442 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.172210197 seconds)
  done (took 36.213423829 seconds)
  (10/23) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.190480863 seconds)
    (2/2) benchmarking "in"...
    done (took 1.189306791 seconds)
  done (took 3.439988309 seconds)
  (11/23) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.172806388 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.173845657 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.171866506 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.172535769 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.172746467 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.174960253 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.173945782 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.172230657 seconds)
  done (took 10.44465718 seconds)
  (12/23) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.173290895 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.173342243 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.172883052 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.173582499 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.173729445 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.173785501 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.171976952 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.676099193 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.173528723 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.172886408 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.173699559 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.173943879 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.172974094 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.174879325 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.174663123 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.173949988 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.171579198 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.173760731 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.174887837 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.173414656 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.172970195 seconds)
  done (took 26.206609522 seconds)
  (13/23) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.173935206 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.173120221 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.177300291 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.172710292 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.174903585 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.174306093 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.172993794 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.175073882 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.175370792 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.175171086 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.174728327 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.175620114 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.17405346 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.174141389 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.177260009 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.175819989 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.178232113 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.174220439 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.176927106 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.175961678 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.175632803 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.178352863 seconds)
  done (took 26.918071036 seconds)
  (14/23) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.176114554 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.176011829 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.176612111 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.178203918 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.176373894 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.177555699 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.175901897 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.177392137 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.175246846 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.173805073 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.176980845 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.175899886 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.177336162 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.17714468 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.177253925 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.176646026 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.176597365 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.176687351 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.175581998 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.176919349 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.177800587 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.176386031 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.176850423 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.176797635 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.177220833 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.176502999 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.177598514 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.177172064 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.177084923 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.176223669 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.177790546 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.178292601 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.180948712 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.177803443 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.178601686 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.177919061 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.179779242 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.179123663 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.177530897 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.178280762 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.17737414 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.178905049 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.179388043 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.177862141 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.177627859 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.178191546 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.17809175 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.177589998 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.178965277 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.179097416 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.178298132 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.178468779 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.179380706 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.179094217 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.179467782 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.177807706 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.180236833 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.179173279 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.177027748 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.18002955 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.179066001 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.179203573 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.177479256 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.179179711 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.179589562 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.179632154 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.178635168 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.179001437 seconds)
  done (took 81.154251448 seconds)
  (15/23) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.1815944 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.180612011 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.181680402 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.180096062 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.182836542 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.181203013 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.181211664 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.18237028 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.1828221 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.182786197 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.183066076 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.182507298 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.181217215 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.181878122 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.179654689 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.181876492 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.182309818 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.182497094 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.182195921 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.180985858 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.180997311 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.183402257 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.182205995 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.181365276 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.184860071 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.183120245 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.183352883 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.18315529 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.182454669 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.182818309 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.182368075 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.182829909 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.18501936 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.182665416 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.185565738 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.182960314 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.182114479 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.182458295 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.183095162 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.18226848 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.183333349 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.184072837 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.183633102 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.18427724 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.186357968 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.185417098 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.184195364 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.183592438 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.184477002 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.184084827 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.186291801 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.184446357 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.183493442 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.185867378 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.186073868 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.184173912 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.185282019 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.183408466 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.184479555 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.182731518 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.183978177 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.184109678 seconds)
  done (took 74.421271574 seconds)
  (16/23) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.182099225 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.181620436 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.185657189 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.183720314 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.182105715 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.182009425 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.184293365 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.181514501 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.184218614 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.185282586 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.187147711 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.181575085 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.182404805 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.182473276 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.182631689 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.182336101 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.181519066 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.18159533 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.180493264 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.182772361 seconds)
  done (took 24.726770498 seconds)
  (17/23) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.182807824 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.181990844 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.181394959 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.182846582 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.183284805 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.181078505 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.186350211 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.180615103 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.181422315 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.183154996 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.183311853 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.181164554 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.181915655 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.181776674 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.183130646 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.182248965 seconds)
  done (took 19.987151762 seconds)
  (18/23) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.182954329 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.182190388 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.182477229 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.182400414 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.181033195 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.18203252 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.1836888 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.181824348 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.183946906 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.182032757 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.181477499 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.181560685 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.18180007 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.182566037 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.18193616 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.179566633 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.182369328 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.182115954 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.184423356 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.182586781 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.183125396 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.183026675 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.183455865 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.187139593 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.183292814 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.184460339 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.18207083 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.183109743 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.181979238 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.182655674 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.183809649 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.18446224 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.181648928 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.181281757 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.180064094 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.182619978 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.18197101 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.184236007 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.182920902 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.183924409 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.184193252 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.181362351 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.182394745 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.182742153 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.183386902 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.183377016 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.182198215 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.183639548 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.183705245 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.183043256 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.182932674 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.182595637 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.18324679 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.181349307 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.181590456 seconds)
  done (took 66.116618021 seconds)
  (19/23) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.182537428 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.184170445 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.180887364 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.181298847 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.183297847 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.184080609 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.181947186 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.183681119 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.184515576 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.182841124 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.181509556 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.184168455 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.182611878 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.182823464 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.180635213 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.183557179 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.183179939 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.182052693 seconds)
  done (took 22.358265794 seconds)
  (20/23) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.184663098 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.1832805 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.183030373 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.183910694 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.183280429 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.185116544 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.183346958 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.182390861 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.183043245 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.182989331 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.182008454 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.182524379 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.183180246 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.183024355 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.182344492 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.182829384 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.184978636 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.183074098 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.183310298 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.181726838 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.184741341 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.184580557 seconds)
  done (took 27.103497156 seconds)
  (21/23) benchmarking "intfuncs"...
    (1/12) benchmarking ("nextpow2", "Int64", "+")...
    done (took 1.174575098 seconds)
    (2/12) benchmarking ("prevpow2", "UInt64", "-")...
    done (took 1.173503606 seconds)
    (3/12) benchmarking ("prevpow2", "Int64", "+")...
    done (took 1.173748758 seconds)
    (4/12) benchmarking ("nextpow2", "BigInt", "-")...
    done (took 1.182616936 seconds)
    (5/12) benchmarking ("prevpow2", "UInt64", "+")...
    done (took 1.176205457 seconds)
    (6/12) benchmarking ("prevpow2", "Int64", "-")...
    done (took 1.174349374 seconds)
    (7/12) benchmarking ("nextpow2", "UInt64", "-")...
    done (took 1.174914134 seconds)
    (8/12) benchmarking ("nextpow2", "UInt64", "+")...
    done (took 1.175798319 seconds)
    (9/12) benchmarking ("prevpow2", "BigInt", "+")...
    done (took 1.185729854 seconds)
    (10/12) benchmarking ("prevpow2", "BigInt", "-")...
    done (took 1.188175636 seconds)
    (11/12) benchmarking ("nextpow2", "BigInt", "+")...
    done (took 1.187698658 seconds)
    (12/12) benchmarking ("nextpow2", "Int64", "-")...
    done (took 1.177754201 seconds)
  done (took 15.214047246 seconds)
  (22/23) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.186597062 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.184469526 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.186064991 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.183734688 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.18510513 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.184742512 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.186315708 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.185342804 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.184427753 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.186382563 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.184743767 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.186166086 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.187601585 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.185370565 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.186391395 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.187423439 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.184831692 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.186652375 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.184291965 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.18834162 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.185352292 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.185087953 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.185817394 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.184324181 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.182809688 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.184681134 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.18616768 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.186056307 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.185084997 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.18556286 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.187273839 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.184590474 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.186119356 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.18537682 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.185069471 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.184561975 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.185731423 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.184907796 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.186102488 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.186737952 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.186796194 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.18712795 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.186387142 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.186870858 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.187247399 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.186569074 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.185976512 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.186722637 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.186720687 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.188395548 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.18637984 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.185782734 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.187128419 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.185855291 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.188322078 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.188497156 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.185642209 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.18884863 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.186932702 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.188515707 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.188601353 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.186940128 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.18782933 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.186519296 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.186924969 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.188943813 seconds)
  done (took 79.361649236 seconds)
  (23/23) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.188329074 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.18908891 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.187248763 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.189605806 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.186772168 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.1883877 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.187287444 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.187652503 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.188648901 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.189108357 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.188801761 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.189203367 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.190151674 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.186399518 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.187047536 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.189040212 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.185466108 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.188302924 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.190324228 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.1865399 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.188879591 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.18934808 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.189526423 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.188883749 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.190056247 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.187730003 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.18891573 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.187045009 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.187956662 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.186981205 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.189889251 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.189110954 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.187254677 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.187951012 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.190902746 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.188833218 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.186534558 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.190767604 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.18985977 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.191181081 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.189480934 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.188989504 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.189241376 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.187459999 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.187582057 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.191120478 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.189390006 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.188064128 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.190402908 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.190005559 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.188665862 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.188525652 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.190836778 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.189813856 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.187147163 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.190207145 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.188180385 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.190843642 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.189247271 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.18931789 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.187789336 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.188983508 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.188910556 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.191049155 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.188389449 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.191200033 seconds)
  done (took 79.53741672 seconds)
done (took 877.317265567 seconds)
(11/20) benchmarking "sparse"...
  (1/4) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 1.347588892 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 1.297275768 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.179681418 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 2.184530006 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.176821001 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 2.181568606 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 2.188757482 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.178636453 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 1.181754306 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 1.179538247 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.18334175 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 1.369667505 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 2.214869482 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.179260228 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.182538998 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 1.282187731 seconds)
  done (took 24.585880083 seconds)
  (2/4) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.211816355 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.19016316 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.294773844 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.184528775 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.20839704 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.359883338 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 1.237431959 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 1.186391228 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 1.341931383 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 1.206138213 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.177990093 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.205749334 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 1.184672138 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.178363972 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 1.200934233 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.362357831 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 1.431189605 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.179366723 seconds)
  done (took 26.420267895 seconds)
  (3/4) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.205010827 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.189782985 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.187994882 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.18623574 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 2.181198085 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 2.174131613 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.182795842 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 2.186791586 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.174953596 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 1.314788447 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 1.191678789 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.199183571 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.18371377 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.187641248 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.194271041 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.228544589 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.340300072 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.193142997 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.191739961 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.191533355 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.185334112 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.272146042 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.224225747 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.198665388 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.297417584 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.192185808 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.189463737 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.195547463 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.298468846 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.195973377 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.185916019 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.187237213 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.188775189 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.112901205 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.713552527 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 2.178845006 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.205702 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.194731437 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.193449398 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.324610163 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.189405513 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.194329523 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 2.180216477 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.699170415 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.285919971 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.298588691 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.181288099 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.186749287 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.188511362 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.251975817 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.19112995 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.187856151 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 1.245824529 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.9525531 seconds)
  done (took 77.132219689 seconds)
  (4/4) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 2.235788864 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.18007863 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.359031857 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 2.204461089 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.178603077 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.176841052 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 2.178935005 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.440156528 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 2.185533287 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.180279701 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.494271262 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.76471437 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 2.190041514 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 2.244388439 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 2.218131647 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 2.228354337 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.183318772 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.179022142 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 2.180865398 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 2.187483603 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.727452936 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.179865959 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.178063172 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 2.252634515 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.217068524 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.685963979 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.178436386 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.179758095 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.180946464 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 2.176112458 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.73759196 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 2.178500836 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 2.236144125 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 2.178904589 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.455506326 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.537829553 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.49393499 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 2.182203067 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 2.20655656 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 2.180723 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.204271864 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.679915943 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.522415029 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.180999031 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.192593424 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.672209574 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.181207742 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 2.186114778 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.180132272 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.45025218 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.181622026 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.18512014 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.177131303 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 2.185373066 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 2.184157809 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 2.225836265 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 2.233345414 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.687763529 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.190249521 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.181417536 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 2.227117608 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 2.179467267 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 2.188181638 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.19119656 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 2.1877309 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.521547711 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 2.418241515 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 2.192177143 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.520765811 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.72632331 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.177863803 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.824313968 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.180492584 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.194319271 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 2.217034595 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.182665218 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.181860318 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.6847103 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 2.182176826 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 2.182480427 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.497155514 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.182663823 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.478338828 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.200979469 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.186879297 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.739283134 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.184820285 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 2.244507666 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.185610434 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.178993297 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.178051638 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.188789281 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.464175318 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.232103293 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 2.184415807 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 2.182300986 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 2.213841014 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.184609621 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 2.199282464 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.187699675 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.810687402 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.192433652 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.184850613 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.201808917 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.183831277 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 2.202470559 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.18662152 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 2.188631238 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.45778895 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.187139733 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 2.201761237 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 2.188830021 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.182422018 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.194194425 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 2.257931132 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 2.195408519 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.463185731 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 2.185736395 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.182662314 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 2.184545587 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.1848145 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 2.19976695 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.18246495 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 2.207396095 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.143641972 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.479948838 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.201054253 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 2.18403528 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.186934077 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.185814336 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.200092908 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.186478504 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 2.241828061 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 2.189720755 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.922991461 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 2.191571813 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 2.19680105 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.186628979 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 2.194757334 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.186812268 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 2.19509293 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.187447415 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.480193751 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.465062282 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 2.41369875 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.186498538 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.188517051 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.956702388 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 2.215232685 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.365224404 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 2.205069562 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.184079421 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.465956191 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 2.408689674 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 2.19130602 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 2.184749912 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 2.188523808 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.460566015 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.190283111 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.498577455 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.754765606 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.185612476 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 2.190523391 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.923763976 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.006614036 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.190262103 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 2.194713535 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.478508762 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 2.20220129 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 2.188712422 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 2.186494608 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.183189414 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.187283476 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 2.192813061 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 2.188703525 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.187040346 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 2.187275362 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 2.478132587 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.377325694 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 2.204620306 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 2.198082615 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.682738213 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 2.222377231 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.184874413 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 2.21009996 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.184141451 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.185588372 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 2.2379249 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 2.189460648 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 2.21307166 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 2.187974006 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 2.196261376 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.704795313 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.183368222 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.188542359 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.380143342 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.88068174 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.183556671 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.187147746 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.187726263 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 2.245023804 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.713095329 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 2.214188829 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.456089272 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 2.192783689 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.226397999 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.188338633 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 2.202560852 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.70880178 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.19263883 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.189687186 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.905338659 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 2.1853406 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 4.614983457 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 2.184173868 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.190504425 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.804867363 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 2.183668239 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 2.190885423 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.184030256 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.188546528 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.497414369 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 2.190849219 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.197369265 seconds)
  done (took 464.204804794 seconds)
done (took 593.419509184 seconds)
(12/20) benchmarking "broadcast"...
  (1/5) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 2.188103754 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 2.181767639 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 2.189407869 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 2.188677907 seconds)
  done (took 9.83105802 seconds)
  (2/5) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 1.203942838 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 1.194458696 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 1.204835152 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 1.19705328 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 1.204848208 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 1.192006792 seconds)
  done (took 8.281337211 seconds)
  (3/5) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 2.187510555 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 2.183850016 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 2.189485852 seconds)
  done (took 7.643426539 seconds)
  (4/5) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 1.371022169 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.210457524 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 1.497944864 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.189863597 seconds)
  done (took 8.351007876 seconds)
  (5/5) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.205586393 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 1.204822505 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 1.204921923 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 1.206047887 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 1.203900653 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.206411612 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 1.205705429 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.205072579 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 1.207847025 seconds)
  done (took 11.934833172 seconds)
done (took 47.122315043 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/192) benchmarking ("map", *, BigInt, (true, true))...
    done (took 2.169223881 seconds)
    (2/192) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 1.253044271 seconds)
    (3/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (true, true))...
    done (took 1.416181144 seconds)
    (4/192) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 1.29477442 seconds)
    (5/192) benchmarking ("perf_countnothing", Int64, false)...
    done (took 1.230438782 seconds)
    (6/192) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 1.344728613 seconds)
    (7/192) benchmarking ("map", identity, BigInt, false)...
    done (took 1.282894331 seconds)
    (8/192) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 1.33788669 seconds)
    (9/192) benchmarking ("map", abs, Float64, false)...
    done (took 1.258937308 seconds)
    (10/192) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 2.191531392 seconds)
    (11/192) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 1.230216286 seconds)
    (12/192) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 1.475080349 seconds)
    (13/192) benchmarking ("map", abs, Int8, false)...
    done (took 1.220894015 seconds)
    (14/192) benchmarking ("perf_countnothing", Complex{Float64}, true)...
    done (took 1.227532511 seconds)
    (15/192) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 1.343429475 seconds)
    (16/192) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 1.334425473 seconds)
    (17/192) benchmarking ("perf_sum", BigFloat, true)...
    done (took 2.207507527 seconds)
    (18/192) benchmarking ("map", abs, BigFloat, false)...
    done (took 2.170411373 seconds)
    (19/192) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 1.481414966 seconds)
    (20/192) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 2.170652883 seconds)
    (21/192) benchmarking ("map", identity, Int64, false)...
    done (took 1.264145618 seconds)
    (22/192) benchmarking ("perf_sum", Bool, true)...
    done (took 1.273218645 seconds)
    (23/192) benchmarking ("perf_countnothing", Float64, false)...
    done (took 1.226017136 seconds)
    (24/192) benchmarking ("map", identity, BigInt, true)...
    done (took 1.42526597 seconds)
    (25/192) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 1.408273972 seconds)
    (26/192) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 2.191906663 seconds)
    (27/192) benchmarking ("perf_sum", BigInt, false)...
    done (took 2.196981529 seconds)
    (28/192) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 1.261109721 seconds)
    (29/192) benchmarking ("perf_countnothing", Int8, false)...
    done (took 1.225171061 seconds)
    (30/192) benchmarking ("perf_sum", Float32, false)...
    done (took 1.257944783 seconds)
    (31/192) benchmarking ("map", *, Complex{Float64}, (true, true))...
    done (took 2.170054675 seconds)
    (32/192) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 1.332233683 seconds)
    (33/192) benchmarking ("map", *, Complex{Float64}, (false, true))...
    done (took 2.170080427 seconds)
    (34/192) benchmarking ("perf_countequals", "Int8")...
    done (took 1.276327282 seconds)
    (35/192) benchmarking ("map", abs, Int64, true)...
    done (took 1.381454611 seconds)
    (36/192) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 1.252302271 seconds)
    (37/192) benchmarking ("perf_simplecopy", Complex{Float64}, true)...
    done (took 1.358038119 seconds)
    (38/192) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.169237808 seconds)
    (39/192) benchmarking ("broadcast", *, Complex{Float64}, (true, true))...
    done (took 1.573868122 seconds)
    (40/192) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.165772484 seconds)
    (41/192) benchmarking ("map", abs, Float64, true)...
    done (took 1.384998178 seconds)
    (42/192) benchmarking ("perf_sum", Bool, false)...
    done (took 1.26515401 seconds)
    (43/192) benchmarking ("broadcast", identity, Int8, true)...
    done (took 1.307603178 seconds)
    (44/192) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 1.375818541 seconds)
    (45/192) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 1.293823067 seconds)
    (46/192) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 1.421815082 seconds)
    (47/192) benchmarking ("broadcast", abs, Int8, true)...
    done (took 1.313298326 seconds)
    (48/192) benchmarking ("broadcast", identity, Complex{Float64}, true)...
    done (took 1.505813366 seconds)
    (49/192) benchmarking ("broadcast", abs, Int8, false)...
    done (took 1.278446435 seconds)
    (50/192) benchmarking ("map", abs, Int8, true)...
    done (took 1.307769793 seconds)
    (51/192) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 2.194473473 seconds)
    (52/192) benchmarking ("broadcast", abs, Float32, false)...
    done (took 1.291470365 seconds)
    (53/192) benchmarking ("perf_sum", Float64, false)...
    done (took 1.263233244 seconds)
    (54/192) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 1.472852653 seconds)
    (55/192) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 1.34537405 seconds)
    (56/192) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.172062809 seconds)
    (57/192) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 2.170126543 seconds)
    (58/192) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 1.302626793 seconds)
    (59/192) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 1.326859519 seconds)
    (60/192) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 1.310713361 seconds)
    (61/192) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 1.401204222 seconds)
    (62/192) benchmarking ("map", abs, BigInt, false)...
    done (took 2.059175256 seconds)
    (63/192) benchmarking ("map", identity, Float32, false)...
    done (took 1.255418472 seconds)
    (64/192) benchmarking ("perf_sum", Int8, true)...
    done (took 1.270310935 seconds)
    (65/192) benchmarking ("perf_countequals", "Float32")...
    done (took 1.283208811 seconds)
    (66/192) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 1.267042279 seconds)
    (67/192) benchmarking ("map", identity, Float64, true)...
    done (took 1.391539858 seconds)
    (68/192) benchmarking ("broadcast", identity, Bool, false)...
    done (took 1.256155283 seconds)
    (69/192) benchmarking ("map", identity, Float32, true)...
    done (took 1.349329139 seconds)
    (70/192) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.172114321 seconds)
    (71/192) benchmarking ("map", abs, Complex{Float64}, true)...
    done (took 1.42636299 seconds)
    (72/192) benchmarking ("broadcast", *, Complex{Float64}, (false, false))...
    done (took 1.47156548 seconds)
    (73/192) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 2.184998632 seconds)
    (74/192) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 1.223229223 seconds)
    (75/192) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 2.176634523 seconds)
    (76/192) benchmarking ("broadcast", *, Complex{Float64}, (false, true))...
    done (took 1.576859999 seconds)
    (77/192) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 2.185861076 seconds)
    (78/192) benchmarking ("map", identity, Complex{Float64}, false)...
    done (took 1.358820308 seconds)
    (79/192) benchmarking ("map", identity, Complex{Float64}, true)...
    done (took 1.503614913 seconds)
    (80/192) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.17129375 seconds)
    (81/192) benchmarking ("perf_countequals", "Int64")...
    done (took 1.280197858 seconds)
    (82/192) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 1.376165122 seconds)
    (83/192) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 1.295302856 seconds)
    (84/192) benchmarking ("perf_countequals", "Bool")...
    done (took 1.280602685 seconds)
    (85/192) benchmarking ("perf_sum", BigFloat, false)...
    done (took 2.194072271 seconds)
    (86/192) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 1.316423596 seconds)
    (87/192) benchmarking ("broadcast", identity, Float64, false)...
    done (took 1.345727736 seconds)
    (88/192) benchmarking ("perf_sum", Float64, true)...
    done (took 1.272747379 seconds)
    (89/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (false, true))...
    done (took 1.417138449 seconds)
    (90/192) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.172650249 seconds)
    (91/192) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 1.314441264 seconds)
    (92/192) benchmarking ("perf_countnothing", Bool, false)...
    done (took 1.227864464 seconds)
    (93/192) benchmarking ("broadcast", abs, Bool, true)...
    done (took 1.285266513 seconds)
    (94/192) benchmarking ("perf_sum", Complex{Float64}, false)...
    done (took 1.349175122 seconds)
    (95/192) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 1.295629714 seconds)
    (96/192) benchmarking ("broadcast", abs, Int64, false)...
    done (took 1.344688284 seconds)
    (97/192) benchmarking ("perf_sum", Int64, true)...
    done (took 1.270317104 seconds)
    (98/192) benchmarking ("map", identity, Int8, true)...
    done (took 1.3079615 seconds)
    (99/192) benchmarking ("map", *, Complex{Float64}, (false, false))...
    done (took 2.175477889 seconds)
    (100/192) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 1.291939958 seconds)
    (101/192) benchmarking ("map", abs, Complex{Float64}, false)...
    done (took 1.318202584 seconds)
    (102/192) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 1.294900203 seconds)
    (103/192) benchmarking ("map", identity, Bool, true)...
    done (took 1.308729437 seconds)
    (104/192) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 1.321318377 seconds)
    (105/192) benchmarking ("map", identity, BigFloat, true)...
    done (took 1.425294978 seconds)
    (106/192) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 1.339390699 seconds)
    (107/192) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.173698796 seconds)
    (108/192) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 2.196634108 seconds)
    (109/192) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 1.310007612 seconds)
    (110/192) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.176237719 seconds)
    (111/192) benchmarking ("map", *, BigInt, (false, true))...
    done (took 2.175865577 seconds)
    (112/192) benchmarking ("broadcast", abs, Float32, true)...
    done (took 1.350333179 seconds)
    (113/192) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 1.366269044 seconds)
    (114/192) benchmarking ("perf_countnothing", Int64, true)...
    done (took 1.235704965 seconds)
    (115/192) benchmarking ("map", identity, Int8, false)...
    done (took 1.220598447 seconds)
    (116/192) benchmarking ("map", identity, Bool, false)...
    done (took 1.224401166 seconds)
    (117/192) benchmarking ("map", abs, BigInt, true)...
    done (took 2.15561693 seconds)
    (118/192) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.18323364 seconds)
    (119/192) benchmarking ("map", abs, Bool, false)...
    done (took 1.222768576 seconds)
    (120/192) benchmarking ("perf_simplecopy", Complex{Float64}, false)...
    done (took 1.364800181 seconds)
    (121/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (false, false))...
    done (took 1.425560284 seconds)
    (122/192) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.17189622 seconds)
    (123/192) benchmarking ("perf_sum", Int8, false)...
    done (took 1.279472575 seconds)
    (124/192) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 1.30275996 seconds)
    (125/192) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 2.144629093 seconds)
    (126/192) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.194331607 seconds)
    (127/192) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 1.223513142 seconds)
    (128/192) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 2.172303505 seconds)
    (129/192) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.329169011 seconds)
    (130/192) benchmarking ("perf_countequals", "Float64")...
    done (took 1.286517889 seconds)
    (131/192) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 1.29154076 seconds)
    (132/192) benchmarking ("map", *, BigInt, (false, false))...
    done (took 2.174641274 seconds)
    (133/192) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.175311573 seconds)
    (134/192) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.178812996 seconds)
    (135/192) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 1.296777526 seconds)
    (136/192) benchmarking ("broadcast", identity, Int64, false)...
    done (took 1.347184909 seconds)
    (137/192) benchmarking ("perf_sum", Int64, false)...
    done (took 1.265545303 seconds)
    (138/192) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 1.300834629 seconds)
    (139/192) benchmarking ("broadcast", abs, Float64, false)...
    done (took 1.349464875 seconds)
    (140/192) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 2.164317919 seconds)
    (141/192) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 1.487766774 seconds)
    (142/192) benchmarking ("map", abs, BigFloat, true)...
    done (took 2.189456778 seconds)
    (143/192) benchmarking ("perf_sum", Complex{Float64}, true)...
    done (took 1.342251742 seconds)
    (144/192) benchmarking ("broadcast", identity, Bool, true)...
    done (took 1.292390846 seconds)
    (145/192) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 2.176933226 seconds)
    (146/192) benchmarking ("broadcast", identity, Float32, true)...
    done (took 1.348402352 seconds)
    (147/192) benchmarking ("broadcast", identity, Int64, true)...
    done (took 1.42186611 seconds)
    (148/192) benchmarking ("map", identity, Float64, false)...
    done (took 1.263062541 seconds)
    (149/192) benchmarking ("perf_countnothing", Int8, true)...
    done (took 1.236558879 seconds)
    (150/192) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 1.256021503 seconds)
    (151/192) benchmarking ("perf_countnothing", Float32, false)...
    done (took 1.237207952 seconds)
    (152/192) benchmarking ("map", identity, Int64, true)...
    done (took 1.388710715 seconds)
    (153/192) benchmarking ("broadcast", identity, Float64, true)...
    done (took 1.415198999 seconds)
    (154/192) benchmarking ("broadcast", abs, Complex{Float64}, true)...
    done (took 1.456702829 seconds)
    (155/192) benchmarking ("perf_countnothing", Bool, true)...
    done (took 1.238070569 seconds)
    (156/192) benchmarking ("perf_sum", BigInt, true)...
    done (took 2.216871463 seconds)
    (157/192) benchmarking ("perf_countnothing", Float32, true)...
    done (took 1.237137826 seconds)
    (158/192) benchmarking ("perf_countequals", "Complex{Float64}")...
    done (took 1.310139156 seconds)
    (159/192) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 1.413179352 seconds)
    (160/192) benchmarking ("perf_sum", Float32, true)...
    done (took 1.281238358 seconds)
    (161/192) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 1.31756234 seconds)
    (162/192) benchmarking ("perf_countnothing", Float64, true)...
    done (took 1.243799006 seconds)
    (163/192) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 1.4095093 seconds)
    (164/192) benchmarking ("broadcast", identity, Int8, false)...
    done (took 1.280617948 seconds)
    (165/192) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 2.200034243 seconds)
    (166/192) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 1.319231704 seconds)
    (167/192) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 1.348197947 seconds)
    (168/192) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 1.229646859 seconds)
    (169/192) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 1.351555774 seconds)
    (170/192) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 2.210648428 seconds)
    (171/192) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 2.181789206 seconds)
    (172/192) benchmarking ("map", abs, Float32, false)...
    done (took 1.257008148 seconds)
    (173/192) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 1.418390011 seconds)
    (174/192) benchmarking ("broadcast", abs, Bool, false)...
    done (took 1.26217623 seconds)
    (175/192) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 1.341184332 seconds)
    (176/192) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 2.200628063 seconds)
    (177/192) benchmarking ("broadcast", abs, Float64, true)...
    done (took 1.417269819 seconds)
    (178/192) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 2.178448014 seconds)
    (179/192) benchmarking ("map", abs, Float32, true)...
    done (took 1.368807374 seconds)
    (180/192) benchmarking ("perf_countequals", "BigFloat")...
    done (took 1.407612344 seconds)
    (181/192) benchmarking ("map", abs, Bool, true)...
    done (took 1.31512962 seconds)
    (182/192) benchmarking ("perf_countnothing", Complex{Float64}, false)...
    done (took 1.239100443 seconds)
    (183/192) benchmarking ("broadcast", identity, Complex{Float64}, false)...
    done (took 1.408440815 seconds)
    (184/192) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.176655415 seconds)
    (185/192) benchmarking ("map", abs, Int64, false)...
    done (took 1.270455787 seconds)
    (186/192) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 2.177595158 seconds)
    (187/192) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.182347115 seconds)
    (188/192) benchmarking ("broadcast", abs, Complex{Float64}, false)...
    done (took 1.404306029 seconds)
    (189/192) benchmarking ("broadcast", identity, Float32, false)...
    done (took 1.303103644 seconds)
    (190/192) benchmarking ("broadcast", abs, Int64, true)...
    done (took 1.420243841 seconds)
    (191/192) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 1.302132653 seconds)
    (192/192) benchmarking ("map", identity, BigFloat, false)...
    done (took 1.291859534 seconds)
  done (took 296.503193522 seconds)
done (took 297.586585605 seconds)
(14/20) benchmarking "simd"...
  (1/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.232150967 seconds)
  (2/72) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.304669851 seconds)
  (3/72) benchmarking ("axpy!", "Float32", 4095)...
  done (took 1.209712359 seconds)
  (4/72) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.20861167 seconds)
  (5/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.208890124 seconds)
  (6/72) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.131496575 seconds)
  (7/72) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.230544743 seconds)
  (8/72) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 1.211995322 seconds)
  (9/72) benchmarking ("inner", "Float64", 4096)...
  done (took 1.223765322 seconds)
  (10/72) benchmarking ("inner", "Float64", 4095)...
  done (took 1.223252104 seconds)
  (11/72) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.128634222 seconds)
  (12/72) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.219716896 seconds)
  (13/72) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.223983986 seconds)
  (14/72) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.21974572 seconds)
  (15/72) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.242052263 seconds)
  (16/72) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 1.208380895 seconds)
  (17/72) benchmarking ("axpy!", "Float32", 4096)...
  done (took 1.208931866 seconds)
  (18/72) benchmarking ("inner", "Int32", 4096)...
  done (took 1.21819768 seconds)
  (19/72) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.222224079 seconds)
  (20/72) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.225519131 seconds)
  (21/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.210739939 seconds)
  (22/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.210401535 seconds)
  (23/72) benchmarking ("inner", "Int64", 4095)...
  done (took 1.237174769 seconds)
  (24/72) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.208310001 seconds)
  (25/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.216620172 seconds)
  (26/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.217127583 seconds)
  (27/72) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.215454598 seconds)
  (28/72) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.209944255 seconds)
  (29/72) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.2125838 seconds)
  (30/72) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.226162875 seconds)
  (31/72) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.204806719 seconds)
  (32/72) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.211783332 seconds)
  (33/72) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.226539732 seconds)
  (34/72) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.220988211 seconds)
  (35/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.210950115 seconds)
  (36/72) benchmarking ("inner", "Int32", 4095)...
  done (took 1.219765654 seconds)
  (37/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.210282853 seconds)
  (38/72) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.306295738 seconds)
  (39/72) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.233610424 seconds)
  (40/72) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.22052077 seconds)
  (41/72) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.217477539 seconds)
  (42/72) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.225232287 seconds)
  (43/72) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.214326281 seconds)
  (44/72) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 1.214435461 seconds)
  (45/72) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.221345745 seconds)
  (46/72) benchmarking ("inner", "Int64", 4096)...
  done (took 1.236779759 seconds)
  (47/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.220160884 seconds)
  (48/72) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.225038345 seconds)
  (49/72) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.202363886 seconds)
  (50/72) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.112841948 seconds)
  (51/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.23099995 seconds)
  (52/72) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 1.220669867 seconds)
  (53/72) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.221922431 seconds)
  (54/72) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.101707835 seconds)
  (55/72) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.204535996 seconds)
  (56/72) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.223085734 seconds)
  (57/72) benchmarking ("inner", "Float32", 4095)...
  done (took 1.21977824 seconds)
  (58/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.230575739 seconds)
  (59/72) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.216382716 seconds)
  (60/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.212581678 seconds)
  (61/72) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.243182017 seconds)
  (62/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.228908545 seconds)
  (63/72) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 1.223886631 seconds)
  (64/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.217847153 seconds)
  (65/72) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.215349321 seconds)
  (66/72) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.227154411 seconds)
  (67/72) benchmarking ("inner", "Float32", 4096)...
  done (took 1.219098289 seconds)
  (68/72) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.230303608 seconds)
  (69/72) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.216719152 seconds)
  (70/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.212458154 seconds)
  (71/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.212029819 seconds)
  (72/72) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.219747902 seconds)
done (took 96.667180573 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.332792265 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 2.208462114 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.373907627 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.219744918 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.371181768 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.332771974 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.216741619 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.218263455 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.21855437 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.014680765 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.219160429 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 1.218186782 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 2.209242593 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.218802112 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.330214998 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.219027261 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.21753006 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.914444712 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.220986768 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.347140938 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.2123289 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.219673375 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.219419652 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.010544485 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 2.208933851 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.203847308 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.346539156 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.220941634 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.910024336 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.204788144 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.207757246 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.910744157 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.346617644 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 1.239451873 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 1.228333895 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.226365198 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.373777322 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 1.221982159 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.335404075 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.332508236 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.367841423 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 1.258946102 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.205907016 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.209738978 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.222630223 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.220369297 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.220242059 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.24892424 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 2.210741584 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 1.222230666 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.912129323 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 1.22933775 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 1.22882928 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.22222931 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.221750467 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 1.241782677 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.221441422 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.222310829 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.348772677 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.222287979 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.338610693 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.011853823 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.015852738 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.221431556 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.209009505 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.225555562 seconds)
  done (took 100.379049076 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.283633244 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.292543285 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.3180048 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 1.21467065 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.263262012 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.318643301 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 1.214909524 seconds)
  done (took 10.00250519 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 1.220018878 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.225187869 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.261938768 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.261471113 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.225068495 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.407227379 seconds)
    (7/97) benchmarking ("randn", "MersenneTwister", "Complex{Float32}")...
    done (took 1.223897255 seconds)
    (8/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.227697836 seconds)
    (9/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 1.223334216 seconds)
    (10/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.266936618 seconds)
    (11/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.226202775 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "Complex{Float16}")...
    done (took 1.225810379 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 1.232707066 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.215085092 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.261435554 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.227211668 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.334749893 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 1.214996044 seconds)
    (19/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.226279036 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.366260697 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 1.223155967 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 1.232582513 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.26620412 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.225491352 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.227847179 seconds)
    (26/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 1.22173231 seconds)
    (27/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float16}")...
    done (took 2.020942181 seconds)
    (28/97) benchmarking ("randn", "MersenneTwister", "Complex{Float64}")...
    done (took 1.22189408 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.225452472 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.223603041 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.223702897 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.280030217 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.225274614 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.214145141 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.224453209 seconds)
    (36/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float32}")...
    done (took 1.333711488 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.225160409 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.222957306 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.223622051 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.218005696 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.223208101 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.221419837 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.224895029 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.2246653 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.226023941 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.240443513 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.225724694 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.226325603 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.22509753 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.225846265 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.267157076 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.224048199 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.225107991 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 1.223632217 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.269785698 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 1.234177517 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.225987378 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.225797152 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.227149859 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.22397937 seconds)
    (61/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.369121885 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.262779934 seconds)
    (63/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.22703873 seconds)
    (64/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.264299748 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{Float32}")...
    done (took 1.226536727 seconds)
    (66/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.228421016 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.224550108 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.225552101 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float64}")...
    done (took 1.305533737 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.226582313 seconds)
    (71/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.263870994 seconds)
    (72/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.226921451 seconds)
    (73/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.398738885 seconds)
    (74/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.243472675 seconds)
    (75/97) benchmarking ("randn", "MersenneTwister", "Complex{Float16}")...
    done (took 1.227441107 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.220238004 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.222755945 seconds)
    (78/97) benchmarking ("rand", "MersenneTwister", "Complex{Float64}")...
    done (took 1.226557794 seconds)
    (79/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.214826641 seconds)
    (80/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.225979665 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.22721973 seconds)
    (82/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 1.219693996 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 1.226275842 seconds)
    (84/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 1.226470748 seconds)
    (85/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.228315271 seconds)
    (86/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float16}")...
    done (took 1.38113353 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float64}")...
    done (took 1.332184455 seconds)
    (88/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.226727863 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 1.235495833 seconds)
    (90/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 1.226142824 seconds)
    (91/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.226108562 seconds)
    (92/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.271645026 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.228868822 seconds)
    (94/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.228544714 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float32}")...
    done (took 1.26930283 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.338159915 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.271998617 seconds)
  done (took 126.662040927 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 1.233040709 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 1.231267785 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 1.223847612 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.249235544 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 1.221355911 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 1.221967014 seconds)
  done (took 8.483407841 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.224595465 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.228924132 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.22925229 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.228403798 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.230353576 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.230840966 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.230158208 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.222420278 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 1.230756297 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.232192742 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.233309476 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.231004798 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.232457074 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.232671259 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.232406058 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.229394378 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.229327456 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.231035995 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.23144735 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.231001491 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.219713954 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.232323694 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.232103896 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.222089898 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 1.234377127 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.230831388 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.247358487 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.230194587 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.232154888 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.22917517 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.234069163 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.234537485 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.222939793 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.224332354 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.232436785 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.224108889 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.233183384 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.232815989 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.230424544 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.236359512 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.233256819 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.230734665 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.233385208 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.234086781 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 1.224843061 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 1.224635064 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.235942115 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.245210495 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.231509498 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.233054814 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.235905462 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.230664592 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.234501062 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.23760227 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.226377451 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.228211381 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 1.23781966 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.233554123 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.234057964 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.226141504 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.234094549 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.237275628 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.227302693 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.234008387 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 1.235158464 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.236251298 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.225148006 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.236887729 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.235276492 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.235628362 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.234380657 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.234671542 seconds)
  done (took 90.781130179 seconds)
done (took 337.404265504 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 2.549010198 seconds)
  done (took 3.657161495 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 2.256336394 seconds)
  done (took 3.36731625 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 18.949604414 seconds)
  done (took 20.058412254 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 2.256625286 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 2.290330829 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 2.208646376 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 2.202941537 seconds)
  done (took 10.05283141 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 2.426648618 seconds)
  done (took 3.515215297 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 2.210729128 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 2.205265831 seconds)
  done (took 5.510033181 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 2.30146289 seconds)
  done (took 3.393572234 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 2.498054257 seconds)
  done (took 3.58960369 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 2.208281871 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 2.209669885 seconds)
  done (took 5.517084648 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 2.172976895 seconds)
  done (took 3.260831945 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 18.607964856 seconds)
  done (took 19.696817155 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 2.201248535 seconds)
  done (took 3.285672932 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 2.233353712 seconds)
  done (took 3.316719023 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 4.276131656 seconds)
  done (took 5.358230711 seconds)
done (took 94.687480689 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 2.189099723 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 2.187909164 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 2.189132717 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 2.187023504 seconds)
  done (took 9.83616931 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Array{Float32,1} generator")...
    done (took 1.266201757 seconds)
    (2/24) benchmarking ("all", "Array{Float32,1}")...
    done (took 1.258602198 seconds)
    (3/24) benchmarking ("any", "Array{Float64,1} generator")...
    done (took 1.264773715 seconds)
    (4/24) benchmarking ("any", "Array{Int64,1}")...
    done (took 1.254175626 seconds)
    (5/24) benchmarking ("any", "Array{Int16,1} generator")...
    done (took 1.24765423 seconds)
    (6/24) benchmarking ("any", "Array{Float32,1}")...
    done (took 1.263475212 seconds)
    (7/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.222924012 seconds)
    (8/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.218480764 seconds)
    (9/24) benchmarking ("all", "Array{Int64,1}")...
    done (took 1.249018557 seconds)
    (10/24) benchmarking ("all", "Array{Int16,1}")...
    done (took 1.24326361 seconds)
    (11/24) benchmarking ("all", "Array{Float64,1}")...
    done (took 1.257126088 seconds)
    (12/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.245477223 seconds)
    (13/24) benchmarking ("any", "Array{Float32,1} generator")...
    done (took 1.2549737 seconds)
    (14/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.217757175 seconds)
    (15/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.242484921 seconds)
    (16/24) benchmarking ("all", "Array{Float64,1} generator")...
    done (took 1.254723129 seconds)
    (17/24) benchmarking ("all", "Array{Int64,1} generator")...
    done (took 1.24483117 seconds)
    (18/24) benchmarking ("any", "Array{Float64,1}")...
    done (took 1.260792359 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.233887209 seconds)
    (20/24) benchmarking ("any", "Array{Int16,1}")...
    done (took 1.247449307 seconds)
    (21/24) benchmarking ("any", "BitArray")...
    done (took 1.190078142 seconds)
    (22/24) benchmarking ("any", "Array{Int64,1} generator")...
    done (took 1.249670669 seconds)
    (23/24) benchmarking ("all", "Array{Int16,1} generator")...
    done (took 1.24321657 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.188122866 seconds)
  done (took 30.902362179 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.679215515 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.252455895 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.335259298 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.234855512 seconds)
  done (took 6.57931853 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.297411817 seconds)
    (2/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Int16,1}")...
    done (took 1.298598168 seconds)
    (3/24) benchmarking ("==", "Array{Float64,1}")...
    done (took 1.316020187 seconds)
    (4/24) benchmarking ("isequal", "Array{Float64,1}")...
    done (took 1.350372509 seconds)
    (5/24) benchmarking ("==", "Array{Int64,1} == Array{Float32,1}")...
    done (took 1.387148054 seconds)
    (6/24) benchmarking ("==", "Array{Float32,1}")...
    done (took 1.314235723 seconds)
    (7/24) benchmarking ("==", "Array{Int64,1}")...
    done (took 1.218373555 seconds)
    (8/24) benchmarking ("==", "Array{Int64,1} == Array{Int64,1}")...
    done (took 1.217491353 seconds)
    (9/24) benchmarking ("==", "Array{Int16,1}")...
    done (took 1.198971893 seconds)
    (10/24) benchmarking ("==", "Array{Int64,1} == Array{Int16,1}")...
    done (took 1.295022888 seconds)
    (11/24) benchmarking ("isequal", "BitArray")...
    done (took 1.375394689 seconds)
    (12/24) benchmarking ("==", "Array{Int64,1} == UnitRange{Int64}")...
    done (took 1.292424832 seconds)
    (13/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Float64,1}")...
    done (took 1.508304509 seconds)
    (14/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Int64,1}")...
    done (took 1.193646752 seconds)
    (15/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Float32,1}")...
    done (took 1.509798538 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.194009642 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.192046974 seconds)
    (18/24) benchmarking ("isequal", "Array{Int16,1}")...
    done (took 1.300001339 seconds)
    (19/24) benchmarking ("isequal", "Array{Float32,1}")...
    done (took 1.340904904 seconds)
    (20/24) benchmarking ("==", "Array{Int64,1} == Array{Float64,1}")...
    done (took 1.372967769 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.189792286 seconds)
    (22/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.292562291 seconds)
    (23/24) benchmarking ("isequal", "Array{Int64,1}")...
    done (took 1.297375796 seconds)
    (24/24) benchmarking ("isequal", "Array{Int64,1} isequal UnitRange{Int64}")...
    done (took 1.293569879 seconds)
  done (took 32.323385379 seconds)
  (5/13) benchmarking "reductions"...
    (1/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norminf", "Int64")...
    done (took 1.2019827 seconds)
    (2/22) benchmarking ("maxabs", "Float64")...
    done (took 1.203384682 seconds)
    (3/22) benchmarking ("sumabs", "Float64")...
    done (took 1.188990647 seconds)
    (4/22) benchmarking ("LinearAlgebra.norm", "Int64")...
    done (took 1.201108854 seconds)
    (5/22) benchmarking ("sumabs", "Int64")...
    done (took 1.187947168 seconds)
    (6/22) benchmarking ("sumabs2", "Float64")...
    done (took 1.19083276 seconds)
    (7/22) benchmarking ("sumabs2", "Int64")...
    done (took 1.19026232 seconds)
    (8/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_mapreduce", "Float64")...
    done (took 1.193041445 seconds)
    (9/22) benchmarking ("sum", "Int64")...
    done (took 1.187070527 seconds)
    (10/22) benchmarking ("mean", "Int64")...
    done (took 1.181785688 seconds)
    (11/22) benchmarking ("mean", "Float64")...
    done (took 1.183186769 seconds)
    (12/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norminf", "Float64")...
    done (took 1.195958484 seconds)
    (13/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_mapreduce", "Int64")...
    done (took 1.183571259 seconds)
    (14/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norm1", "Float64")...
    done (took 1.184251276 seconds)
    (15/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norm1", "Int64")...
    done (took 1.188505367 seconds)
    (16/22) benchmarking ("LinearAlgebra.norm", "Float64")...
    done (took 1.182583614 seconds)
    (17/22) benchmarking ("var", "Float64")...
    done (took 1.184551345 seconds)
    (18/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_reduce", "Float64")...
    done (took 1.187688565 seconds)
    (19/22) benchmarking ("var", "Int64")...
    done (took 1.187669191 seconds)
    (20/22) benchmarking ("sum", "Float64")...
    done (took 1.179866745 seconds)
    (21/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_reduce", "Int64")...
    done (took 1.177816343 seconds)
    (22/22) benchmarking ("maxabs", "Int64")...
    done (took 1.183244062 seconds)
  done (took 27.220245284 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 2.165113076 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 2.161246601 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.512777533 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.416934693 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 2.160577352 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 2.16232122 seconds)
  done (took 12.648346418 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 1.229921974 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 1.353255307 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.17283511 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 1.46031904 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.548698544 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 1.169403105 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 1.169258201 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 1.382644344 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 1.631393689 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 1.612902386 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 1.22131301 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 1.232039022 seconds)
  done (took 17.256647013 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 2.171058191 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 2.165890906 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 2.171496924 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.183471645 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.21284015 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.177325136 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 1.174865003 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 2.160808699 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 1.21562967 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.221571041 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.177698963 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.215799411 seconds)
  done (took 19.32075448 seconds)
  (9/13) benchmarking "index"...
    (1/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.254587662 seconds)
    (2/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.173340795 seconds)
    (3/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 2.173900446 seconds)
    (4/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.221776411 seconds)
    (5/481) benchmarking ("sumcartesian", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.1725815 seconds)
    (6/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.172326453 seconds)
    (7/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.231985013 seconds)
    (8/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.840466001 seconds)
    (9/481) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.179039332 seconds)
    (10/481) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.453335278 seconds)
    (11/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.173062157 seconds)
    (12/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.257564816 seconds)
    (13/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.422593849 seconds)
    (14/481) benchmarking ("sumcolon", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.174677914 seconds)
    (15/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.196769487 seconds)
    (16/481) benchmarking ("sumrange", "BitArray{2}")...
    done (took 2.069428688 seconds)
    (17/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.404273499 seconds)
    (18/481) benchmarking ("sumrange", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.610354509 seconds)
    (19/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.187605348 seconds)
    (20/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.181107307 seconds)
    (21/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.229054331 seconds)
    (22/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.185590522 seconds)
    (23/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.192514396 seconds)
    (24/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.354800547 seconds)
    (25/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.180988128 seconds)
    (26/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.183208418 seconds)
    (27/481) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.47899087 seconds)
    (28/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.182526495 seconds)
    (29/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.418911338 seconds)
    (30/481) benchmarking ("sumrange_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.397198797 seconds)
    (31/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.399229878 seconds)
    (32/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.181007056 seconds)
    (33/481) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.459168815 seconds)
    (34/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.778590387 seconds)
    (35/481) benchmarking ("sumelt", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.283112244 seconds)
    (36/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.356426611 seconds)
    (37/481) benchmarking ("mapr_access", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.188693853 seconds)
    (38/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.185207826 seconds)
    (39/481) benchmarking ("sumlinear_view", "BitArray{2}")...
    done (took 2.156322963 seconds)
    (40/481) benchmarking ("sumlogical", "Array{Float32,2}")...
    done (took 2.206248743 seconds)
    (41/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.194827444 seconds)
    (42/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.179400217 seconds)
    (43/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.389253709 seconds)
    (44/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.188268174 seconds)
    (45/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.183535315 seconds)
    (46/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.19117947 seconds)
    (47/481) benchmarking ("sumvector_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.833882051 seconds)
    (48/481) benchmarking ("sumvector", "100000:-1:1")...
    done (took 1.18971028 seconds)
    (49/481) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 2.182273351 seconds)
    (50/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.184736028 seconds)
    (51/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.389587444 seconds)
    (52/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.266623815 seconds)
    (53/481) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.187551414 seconds)
    (54/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.180608236 seconds)
    (55/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.219052629 seconds)
    (56/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.178345387 seconds)
    (57/481) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 1.184416107 seconds)
    (58/481) benchmarking ("mapr_access", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.301078455 seconds)
    (59/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.822874983 seconds)
    (60/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.180773696 seconds)
    (61/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.198087009 seconds)
    (62/481) benchmarking ("sumeach", "Array{Float32,2}")...
    done (took 2.181118796 seconds)
    (63/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.172814718 seconds)
    (64/481) benchmarking ("sumlogical", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.203078509 seconds)
    (65/481) benchmarking ("sumvector", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.769318646 seconds)
    (66/481) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.193024711 seconds)
    (67/481) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.19055245 seconds)
    (68/481) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.190291489 seconds)
    (69/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.183429061 seconds)
    (70/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.18378416 seconds)
    (71/481) benchmarking ("sumeach", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.204624031 seconds)
    (72/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.178725925 seconds)
    (73/481) benchmarking ("sum", "3dsubarray")...
    done (took 1.201071429 seconds)
    (74/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.184069979 seconds)
    (75/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.902040882 seconds)
    (76/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.188659996 seconds)
    (77/481) benchmarking ("sumeach_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.185336794 seconds)
    (78/481) benchmarking ("sumcolon", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.660228382 seconds)
    (79/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.189228712 seconds)
    (80/481) benchmarking ("sumlinear", "Array{Float32,2}")...
    done (took 2.186559252 seconds)
    (81/481) benchmarking ("sumeach_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.408910941 seconds)
    (82/481) benchmarking ("sumcartesian", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.180710346 seconds)
    (83/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.182954341 seconds)
    (84/481) benchmarking "5d"...
    done (took 2.188192346 seconds)
    (85/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.172520617 seconds)
    (86/481) benchmarking ("sumlogical", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.82704596 seconds)
    (87/481) benchmarking ("sumlinear", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.179259982 seconds)
    (88/481) benchmarking ("sumlogical", "BitArray{2}")...
    done (took 2.140871299 seconds)
    (89/481) benchmarking ("mapr_access", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.210756524 seconds)
    (90/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.838383234 seconds)
    (91/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.344191634 seconds)
    (92/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.193011258 seconds)
    (93/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.200363652 seconds)
    (94/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.389913064 seconds)
    (95/481) benchmarking ("sumelt", "BitArray{2}")...
    done (took 2.138755535 seconds)
    (96/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.170617524 seconds)
    (97/481) benchmarking ("sumlogical_view", "Array{Int32,2}")...
    done (took 2.169506587 seconds)
    (98/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.189139167 seconds)
    (99/481) benchmarking ("sumeach", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.191259022 seconds)
    (100/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.815207512 seconds)
    (101/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.168487758 seconds)
    (102/481) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.175157888 seconds)
    (103/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.415333222 seconds)
    (104/481) benchmarking ("sumlinear", "Array{Int32,2}")...
    done (took 1.379128886 seconds)
    (105/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.169871243 seconds)
    (106/481) benchmarking ("sumcolon", "BitArray{2}")...
    done (took 2.051474334 seconds)
    (107/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.584840959 seconds)
    (108/481) benchmarking ("sumrange", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.175231937 seconds)
    (109/481) benchmarking ("sumcartesian", "Array{Float64,3}")...
    done (took 1.197328441 seconds)
    (110/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.170029209 seconds)
    (111/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.35981232 seconds)
    (112/481) benchmarking ("sumvector", "Array{Float32,2}")...
    done (took 1.73195247 seconds)
    (113/481) benchmarking ("sumrange_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.393970822 seconds)
    (114/481) benchmarking ("sumlogical", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.189353825 seconds)
    (115/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.208055803 seconds)
    (116/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.170022822 seconds)
    (117/481) benchmarking ("sumlogical", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.882263324 seconds)
    (118/481) benchmarking ("sumrange", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.173207949 seconds)
    (119/481) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.180490508 seconds)
    (120/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.174401997 seconds)
    (121/481) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.427302822 seconds)
    (122/481) benchmarking ("sumvector", "BitArray{2}")...
    done (took 1.912341845 seconds)
    (123/481) benchmarking ("sumcartesian", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.17134834 seconds)
    (124/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.24417313 seconds)
    (125/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.18215065 seconds)
    (126/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.172012485 seconds)
    (127/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.171666333 seconds)
    (128/481) benchmarking ("sumelt", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.177870592 seconds)
    (129/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.170887994 seconds)
    (130/481) benchmarking ("sumcolon_view", "BitArray{2}")...
    done (took 1.325132885 seconds)
    (131/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.175607415 seconds)
    (132/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.387999685 seconds)
    (133/481) benchmarking "ind2sub"...
    done (took 2.179597791 seconds)
    (134/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.171606896 seconds)
    (135/481) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 2.177976279 seconds)
    (136/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.186637119 seconds)
    (137/481) benchmarking ("sumcartesian", "Array{Float32,2}")...
    done (took 2.176247821 seconds)
    (138/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.393868406 seconds)
    (139/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.174701152 seconds)
    (140/481) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.451679154 seconds)
    (141/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.173345133 seconds)
    (142/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.172603134 seconds)
    (143/481) benchmarking ("sumeach", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.1730054 seconds)
    (144/481) benchmarking ("sumcartesian_view", "Array{Int32,2}")...
    done (took 1.388946113 seconds)
    (145/481) benchmarking ("sumlinear_view", "Array{Float64,3}")...
    done (took 2.175883847 seconds)
    (146/481) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 1.183784993 seconds)
    (147/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.511957312 seconds)
    (148/481) benchmarking ("sumcolon", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.182453738 seconds)
    (149/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.186681005 seconds)
    (150/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.39102569 seconds)
    (151/481) benchmarking ("sumelt", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.209873313 seconds)
    (152/481) benchmarking ("sumelt", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.285008329 seconds)
    (153/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.20334066 seconds)
    (154/481) benchmarking ("sumrange", "Array{Int32,2}")...
    done (took 2.183442718 seconds)
    (155/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.423318421 seconds)
    (156/481) benchmarking ("sumelt", "1:100000")...
    done (took 1.178679506 seconds)
    (157/481) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.179479531 seconds)
    (158/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.172697871 seconds)
    (159/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.179213674 seconds)
    (160/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.175470123 seconds)
    (161/481) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 1.18164513 seconds)
    (162/481) benchmarking ("mapr_access", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.178571742 seconds)
    (163/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.736931247 seconds)
    (164/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.152947881 seconds)
    (165/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.181280327 seconds)
    (166/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.175265042 seconds)
    (167/481) benchmarking ("sumlinear", "Array{Float64,3}")...
    done (took 1.189014873 seconds)
    (168/481) benchmarking ("sumeach", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.247124924 seconds)
    (169/481) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 1.179939594 seconds)
    (170/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.349390472 seconds)
    (171/481) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.180747465 seconds)
    (172/481) benchmarking ("mapr_access", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.164743658 seconds)
    (173/481) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.181457108 seconds)
    (174/481) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 2.183863368 seconds)
    (175/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.399524838 seconds)
    (176/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.384870664 seconds)
    (177/481) benchmarking ("sumlogical", "Array{Int32,2}")...
    done (took 2.180203841 seconds)
    (178/481) benchmarking ("sumlinear", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.367219201 seconds)
    (179/481) benchmarking ("sumvector_view", "Array{Int32,2}")...
    done (took 1.591152697 seconds)
    (180/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.733706289 seconds)
    (181/481) benchmarking ("sumeach_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.195369035 seconds)
    (182/481) benchmarking ("sumelt_boundscheck", "Array{Float32,2}")...
    done (took 2.173442997 seconds)
    (183/481) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 2.175020768 seconds)
    (184/481) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 2.174849595 seconds)
    (185/481) benchmarking ("sumlinear", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.176031726 seconds)
    (186/481) benchmarking ("sumeach", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.17485036 seconds)
    (187/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.176525747 seconds)
    (188/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.352222566 seconds)
    (189/481) benchmarking ("sumrange_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.397152679 seconds)
    (190/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.174430885 seconds)
    (191/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.740008759 seconds)
    (192/481) benchmarking ("sumlinear", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.183811059 seconds)
    (193/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.175046719 seconds)
    (194/481) benchmarking ("sumeach", "1:100000")...
    done (took 1.187619113 seconds)
    (195/481) benchmarking ("sumrange_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.388194921 seconds)
    (196/481) benchmarking ("sumvector", "1:100000")...
    done (took 1.188624892 seconds)
    (197/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.17565766 seconds)
    (198/481) benchmarking ("sumlogical", "1:100000")...
    done (took 2.175586047 seconds)
    (199/481) benchmarking ("sumlogical", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.179988941 seconds)
    (200/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.19489635 seconds)
    (201/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.395772884 seconds)
    (202/481) benchmarking ("sumlinear", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.401797957 seconds)
    (203/481) benchmarking ("sumelt_boundscheck", "Array{Float64,3}")...
    done (took 1.191491469 seconds)
    (204/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.175644704 seconds)
    (205/481) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.694324915 seconds)
    (206/481) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.18328371 seconds)
    (207/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.176504123 seconds)
    (208/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.176803308 seconds)
    (209/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.201236952 seconds)
    (210/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.177223823 seconds)
    (211/481) benchmarking ("sumvector_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.958099386 seconds)
    (212/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.514625449 seconds)
    (213/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.184904682 seconds)
    (214/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.396185086 seconds)
    (215/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.182940687 seconds)
    (216/481) benchmarking ("sumelt", "Array{Float64,3}")...
    done (took 1.196348303 seconds)
    (217/481) benchmarking "4d"...
    done (took 2.176306896 seconds)
    (218/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.176493792 seconds)
    (219/481) benchmarking ("sumrange", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.186742207 seconds)
    (220/481) benchmarking ("sumeach_view", "Array{Int32,2}")...
    done (took 2.199105067 seconds)
    (221/481) benchmarking ("sumeach", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.188007035 seconds)
    (222/481) benchmarking ("sumcolon_view", "Array{Float32,2}")...
    done (took 1.355394105 seconds)
    (223/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.195179162 seconds)
    (224/481) benchmarking ("sumelt", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.181972215 seconds)
    (225/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.821185487 seconds)
    (226/481) benchmarking ("sumvector", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.913025002 seconds)
    (227/481) benchmarking ("sumvector", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.690433397 seconds)
    (228/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.182922448 seconds)
    (229/481) benchmarking ("sumrange", "Array{Float32,2}")...
    done (took 2.178776586 seconds)
    (230/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.183562838 seconds)
    (231/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.827866073 seconds)
    (232/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.177407971 seconds)
    (233/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.177010962 seconds)
    (234/481) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.397780227 seconds)
    (235/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.830839851 seconds)
    (236/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.178827308 seconds)
    (237/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.594573867 seconds)
    (238/481) benchmarking ("sumeach_view", "Array{Float64,3}")...
    done (took 2.179227281 seconds)
    (239/481) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.853090704 seconds)
    (240/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.393199131 seconds)
    (241/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.408215064 seconds)
    (242/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.178360851 seconds)
    (243/481) benchmarking ("sumlogical_view", "Array{Float32,2}")...
    done (took 2.187070504 seconds)
    (244/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.396118953 seconds)
    (245/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.395896682 seconds)
    (246/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.204768317 seconds)
    (247/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.186427948 seconds)
    (248/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.18330718 seconds)
    (249/481) benchmarking ("sumelt_boundscheck", "BitArray{2}")...
    done (took 2.150205492 seconds)
    (250/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.670059048 seconds)
    (251/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.187097845 seconds)
    (252/481) benchmarking ("sumelt_boundscheck", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.3595717 seconds)
    (253/481) benchmarking ("sumvector_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.857940877 seconds)
    (254/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.183141935 seconds)
    (255/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.181980583 seconds)
    (256/481) benchmarking ("mapr_access", "BitArray{2}")...
    done (took 2.215080321 seconds)
    (257/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 2.18582893 seconds)
    (258/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.51827068 seconds)
    (259/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.183364445 seconds)
    (260/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.180143573 seconds)
    (261/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.184297288 seconds)
    (262/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.184850529 seconds)
    (263/481) benchmarking ("sumvector_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.980025414 seconds)
    (264/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.186548462 seconds)
    (265/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.179054957 seconds)
    (266/481) benchmarking ("sumvector", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.776024666 seconds)
    (267/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.19257677 seconds)
    (268/481) benchmarking ("sumvector_view", "Array{Float32,2}")...
    done (took 1.604914911 seconds)
    (269/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.180705132 seconds)
    (270/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.358982281 seconds)
    (271/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.398663408 seconds)
    (272/481) benchmarking ("sumrange_view", "BitArray{2}")...
    done (took 1.376021703 seconds)
    (273/481) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.187330586 seconds)
    (274/481) benchmarking ("sumcolon", "1:100000")...
    done (took 2.19348961 seconds)
    (275/481) benchmarking ("sumcartesian_view", "Array{Float32,2}")...
    done (took 1.429321255 seconds)
    (276/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.395422119 seconds)
    (277/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.186699201 seconds)
    (278/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.189427721 seconds)
    (279/481) benchmarking ("sumvector", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.69585167 seconds)
    (280/481) benchmarking "3d"...
    done (took 2.043786773 seconds)
    (281/481) benchmarking ("sum", "3darray")...
    done (took 1.188290857 seconds)
    (282/481) benchmarking ("sumlinear", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.180928683 seconds)
    (283/481) benchmarking ("sumlogical", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.887948633 seconds)
    (284/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.182675092 seconds)
    (285/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.42552314 seconds)
    (286/481) benchmarking ("sumcolon", "Array{Int32,2}")...
    done (took 2.198022309 seconds)
    (287/481) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.186195103 seconds)
    (288/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.193140237 seconds)
    (289/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.181787768 seconds)
    (290/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.182138957 seconds)
    (291/481) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 2.181255772 seconds)
    (292/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.188799604 seconds)
    (293/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.155608146 seconds)
    (294/481) benchmarking ("sumcolon", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.609929152 seconds)
    (295/481) benchmarking ("mapr_access", "Array{Float32,2}")...
    done (took 2.192512796 seconds)
    (296/481) benchmarking ("mapr_access", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.182580634 seconds)
    (297/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.212854494 seconds)
    (298/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.186602308 seconds)
    (299/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.427539484 seconds)
    (300/481) benchmarking ("sumeach", "Array{Float64,3}")...
    done (took 1.198908668 seconds)
    (301/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.745200528 seconds)
    (302/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.414043989 seconds)
    (303/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.175493536 seconds)
    (304/481) benchmarking ("sumelt", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.219746698 seconds)
    (305/481) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.189367085 seconds)
    (306/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.182707254 seconds)
    (307/481) benchmarking ("sumcartesian_view", "BitArray{2}")...
    done (took 2.157550973 seconds)
    (308/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.181598316 seconds)
    (309/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.183265329 seconds)
    (310/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.17362287 seconds)
    (311/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.402468102 seconds)
    (312/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 2.189447722 seconds)
    (313/481) benchmarking ("sumeach", "BitArray{2}")...
    done (took 2.154235064 seconds)
    (314/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.248548451 seconds)
    (315/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.392823575 seconds)
    (316/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.183270044 seconds)
    (317/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.183524941 seconds)
    (318/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.386229917 seconds)
    (319/481) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 2.189290026 seconds)
    (320/481) benchmarking ("sumeach_view", "Array{Float32,2}")...
    done (took 2.189098151 seconds)
    (321/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.929139704 seconds)
    (322/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.218546521 seconds)
    (323/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.191723118 seconds)
    (324/481) benchmarking ("sumcartesian", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.187713098 seconds)
    (325/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.192068457 seconds)
    (326/481) benchmarking ("mapr_access", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.224730793 seconds)
    (327/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.257555634 seconds)
    (328/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.360180568 seconds)
    (329/481) benchmarking ("sumrange_view", "Array{Float32,2}")...
    done (took 1.40480338 seconds)
    (330/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.406607443 seconds)
    (331/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.531540773 seconds)
    (332/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.196397168 seconds)
    (333/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.188902793 seconds)
    (334/481) benchmarking ("sumcartesian_view", "Array{Float64,3}")...
    done (took 1.199855312 seconds)
    (335/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.266019524 seconds)
    (336/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.184167777 seconds)
    (337/481) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.189860555 seconds)
    (338/481) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.189505804 seconds)
    (339/481) benchmarking ("sumvector", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.747991619 seconds)
    (340/481) benchmarking ("sumvector", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.929477334 seconds)
    (341/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.760948956 seconds)
    (342/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.407730308 seconds)
    (343/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.191198126 seconds)
    (344/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.196426042 seconds)
    (345/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.184400628 seconds)
    (346/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.427978523 seconds)
    (347/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.185687555 seconds)
    (348/481) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.461963973 seconds)
    (349/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.186788238 seconds)
    (350/481) benchmarking ("mapr_access", "Array{Int32,2}")...
    done (took 2.177222865 seconds)
    (351/481) benchmarking ("sumlinear", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.212645191 seconds)
    (352/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.185971607 seconds)
    (353/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.199396407 seconds)
    (354/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.401753805 seconds)
    (355/481) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.46235679 seconds)
    (356/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.18538695 seconds)
    (357/481) benchmarking ("sumcolon", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.194277197 seconds)
    (358/481) benchmarking ("sumelt", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.191222883 seconds)
    (359/481) benchmarking ("sumcartesian", "Array{Int32,2}")...
    done (took 2.186910876 seconds)
    (360/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.405153428 seconds)
    (361/481) benchmarking ("sumeach", "Array{Int32,2}")...
    done (took 1.402724813 seconds)
    (362/481) benchmarking ("sumrange", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.617413873 seconds)
    (363/481) benchmarking ("sumcolon", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.669891409 seconds)
    (364/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.188237679 seconds)
    (365/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.195464945 seconds)
    (366/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.847871053 seconds)
    (367/481) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.464367081 seconds)
    (368/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.186259913 seconds)
    (369/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.187065105 seconds)
    (370/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.187513396 seconds)
    (371/481) benchmarking ("sumlinear_view", "Array{Float32,2}")...
    done (took 2.204247553 seconds)
    (372/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 2.207563582 seconds)
    (373/481) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.196191919 seconds)
    (374/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.197015281 seconds)
    (375/481) benchmarking ("sumlinear", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.412022975 seconds)
    (376/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.402686751 seconds)
    (377/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.791807526 seconds)
    (378/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.407454295 seconds)
    (379/481) benchmarking "sub2ind"...
    done (took 2.377105475 seconds)
    (380/481) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.187657075 seconds)
    (381/481) benchmarking ("sumlogical", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.188198877 seconds)
    (382/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.43417658 seconds)
    (383/481) benchmarking ("sumlinear_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.024779404 seconds)
    (384/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.37636594 seconds)
    (385/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.764760515 seconds)
    (386/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.848523255 seconds)
    (387/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.444570797 seconds)
    (388/481) benchmarking ("sumeach", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.26343128 seconds)
    (389/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.367914879 seconds)
    (390/481) benchmarking "6d"...
    done (took 2.193150934 seconds)
    (391/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.425530289 seconds)
    (392/481) benchmarking ("sumrange", "1:100000")...
    done (took 2.196003246 seconds)
    (393/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.191506534 seconds)
    (394/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.189457069 seconds)
    (395/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.188671523 seconds)
    (396/481) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 2.188062931 seconds)
    (397/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.40299088 seconds)
    (398/481) benchmarking ("sumvector", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.763565434 seconds)
    (399/481) benchmarking ("sumeach_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.442723332 seconds)
    (400/481) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 1.195011188 seconds)
    (401/481) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.198368041 seconds)
    (402/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.223853977 seconds)
    (403/481) benchmarking ("sumcolon_view", "Array{Int32,2}")...
    done (took 1.367698169 seconds)
    (404/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.41391873 seconds)
    (405/481) benchmarking ("sumlogical", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.848090189 seconds)
    (406/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.408335855 seconds)
    (407/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.413330687 seconds)
    (408/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.19751404 seconds)
    (409/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.190775675 seconds)
    (410/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.762477526 seconds)
    (411/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.412955815 seconds)
    (412/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.193296043 seconds)
    (413/481) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.196601774 seconds)
    (414/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.379325368 seconds)
    (415/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.194470296 seconds)
    (416/481) benchmarking ("sumelt", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.226179926 seconds)
    (417/481) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.064414296 seconds)
    (418/481) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 2.191166276 seconds)
    (419/481) benchmarking ("sumrange", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.674003309 seconds)
    (420/481) benchmarking ("sumelt_boundscheck", "Array{Int32,2}")...
    done (took 1.402593315 seconds)
    (421/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.211661101 seconds)
    (422/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.195722149 seconds)
    (423/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.860545686 seconds)
    (424/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.763040682 seconds)
    (425/481) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.194385807 seconds)
    (426/481) benchmarking ("sumcolon", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.624112235 seconds)
    (427/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.19309291 seconds)
    (428/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.200618268 seconds)
    (429/481) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.471531045 seconds)
    (430/481) benchmarking ("sumvector_view", "1:100000")...
    done (took 1.198932151 seconds)
    (431/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.194311911 seconds)
    (432/481) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.476986811 seconds)
    (433/481) benchmarking ("sumlinear", "1:100000")...
    done (took 1.196433053 seconds)
    (434/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.194028318 seconds)
    (435/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.37625776 seconds)
    (436/481) benchmarking ("sumvector", "Array{Int32,2}")...
    done (took 1.760810615 seconds)
    (437/481) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.872426794 seconds)
    (438/481) benchmarking ("sumlinear_view", "Array{Int32,2}")...
    done (took 2.216549623 seconds)
    (439/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.197956218 seconds)
    (440/481) benchmarking ("sumelt", "Array{Float32,2}")...
    done (took 2.19355643 seconds)
    (441/481) benchmarking ("sumeach", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.193949354 seconds)
    (442/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.267759537 seconds)
    (443/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.19231976 seconds)
    (444/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.202010981 seconds)
    (445/481) benchmarking ("sumvector_view", "BitArray{2}")...
    done (took 1.538762628 seconds)
    (446/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.19617117 seconds)
    (447/481) benchmarking ("sumeach_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.193777999 seconds)
    (448/481) benchmarking ("sumcartesian_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.206134284 seconds)
    (449/481) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.200552713 seconds)
    (450/481) benchmarking ("sumrange", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.198631214 seconds)
    (451/481) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 2.197347294 seconds)
    (452/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.193062533 seconds)
    (453/481) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 1.20109617 seconds)
    (454/481) benchmarking ("sumeach_view", "BitArray{2}")...
    done (took 2.182258634 seconds)
    (455/481) benchmarking ("sumlogical_view", "BitArray{2}")...
    done (took 2.168162812 seconds)
    (456/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.194409727 seconds)
    (457/481) benchmarking ("mapr_access", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.313028284 seconds)
    (458/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.691514833 seconds)
    (459/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.195282491 seconds)
    (460/481) benchmarking "2d"...
    done (took 1.807704641 seconds)
    (461/481) benchmarking "7d"...
    done (took 1.532098063 seconds)
    (462/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.440028105 seconds)
    (463/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.193377306 seconds)
    (464/481) benchmarking ("sumcartesian", "BitArray{2}")...
    done (took 2.169482396 seconds)
    (465/481) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.199181554 seconds)
    (466/481) benchmarking ("sumlinear", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.194668602 seconds)
    (467/481) benchmarking ("sumeach", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.194743171 seconds)
    (468/481) benchmarking ("sumelt", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.194499365 seconds)
    (469/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.204718536 seconds)
    (470/481) benchmarking ("sumrange", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.682925371 seconds)
    (471/481) benchmarking ("sumcolon", "Array{Float32,2}")...
    done (took 2.20016249 seconds)
    (472/481) benchmarking ("sumrange_view", "Array{Int32,2}")...
    done (took 1.413891931 seconds)
    (473/481) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.205119391 seconds)
    (474/481) benchmarking ("sumelt", "Array{Int32,2}")...
    done (took 1.404106344 seconds)
    (475/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.406433694 seconds)
    (476/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.195921579 seconds)
    (477/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.399600022 seconds)
    (478/481) benchmarking ("sumcolon", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.206325183 seconds)
    (479/481) benchmarking ("sumcartesian", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.21867334 seconds)
    (480/481) benchmarking ("sumlinear", "BitArray{2}")...
    done (took 2.164215399 seconds)
    (481/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.195003706 seconds)
  done (took 883.948234975 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("collect", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 2.20744856 seconds)
    (2/8) benchmarking ("collect", "Array{Float64,1}")...
    done (took 2.206467395 seconds)
    (3/8) benchmarking ("comprehension_collect", "Array{Float64,1}")...
    done (took 2.188963456 seconds)
    (4/8) benchmarking ("comprehension_iteration", "Array{Float64,1}")...
    done (took 2.197072522 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 2.210530796 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 2.267329835 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Array{Float64,1}")...
    done (took 2.224585593 seconds)
    (8/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 2.199677726 seconds)
  done (took 18.788202111 seconds)
  (11/13) benchmarking "cat"...
    (1/16) benchmarking ("hvcat", 500)...
    done (took 2.19142431 seconds)
    (2/16) benchmarking ("hcat_setind", 5)...
    done (took 1.194512728 seconds)
    (3/16) benchmarking ("hvcat_setind", 500)...
    done (took 2.19053364 seconds)
    (4/16) benchmarking ("hvcat", 5)...
    done (took 1.194364484 seconds)
    (5/16) benchmarking ("hcat", 500)...
    done (took 2.198332972 seconds)
    (6/16) benchmarking ("catnd_setind", 5)...
    done (took 1.682717391 seconds)
    (7/16) benchmarking ("vcat_setind", 500)...
    done (took 2.185798471 seconds)
    (8/16) benchmarking ("hvcat_setind", 5)...
    done (took 1.195714583 seconds)
    (9/16) benchmarking ("vcat", 5)...
    done (took 1.209494105 seconds)
    (10/16) benchmarking ("catnd_setind", 500)...
    done (took 2.188386843 seconds)
    (11/16) benchmarking ("vcat", 500)...
    done (took 2.190806723 seconds)
    (12/16) benchmarking ("catnd", 5)...
    done (took 1.810711039 seconds)
    (13/16) benchmarking ("vcat_setind", 5)...
    done (took 1.199836055 seconds)
    (14/16) benchmarking ("hcat_setind", 500)...
    done (took 2.199691757 seconds)
    (15/16) benchmarking ("catnd", 500)...
    done (took 2.201432557 seconds)
    (16/16) benchmarking ("hcat", 5)...
    done (took 1.200734174 seconds)
  done (took 29.322260388 seconds)
  (12/13) benchmarking "subarray"...
    (1/8) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.668606795 seconds)
    (2/8) benchmarking ("lucompletepivSub!", 500)...
    done (took 2.41749885 seconds)
    (3/8) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.289568422 seconds)
    (4/8) benchmarking ("lucompletepivCopy!", 250)...
    done (took 2.250243605 seconds)
    (5/8) benchmarking ("lucompletepivSub!", 250)...
    done (took 2.208582842 seconds)
    (6/8) benchmarking ("lucompletepivCopy!", 100)...
    done (took 2.188591456 seconds)
    (7/8) benchmarking ("lucompletepivCopy!", 500)...
    done (took 2.205668532 seconds)
    (8/8) benchmarking ("lucompletepivSub!", 100)...
    done (took 2.195477258 seconds)
  done (took 23.512853082 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 1.202270555 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 1.201063613 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.201391119 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 1.201649145 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 1.202100715 seconds)
  done (took 7.0960287 seconds)
done (took 1119.840134144 seconds)
(18/20) benchmarking "misc"...
  (1/6) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.203178493 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.202577494 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.203695023 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.203834281 seconds)
  done (took 5.901860636 seconds)
  (2/6) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 2.168330192 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 2.168976953 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 2.167693098 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 1.184565581 seconds)
  done (took 8.777265034 seconds)
  (3/6) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 1.786477579 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 1.66159994 seconds)
  done (took 4.536925768 seconds)
  (4/6) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.718775386 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.714545965 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.709350452 seconds)
  done (took 6.231404299 seconds)
  (5/6) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.466615581 seconds)
  done (took 2.556803513 seconds)
  (6/6) benchmarking "parse"...
    (1/3) benchmarking "Int"...
    done (took 2.166308352 seconds)
    (2/3) benchmarking "Float64"...
    done (took 2.189443067 seconds)
    (3/3) benchmarking "DateTime"...
    done (took 1.90006964 seconds)
  done (took 7.345620274 seconds)
done (took 36.438539691 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.189339878 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 2.949407829 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 2.345633867 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.193724457 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 2.349468241 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 2.344117157 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 2.439476957 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.188489678 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.190809174 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.188904619 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.193450532 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 2.350211529 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 2.427881749 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 2.949723185 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 2.428769639 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 2.953917491 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 2.350324751 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.191648479 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 2.199693881 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 2.200590188 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 2.440568417 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.199021142 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.202103766 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.192947427 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 2.357069819 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 2.333260245 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.191487057 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 2.95380811 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 2.198621266 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.19035734 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 2.340717139 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 2.20198943 seconds)
  done (took 76.517969952 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.193518904 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 2.190658425 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 2.192237625 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.192099351 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 2.19165593 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 2.192951569 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 2.191860991 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.191920322 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.20454125 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.191864215 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.205536391 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 2.191787891 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 2.194956322 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 2.192441762 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 2.193940005 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 2.193295684 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 2.192633032 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.198868919 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 2.193522005 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 2.200585518 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 2.194895679 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.193290285 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.192770299 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.19189942 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 2.194777901 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 2.197081587 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.192650191 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 2.193421821 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 2.206884609 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.194998736 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 2.198442225 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 2.193187785 seconds)
  done (took 71.327099363 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.198944175 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 2.196947495 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 2.197503298 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.196699714 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 2.1939479 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 2.200580573 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 2.194764744 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.206577253 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.193476178 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.215577705 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.193304249 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 2.192757638 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 2.195537926 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 2.193607735 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 2.19489459 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 2.194507598 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 2.192921462 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.201521295 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 2.19333533 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 2.195016252 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 2.195647311 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.207189241 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.207680764 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.193330306 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 2.197759259 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 2.192995068 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.194378324 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 2.194587782 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 2.208820828 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.194844266 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 2.199510651 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 2.197663644 seconds)
  done (took 71.421186874 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.436169307 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.209472384 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 1.213141765 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.204710169 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 1.214131471 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.209332808 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.205005307 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.440372685 seconds)
  done (took 13.227905163 seconds)
done (took 233.58443214 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/33) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.204432691 seconds)
    (2/33) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.645351118 seconds)
    (3/33) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.232413035 seconds)
    (4/33) benchmarking ("Set", "Any", "loop")...
    done (took 2.204759036 seconds)
    (5/33) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.223082143 seconds)
    (6/33) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.232866473 seconds)
    (7/33) benchmarking ("Vector", "String", "loop")...
    done (took 1.404940747 seconds)
    (8/33) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.231412571 seconds)
    (9/33) benchmarking ("Vector", "Int", "loop")...
    done (took 1.407964015 seconds)
    (10/33) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.229056764 seconds)
    (11/33) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.218964095 seconds)
    (12/33) benchmarking ("Dict", "String", "loop")...
    done (took 2.213508379 seconds)
    (13/33) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.902939987 seconds)
    (14/33) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.349669546 seconds)
    (15/33) benchmarking ("Set", "String", "iterator")...
    done (took 1.95970694 seconds)
    (16/33) benchmarking ("Set", "String", "loop")...
    done (took 2.075528275 seconds)
    (17/33) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.973509867 seconds)
    (18/33) benchmarking ("Set", "Any", "iterator")...
    done (took 2.201702332 seconds)
    (19/33) benchmarking ("Set", "Int", "loop")...
    done (took 1.710140201 seconds)
    (20/33) benchmarking ("Vector", "Any", "loop")...
    done (took 1.463407536 seconds)
    (21/33) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.233440261 seconds)
    (22/33) benchmarking ("Dict", "String", "iterator")...
    done (took 2.201864511 seconds)
    (23/33) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.958950409 seconds)
    (24/33) benchmarking ("Dict", "Int", "loop")...
    done (took 1.984039151 seconds)
    (25/33) benchmarking ("Dict", "Any", "iterator")...
    done (took 2.181670286 seconds)
    (26/33) benchmarking ("Vector", "String", "iterator")...
    done (took 1.279471667 seconds)
    (27/33) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.288707135 seconds)
    (28/33) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.415436655 seconds)
    (29/33) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.355023711 seconds)
    (30/33) benchmarking ("Vector", "Int", "iterator")...
    done (took 1.274361431 seconds)
    (31/33) benchmarking ("Set", "Int", "iterator")...
    done (took 1.654309784 seconds)
    (32/33) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.224288861 seconds)
    (33/33) benchmarking ("Dict", "Any", "loop")...
    done (took 2.216246702 seconds)
  done (took 57.448601125 seconds)
  (2/6) benchmarking "iteration"...
    (1/30) benchmarking ("Set", "String", "next")...
    done (took 1.203150049 seconds)
    (2/30) benchmarking ("Set", "Any", "start")...
    done (took 1.213571056 seconds)
    (3/30) benchmarking ("Set", "Int", "done")...
    done (took 1.213108885 seconds)
    (4/30) benchmarking ("Dict", "Int", "done")...
    done (took 1.212634415 seconds)
    (5/30) benchmarking ("Dict", "String", "start")...
    done (took 1.212636068 seconds)
    (6/30) benchmarking ("BitSet", "Int", "done")...
    done (took 1.213197745 seconds)
    (7/30) benchmarking ("Dict", "String", "next")...
    done (took 1.203137733 seconds)
    (8/30) benchmarking ("Vector", "Int", "done")...
    done (took 1.212972438 seconds)
    (9/30) benchmarking ("Vector", "String", "done")...
    done (took 1.213081505 seconds)
    (10/30) benchmarking ("Vector", "Any", "done")...
    done (took 1.213618055 seconds)
    (11/30) benchmarking ("Dict", "String", "done")...
    done (took 1.213614471 seconds)
    (12/30) benchmarking ("Vector", "Int", "next")...
    done (took 1.214416007 seconds)
    (13/30) benchmarking ("Set", "Int", "next")...
    done (took 1.214092708 seconds)
    (14/30) benchmarking ("Vector", "Int", "start")...
    done (took 1.21296961 seconds)
    (15/30) benchmarking ("Dict", "Int", "start")...
    done (took 1.213970268 seconds)
    (16/30) benchmarking ("Vector", "Any", "next")...
    done (took 1.187680963 seconds)
    (17/30) benchmarking ("Dict", "Any", "next")...
    done (took 1.204874637 seconds)
    (18/30) benchmarking ("Set", "String", "start")...
    done (took 1.213538265 seconds)
    (19/30) benchmarking ("Vector", "String", "next")...
    done (took 1.20490728 seconds)
    (20/30) benchmarking ("Set", "Any", "next")...
    done (took 1.188477261 seconds)
    (21/30) benchmarking ("Vector", "String", "start")...
    done (took 1.212972354 seconds)
    (22/30) benchmarking ("Dict", "Any", "done")...
    done (took 1.21532 seconds)
    (23/30) benchmarking ("Dict", "Int", "next")...
    done (took 1.214537082 seconds)
    (24/30) benchmarking ("Vector", "Any", "start")...
    done (took 1.21577306 seconds)
    (25/30) benchmarking ("Set", "String", "done")...
    done (took 1.21438554 seconds)
    (26/30) benchmarking ("Set", "Any", "done")...
    done (took 1.215129431 seconds)
    (27/30) benchmarking ("Set", "Int", "start")...
    done (took 1.213941408 seconds)
    (28/30) benchmarking ("BitSet", "Int", "next")...
    done (took 1.215322115 seconds)
    (29/30) benchmarking ("BitSet", "Int", "start")...
    done (took 1.21468888 seconds)
    (30/30) benchmarking ("Dict", "Any", "start")...
    done (took 1.215642099 seconds)
  done (took 37.426973813 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.215487124 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.725943775 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.86758419 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.213014067 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.206920559 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 1.211029894 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.452716455 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.21550217 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 1.210179874 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 1.209842137 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.633103199 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.217589102 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.237104266 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.880009603 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 1.210188907 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.217457287 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.217252295 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.207954026 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.73903482 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.217318779 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 1.45277991 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.220783994 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.452877914 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 1.221481079 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.21216195 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.208389935 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 1.214738657 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.956602677 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 1.225264665 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.634883583 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.840966285 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.453316389 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.890692972 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.928171081 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.854083897 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.224290031 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.219536236 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.638351991 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 1.210417623 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.210350855 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.450670126 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 1.209991039 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.87994647 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.872706513 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 1.225670089 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.218052725 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.994211151 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.636384446 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.414014789 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 1.220493223 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.930398454 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 1.212991126 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.221077568 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.213428167 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.414568268 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.21699864 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.210764125 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.99526476 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 1.219157625 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 1.45357599 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.225062719 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.210498927 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.739788496 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 1.216430101 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.732858577 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.2121196 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 1.218924243 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 1.212458507 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.884283147 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 1.218972444 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.895505803 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.227336187 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.21911177 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.637109115 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.736780156 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.030234942 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 1.215811211 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.744369759 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.922091985 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.469310324 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 1.216320458 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.939390367 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 1.475734801 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 1.220001292 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.223489933 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.222125094 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.221336799 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.291521752 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.453180187 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.832931307 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.888140679 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.004934973 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 1.461749994 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 1.225662573 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 1.213874134 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.990261421 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.223168822 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.221273907 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.883506114 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.897314001 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.227927644 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 1.220786167 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.898272164 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 1.230177739 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 1.458812 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 1.223204125 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.930600249 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 1.219081247 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.292801908 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.222906837 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 1.221236968 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 1.217695705 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 1.458257012 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 1.223556669 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.223192804 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.877791476 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.661418028 seconds)
  done (took 170.771722983 seconds)
  (4/6) benchmarking "optimizations"...
    (1/20) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 2.21019625 seconds)
    (2/20) benchmarking ("Set", "abstract", "Int8")...
    done (took 2.209451958 seconds)
    (3/20) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 2.210646617 seconds)
    (4/20) benchmarking ("Dict", "concrete", "Bool")...
    done (took 2.208315836 seconds)
    (5/20) benchmarking ("Dict", "abstract", "Bool")...
    done (took 2.209038268 seconds)
    (6/20) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.21592231 seconds)
    (7/20) benchmarking ("Set", "abstract", "Bool")...
    done (took 2.20750791 seconds)
    (8/20) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 2.20864184 seconds)
    (9/20) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.213628116 seconds)
    (10/20) benchmarking ("Set", "concrete", "Bool")...
    done (took 2.207651471 seconds)
    (11/20) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 2.208865639 seconds)
    (12/20) benchmarking ("Set", "concrete", "Nothing")...
    done (took 1.217980557 seconds)
    (13/20) benchmarking ("Set", "abstract", "Nothing")...
    done (took 1.21507826 seconds)
    (14/20) benchmarking ("BitSet", "Int8")...
    done (took 2.209820632 seconds)
    (15/20) benchmarking ("Set", "abstract", "UInt16")...
    done (took 2.209643548 seconds)
    (16/20) benchmarking ("Dict", "concrete", "Int8")...
    done (took 2.20817418 seconds)
    (17/20) benchmarking ("BitSet", "UInt16")...
    done (took 2.209592949 seconds)
    (18/20) benchmarking ("Set", "concrete", "UInt16")...
    done (took 2.21087685 seconds)
    (19/20) benchmarking ("Set", "concrete", "Int8")...
    done (took 2.20982808 seconds)
    (20/20) benchmarking ("Dict", "abstract", "Int8")...
    done (took 2.209841546 seconds)
  done (took 41.318120017 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/79) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.224282041 seconds)
    (2/79) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.69578809 seconds)
    (3/79) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.660835113 seconds)
    (4/79) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.230423634 seconds)
    (5/79) benchmarking ("BitSet", "Int", "last")...
    done (took 1.225693385 seconds)
    (6/79) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.216358489 seconds)
    (7/79) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.263830356 seconds)
    (8/79) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.226123336 seconds)
    (9/79) benchmarking ("BitSet", "Int", "first")...
    done (took 1.22549663 seconds)
    (10/79) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.470832128 seconds)
    (11/79) benchmarking ("Vector", "String", "push!")...
    done (took 1.364133624 seconds)
    (12/79) benchmarking ("Set", "String", "in", "false")...
    done (took 1.226978555 seconds)
    (13/79) benchmarking ("BitSet", "Int", "length")...
    done (took 1.225693549 seconds)
    (14/79) benchmarking ("Set", "Int", "first")...
    done (took 1.225748918 seconds)
    (15/79) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.663657642 seconds)
    (16/79) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.204590087 seconds)
    (17/79) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.472303048 seconds)
    (18/79) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.699729768 seconds)
    (19/79) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.23265567 seconds)
    (20/79) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.699171501 seconds)
    (21/79) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.205446534 seconds)
    (22/79) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.225739201 seconds)
    (23/79) benchmarking ("Dict", "String", "getindex")...
    done (took 1.217203786 seconds)
    (24/79) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.695136496 seconds)
    (25/79) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.486599654 seconds)
    (26/79) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.463822963 seconds)
    (27/79) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.270486178 seconds)
    (28/79) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.70031205 seconds)
    (29/79) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.232511268 seconds)
    (30/79) benchmarking ("Vector", "Int", "last")...
    done (took 1.228301933 seconds)
    (31/79) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.695271621 seconds)
    (32/79) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.227120441 seconds)
    (33/79) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.218424054 seconds)
    (34/79) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.68497036 seconds)
    (35/79) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.232686463 seconds)
    (36/79) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.240916532 seconds)
    (37/79) benchmarking ("Vector", "Int", "length")...
    done (took 1.228157752 seconds)
    (38/79) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.267839702 seconds)
    (39/79) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.268588472 seconds)
    (40/79) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.473716874 seconds)
    (41/79) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 1.707618325 seconds)
    (42/79) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.474743783 seconds)
    (43/79) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.242792336 seconds)
    (44/79) benchmarking ("Vector", "Any", "in", "true")...
    done (took 1.368287584 seconds)
    (45/79) benchmarking ("Dict", "Int", "first")...
    done (took 1.229735117 seconds)
    (46/79) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.198781426 seconds)
    (47/79) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.712636928 seconds)
    (48/79) benchmarking ("Vector", "Int", "in", "true")...
    done (took 1.234436094 seconds)
    (49/79) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.199926179 seconds)
    (50/79) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.228917293 seconds)
    (51/79) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.233048675 seconds)
    (52/79) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.678063077 seconds)
    (53/79) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.225447592 seconds)
    (54/79) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.678309754 seconds)
    (55/79) benchmarking ("Dict", "Int", "length")...
    done (took 1.232286854 seconds)
    (56/79) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.229665638 seconds)
    (57/79) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.703386912 seconds)
    (58/79) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.684490258 seconds)
    (59/79) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.674401668 seconds)
    (60/79) benchmarking ("Vector", "Int", "push!")...
    done (took 1.370229572 seconds)
    (61/79) benchmarking ("Vector", "String", "getindex")...
    done (took 1.218645656 seconds)
    (62/79) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.463009467 seconds)
    (63/79) benchmarking ("Vector", "Int", "first")...
    done (took 1.228389984 seconds)
    (64/79) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.708021173 seconds)
    (65/79) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.228404532 seconds)
    (66/79) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.228238725 seconds)
    (67/79) benchmarking ("Set", "String", "in", "true")...
    done (took 1.228713336 seconds)
    (68/79) benchmarking ("Vector", "Any", "push!")...
    done (took 1.366897276 seconds)
    (69/79) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.705087116 seconds)
    (70/79) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.468439128 seconds)
    (71/79) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.485546744 seconds)
    (72/79) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.485487297 seconds)
    (73/79) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.235215283 seconds)
    (74/79) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.278235087 seconds)
    (75/79) benchmarking ("Set", "Int", "length")...
    done (took 1.231693447 seconds)
    (76/79) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 1.479777327 seconds)
    (77/79) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.283056575 seconds)
    (78/79) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.576049593 seconds)
    (79/79) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.482316723 seconds)
  done (took 110.515546841 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("Dict", "Int", "filter")...
    done (took 1.459990954 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.322615339 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.5572632 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.765014914 seconds)
    (5/28) benchmarking ("Set", "Any", "pop!")...
    done (took 1.686223056 seconds)
    (6/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.355855134 seconds)
    (7/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.324511907 seconds)
    (8/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.447103791 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.234482348 seconds)
    (10/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.331912284 seconds)
    (11/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.802088699 seconds)
    (12/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 1.306773873 seconds)
    (13/28) benchmarking ("Dict", "Any", "filter")...
    done (took 1.930042247 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.279603394 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.320824955 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.336911588 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.57602415 seconds)
    (18/28) benchmarking ("Dict", "String", "filter")...
    done (took 2.117409965 seconds)
    (19/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.802412481 seconds)
    (20/28) benchmarking ("Dict", "Int", "filter!")...
    done (took 1.776478248 seconds)
    (21/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 2.230202607 seconds)
    (22/28) benchmarking ("Vector", "Int", "filter")...
    done (took 1.326065198 seconds)
    (23/28) benchmarking ("Set", "String", "filter")...
    done (took 1.713428096 seconds)
    (24/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.405464262 seconds)
    (25/28) benchmarking ("Dict", "String", "filter!")...
    done (took 2.223674734 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.777469418 seconds)
    (27/28) benchmarking ("Dict", "Any", "filter!")...
    done (took 2.083458514 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.702962579 seconds)
  done (took 47.309799858 seconds)
done (took 465.886860363 seconds)
SAVING RESULT...
DONE!

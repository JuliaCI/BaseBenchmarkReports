cset: moving following pidspec: 27254
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 1.407978846 seconds)
loading group "string"... done (took 0.504750461 seconds)
loading group "linalg"... done (took 8.567915203 seconds)
loading group "parallel"... done (took 0.173750814 seconds)
loading group "find"... done (took 1.227093494 seconds)
loading group "tuple"... done (took 1.98004443 seconds)
loading group "dates"... done (took 1.466956372 seconds)
loading group "micro"... done (took 0.203330842 seconds)
loading group "io"... done (took 0.540242378 seconds)
loading group "scalar"... done (took 49.944711379 seconds)
loading group "sparse"... done (took 13.436333432 seconds)
loading group "broadcast"... done (took 1.263577703 seconds)
loading group "union"... done (took 9.050701227 seconds)
loading group "simd"... done (took 3.009838893 seconds)
loading group "random"... done (took 11.275926308 seconds)
loading group "problem"... done (took 2.174196218 seconds)
loading group "array"... done (took 24.752027645 seconds)
loading group "misc"... done (took 1.098483353 seconds)
loading group "sort"... done (took 3.691252012 seconds)
loading group "collection"... done (took 19.148337152 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.604830561 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.128758889 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.263738186 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.284217014 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.229222077 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.168863093 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.146513982 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.245244417 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.531553851 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.202058593 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.13735091 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.541508604 seconds)
done (took 6.201298048 seconds)
(2/20) benchmarking "string"...
  (1/4) benchmarking "join"...
  done (took 0.247360885 seconds)
  (2/4) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.241804128 seconds)
    (2/2) benchmarking "String"...
    done (took 0.16505702 seconds)
  done (took 1.070272128 seconds)
  (3/4) benchmarking "replace"...
  done (took 0.075389347 seconds)
  (4/4) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.155301639 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.10840971 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.094024793 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.093063224 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.10729398 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.091129536 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.108694806 seconds)
  done (took 1.425561179 seconds)
done (took 3.486233923 seconds)
(3/20) benchmarking "linalg"...
  (1/2) benchmarking "factorization"...
    (1/64) benchmarking ("eig", "LowerTriangular", 1024)...
    done (took 0.506471158 seconds)
    (2/64) benchmarking ("svdfact", "UpperTriangular", 1024)...
    done (took 0.858037052 seconds)
    (3/64) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.491909271 seconds)
    (4/64) benchmarking ("eigfact", "UpperTriangular", 256)...
    done (took 0.140770282 seconds)
    (5/64) benchmarking ("qr", "Matrix", 256)...
    done (took 0.309973031 seconds)
    (6/64) benchmarking ("lu", "Matrix", 256)...
    done (took 0.292399357 seconds)
    (7/64) benchmarking ("eig", "SymTridiagonal", 256)...
    done (took 0.270357762 seconds)
    (8/64) benchmarking ("qrfact", "Matrix", 1024)...
    done (took 0.196993858 seconds)
    (9/64) benchmarking ("eigfact", "Diagonal", 256)...
    done (took 0.089997486 seconds)
    (10/64) benchmarking ("eig", "LowerTriangular", 256)...
    done (took 0.087266212 seconds)
    (11/64) benchmarking ("lufact", "Tridiagonal", 1024)...
    done (took 0.17295502 seconds)
    (12/64) benchmarking ("schurfact", "Matrix", 1024)...
    done (took 1.389663611 seconds)
    (13/64) benchmarking ("eig", "Bidiagonal", 1024)...
    done (took 0.382456274 seconds)
    (14/64) benchmarking ("eigfact", "Matrix", 1024)...
    done (took 1.929895787 seconds)
    (15/64) benchmarking ("eig", "UpperTriangular", 256)...
    done (took 0.09126765 seconds)
    (16/64) benchmarking ("svdfact", "Matrix", 256)...
    done (took 0.093270796 seconds)
    (17/64) benchmarking ("lufact", "Matrix", 256)...
    done (took 0.128318696 seconds)
    (18/64) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.750138636 seconds)
    (19/64) benchmarking ("qrfact", "Matrix", 256)...
    done (took 0.077596703 seconds)
    (20/64) benchmarking ("eigfact", "Matrix", 256)...
    done (took 0.10897401 seconds)
    (21/64) benchmarking ("svd", "Diagonal", 256)...
    done (took 0.503149168 seconds)
    (22/64) benchmarking ("svdfact", "Diagonal", 256)...
    done (took 0.201839275 seconds)
    (23/64) benchmarking ("lufact", "Matrix", 1024)...
    done (took 0.099586901 seconds)
    (24/64) benchmarking ("schur", "Matrix", 256)...
    done (took 0.12004817 seconds)
    (25/64) benchmarking ("eigfact", "SymTridiagonal", 1024)...
    done (took 0.189391166 seconds)
    (26/64) benchmarking ("svd", "LowerTriangular", 256)...
    done (took 0.131178494 seconds)
    (27/64) benchmarking ("eig", "UpperTriangular", 1024)...
    done (took 0.159005291 seconds)
    (28/64) benchmarking ("eig", "Bidiagonal", 256)...
    done (took 0.099958114 seconds)
    (29/64) benchmarking ("svdfact", "LowerTriangular", 1024)...
    done (took 0.659755004 seconds)
    (30/64) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.129514508 seconds)
    (31/64) benchmarking ("eig", "Matrix", 256)...
    done (took 0.177028015 seconds)
    (32/64) benchmarking ("eigfact", "SymTridiagonal", 256)...
    done (took 0.096223884 seconds)
    (33/64) benchmarking ("eigfact", "UpperTriangular", 1024)...
    done (took 0.157621206 seconds)
    (34/64) benchmarking ("svdfact", "Bidiagonal", 256)...
    done (took 0.184038002 seconds)
    (35/64) benchmarking ("lu", "Tridiagonal", 256)...
    done (took 0.193447493 seconds)
    (36/64) benchmarking ("svd", "UpperTriangular", 256)...
    done (took 0.108375408 seconds)
    (37/64) benchmarking ("svd", "UpperTriangular", 1024)...
    done (took 0.672322364 seconds)
    (38/64) benchmarking ("eig", "SymTridiagonal", 1024)...
    done (took 0.197180958 seconds)
    (39/64) benchmarking ("svd", "Diagonal", 1024)...
    done (took 0.108389715 seconds)
    (40/64) benchmarking ("eigfact", "Diagonal", 1024)...
    done (took 0.098768999 seconds)
    (41/64) benchmarking ("svd", "LowerTriangular", 1024)...
    done (took 0.664138197 seconds)
    (42/64) benchmarking ("lu", "Tridiagonal", 1024)...
    done (took 0.115973579 seconds)
    (43/64) benchmarking ("cholfact", "Matrix", 256)...
    done (took 0.183144069 seconds)
    (44/64) benchmarking ("eig", "Diagonal", 1024)...
    done (took 0.10366112 seconds)
    (45/64) benchmarking ("eigfact", "LowerTriangular", 256)...
    done (took 0.087011891 seconds)
    (46/64) benchmarking ("eigfact", "LowerTriangular", 1024)...
    done (took 0.177149897 seconds)
    (47/64) benchmarking ("svdfact", "Diagonal", 1024)...
    done (took 0.092311553 seconds)
    (48/64) benchmarking ("lufact", "Tridiagonal", 256)...
    done (took 0.076988715 seconds)
    (49/64) benchmarking ("svd", "Bidiagonal", 256)...
    done (took 0.109066858 seconds)
    (50/64) benchmarking ("eig", "Diagonal", 256)...
    done (took 0.085074607 seconds)
    (51/64) benchmarking ("svd", "Bidiagonal", 1024)...
    done (took 0.161065497 seconds)
    (52/64) benchmarking ("eig", "Matrix", 1024)...
    done (took 1.44066715 seconds)
    (53/64) benchmarking ("svdfact", "UpperTriangular", 256)...
    done (took 0.103148577 seconds)
    (54/64) benchmarking ("chol", "Matrix", 1024)...
    done (took 0.170714911 seconds)
    (55/64) benchmarking ("svdfact", "LowerTriangular", 256)...
    done (took 0.091611712 seconds)
    (56/64) benchmarking ("svdfact", "Matrix", 1024)...
    done (took 0.685632322 seconds)
    (57/64) benchmarking ("svd", "Matrix", 256)...
    done (took 0.096298712 seconds)
    (58/64) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.270054814 seconds)
    (59/64) benchmarking ("schurfact", "Matrix", 256)...
    done (took 0.12228687 seconds)
    (60/64) benchmarking ("cholfact", "Matrix", 1024)...
    done (took 0.091646634 seconds)
    (61/64) benchmarking ("chol", "Matrix", 256)...
    done (took 0.088542148 seconds)
    (62/64) benchmarking ("eigfact", "Bidiagonal", 256)...
    done (took 0.087895586 seconds)
    (63/64) benchmarking ("svdfact", "Bidiagonal", 1024)...
    done (took 0.152011254 seconds)
    (64/64) benchmarking ("eigfact", "Bidiagonal", 1024)...
    done (took 0.092504656 seconds)
  done (took 19.704711092 seconds)
  (2/2) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.146626007 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.163057503 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.077435199 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.154953175 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.123023555 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.079828745 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.099993603 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.078392079 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.109093917 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.195385838 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.138105866 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.151080314 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.090608891 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.090082512 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.128055886 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.247564829 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.107734452 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.118933513 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.089571211 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.088780269 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.138205825 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.095942384 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.091091317 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.108630618 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.169089058 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.201304051 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.108825194 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.12154064 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.08783086 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.095359568 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.141799068 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.145690604 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.090267678 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.087926312 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.18870217 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.10450496 seconds)
  done (took 5.139261255 seconds)
done (took 25.508895892 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.430419605 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.08013974 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.079625335 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.09819893 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.08111306 seconds)
  done (took 1.487230549 seconds)
done (took 2.176302765 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/13) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 0.355420721 seconds)
    (2/13) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 0.188902249 seconds)
    (3/13) benchmarking ("BitArray{1}", "90-10")...
    done (took 0.098880892 seconds)
    (4/13) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 0.192809449 seconds)
    (5/13) benchmarking ("BitArray{1}", "50-50")...
    done (took 0.102607004 seconds)
    (6/13) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 0.172238292 seconds)
    (7/13) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 0.177360142 seconds)
    (8/13) benchmarking ("Array{Bool,1}", "10-90")...
    done (took 0.092949838 seconds)
    (9/13) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 0.203722549 seconds)
    (10/13) benchmarking ("Array{Bool,1}", "90-10")...
    done (took 0.085178675 seconds)
    (11/13) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 0.182821017 seconds)
    (12/13) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 0.081891804 seconds)
    (13/13) benchmarking ("BitArray{1}", "10-90")...
    done (took 0.100874348 seconds)
  done (took 2.754828685 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 0.102272975 seconds)
    (2/11) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 0.110583695 seconds)
    (3/11) benchmarking ("BitArray{1}", "90-10")...
    done (took 0.118809371 seconds)
    (4/11) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 0.103805338 seconds)
    (5/11) benchmarking ("BitArray{1}", "50-50")...
    done (took 0.087402916 seconds)
    (6/11) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 0.101064138 seconds)
    (7/11) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 0.118535139 seconds)
    (8/11) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 0.112062196 seconds)
    (9/11) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 0.101552078 seconds)
    (10/11) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 0.112015397 seconds)
    (11/11) benchmarking ("BitArray{1}", "10-90")...
    done (took 0.086723277 seconds)
  done (took 1.847856179 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 0.099607098 seconds)
    (2/11) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 0.106435588 seconds)
    (3/11) benchmarking ("BitArray{1}", "90-10")...
    done (took 0.097629438 seconds)
    (4/11) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 0.115094489 seconds)
    (5/11) benchmarking ("BitArray{1}", "50-50")...
    done (took 0.085355194 seconds)
    (6/11) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 0.097281141 seconds)
    (7/11) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 0.114620313 seconds)
    (8/11) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 0.10846152 seconds)
    (9/11) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 0.098286978 seconds)
    (10/11) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 0.111483732 seconds)
    (11/11) benchmarking ("BitArray{1}", "10-90")...
    done (took 0.086361647 seconds)
  done (took 1.81634107 seconds)
done (took 7.111455753 seconds)
(6/20) benchmarking "tuple"...
  (1/3) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.07906745 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 10.177670601 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.159132872 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.200363848 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.340456041 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.22917929 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.55692313 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.149166107 seconds)
  done (took 13.732252655 seconds)
  (2/3) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.116887521 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.143429276 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.092528033 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.092435099 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.090518247 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.105092962 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.092297881 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.088652145 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.105078562 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.09030764 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.092108407 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.103911657 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.093031883 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.090867598 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.088574667 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.105580014 seconds)
  done (took 2.347038341 seconds)
  (3/3) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.13874108 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.136579617 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.096425968 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.096824581 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.10748552 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.095464226 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.099871257 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.112161159 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.092754162 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.091514359 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.099876988 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.112236503 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.097308703 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.092370091 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.110044552 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.11532636 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.091953677 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.110469584 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.11468865 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.111264252 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.098036596 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.094553817 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.110853089 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.095665336 seconds)
  done (took 3.299151779 seconds)
done (took 20.075466303 seconds)
(7/20) benchmarking "dates"...
  (1/6) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.146144378 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.096671855 seconds)
  done (took 0.940823203 seconds)
  (2/6) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.134343717 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.149840344 seconds)
  done (took 0.986882984 seconds)
  (3/6) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.093093134 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.092730723 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.118228572 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.131200897 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.096492891 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.107502608 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.092609603 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.09113564 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.108498943 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.08812042 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.092867124 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.120880433 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.09411333 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.121985901 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.093460171 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.094779227 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.112094665 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.093599912 seconds)
  done (took 2.551049597 seconds)
  (4/6) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.08888646 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.090474088 seconds)
  done (took 0.888720454 seconds)
  (5/6) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.093241565 seconds)
    (2/7) benchmarking "second"...
    done (took 0.088674488 seconds)
    (3/7) benchmarking "month"...
    done (took 0.090419983 seconds)
    (4/7) benchmarking "year"...
    done (took 0.105853468 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.088779804 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.088484308 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.102071959 seconds)
  done (took 1.365770408 seconds)
  (6/6) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.48175457 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.257318694 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.350664477 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.109640267 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.141588228 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.34544702 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.142880185 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.101754114 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.101592441 seconds)
  done (took 2.776284779 seconds)
done (took 10.215522417 seconds)
(8/20) benchmarking "micro"...
  (1/7) benchmarking "quicksort"...
  done (took 0.088562629 seconds)
  (2/7) benchmarking "parseint"...
  done (took 0.218577181 seconds)
  (3/7) benchmarking "randmatstat"...
  done (took 0.634897913 seconds)
  (4/7) benchmarking "pisum"...
  done (took 0.110736059 seconds)
  (5/7) benchmarking "fib"...
  done (took 0.088811446 seconds)
  (6/7) benchmarking "randmatmul"...
  done (took 0.155682082 seconds)
  (7/7) benchmarking "mandel"...
  done (took 0.280469121 seconds)
done (took 2.291479963 seconds)
(9/20) benchmarking "io"...
  (1/2) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336529423 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.135826183 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078813684 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.093855974 seconds)
  done (took 1.351591171 seconds)
  (2/2) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.07986736 seconds)
    (2/2) benchmarking "read"...
    done (took 0.09619906 seconds)
  done (took 0.890730342 seconds)
done (took 2.958201858 seconds)
(10/20) benchmarking "scalar"...
  (1/23) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.086872167 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.117619843 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.102670193 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.086388238 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.08666994 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.084722202 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.104004954 seconds)
    (8/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.087175954 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.086770245 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.086887645 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.104502421 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.088080565 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.086373045 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.099947859 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.086761273 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.086903291 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.085881625 seconds)
    (18/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.101980706 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.086147799 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.084741721 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.1007641 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.086269998 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.086577573 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.085613044 seconds)
  done (took 2.947699015 seconds)
  (2/23) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.105029332 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.103284104 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.106596673 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.091395341 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.09109145 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.105077789 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.093603241 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.091224851 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.110159891 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.090571124 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.093283854 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.109551906 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.091531154 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.092666714 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.104687146 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.093048147 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.092849156 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.086595076 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.102932188 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.09074394 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.089686759 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.103174381 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.090655262 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.09030216 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.106515332 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.092459886 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.087633993 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.102774955 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.092426417 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.092422158 seconds)
  done (took 3.611139968 seconds)
  (3/23) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.09450368 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.084300441 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.08547668 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.110987142 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.084408 seconds)
    (6/72) benchmarking ("isodd", "UInt64")...
    done (took 0.088507915 seconds)
    (7/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.098786036 seconds)
    (8/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.085465399 seconds)
    (9/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.088783744 seconds)
    (10/72) benchmarking ("isnan", "Float64")...
    done (took 0.086341834 seconds)
    (11/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.103481075 seconds)
    (12/72) benchmarking ("isequal", "Float64")...
    done (took 0.086971153 seconds)
    (13/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.08454255 seconds)
    (14/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.102920801 seconds)
    (15/72) benchmarking ("isnan", "Complex{Float32}")...
    done (took 0.088383999 seconds)
    (16/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.091126392 seconds)
    (17/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.094031605 seconds)
    (18/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.100628455 seconds)
    (19/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.08472355 seconds)
    (20/72) benchmarking ("isequal", "Complex{Float64}")...
    done (took 0.086940036 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.105817534 seconds)
    (22/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.085565763 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 0.08763005 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.086556922 seconds)
    (25/72) benchmarking ("isequal", "UInt64")...
    done (took 0.1024573 seconds)
    (26/72) benchmarking ("isinteger", "Int64")...
    done (took 0.085212298 seconds)
    (27/72) benchmarking ("isfinite", "Float64")...
    done (took 0.087991226 seconds)
    (28/72) benchmarking ("isequal", "Int64")...
    done (took 0.102566022 seconds)
    (29/72) benchmarking ("isinf", "Float64")...
    done (took 0.088765747 seconds)
    (30/72) benchmarking ("isless", "UInt64")...
    done (took 0.087328127 seconds)
    (31/72) benchmarking ("isequal", "BigInt")...
    done (took 0.088252338 seconds)
    (32/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.105514202 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 0.087746049 seconds)
    (34/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.09600871 seconds)
    (35/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.105024764 seconds)
    (36/72) benchmarking ("isless", "Float64")...
    done (took 0.0866886 seconds)
    (37/72) benchmarking ("iseven", "BigInt")...
    done (took 0.093471244 seconds)
    (38/72) benchmarking ("isnan", "BigInt")...
    done (took 0.100216436 seconds)
    (39/72) benchmarking ("isequal", "Complex{Float32}")...
    done (took 0.090006205 seconds)
    (40/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.084270849 seconds)
    (41/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.082384739 seconds)
    (42/72) benchmarking ("isnan", "Float32")...
    done (took 0.101611753 seconds)
    (43/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.086006924 seconds)
    (44/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.092172908 seconds)
    (45/72) benchmarking ("iseven", "Int64")...
    done (took 0.100871422 seconds)
    (46/72) benchmarking ("isinteger", "Float64")...
    done (took 0.088495668 seconds)
    (47/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.085849523 seconds)
    (48/72) benchmarking ("isfinite", "Complex{Float32}")...
    done (took 0.087919807 seconds)
    (49/72) benchmarking ("isnan", "Complex{Float64}")...
    done (took 0.102176907 seconds)
    (50/72) benchmarking ("isinteger", "Complex{Float32}")...
    done (took 0.090824608 seconds)
    (51/72) benchmarking ("isinf", "Int64")...
    done (took 0.083566439 seconds)
    (52/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.101507942 seconds)
    (53/72) benchmarking ("isinf", "Complex{Float32}")...
    done (took 0.088549736 seconds)
    (54/72) benchmarking ("isfinite", "Complex{Float64}")...
    done (took 0.087618415 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.104607649 seconds)
    (56/72) benchmarking ("isnan", "Int64")...
    done (took 0.084437568 seconds)
    (57/72) benchmarking ("isinteger", "Float32")...
    done (took 0.089364969 seconds)
    (58/72) benchmarking ("isnan", "UInt64")...
    done (took 0.084292518 seconds)
    (59/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.104393299 seconds)
    (60/72) benchmarking ("isless", "Int64")...
    done (took 0.087761616 seconds)
    (61/72) benchmarking ("isinf", "BigInt")...
    done (took 0.083297267 seconds)
    (62/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.098449581 seconds)
    (63/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.091924681 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.089296453 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.100803777 seconds)
    (66/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.108824395 seconds)
    (67/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.084578931 seconds)
    (68/72) benchmarking ("isinteger", "Complex{Float64}")...
    done (took 0.089034734 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.103820452 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.093088582 seconds)
    (71/72) benchmarking ("isinf", "Complex{Float64}")...
    done (took 0.088671447 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.113199628 seconds)
  done (took 7.388503102 seconds)
  (4/23) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.099072414 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.096405373 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.087022759 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.104561252 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.088484268 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.086846914 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.106489676 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.088741353 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.088446842 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.110515919 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.088035135 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.08930761 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0875497 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.105041982 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.089326533 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.087187967 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.110027755 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.089016742 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.087916125 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.103687782 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.089187404 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.093537508 seconds)
  done (took 2.799259721 seconds)
  (5/23) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.233541658 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.094405282 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.134872822 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.117443676 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.224572309 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.116914166 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.092049175 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.093114631 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.108708734 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.097554906 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.097080012 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.108156529 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.106343487 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.095738778 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.112373742 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.098346914 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.107354805 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.100072568 seconds)
  done (took 2.864283754 seconds)
  (6/23) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.100967644 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.090408213 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.125989033 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.091331964 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.089454536 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.089327602 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.109700272 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.110431827 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.106648115 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.090954551 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.098088015 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.08949723 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.105080101 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.091135098 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.089901944 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.106334011 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.089761058 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.090235468 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.111014342 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.09523597 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.094825549 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.114794938 seconds)
  done (took 2.908902324 seconds)
  (7/23) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.102230511 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.09027178 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.122313021 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.092615992 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.089055034 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.088157558 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.111077197 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.093020856 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.094173564 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.106387994 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.090507598 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.088560137 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.121454043 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.091610982 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.093988865 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.106384327 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.090797391 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.089520527 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.10517395 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.089502234 seconds)
  done (took 2.683608289 seconds)
  (8/23) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.162781288 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.121208635 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.105419855 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.112843771 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.121302007 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.106604288 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.111725995 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.121259931 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.105470652 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.131210654 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.10586434 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.105025443 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.128197583 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.112679434 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.105403031 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.130213823 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.114060399 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.128910668 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.106843786 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.104839342 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.133268458 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.106597722 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.131009722 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.104888712 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.104992067 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.12187959 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.10502235 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.108760217 seconds)
  done (took 3.989668313 seconds)
  (9/23) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.088619965 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.088870859 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.088015364 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.103845623 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.089475997 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.087373478 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.087118666 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.104270946 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.088746511 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.087929844 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.103666167 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.088010196 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.089243289 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.086716589 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.105335692 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.089225515 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.0878047 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.104238607 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.089452427 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.089076542 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.087885501 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.104834758 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.088216918 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.088368175 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.103195475 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.088727264 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.089444066 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.088483504 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.105611877 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.088890262 seconds)
  done (took 3.515093502 seconds)
  (10/23) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.101866803 seconds)
    (2/2) benchmarking "in"...
    done (took 0.097339433 seconds)
  done (took 0.935201692 seconds)
  (11/23) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.096709334 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.103436032 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.089288532 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.105854779 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.096241448 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.091299205 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.11327223 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.097360089 seconds)
  done (took 1.529825144 seconds)
  (12/23) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.143891802 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.095194758 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.106493458 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.088994067 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.106995379 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.107124982 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.089547045 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.0905777 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.109126001 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.099786292 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.089523159 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.105192046 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.104244139 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.111507636 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.124770405 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.099482693 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.105866602 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.090987533 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.091326588 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.09058592 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.120787646 seconds)
  done (took 2.909721848 seconds)
  (13/23) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.108727509 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.103059854 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.117442223 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.104767576 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.095418624 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.118876567 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.103857565 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.11707141 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.104631349 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.098044609 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.120625232 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.100946265 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.114938372 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.098736366 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.098551646 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.114438346 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.104446817 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.097825934 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.117472341 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.101682062 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.114310727 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.102592373 seconds)
  done (took 3.095240426 seconds)
  (14/23) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.11952997 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.149765592 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.116583103 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.145568429 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.104126937 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.099188489 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.110397202 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.127388632 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.090280166 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.111976819 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.105938389 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.123743036 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.094690873 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.097126027 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.11051016 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.094084993 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.095648135 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.109139341 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.097967987 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.093580283 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.11460709 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.095645671 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.103557784 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.119968489 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.097226575 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.092593494 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.110056046 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.097016677 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.118108238 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.09987277 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.096737774 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.113918828 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.105742199 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.094875651 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.109760255 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.094917585 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.106118017 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.113175042 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095603441 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.092605523 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.112909973 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.09763089 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.094655805 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.123096714 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.096598792 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.095253565 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.11203655 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.092656775 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.103280042 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.113132405 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.102687465 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.121101038 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.097283875 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.096167253 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.113283363 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.105382419 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.095524462 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.110702012 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.096251359 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.102755273 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.10970244 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.097482692 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.104941168 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.11359707 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.101645506 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.121507767 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.09692367 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.09645929 seconds)
  done (took 8.046069372 seconds)
  (15/23) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.125569924 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.098245055 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.124052811 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.105640258 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.097388277 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.114893533 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.100217744 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.097759616 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.116231421 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.104023005 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.11461138 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.182856835 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.11203199 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.102603447 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.09779775 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.11590222 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.098467682 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.097958754 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.11566465 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.09895764 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.095650674 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.122416155 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.098398347 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.123540801 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.110919499 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.094137564 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.113988246 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.097639941 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.10774466 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.114794516 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.109316906 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.11431766 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.098764158 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.106310204 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.125934734 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.098393145 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.092371524 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.11430009 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.098568177 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.096656401 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.111746297 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.107121768 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.11396897 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.097198916 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.099572237 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.113550943 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.105936241 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.109437237 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.119977369 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.103905304 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.113643009 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.107932894 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.098060805 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.114983272 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.107048719 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.113510263 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.126070263 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.106203916 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.114576559 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.107589249 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.105606178 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.130339085 seconds)
  done (took 7.530370933 seconds)
  (16/23) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.092486363 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.091415233 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.090589086 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.108255113 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.091922638 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.094162733 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.090488752 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.108278002 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.091750839 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.090806934 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.107693749 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.093133564 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.090609422 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.091185572 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.108538314 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.09177742 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.091457337 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.107752679 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.095497641 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.09173698 seconds)
  done (took 2.669848602 seconds)
  (17/23) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.10109253 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.109361453 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.11097645 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.099403378 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.094628117 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.116587536 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.094049569 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.095323735 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.093744028 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.112596388 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.102839062 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.118219551 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.095331385 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.099870629 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.119114939 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.099595286 seconds)
  done (took 2.414011529 seconds)
  (18/23) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.11308152 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.109751363 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.16841199 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.096629622 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.113827382 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.101160512 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.094258475 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.095381339 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.112502544 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.101501339 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.096973203 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.114722038 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.095674445 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.094861988 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.112360878 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.098865296 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.093148885 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.11650349 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.093638989 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.150392051 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.11702187 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.09647369 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.092803882 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.114608461 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.096660395 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.097486788 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.118523544 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.093630333 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.095494064 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.112252704 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.096801983 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.100630298 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.110909675 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.098651196 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.095381562 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.112659241 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.09480155 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.094918517 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.114852526 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.094859799 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.096583272 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.09501618 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.112173428 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.096213047 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.092935084 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.112836456 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.093047007 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.100281295 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.112629717 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.097207343 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.094652651 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.11798149 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.099338924 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.101311403 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.119820334 seconds)
  done (took 6.518897967 seconds)
  (19/23) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.105092494 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.094985255 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.122557669 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.093573479 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.094180546 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.0944114 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.11392196 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.097276958 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.094425389 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.110860307 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.096095617 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.096036025 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.112492896 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.096255366 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.09620564 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.112490897 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.092638364 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.09548421 seconds)
  done (took 2.573263813 seconds)
  (20/23) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.099055453 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.094327745 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.097872542 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.112700604 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.095781215 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.093741453 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.110521935 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.093092325 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.09359406 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.09379919 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.112489829 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.095296505 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.091927767 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.112594016 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.095173299 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.093566045 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.111601452 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.093898392 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.093993367 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.091548778 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.111338438 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.094838784 seconds)
  done (took 2.943180819 seconds)
  (21/23) benchmarking "intfuncs"...
    (1/12) benchmarking ("nextpow2", "Int64", "+")...
    done (took 0.105574564 seconds)
    (2/12) benchmarking ("prevpow2", "UInt64", "-")...
    done (took 0.166408993 seconds)
    (3/12) benchmarking ("prevpow2", "Int64", "+")...
    done (took 0.100818943 seconds)
    (4/12) benchmarking ("nextpow2", "BigInt", "-")...
    done (took 0.174622021 seconds)
    (5/12) benchmarking ("prevpow2", "UInt64", "+")...
    done (took 0.090650596 seconds)
    (6/12) benchmarking ("prevpow2", "Int64", "-")...
    done (took 0.089281862 seconds)
    (7/12) benchmarking ("nextpow2", "UInt64", "-")...
    done (took 0.117977474 seconds)
    (8/12) benchmarking ("nextpow2", "UInt64", "+")...
    done (took 0.090943184 seconds)
    (9/12) benchmarking ("prevpow2", "BigInt", "+")...
    done (took 0.106164369 seconds)
    (10/12) benchmarking ("prevpow2", "BigInt", "-")...
    done (took 0.107452275 seconds)
    (11/12) benchmarking ("nextpow2", "BigInt", "+")...
    done (took 0.089412493 seconds)
    (12/12) benchmarking ("nextpow2", "Int64", "-")...
    done (took 0.089169868 seconds)
  done (took 2.088377297 seconds)
  (22/23) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.121198835 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.130747359 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.114432518 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096536304 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102418248 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.115621621 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.098958593 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.098175824 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.123698081 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.110947373 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.115511188 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.106574874 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.105094357 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.125129405 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.10340551 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.120552964 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.099815696 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.098753762 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.112611917 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.114781415 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.09787035 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.123588877 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.098869593 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.097508963 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.116726176 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.106569047 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.125061488 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.111406615 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.100163304 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.123482183 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.104440933 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.096444299 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.12538602 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.110588991 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.112874898 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.107273375 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096884714 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.133459958 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.102219537 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.124680597 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.094897062 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.102338156 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.123419177 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.104303677 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.124276376 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.099031178 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.103279079 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.115229042 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.098283049 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.119226017 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.120355113 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.106589292 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.120453273 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.107071739 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.105810596 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.1387474 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.109403323 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.125659938 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.102596747 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.127606147 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.105769816 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.103063406 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.126097608 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.110214085 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.120856464 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.106803737 seconds)
  done (took 8.11709373 seconds)
  (23/23) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.134745244 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.095007592 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.118106567 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.110981173 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.125805679 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.100217309 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.098950698 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.117358576 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.099416841 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.095890245 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.158034298 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.100041001 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.107636517 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.125238702 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.100627977 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.117881005 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.101431027 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.106006647 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.115089938 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.122118039 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.11825283 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.109343012 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.106943697 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.125583243 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.110565432 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.12091578 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.099474614 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.099071981 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.118028908 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.100733608 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.105518001 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.117780068 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.10733389 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.095375029 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.12635789 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.100147149 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.116708639 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.105929981 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.100139199 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.121621344 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.109018852 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.113358342 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.118817631 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.099842435 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.129645004 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.101165955 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.099020655 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.11536598 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.099639142 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.095053625 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.129353724 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.111944957 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.129918605 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.109080299 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.099209128 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.117791654 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.100650804 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.098808487 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.117781627 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105406315 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.126895323 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.100686938 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.121397512 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.119256523 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.099891699 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.127144934 seconds)
  done (took 8.122405744 seconds)
done (took 92.918054038 seconds)
(11/20) benchmarking "sparse"...
  (1/4) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.134241502 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.168861785 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.130622503 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.16603918 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.085902506 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.119272114 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.117434726 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.151181657 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.084467241 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.104245331 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.085343614 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.087733986 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.172065359 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.086250337 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.086770366 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.087501342 seconds)
  done (took 2.631939986 seconds)
  (2/4) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.184748973 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.296069409 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.099506275 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.109571539 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.093642071 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.088552015 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.109375927 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.092779026 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.089616952 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.116160819 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.090725608 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.089328041 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.117333516 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.096888996 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.089842529 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.108184618 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.098086737 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.089950764 seconds)
  done (took 2.836651964 seconds)
  (3/4) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.120920154 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.200667258 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.329763231 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.136349837 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.131987316 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.108483101 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.158739322 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.102944493 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.196094904 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.104932926 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.103154579 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.107570874 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.117747127 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.095847773 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.126564301 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.088380894 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.128242276 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.12520061 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.104397838 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.091418836 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.134223681 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.095488689 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.115473609 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.105445544 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.169707963 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.123675885 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.093480608 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.113293343 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.093599243 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.104271206 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.116513942 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.107066738 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.122868857 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.14860615 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.111303222 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.147474361 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.116469517 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.092027228 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.102563464 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.110730788 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.095967311 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.094377491 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.123417167 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.089618785 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.093611336 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.118704703 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.095403649 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.115096197 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.100401496 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.099516225 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.116372403 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.098877405 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.165159039 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.099043518 seconds)
  done (took 7.328549871 seconds)
  (4/4) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.846126994 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.132897937 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.092289359 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 1.10217971 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.139995486 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.10380728 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.863889561 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.114375239 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.244516953 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.866511415 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.106958213 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.124213706 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.228361764 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.270280929 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 1.265323708 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.347539373 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.731592441 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.103918227 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.138510261 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.132393797 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.119585342 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.118073092 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.130246344 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.491047865 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.110288292 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.092053454 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.098766132 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.124015741 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.146650726 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.110679073 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.095893811 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.187280441 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.28165055 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.196409337 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.092705674 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.091144914 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.110479017 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.155095796 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.261285893 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.207667137 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.184135013 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.087276095 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.108854746 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.10155453 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.128282527 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.089775205 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.167190517 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.161439035 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.181493054 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.114111662 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.106471813 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.102736481 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.117573778 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.164770014 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.090160488 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.349154054 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.353366653 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.109934329 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.100007555 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.106232783 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.25641067 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.113101011 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.224145304 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.119570329 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.202121033 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.111832175 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.830348683 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.155788608 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.110027544 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.101890588 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.117219761 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.098644229 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.098285332 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.179924627 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.471526128 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.124131315 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.096240923 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.108842394 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.203008766 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.11159373 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.091035597 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.171963031 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.093342879 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.119574469 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.107902044 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.103329429 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.179457752 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.259869779 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.104338968 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.120668841 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.09855016 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.122889421 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.093916185 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.221223269 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.216974368 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.163732713 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.200594507 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.120450465 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.171001954 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.157001659 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.118841392 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.15983444 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.120065978 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.108614776 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.118972819 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.215297563 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.126513907 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.112923601 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.099265046 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.101032364 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.146430448 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.095196248 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.119798887 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.156004645 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.54546396 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.173132732 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.088955693 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.115149831 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.10165244 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.169079826 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.100611456 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.251148287 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.121396486 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.156154933 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.117251231 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.090058233 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.100586559 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.171361744 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.121324145 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.101934165 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.100435005 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.121578218 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.251151754 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.230094146 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.106839664 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.239816841 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.188406153 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.10092932 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.182952583 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.101925109 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.178233831 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.102384841 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.119022963 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.09480531 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.820245513 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.107189023 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.120808272 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.099165294 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.196416779 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.092350079 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.09463577 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.113357255 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.090187486 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.80572079 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.095392249 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.109816715 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.095623863 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.099483895 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.119509599 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.101575881 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.097641595 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.168045059 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.231971728 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.125854603 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.100769668 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.111277992 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.1493152 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.113302054 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.093283059 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.0930113 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.110936193 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.102508599 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.097687565 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.114869893 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.161198802 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.16514255 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.216801132 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.640550638 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.111615953 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.093203051 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.230898294 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.092598446 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.332448412 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.10217061 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.222434474 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.175884568 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.091452554 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.34932919 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.177142259 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.196390744 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.097630645 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.177708922 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.091206472 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.10052763 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.168055579 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.091959837 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.119886053 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.16410368 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.108965505 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.105082638 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 1.298722517 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.095095378 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.24464243 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.090001599 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.178157488 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.095762772 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.09944372 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.334143304 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.094668367 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.111582325 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.169866267 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.096473158 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.113462024 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 3.664107657 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.094794729 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.104765703 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.120839065 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.225163793 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.17449098 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.101642197 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.120888854 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.107362551 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.170048026 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.200023788 seconds)
  done (took 45.64839151 seconds)
done (took 59.21518525 seconds)
(12/20) benchmarking "broadcast"...
  (1/5) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.302993281 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.255540519 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.35831079 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.183763461 seconds)
  done (took 1.972785088 seconds)
  (2/5) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.231547856 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.149240396 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.199150538 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.089599256 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.223733937 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.088857702 seconds)
  done (took 1.790363762 seconds)
  (3/5) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.504110296 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.383480918 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.331263817 seconds)
  done (took 2.02722473 seconds)
  (4/5) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.249630367 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.236622418 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.320339037 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.402555293 seconds)
  done (took 2.123062926 seconds)
  (5/5) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.248983972 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.122358079 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.114241796 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.18581429 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.220921185 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.211087549 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.125315798 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.174902782 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.141816286 seconds)
  done (took 2.398631565 seconds)
done (took 11.117190009 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/192) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.330249457 seconds)
    (2/192) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.183178275 seconds)
    (3/192) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.219411713 seconds)
    (4/192) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.309832975 seconds)
    (5/192) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.298232822 seconds)
    (6/192) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.189214054 seconds)
    (7/192) benchmarking ("perf_simplecopy", Complex{Float64}, true)...
    done (took 0.154451332 seconds)
    (8/192) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.102395322 seconds)
    (9/192) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.188214396 seconds)
    (10/192) benchmarking ("map", abs, Complex{Float64}, false)...
    done (took 0.192245785 seconds)
    (11/192) benchmarking ("map", identity, Float32, true)...
    done (took 0.244011873 seconds)
    (12/192) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.218648687 seconds)
    (13/192) benchmarking ("map", identity, Float64, true)...
    done (took 0.137427558 seconds)
    (14/192) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.100012606 seconds)
    (15/192) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.293327052 seconds)
    (16/192) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.096593205 seconds)
    (17/192) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.148485431 seconds)
    (18/192) benchmarking ("map", abs, Float32, true)...
    done (took 0.132332123 seconds)
    (19/192) benchmarking ("perf_sum", Bool, true)...
    done (took 0.141328558 seconds)
    (20/192) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.098007976 seconds)
    (21/192) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.100836384 seconds)
    (22/192) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.095506821 seconds)
    (23/192) benchmarking ("map", abs, BigInt, false)...
    done (took 0.215939808 seconds)
    (24/192) benchmarking ("perf_sum", Float64, true)...
    done (took 0.118448396 seconds)
    (25/192) benchmarking ("perf_countequals", "Int8")...
    done (took 0.135555779 seconds)
    (26/192) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.175071928 seconds)
    (27/192) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.270888328 seconds)
    (28/192) benchmarking ("map", identity, Float64, false)...
    done (took 0.069906726 seconds)
    (29/192) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.212931398 seconds)
    (30/192) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.20996221 seconds)
    (31/192) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.230715561 seconds)
    (32/192) benchmarking ("perf_sum", Bool, false)...
    done (took 0.345570761 seconds)
    (33/192) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.090301311 seconds)
    (34/192) benchmarking ("map", abs, Float32, false)...
    done (took 0.091440678 seconds)
    (35/192) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.153879437 seconds)
    (36/192) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.069025318 seconds)
    (37/192) benchmarking ("map", *, Complex{Float64}, (true, true))...
    done (took 0.240753928 seconds)
    (38/192) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.100555331 seconds)
    (39/192) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.147718639 seconds)
    (40/192) benchmarking ("broadcast", identity, Complex{Float64}, false)...
    done (took 0.264424358 seconds)
    (41/192) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.150047664 seconds)
    (42/192) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.090521944 seconds)
    (43/192) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.28185076 seconds)
    (44/192) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.151859692 seconds)
    (45/192) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.068216407 seconds)
    (46/192) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.145992837 seconds)
    (47/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (false, true))...
    done (took 0.127247254 seconds)
    (48/192) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.211524641 seconds)
    (49/192) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.099602582 seconds)
    (50/192) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.226654064 seconds)
    (51/192) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.151704307 seconds)
    (52/192) benchmarking ("broadcast", abs, Complex{Float64}, true)...
    done (took 0.141505795 seconds)
    (53/192) benchmarking ("map", abs, BigInt, true)...
    done (took 0.096683723 seconds)
    (54/192) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.153757844 seconds)
    (55/192) benchmarking ("broadcast", *, Complex{Float64}, (false, false))...
    done (took 0.167655514 seconds)
    (56/192) benchmarking ("broadcast", identity, Complex{Float64}, true)...
    done (took 0.091044798 seconds)
    (57/192) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.171465606 seconds)
    (58/192) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.14608405 seconds)
    (59/192) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.108223071 seconds)
    (60/192) benchmarking ("map", abs, Int64, true)...
    done (took 0.135240441 seconds)
    (61/192) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.172338584 seconds)
    (62/192) benchmarking ("perf_countequals", "Float32")...
    done (took 0.112773899 seconds)
    (63/192) benchmarking ("perf_sum", Complex{Float64}, false)...
    done (took 0.123505016 seconds)
    (64/192) benchmarking ("map", *, Complex{Float64}, (false, true))...
    done (took 0.06838524 seconds)
    (65/192) benchmarking ("map", abs, Int64, false)...
    done (took 0.109466614 seconds)
    (66/192) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.153517394 seconds)
    (67/192) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.184561131 seconds)
    (68/192) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.076720042 seconds)
    (69/192) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.126217094 seconds)
    (70/192) benchmarking ("perf_countnothing", Complex{Float64}, false)...
    done (took 0.098711988 seconds)
    (71/192) benchmarking ("perf_sum", Float64, false)...
    done (took 0.122876052 seconds)
    (72/192) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.072361969 seconds)
    (73/192) benchmarking ("map", identity, Int64, true)...
    done (took 0.129762983 seconds)
    (74/192) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.116369699 seconds)
    (75/192) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.099287287 seconds)
    (76/192) benchmarking ("map", abs, Float64, true)...
    done (took 0.13146136 seconds)
    (77/192) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.125193278 seconds)
    (78/192) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.118260473 seconds)
    (79/192) benchmarking ("perf_countequals", "Int64")...
    done (took 0.111830279 seconds)
    (80/192) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.068909881 seconds)
    (81/192) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.186128017 seconds)
    (82/192) benchmarking ("broadcast", *, Complex{Float64}, (false, true))...
    done (took 0.072451273 seconds)
    (83/192) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.095322456 seconds)
    (84/192) benchmarking ("perf_countequals", "Bool")...
    done (took 0.134021767 seconds)
    (85/192) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.077772655 seconds)
    (86/192) benchmarking ("perf_sum", Complex{Float64}, true)...
    done (took 0.104218237 seconds)
    (87/192) benchmarking ("map", identity, Int8, true)...
    done (took 0.136539566 seconds)
    (88/192) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.089992227 seconds)
    (89/192) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.072801322 seconds)
    (90/192) benchmarking ("perf_sum", Float32, false)...
    done (took 0.118770811 seconds)
    (91/192) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.089609848 seconds)
    (92/192) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.121784112 seconds)
    (93/192) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.076418422 seconds)
    (94/192) benchmarking ("map", identity, BigInt, true)...
    done (took 0.13367724 seconds)
    (95/192) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.114479595 seconds)
    (96/192) benchmarking ("perf_sum", Int64, true)...
    done (took 0.118660638 seconds)
    (97/192) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.093980214 seconds)
    (98/192) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.090175277 seconds)
    (99/192) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.115795058 seconds)
    (100/192) benchmarking ("map", identity, Complex{Float64}, true)...
    done (took 0.138750294 seconds)
    (101/192) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.068809739 seconds)
    (102/192) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.114432319 seconds)
    (103/192) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.163506593 seconds)
    (104/192) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.120851142 seconds)
    (105/192) benchmarking ("map", identity, Complex{Float64}, false)...
    done (took 0.071681167 seconds)
    (106/192) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.07716962 seconds)
    (107/192) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.069418649 seconds)
    (108/192) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.069022838 seconds)
    (109/192) benchmarking ("map", identity, Bool, true)...
    done (took 0.159325373 seconds)
    (110/192) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.168721792 seconds)
    (111/192) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.154114871 seconds)
    (112/192) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.091762883 seconds)
    (113/192) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.095053815 seconds)
    (114/192) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.100812394 seconds)
    (115/192) benchmarking ("map", abs, Bool, true)...
    done (took 0.153026987 seconds)
    (116/192) benchmarking ("perf_sum", Float32, true)...
    done (took 0.104560368 seconds)
    (117/192) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.073807744 seconds)
    (118/192) benchmarking ("perf_countnothing", Complex{Float64}, true)...
    done (took 0.099598776 seconds)
    (119/192) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.090470396 seconds)
    (120/192) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.167467453 seconds)
    (121/192) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.07304279 seconds)
    (122/192) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.092891624 seconds)
    (123/192) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.090554149 seconds)
    (124/192) benchmarking ("map", identity, BigInt, false)...
    done (took 0.070724074 seconds)
    (125/192) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.169381444 seconds)
    (126/192) benchmarking ("map", abs, Bool, false)...
    done (took 0.165186617 seconds)
    (127/192) benchmarking ("broadcast", abs, Complex{Float64}, false)...
    done (took 0.069263868 seconds)
    (128/192) benchmarking ("map", abs, Int8, false)...
    done (took 0.128096218 seconds)
    (129/192) benchmarking ("map", identity, Int8, false)...
    done (took 0.069318866 seconds)
    (130/192) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.090915064 seconds)
    (131/192) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.114925507 seconds)
    (132/192) benchmarking ("perf_countequals", "Float64")...
    done (took 0.115397197 seconds)
    (133/192) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.173497315 seconds)
    (134/192) benchmarking ("map", *, Complex{Float64}, (false, false))...
    done (took 0.0702909 seconds)
    (135/192) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.07101821 seconds)
    (136/192) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.068954551 seconds)
    (137/192) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.07200228 seconds)
    (138/192) benchmarking ("perf_sum", Int64, false)...
    done (took 0.123607526 seconds)
    (139/192) benchmarking ("broadcast", *, Complex{Float64}, (true, true))...
    done (took 0.073011293 seconds)
    (140/192) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.093641878 seconds)
    (141/192) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.068417093 seconds)
    (142/192) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.092709174 seconds)
    (143/192) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.095295862 seconds)
    (144/192) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.072011979 seconds)
    (145/192) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.093711387 seconds)
    (146/192) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.091003586 seconds)
    (147/192) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.072686332 seconds)
    (148/192) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.072873909 seconds)
    (149/192) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.069747626 seconds)
    (150/192) benchmarking ("map", abs, Float64, false)...
    done (took 0.069694529 seconds)
    (151/192) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.112356773 seconds)
    (152/192) benchmarking ("map", identity, Float32, false)...
    done (took 0.071371829 seconds)
    (153/192) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.07237028 seconds)
    (154/192) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.092527388 seconds)
    (155/192) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.112534469 seconds)
    (156/192) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.070691201 seconds)
    (157/192) benchmarking ("map", abs, Complex{Float64}, true)...
    done (took 0.077181477 seconds)
    (158/192) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.069994591 seconds)
    (159/192) benchmarking ("map", identity, Int64, false)...
    done (took 0.070786058 seconds)
    (160/192) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.114988504 seconds)
    (161/192) benchmarking ("map", identity, Bool, false)...
    done (took 0.071822464 seconds)
    (162/192) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.101635991 seconds)
    (163/192) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.06940063 seconds)
    (164/192) benchmarking ("perf_countequals", "Complex{Float64}")...
    done (took 0.136781855 seconds)
    (165/192) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.096548833 seconds)
    (166/192) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.069976758 seconds)
    (167/192) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.071733889 seconds)
    (168/192) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.069428102 seconds)
    (169/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (false, false))...
    done (took 0.117520433 seconds)
    (170/192) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.103410229 seconds)
    (171/192) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.1001499 seconds)
    (172/192) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.115474382 seconds)
    (173/192) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.095482647 seconds)
    (174/192) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.101517237 seconds)
    (175/192) benchmarking ("map", abs, Int8, true)...
    done (took 0.096213721 seconds)
    (176/192) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.07114382 seconds)
    (177/192) benchmarking ("perf_sum", Int8, true)...
    done (took 0.17206935 seconds)
    (178/192) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.122707614 seconds)
    (179/192) benchmarking ("perf_simplecopy", Complex{Float64}, false)...
    done (took 0.092425248 seconds)
    (180/192) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.11332899 seconds)
    (181/192) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.114714972 seconds)
    (182/192) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.071048272 seconds)
    (183/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (true, true))...
    done (took 0.095941027 seconds)
    (184/192) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.070415143 seconds)
    (185/192) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.115003339 seconds)
    (186/192) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.070624929 seconds)
    (187/192) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.09555811 seconds)
    (188/192) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.070000678 seconds)
    (189/192) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.072125814 seconds)
    (190/192) benchmarking ("perf_sum", Int8, false)...
    done (took 0.124752059 seconds)
    (191/192) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.073871199 seconds)
    (192/192) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.072761504 seconds)
  done (took 24.491612357 seconds)
done (took 25.305221085 seconds)
(14/20) benchmarking "simd"...
  (1/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.16427465 seconds)
  (2/72) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.095444552 seconds)
  (3/72) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.123561441 seconds)
  (4/72) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.157834975 seconds)
  (5/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.183631218 seconds)
  (6/72) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.109016411 seconds)
  (7/72) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.138753076 seconds)
  (8/72) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.103271267 seconds)
  (9/72) benchmarking ("inner", "Float64", 4096)...
  done (took 0.110348185 seconds)
  (10/72) benchmarking ("inner", "Float64", 4095)...
  done (took 0.123211741 seconds)
  (11/72) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.093134593 seconds)
  (12/72) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.113350374 seconds)
  (13/72) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.122528395 seconds)
  (14/72) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.168943761 seconds)
  (15/72) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.125366885 seconds)
  (16/72) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.095227576 seconds)
  (17/72) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.093639561 seconds)
  (18/72) benchmarking ("inner", "Int32", 4096)...
  done (took 0.111310261 seconds)
  (19/72) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.140832106 seconds)
  (20/72) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.118768681 seconds)
  (21/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.185021546 seconds)
  (22/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.095728213 seconds)
  (23/72) benchmarking ("inner", "Int64", 4095)...
  done (took 0.11062126 seconds)
  (24/72) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.115879009 seconds)
  (25/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.166668553 seconds)
  (26/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.117015789 seconds)
  (27/72) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.103040158 seconds)
  (28/72) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.102812969 seconds)
  (29/72) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.136053384 seconds)
  (30/72) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.103554821 seconds)
  (31/72) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.102457487 seconds)
  (32/72) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.113527777 seconds)
  (33/72) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.118741252 seconds)
  (34/72) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.116737327 seconds)
  (35/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.092051836 seconds)
  (36/72) benchmarking ("inner", "Int32", 4095)...
  done (took 0.125162477 seconds)
  (37/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.093661151 seconds)
  (38/72) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.077829064 seconds)
  (39/72) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.123553513 seconds)
  (40/72) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.103804795 seconds)
  (41/72) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.114543869 seconds)
  (42/72) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.123180882 seconds)
  (43/72) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.104368518 seconds)
  (44/72) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.093787905 seconds)
  (45/72) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.124171669 seconds)
  (46/72) benchmarking ("inner", "Int64", 4096)...
  done (took 0.102828712 seconds)
  (47/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.093628719 seconds)
  (48/72) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.125928541 seconds)
  (49/72) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.092830192 seconds)
  (50/72) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.103817238 seconds)
  (51/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.094279617 seconds)
  (52/72) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.138997614 seconds)
  (53/72) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.102855783 seconds)
  (54/72) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.091047969 seconds)
  (55/72) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.113180615 seconds)
  (56/72) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.096131452 seconds)
  (57/72) benchmarking ("inner", "Float32", 4095)...
  done (took 0.111728118 seconds)
  (58/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.115120527 seconds)
  (59/72) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.116704899 seconds)
  (60/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.093111468 seconds)
  (61/72) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.114445903 seconds)
  (62/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.094251459 seconds)
  (63/72) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.105208644 seconds)
  (64/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.093425226 seconds)
  (65/72) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.123235131 seconds)
  (66/72) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.095267285 seconds)
  (67/72) benchmarking ("inner", "Float32", 4096)...
  done (took 0.101813133 seconds)
  (68/72) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.127107454 seconds)
  (69/72) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.102994796 seconds)
  (70/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.095500041 seconds)
  (71/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.113467484 seconds)
  (72/72) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.103962572 seconds)
done (took 9.071688895 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.099049043 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.138667392 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.183055958 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.193042161 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.121949944 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.106885202 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.131319231 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.118134305 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.10526198 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.135491596 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.130390635 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.146319041 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.168997007 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.131770349 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.109541807 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.105331094 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.128040132 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.102588208 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.189941478 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.119433659 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.118021884 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.1330681 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.121804343 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.130299026 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.097866856 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.118856771 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.122688346 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.106231899 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.097034181 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.137576952 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.118850202 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.097037311 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.121074647 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.117861242 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.115656422 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.12971846 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.110359322 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.105419073 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.119791205 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.099575951 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.105097448 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.134940499 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.100467399 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.108076055 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.127349883 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.112555716 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.104718224 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.132133304 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.099189815 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.104571868 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.12110441 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.124690823 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.108611865 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.136583013 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.111206416 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.109081818 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.132329831 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.112136075 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.100181661 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.132300191 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.099095567 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.09603983 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.120938291 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.120131197 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.100634827 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.133733002 seconds)
  done (took 8.820363617 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.118256447 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.127820867 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.129823136 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.109647693 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.102264166 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.113925818 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.092614105 seconds)
  done (took 1.658466831 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.094985759 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.170621966 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.193982493 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.193360096 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.165467864 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.201889518 seconds)
    (7/97) benchmarking ("randn", "MersenneTwister", "Complex{Float32}")...
    done (took 0.196510474 seconds)
    (8/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.092956511 seconds)
    (9/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.150199406 seconds)
    (10/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.103615897 seconds)
    (11/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.171269489 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "Complex{Float16}")...
    done (took 0.223900885 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.126288336 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.110314803 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.196695337 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.094070094 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.199119657 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.095031865 seconds)
    (19/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.189705321 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.174406608 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.132037422 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.124565901 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.10532798 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.115448654 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.16654342 seconds)
    (26/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.116068701 seconds)
    (27/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float16}")...
    done (took 0.222534669 seconds)
    (28/97) benchmarking ("randn", "MersenneTwister", "Complex{Float64}")...
    done (took 0.135738723 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.103868124 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.106838137 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.132580859 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.172121564 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.191543817 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.107815581 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.12391301 seconds)
    (36/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float32}")...
    done (took 0.170624761 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.18984846 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.105784329 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.205278674 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.097176057 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.191946838 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.10709803 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.130208168 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.107830577 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.107669358 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.180551566 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.112256576 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.131007887 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.108384643 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.17303473 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.127203309 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.167713514 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.128243191 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.108275229 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.103267455 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.133248631 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.177483022 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.132588573 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.175767459 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.133196199 seconds)
    (61/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.168268525 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.195129879 seconds)
    (63/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.192356643 seconds)
    (64/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.170000762 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{Float32}")...
    done (took 0.141317642 seconds)
    (66/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.170688094 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.187170837 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.105553697 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float64}")...
    done (took 0.125380959 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.167271848 seconds)
    (71/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.196855239 seconds)
    (72/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.105792609 seconds)
    (73/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.129946006 seconds)
    (74/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.160518614 seconds)
    (75/97) benchmarking ("randn", "MersenneTwister", "Complex{Float16}")...
    done (took 0.133446539 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.17115436 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.19667396 seconds)
    (78/97) benchmarking ("rand", "MersenneTwister", "Complex{Float64}")...
    done (took 0.104083927 seconds)
    (79/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.131302628 seconds)
    (80/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.097343547 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.105783747 seconds)
    (82/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.117586001 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.162762543 seconds)
    (84/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.131114147 seconds)
    (85/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.105937746 seconds)
    (86/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float16}")...
    done (took 0.112304832 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float64}")...
    done (took 0.129668341 seconds)
    (88/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.108730931 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.098993548 seconds)
    (90/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.139887903 seconds)
    (91/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.108952481 seconds)
    (92/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.10477951 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.136230697 seconds)
    (94/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.108520115 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float32}")...
    done (took 0.109634093 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.198654835 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.127226604 seconds)
  done (took 14.734029703 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.097434998 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.095504374 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.100216498 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.118329704 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.096419255 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.094968362 seconds)
  done (took 1.483383607 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.133243193 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.108238939 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.140419876 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.109805426 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.153637899 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.198029743 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.202816779 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.103517356 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.146518401 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.119561112 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.198448393 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.178128594 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.200366781 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.111393333 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.20582794 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.109407208 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.204710682 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.107083729 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.139332773 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.107076017 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.108423432 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.135597417 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.106533288 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.190110219 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.110188376 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.109903511 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.125522841 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.1181185 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.116504372 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.127203954 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.111701137 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.109586574 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.125179074 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.103063176 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.205444652 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.102059424 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.127400726 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.114783944 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.110904685 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.132916976 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.182158144 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.127977839 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.117374867 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.111203793 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.126066833 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.10270769 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.111629492 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.125942973 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.183708631 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.135026347 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.113797574 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.110726324 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.132757143 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.112609394 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.101892941 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.128071892 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.112626712 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.211359078 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.110839695 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.123349145 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.110914628 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.109677121 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.12628882 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.114544351 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.110657841 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.133922086 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.102349823 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.109033349 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.128733255 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.111796818 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.112338279 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.132396822 seconds)
  done (took 10.339808545 seconds)
done (took 37.892283904 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 1.532937329 seconds)
  done (took 2.416153722 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.015305237 seconds)
  done (took 1.9003507 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 17.018052241 seconds)
  done (took 17.934901905 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.514752526 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.574611184 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.10879178 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.160710043 seconds)
  done (took 3.247553977 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 2.97304096 seconds)
  done (took 3.870298647 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.2807484 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.257411451 seconds)
  done (took 1.430615401 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.676998237 seconds)
  done (took 1.57818673 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.481856683 seconds)
  done (took 2.373381336 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.369280502 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.157656906 seconds)
  done (took 1.435965515 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.590887009 seconds)
  done (took 1.49836153 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 19.169134265 seconds)
  done (took 20.077155425 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.246470175 seconds)
  done (took 1.159002015 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.282650433 seconds)
  done (took 1.194990357 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 3.463414316 seconds)
  done (took 4.374187697 seconds)
done (took 65.38255157 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.106807647 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.108149799 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.106742905 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.130041154 seconds)
  done (took 1.353610769 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Array{Float32,1} generator")...
    done (took 0.113029344 seconds)
    (2/24) benchmarking ("all", "Array{Float32,1}")...
    done (took 0.109634658 seconds)
    (3/24) benchmarking ("any", "Array{Float64,1} generator")...
    done (took 0.111886333 seconds)
    (4/24) benchmarking ("any", "Array{Int64,1}")...
    done (took 0.131462665 seconds)
    (5/24) benchmarking ("any", "Array{Int16,1} generator")...
    done (took 0.11522839 seconds)
    (6/24) benchmarking ("any", "Array{Float32,1}")...
    done (took 0.108726144 seconds)
    (7/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.130280273 seconds)
    (8/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.110182603 seconds)
    (9/24) benchmarking ("all", "Array{Int64,1}")...
    done (took 0.107459327 seconds)
    (10/24) benchmarking ("all", "Array{Int16,1}")...
    done (took 0.133778218 seconds)
    (11/24) benchmarking ("all", "Array{Float64,1}")...
    done (took 0.108708144 seconds)
    (12/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.106751348 seconds)
    (13/24) benchmarking ("any", "Array{Float32,1} generator")...
    done (took 0.133794035 seconds)
    (14/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.108584824 seconds)
    (15/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.10673349 seconds)
    (16/24) benchmarking ("all", "Array{Float64,1} generator")...
    done (took 0.133397986 seconds)
    (17/24) benchmarking ("all", "Array{Int64,1} generator")...
    done (took 0.113256256 seconds)
    (18/24) benchmarking ("any", "Array{Float64,1}")...
    done (took 0.108591356 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.130983802 seconds)
    (20/24) benchmarking ("any", "Array{Int16,1}")...
    done (took 0.110354149 seconds)
    (21/24) benchmarking ("any", "BitArray")...
    done (took 0.109274368 seconds)
    (22/24) benchmarking ("any", "Array{Int64,1} generator")...
    done (took 0.132059533 seconds)
    (23/24) benchmarking ("all", "Array{Int16,1} generator")...
    done (took 0.11314731 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.110710022 seconds)
  done (took 3.708975459 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.105499289 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.098877545 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.100325756 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.122232511 seconds)
  done (took 1.340383721 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.117606972 seconds)
    (2/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Int16,1}")...
    done (took 0.120856946 seconds)
    (3/24) benchmarking ("==", "Array{Float64,1}")...
    done (took 0.140605891 seconds)
    (4/24) benchmarking ("isequal", "Array{Float64,1}")...
    done (took 0.115148156 seconds)
    (5/24) benchmarking ("==", "Array{Int64,1} == Array{Float32,1}")...
    done (took 0.120952086 seconds)
    (6/24) benchmarking ("==", "Array{Float32,1}")...
    done (took 0.141120552 seconds)
    (7/24) benchmarking ("==", "Array{Int64,1}")...
    done (took 0.108645445 seconds)
    (8/24) benchmarking ("==", "Array{Int64,1} == Array{Int64,1}")...
    done (took 0.105277625 seconds)
    (9/24) benchmarking ("==", "Array{Int16,1}")...
    done (took 0.129512058 seconds)
    (10/24) benchmarking ("==", "Array{Int64,1} == Array{Int16,1}")...
    done (took 0.116931094 seconds)
    (11/24) benchmarking ("isequal", "BitArray")...
    done (took 0.123740679 seconds)
    (12/24) benchmarking ("==", "Array{Int64,1} == UnitRange{Int64}")...
    done (took 0.144258207 seconds)
    (13/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Float64,1}")...
    done (took 0.12128808 seconds)
    (14/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Int64,1}")...
    done (took 0.110980962 seconds)
    (15/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Float32,1}")...
    done (took 0.14216841 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.104230638 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.109210672 seconds)
    (18/24) benchmarking ("isequal", "Array{Int16,1}")...
    done (took 0.142565252 seconds)
    (19/24) benchmarking ("isequal", "Array{Float32,1}")...
    done (took 0.115407137 seconds)
    (20/24) benchmarking ("==", "Array{Int64,1} == Array{Float64,1}")...
    done (took 0.116912887 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.133508184 seconds)
    (22/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.115013531 seconds)
    (23/24) benchmarking ("isequal", "Array{Int64,1}")...
    done (took 0.113034559 seconds)
    (24/24) benchmarking ("isequal", "Array{Int64,1} isequal UnitRange{Int64}")...
    done (took 0.142236838 seconds)
  done (took 3.86104183 seconds)
  (5/13) benchmarking "reductions"...
    (1/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norminf", "Int64")...
    done (took 0.18451119 seconds)
    (2/22) benchmarking ("maxabs", "Float64")...
    done (took 0.120978624 seconds)
    (3/22) benchmarking ("sumabs", "Float64")...
    done (took 0.163442376 seconds)
    (4/22) benchmarking ("LinearAlgebra.norm", "Int64")...
    done (took 0.154643415 seconds)
    (5/22) benchmarking ("sumabs", "Int64")...
    done (took 0.166196524 seconds)
    (6/22) benchmarking ("sumabs2", "Float64")...
    done (took 0.106996391 seconds)
    (7/22) benchmarking ("sumabs2", "Int64")...
    done (took 0.135777877 seconds)
    (8/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_mapreduce", "Float64")...
    done (took 0.13975462 seconds)
    (9/22) benchmarking ("sum", "Int64")...
    done (took 0.116633283 seconds)
    (10/22) benchmarking ("mean", "Int64")...
    done (took 0.109823658 seconds)
    (11/22) benchmarking ("mean", "Float64")...
    done (took 0.134736774 seconds)
    (12/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norminf", "Float64")...
    done (took 0.154194498 seconds)
    (13/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_mapreduce", "Int64")...
    done (took 0.138092917 seconds)
    (14/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norm1", "Float64")...
    done (took 0.111106014 seconds)
    (15/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norm1", "Int64")...
    done (took 0.108706928 seconds)
    (16/22) benchmarking ("LinearAlgebra.norm", "Float64")...
    done (took 0.138046466 seconds)
    (17/22) benchmarking ("var", "Float64")...
    done (took 0.121418631 seconds)
    (18/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_reduce", "Float64")...
    done (took 0.114461409 seconds)
    (19/22) benchmarking ("var", "Int64")...
    done (took 0.178629941 seconds)
    (20/22) benchmarking ("sum", "Float64")...
    done (took 0.114021813 seconds)
    (21/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_reduce", "Int64")...
    done (took 0.137750023 seconds)
    (22/22) benchmarking ("maxabs", "Int64")...
    done (took 0.120847594 seconds)
  done (took 3.883600063 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.112046835 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.099613724 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.095300788 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.125209834 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.111217984 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.101463361 seconds)
  done (took 1.564536638 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.099502293 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.094297407 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.093175309 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.115842431 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.098556159 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.09326865 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.091728639 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.117549462 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.093267069 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.093603282 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.1171227 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.093546776 seconds)
  done (took 2.120541024 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.322446464 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.098706443 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.123970322 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.103823558 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.104729492 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.096656985 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.134479233 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.097712916 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.252153877 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.094539338 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.133085959 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.186499277 seconds)
  done (took 2.668096161 seconds)
  (9/13) benchmarking "index"...
    (1/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.193141243 seconds)
    (2/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.135271012 seconds)
    (3/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.242288958 seconds)
    (4/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.354258771 seconds)
    (5/481) benchmarking ("sumcartesian", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.172724868 seconds)
    (6/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.15685421 seconds)
    (7/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.276480733 seconds)
    (8/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.177430115 seconds)
    (9/481) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.170021707 seconds)
    (10/481) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.152577894 seconds)
    (11/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.196984693 seconds)
    (12/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.15180648 seconds)
    (13/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.142685188 seconds)
    (14/481) benchmarking ("sumcolon", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.198356737 seconds)
    (15/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.12905981 seconds)
    (16/481) benchmarking ("sumrange", "BitArray{2}")...
    done (took 0.175181693 seconds)
    (17/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.150867555 seconds)
    (18/481) benchmarking ("sumrange", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.220431191 seconds)
    (19/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.155194529 seconds)
    (20/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.199985863 seconds)
    (21/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.1721459 seconds)
    (22/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.186612668 seconds)
    (23/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.182554971 seconds)
    (24/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.163384643 seconds)
    (25/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.130017011 seconds)
    (26/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.17321568 seconds)
    (27/481) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.11038244 seconds)
    (28/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.118322011 seconds)
    (29/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.178675228 seconds)
    (30/481) benchmarking ("sumrange_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.152859597 seconds)
    (31/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.184912477 seconds)
    (32/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.162454394 seconds)
    (33/481) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.134086955 seconds)
    (34/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.20378756 seconds)
    (35/481) benchmarking ("sumelt", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.214353356 seconds)
    (36/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.184988831 seconds)
    (37/481) benchmarking ("mapr_access", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.259677617 seconds)
    (38/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.14625129 seconds)
    (39/481) benchmarking ("sumlinear_view", "BitArray{2}")...
    done (took 0.157364538 seconds)
    (40/481) benchmarking ("sumlogical", "Array{Float32,2}")...
    done (took 0.201588344 seconds)
    (41/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.243512949 seconds)
    (42/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.131073068 seconds)
    (43/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.200988868 seconds)
    (44/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.139943779 seconds)
    (45/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.144197828 seconds)
    (46/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.172650649 seconds)
    (47/481) benchmarking ("sumvector_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.166845105 seconds)
    (48/481) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.194357178 seconds)
    (49/481) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.123765302 seconds)
    (50/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.133990466 seconds)
    (51/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.196343529 seconds)
    (52/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.191477275 seconds)
    (53/481) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.164152333 seconds)
    (54/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.149556988 seconds)
    (55/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.269521401 seconds)
    (56/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.145744609 seconds)
    (57/481) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.133160607 seconds)
    (58/481) benchmarking ("mapr_access", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.179826309 seconds)
    (59/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.199936535 seconds)
    (60/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.189925581 seconds)
    (61/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.191350547 seconds)
    (62/481) benchmarking ("sumeach", "Array{Float32,2}")...
    done (took 0.113651002 seconds)
    (63/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.191102579 seconds)
    (64/481) benchmarking ("sumlogical", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.203270772 seconds)
    (65/481) benchmarking ("sumvector", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.200388476 seconds)
    (66/481) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.156616192 seconds)
    (67/481) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.152133789 seconds)
    (68/481) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.141195799 seconds)
    (69/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.154199081 seconds)
    (70/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.218828415 seconds)
    (71/481) benchmarking ("sumeach", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.192964279 seconds)
    (72/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.148912262 seconds)
    (73/481) benchmarking ("sum", "3dsubarray")...
    done (took 0.214058932 seconds)
    (74/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.14669542 seconds)
    (75/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.160268738 seconds)
    (76/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.181581019 seconds)
    (77/481) benchmarking ("sumeach_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.143588522 seconds)
    (78/481) benchmarking ("sumcolon", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.215650195 seconds)
    (79/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.182041639 seconds)
    (80/481) benchmarking ("sumlinear", "Array{Float32,2}")...
    done (took 0.112056479 seconds)
    (81/481) benchmarking ("sumeach_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.139435512 seconds)
    (82/481) benchmarking ("sumcartesian", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.148972069 seconds)
    (83/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.116818468 seconds)
    (84/481) benchmarking "5d"...
    done (took 0.206192112 seconds)
    (85/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.113028818 seconds)
    (86/481) benchmarking ("sumlogical", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.226584005 seconds)
    (87/481) benchmarking ("sumlinear", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.122511189 seconds)
    (88/481) benchmarking ("sumlogical", "BitArray{2}")...
    done (took 0.332862438 seconds)
    (89/481) benchmarking ("mapr_access", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.19682564 seconds)
    (90/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.146931286 seconds)
    (91/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.176964152 seconds)
    (92/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.149156281 seconds)
    (93/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.176985983 seconds)
    (94/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.138136844 seconds)
    (95/481) benchmarking ("sumelt", "BitArray{2}")...
    done (took 0.117086572 seconds)
    (96/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.132401473 seconds)
    (97/481) benchmarking ("sumlogical_view", "Array{Int32,2}")...
    done (took 0.15025276 seconds)
    (98/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.170208056 seconds)
    (99/481) benchmarking ("sumeach", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.118526908 seconds)
    (100/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.170338929 seconds)
    (101/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.129958998 seconds)
    (102/481) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.14113163 seconds)
    (103/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.142179303 seconds)
    (104/481) benchmarking ("sumlinear", "Array{Int32,2}")...
    done (took 0.111461957 seconds)
    (105/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.182988377 seconds)
    (106/481) benchmarking ("sumcolon", "BitArray{2}")...
    done (took 0.12458164 seconds)
    (107/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.177144435 seconds)
    (108/481) benchmarking ("sumrange", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.156838731 seconds)
    (109/481) benchmarking ("sumcartesian", "Array{Float64,3}")...
    done (took 0.145374931 seconds)
    (110/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.166509718 seconds)
    (111/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.163178752 seconds)
    (112/481) benchmarking ("sumvector", "Array{Float32,2}")...
    done (took 0.153859601 seconds)
    (113/481) benchmarking ("sumrange_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.180200624 seconds)
    (114/481) benchmarking ("sumlogical", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.207663972 seconds)
    (115/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.120333048 seconds)
    (116/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.121469874 seconds)
    (117/481) benchmarking ("sumlogical", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.229571692 seconds)
    (118/481) benchmarking ("sumrange", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.181727889 seconds)
    (119/481) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.126477297 seconds)
    (120/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.187267763 seconds)
    (121/481) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.185226121 seconds)
    (122/481) benchmarking ("sumvector", "BitArray{2}")...
    done (took 0.164784491 seconds)
    (123/481) benchmarking ("sumcartesian", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.123162658 seconds)
    (124/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.176855258 seconds)
    (125/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.205092559 seconds)
    (126/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.133721623 seconds)
    (127/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.212321063 seconds)
    (128/481) benchmarking ("sumelt", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.127362101 seconds)
    (129/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.123913145 seconds)
    (130/481) benchmarking ("sumcolon_view", "BitArray{2}")...
    done (took 0.153707547 seconds)
    (131/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.183944212 seconds)
    (132/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.15012009 seconds)
    (133/481) benchmarking "ind2sub"...
    done (took 0.166805019 seconds)
    (134/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.119213925 seconds)
    (135/481) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.153821302 seconds)
    (136/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.203113522 seconds)
    (137/481) benchmarking ("sumcartesian", "Array{Float32,2}")...
    done (took 0.115730916 seconds)
    (138/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.154959229 seconds)
    (139/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.192150691 seconds)
    (140/481) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.125148395 seconds)
    (141/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.115034553 seconds)
    (142/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.152933054 seconds)
    (143/481) benchmarking ("sumeach", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.125286861 seconds)
    (144/481) benchmarking ("sumcartesian_view", "Array{Int32,2}")...
    done (took 0.131435551 seconds)
    (145/481) benchmarking ("sumlinear_view", "Array{Float64,3}")...
    done (took 0.161468613 seconds)
    (146/481) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.127895481 seconds)
    (147/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.167776422 seconds)
    (148/481) benchmarking ("sumcolon", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.154810784 seconds)
    (149/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.179042901 seconds)
    (150/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.144082188 seconds)
    (151/481) benchmarking ("sumelt", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.14831724 seconds)
    (152/481) benchmarking ("sumelt", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.160012568 seconds)
    (153/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.146971873 seconds)
    (154/481) benchmarking ("sumrange", "Array{Int32,2}")...
    done (took 0.158648317 seconds)
    (155/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.162830168 seconds)
    (156/481) benchmarking ("sumelt", "1:100000")...
    done (took 0.109587378 seconds)
    (157/481) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.19109889 seconds)
    (158/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.186258227 seconds)
    (159/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.145245266 seconds)
    (160/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.170139182 seconds)
    (161/481) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.176706756 seconds)
    (162/481) benchmarking ("mapr_access", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.197138495 seconds)
    (163/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.160996653 seconds)
    (164/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.144612114 seconds)
    (165/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.174319616 seconds)
    (166/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.1422874 seconds)
    (167/481) benchmarking ("sumlinear", "Array{Float64,3}")...
    done (took 0.1108219 seconds)
    (168/481) benchmarking ("sumeach", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.148178647 seconds)
    (169/481) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.184453342 seconds)
    (170/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.173703063 seconds)
    (171/481) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.177363058 seconds)
    (172/481) benchmarking ("mapr_access", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.19608845 seconds)
    (173/481) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.180060223 seconds)
    (174/481) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.151733572 seconds)
    (175/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.16548686 seconds)
    (176/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.156853661 seconds)
    (177/481) benchmarking ("sumlogical", "Array{Int32,2}")...
    done (took 0.198860013 seconds)
    (178/481) benchmarking ("sumlinear", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.144358508 seconds)
    (179/481) benchmarking ("sumvector_view", "Array{Int32,2}")...
    done (took 0.159248755 seconds)
    (180/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.160175225 seconds)
    (181/481) benchmarking ("sumeach_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.181310848 seconds)
    (182/481) benchmarking ("sumelt_boundscheck", "Array{Float32,2}")...
    done (took 0.10998545 seconds)
    (183/481) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.139065648 seconds)
    (184/481) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.118013924 seconds)
    (185/481) benchmarking ("sumlinear", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.126106327 seconds)
    (186/481) benchmarking ("sumeach", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.144544732 seconds)
    (187/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.127263099 seconds)
    (188/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.190533538 seconds)
    (189/481) benchmarking ("sumrange_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.150628723 seconds)
    (190/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.195549013 seconds)
    (191/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.183028947 seconds)
    (192/481) benchmarking ("sumlinear", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.127503781 seconds)
    (193/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.20681451 seconds)
    (194/481) benchmarking ("sumeach", "1:100000")...
    done (took 0.1146507 seconds)
    (195/481) benchmarking ("sumrange_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.175301144 seconds)
    (196/481) benchmarking ("sumvector", "1:100000")...
    done (took 0.164804556 seconds)
    (197/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.15526133 seconds)
    (198/481) benchmarking ("sumlogical", "1:100000")...
    done (took 0.177804293 seconds)
    (199/481) benchmarking ("sumlogical", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.205155411 seconds)
    (200/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.190831559 seconds)
    (201/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.132171911 seconds)
    (202/481) benchmarking ("sumlinear", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.173486269 seconds)
    (203/481) benchmarking ("sumelt_boundscheck", "Array{Float64,3}")...
    done (took 0.112086707 seconds)
    (204/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.116824186 seconds)
    (205/481) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.148279902 seconds)
    (206/481) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.152299656 seconds)
    (207/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.150824609 seconds)
    (208/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.125873131 seconds)
    (209/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.13042482 seconds)
    (210/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.204046444 seconds)
    (211/481) benchmarking ("sumvector_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.186149947 seconds)
    (212/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.137530137 seconds)
    (213/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.207446731 seconds)
    (214/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.177516228 seconds)
    (215/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.188583244 seconds)
    (216/481) benchmarking ("sumelt", "Array{Float64,3}")...
    done (took 0.136690098 seconds)
    (217/481) benchmarking "4d"...
    done (took 0.152057965 seconds)
    (218/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.182028237 seconds)
    (219/481) benchmarking ("sumrange", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.159085996 seconds)
    (220/481) benchmarking ("sumeach_view", "Array{Int32,2}")...
    done (took 0.17188962 seconds)
    (221/481) benchmarking ("sumeach", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.144867375 seconds)
    (222/481) benchmarking ("sumcolon_view", "Array{Float32,2}")...
    done (took 0.148026652 seconds)
    (223/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.206882232 seconds)
    (224/481) benchmarking ("sumelt", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.128916376 seconds)
    (225/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.206135939 seconds)
    (226/481) benchmarking ("sumvector", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.181827479 seconds)
    (227/481) benchmarking ("sumvector", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.168063668 seconds)
    (228/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.207920234 seconds)
    (229/481) benchmarking ("sumrange", "Array{Float32,2}")...
    done (took 0.152218437 seconds)
    (230/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.146446297 seconds)
    (231/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.138140863 seconds)
    (232/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.178530435 seconds)
    (233/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.127155015 seconds)
    (234/481) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.179451913 seconds)
    (235/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.135331005 seconds)
    (236/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.144435681 seconds)
    (237/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.141498484 seconds)
    (238/481) benchmarking ("sumeach_view", "Array{Float64,3}")...
    done (took 0.127116998 seconds)
    (239/481) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.156178279 seconds)
    (240/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.195679928 seconds)
    (241/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.13320993 seconds)
    (242/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.190766463 seconds)
    (243/481) benchmarking ("sumlogical_view", "Array{Float32,2}")...
    done (took 0.147282947 seconds)
    (244/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.18421496 seconds)
    (245/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.115313612 seconds)
    (246/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.154552402 seconds)
    (247/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.163262158 seconds)
    (248/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.159752177 seconds)
    (249/481) benchmarking ("sumelt_boundscheck", "BitArray{2}")...
    done (took 0.09775711 seconds)
    (250/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.156674724 seconds)
    (251/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.208964082 seconds)
    (252/481) benchmarking ("sumelt_boundscheck", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.169196883 seconds)
    (253/481) benchmarking ("sumvector_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.14473391 seconds)
    (254/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.187557241 seconds)
    (255/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.119551929 seconds)
    (256/481) benchmarking ("mapr_access", "BitArray{2}")...
    done (took 0.324599996 seconds)
    (257/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.172480616 seconds)
    (258/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.19044296 seconds)
    (259/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.124809228 seconds)
    (260/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.155010473 seconds)
    (261/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.160944304 seconds)
    (262/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.176514078 seconds)
    (263/481) benchmarking ("sumvector_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.150568408 seconds)
    (264/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.199055169 seconds)
    (265/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.127977949 seconds)
    (266/481) benchmarking ("sumvector", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.221115291 seconds)
    (267/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.18488424 seconds)
    (268/481) benchmarking ("sumvector_view", "Array{Float32,2}")...
    done (took 0.132885985 seconds)
    (269/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.117806651 seconds)
    (270/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.161413822 seconds)
    (271/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.138331079 seconds)
    (272/481) benchmarking ("sumrange_view", "BitArray{2}")...
    done (took 0.15573411 seconds)
    (273/481) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.141336252 seconds)
    (274/481) benchmarking ("sumcolon", "1:100000")...
    done (took 0.180611238 seconds)
    (275/481) benchmarking ("sumcartesian_view", "Array{Float32,2}")...
    done (took 0.133227748 seconds)
    (276/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.197626479 seconds)
    (277/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.124876659 seconds)
    (278/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.185504078 seconds)
    (279/481) benchmarking ("sumvector", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.186462533 seconds)
    (280/481) benchmarking "3d"...
    done (took 0.136810545 seconds)
    (281/481) benchmarking ("sum", "3darray")...
    done (took 0.139370086 seconds)
    (282/481) benchmarking ("sumlinear", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.155019055 seconds)
    (283/481) benchmarking ("sumlogical", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.235424814 seconds)
    (284/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.158037407 seconds)
    (285/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.18530539 seconds)
    (286/481) benchmarking ("sumcolon", "Array{Int32,2}")...
    done (took 0.153304878 seconds)
    (287/481) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.178418713 seconds)
    (288/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.172043004 seconds)
    (289/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.137852205 seconds)
    (290/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.117874387 seconds)
    (291/481) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.120208034 seconds)
    (292/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.201472329 seconds)
    (293/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.118081014 seconds)
    (294/481) benchmarking ("sumcolon", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.190284972 seconds)
    (295/481) benchmarking ("mapr_access", "Array{Float32,2}")...
    done (took 0.180862723 seconds)
    (296/481) benchmarking ("mapr_access", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.174538269 seconds)
    (297/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.185875964 seconds)
    (298/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.176259687 seconds)
    (299/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.130446168 seconds)
    (300/481) benchmarking ("sumeach", "Array{Float64,3}")...
    done (took 0.116321328 seconds)
    (301/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.181161193 seconds)
    (302/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.137627341 seconds)
    (303/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.202955422 seconds)
    (304/481) benchmarking ("sumelt", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.147093919 seconds)
    (305/481) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.1270696 seconds)
    (306/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.202860984 seconds)
    (307/481) benchmarking ("sumcartesian_view", "BitArray{2}")...
    done (took 0.118680429 seconds)
    (308/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.120142307 seconds)
    (309/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.176473577 seconds)
    (310/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.2768833 seconds)
    (311/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.13930625 seconds)
    (312/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.184060659 seconds)
    (313/481) benchmarking ("sumeach", "BitArray{2}")...
    done (took 0.098130534 seconds)
    (314/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.255167317 seconds)
    (315/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.141392298 seconds)
    (316/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.122282401 seconds)
    (317/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.176697111 seconds)
    (318/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.158230767 seconds)
    (319/481) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.150653531 seconds)
    (320/481) benchmarking ("sumeach_view", "Array{Float32,2}")...
    done (took 0.169938178 seconds)
    (321/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.188151167 seconds)
    (322/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.131531844 seconds)
    (323/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.151338361 seconds)
    (324/481) benchmarking ("sumcartesian", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.150979001 seconds)
    (325/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.19491763 seconds)
    (326/481) benchmarking ("mapr_access", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.176996522 seconds)
    (327/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.179484361 seconds)
    (328/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.185993616 seconds)
    (329/481) benchmarking ("sumrange_view", "Array{Float32,2}")...
    done (took 0.136752207 seconds)
    (330/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.174303767 seconds)
    (331/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.150136872 seconds)
    (332/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.189315579 seconds)
    (333/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.136434346 seconds)
    (334/481) benchmarking ("sumcartesian_view", "Array{Float64,3}")...
    done (took 0.136541808 seconds)
    (335/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.173913758 seconds)
    (336/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.208898547 seconds)
    (337/481) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.168500803 seconds)
    (338/481) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.146651137 seconds)
    (339/481) benchmarking ("sumvector", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.158326179 seconds)
    (340/481) benchmarking ("sumvector", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.183873098 seconds)
    (341/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.160016376 seconds)
    (342/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.18895136 seconds)
    (343/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.128231451 seconds)
    (344/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.199430047 seconds)
    (345/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.116842439 seconds)
    (346/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.180509191 seconds)
    (347/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.128490886 seconds)
    (348/481) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.114371976 seconds)
    (349/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.175017695 seconds)
    (350/481) benchmarking ("mapr_access", "Array{Int32,2}")...
    done (took 0.183222469 seconds)
    (351/481) benchmarking ("sumlinear", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.122053507 seconds)
    (352/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.188011423 seconds)
    (353/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.160818269 seconds)
    (354/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.145047246 seconds)
    (355/481) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.118422435 seconds)
    (356/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.134724822 seconds)
    (357/481) benchmarking ("sumcolon", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.18214041 seconds)
    (358/481) benchmarking ("sumelt", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.128181004 seconds)
    (359/481) benchmarking ("sumcartesian", "Array{Int32,2}")...
    done (took 0.145651475 seconds)
    (360/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.171028517 seconds)
    (361/481) benchmarking ("sumeach", "Array{Int32,2}")...
    done (took 0.146426011 seconds)
    (362/481) benchmarking ("sumrange", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.168528424 seconds)
    (363/481) benchmarking ("sumcolon", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.221625306 seconds)
    (364/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.119568621 seconds)
    (365/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.184286498 seconds)
    (366/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.136249035 seconds)
    (367/481) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143720307 seconds)
    (368/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.129363825 seconds)
    (369/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.131401812 seconds)
    (370/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.148066042 seconds)
    (371/481) benchmarking ("sumlinear_view", "Array{Float32,2}")...
    done (took 0.16085138 seconds)
    (372/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.194913963 seconds)
    (373/481) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.121900831 seconds)
    (374/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.196640037 seconds)
    (375/481) benchmarking ("sumlinear", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.151370565 seconds)
    (376/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.178969946 seconds)
    (377/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.145573488 seconds)
    (378/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.159576582 seconds)
    (379/481) benchmarking "sub2ind"...
    done (took 1.319181076 seconds)
    (380/481) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.116266779 seconds)
    (381/481) benchmarking ("sumlogical", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.205077557 seconds)
    (382/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.165578098 seconds)
    (383/481) benchmarking ("sumlinear_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.185745077 seconds)
    (384/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.167861626 seconds)
    (385/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.164433405 seconds)
    (386/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.185049265 seconds)
    (387/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.13870337 seconds)
    (388/481) benchmarking ("sumeach", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.17889494 seconds)
    (389/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.136704678 seconds)
    (390/481) benchmarking "6d"...
    done (took 0.239909579 seconds)
    (391/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.152423039 seconds)
    (392/481) benchmarking ("sumrange", "1:100000")...
    done (took 0.184080307 seconds)
    (393/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.121082305 seconds)
    (394/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.158310087 seconds)
    (395/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.128603197 seconds)
    (396/481) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.12206187 seconds)
    (397/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.16873169 seconds)
    (398/481) benchmarking ("sumvector", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.157311058 seconds)
    (399/481) benchmarking ("sumeach_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.157877611 seconds)
    (400/481) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.125459004 seconds)
    (401/481) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.183086328 seconds)
    (402/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.134391724 seconds)
    (403/481) benchmarking ("sumcolon_view", "Array{Int32,2}")...
    done (took 0.160912403 seconds)
    (404/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.132609303 seconds)
    (405/481) benchmarking ("sumlogical", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.213889554 seconds)
    (406/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.139837473 seconds)
    (407/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.201401916 seconds)
    (408/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.174172134 seconds)
    (409/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.155166877 seconds)
    (410/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.163266904 seconds)
    (411/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.189427008 seconds)
    (412/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.117029784 seconds)
    (413/481) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.179851744 seconds)
    (414/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.18647775 seconds)
    (415/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.135591212 seconds)
    (416/481) benchmarking ("sumelt", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.13797598 seconds)
    (417/481) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.150310936 seconds)
    (418/481) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.128268259 seconds)
    (419/481) benchmarking ("sumrange", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.2271574 seconds)
    (420/481) benchmarking ("sumelt_boundscheck", "Array{Int32,2}")...
    done (took 0.115705362 seconds)
    (421/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.176697615 seconds)
    (422/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.163235024 seconds)
    (423/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.185412697 seconds)
    (424/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.161056273 seconds)
    (425/481) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.152640296 seconds)
    (426/481) benchmarking ("sumcolon", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.166741807 seconds)
    (427/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.157545117 seconds)
    (428/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.164472558 seconds)
    (429/481) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143161317 seconds)
    (430/481) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.142467327 seconds)
    (431/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.184270787 seconds)
    (432/481) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.12455194 seconds)
    (433/481) benchmarking ("sumlinear", "1:100000")...
    done (took 0.116151338 seconds)
    (434/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.186201972 seconds)
    (435/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.146509088 seconds)
    (436/481) benchmarking ("sumvector", "Array{Int32,2}")...
    done (took 0.181886383 seconds)
    (437/481) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.133139977 seconds)
    (438/481) benchmarking ("sumlinear_view", "Array{Int32,2}")...
    done (took 0.188167793 seconds)
    (439/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.185347485 seconds)
    (440/481) benchmarking ("sumelt", "Array{Float32,2}")...
    done (took 0.13847043 seconds)
    (441/481) benchmarking ("sumeach", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.123434428 seconds)
    (442/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.281914129 seconds)
    (443/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.151291652 seconds)
    (444/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.209183374 seconds)
    (445/481) benchmarking ("sumvector_view", "BitArray{2}")...
    done (took 0.12794852 seconds)
    (446/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.151413032 seconds)
    (447/481) benchmarking ("sumeach_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.137590688 seconds)
    (448/481) benchmarking ("sumcartesian_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.14669324 seconds)
    (449/481) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.180709542 seconds)
    (450/481) benchmarking ("sumrange", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.183145571 seconds)
    (451/481) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.126011912 seconds)
    (452/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.11829908 seconds)
    (453/481) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.161782368 seconds)
    (454/481) benchmarking ("sumeach_view", "BitArray{2}")...
    done (took 0.146907923 seconds)
    (455/481) benchmarking ("sumlogical_view", "BitArray{2}")...
    done (took 0.1551337 seconds)
    (456/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.158396698 seconds)
    (457/481) benchmarking ("mapr_access", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.185633749 seconds)
    (458/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.150926853 seconds)
    (459/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.200877759 seconds)
    (460/481) benchmarking "2d"...
    done (took 0.126472503 seconds)
    (461/481) benchmarking "7d"...
    done (took 0.270676998 seconds)
    (462/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.133458699 seconds)
    (463/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.186891977 seconds)
    (464/481) benchmarking ("sumcartesian", "BitArray{2}")...
    done (took 0.10857556 seconds)
    (465/481) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.118594233 seconds)
    (466/481) benchmarking ("sumlinear", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.157595134 seconds)
    (467/481) benchmarking ("sumeach", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.126097108 seconds)
    (468/481) benchmarking ("sumelt", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.129988987 seconds)
    (469/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.197850707 seconds)
    (470/481) benchmarking ("sumrange", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.226783534 seconds)
    (471/481) benchmarking ("sumcolon", "Array{Float32,2}")...
    done (took 0.153278139 seconds)
    (472/481) benchmarking ("sumrange_view", "Array{Int32,2}")...
    done (took 0.165069193 seconds)
    (473/481) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.124215751 seconds)
    (474/481) benchmarking ("sumelt", "Array{Int32,2}")...
    done (took 0.142761144 seconds)
    (475/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.121016827 seconds)
    (476/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.152114813 seconds)
    (477/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.165164998 seconds)
    (478/481) benchmarking ("sumcolon", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.157189601 seconds)
    (479/481) benchmarking ("sumcartesian", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.163405065 seconds)
    (480/481) benchmarking ("sumlinear", "BitArray{2}")...
    done (took 0.09469187 seconds)
    (481/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.155504678 seconds)
  done (took 80.300760569 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("collect", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 0.150603239 seconds)
    (2/8) benchmarking ("collect", "Array{Float64,1}")...
    done (took 0.141211827 seconds)
    (3/8) benchmarking ("comprehension_collect", "Array{Float64,1}")...
    done (took 0.156286171 seconds)
    (4/8) benchmarking ("comprehension_iteration", "Array{Float64,1}")...
    done (took 0.209239891 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 0.181956341 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 0.275048532 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Array{Float64,1}")...
    done (took 0.217738902 seconds)
    (8/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 0.235092983 seconds)
  done (took 2.570606639 seconds)
  (11/13) benchmarking "cat"...
    (1/16) benchmarking ("hvcat", 500)...
    done (took 0.109855289 seconds)
    (2/16) benchmarking ("hcat_setind", 5)...
    done (took 0.146932812 seconds)
    (3/16) benchmarking ("hvcat_setind", 500)...
    done (took 0.132057504 seconds)
    (4/16) benchmarking ("hvcat", 5)...
    done (took 0.130632295 seconds)
    (5/16) benchmarking ("hcat", 500)...
    done (took 0.100735127 seconds)
    (6/16) benchmarking ("catnd_setind", 5)...
    done (took 0.423151867 seconds)
    (7/16) benchmarking ("vcat_setind", 500)...
    done (took 0.14954133 seconds)
    (8/16) benchmarking ("hvcat_setind", 5)...
    done (took 0.133721808 seconds)
    (9/16) benchmarking ("vcat", 5)...
    done (took 0.150950945 seconds)
    (10/16) benchmarking ("catnd_setind", 500)...
    done (took 0.138350346 seconds)
    (11/16) benchmarking ("vcat", 500)...
    done (took 0.123667088 seconds)
    (12/16) benchmarking ("catnd", 5)...
    done (took 0.516807264 seconds)
    (13/16) benchmarking ("vcat_setind", 5)...
    done (took 0.109119299 seconds)
    (14/16) benchmarking ("hcat_setind", 500)...
    done (took 0.13200143 seconds)
    (15/16) benchmarking ("catnd", 500)...
    done (took 0.112728664 seconds)
    (16/16) benchmarking ("hcat", 5)...
    done (took 0.122612062 seconds)
  done (took 3.730757674 seconds)
  (12/13) benchmarking "subarray"...
    (1/8) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.635188713 seconds)
    (2/8) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.518159186 seconds)
    (3/8) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.780246172 seconds)
    (4/8) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.27353645 seconds)
    (5/8) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.240073058 seconds)
    (6/8) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.185998892 seconds)
    (7/8) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.704155204 seconds)
    (8/8) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.18969334 seconds)
  done (took 11.532603027 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.147167376 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.134937836 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.40161117 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.235465289 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.194765711 seconds)
  done (took 2.125496132 seconds)
done (took 121.665459411 seconds)
(18/20) benchmarking "misc"...
  (1/6) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.114124207 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.113439826 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.112569479 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.141881076 seconds)
  done (took 1.484570032 seconds)
  (2/6) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.163442292 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.081979659 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.084671042 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.107459345 seconds)
  done (took 1.44907546 seconds)
  (3/6) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.428390883 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.081324807 seconds)
  done (took 1.547050421 seconds)
  (4/6) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.137654537 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.125830666 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.152451009 seconds)
  done (took 1.440527568 seconds)
  (5/6) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.129099484 seconds)
  done (took 1.142955789 seconds)
  (6/6) benchmarking "parse"...
    (1/3) benchmarking "Int"...
    done (took 0.112475778 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.106402255 seconds)
    (3/3) benchmarking "DateTime"...
    done (took 0.218769511 seconds)
  done (took 1.456451913 seconds)
done (took 9.539829416 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.109642664 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.916351584 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.420343765 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.123741923 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.710462926 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.41422591 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.411715219 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.16115519 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.165888294 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.12471221 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.121708669 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.680684874 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.422577255 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.868456399 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 1.383968017 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.890337149 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.685385082 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.101855748 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.133313493 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.102029878 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 1.393823917 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.124413719 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.103195298 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.101294681 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.706797924 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.410865642 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.099291565 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.90771447 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.100315098 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.10355711 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.413824881 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.101240609 seconds)
  done (took 20.521557109 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.109042295 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.157779358 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.133850512 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.103131352 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.103785121 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.127898791 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.114299369 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.113116259 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.19125862 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.100548087 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.14846369 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.101009649 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105710272 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.126495868 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.126978608 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.098936896 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.129561411 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.104274434 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.109695785 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.126813921 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.122868209 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.100500254 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.128646296 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.104732069 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.101577656 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.146945332 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.102303008 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.114697621 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.125960217 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.106027711 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.106255494 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.100992323 seconds)
  done (took 4.818625023 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.148151307 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.165091899 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.135545851 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.138499687 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.174138655 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.103686667 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.21130243 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.139860486 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.190512942 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.101611255 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.12164785 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.125523625 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.141502997 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.101258175 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.151764814 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.100679917 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.104294088 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.128309261 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.109407736 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.102151142 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.148858832 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.101745262 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.103346865 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.128526285 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.10283145 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.123770386 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.127485681 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.114988482 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.099233652 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.130734189 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.107320802 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.119550295 seconds)
  done (took 5.129751256 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.11515851 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.115844437 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.124635156 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.149417653 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.111479373 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.114301997 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.141712719 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.111951792 seconds)
  done (took 2.014127543 seconds)
done (took 33.502324848 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/33) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.128926039 seconds)
    (2/33) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.121149162 seconds)
    (3/33) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.123263691 seconds)
    (4/33) benchmarking ("Set", "Any", "loop")...
    done (took 0.142878189 seconds)
    (5/33) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.175169273 seconds)
    (6/33) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.1381137 seconds)
    (7/33) benchmarking ("Vector", "String", "loop")...
    done (took 0.121460447 seconds)
    (8/33) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.109952711 seconds)
    (9/33) benchmarking ("Vector", "Int", "loop")...
    done (took 0.143226881 seconds)
    (10/33) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.123454769 seconds)
    (11/33) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.100389912 seconds)
    (12/33) benchmarking ("Dict", "String", "loop")...
    done (took 0.111339836 seconds)
    (13/33) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.148983257 seconds)
    (14/33) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.114561644 seconds)
    (15/33) benchmarking ("Set", "String", "iterator")...
    done (took 0.202959931 seconds)
    (16/33) benchmarking ("Set", "String", "loop")...
    done (took 0.11854297 seconds)
    (17/33) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.20570683 seconds)
    (18/33) benchmarking ("Set", "Any", "iterator")...
    done (took 0.176558238 seconds)
    (19/33) benchmarking ("Set", "Int", "loop")...
    done (took 0.137628296 seconds)
    (20/33) benchmarking ("Vector", "Any", "loop")...
    done (took 0.118239286 seconds)
    (21/33) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.111532878 seconds)
    (22/33) benchmarking ("Dict", "String", "iterator")...
    done (took 0.20885355 seconds)
    (23/33) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.11570542 seconds)
    (24/33) benchmarking ("Dict", "Int", "loop")...
    done (took 0.11123337 seconds)
    (25/33) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.205111063 seconds)
    (26/33) benchmarking ("Vector", "String", "iterator")...
    done (took 0.12273922 seconds)
    (27/33) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.197491992 seconds)
    (28/33) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.112952823 seconds)
    (29/33) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.139962099 seconds)
    (30/33) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.104320472 seconds)
    (31/33) benchmarking ("Set", "Int", "iterator")...
    done (took 0.203130319 seconds)
    (32/33) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.116704475 seconds)
    (33/33) benchmarking ("Dict", "Any", "loop")...
    done (took 0.111485647 seconds)
  done (took 5.642416098 seconds)
  (2/6) benchmarking "iteration"...
    (1/30) benchmarking ("Set", "String", "next")...
    done (took 0.190821257 seconds)
    (2/30) benchmarking ("Set", "Any", "start")...
    done (took 0.111016139 seconds)
    (3/30) benchmarking ("Set", "Int", "done")...
    done (took 0.1374803 seconds)
    (4/30) benchmarking ("Dict", "Int", "done")...
    done (took 0.110389736 seconds)
    (5/30) benchmarking ("Dict", "String", "start")...
    done (took 0.109897169 seconds)
    (6/30) benchmarking ("BitSet", "Int", "done")...
    done (took 0.13505401 seconds)
    (7/30) benchmarking ("Dict", "String", "next")...
    done (took 0.194682582 seconds)
    (8/30) benchmarking ("Vector", "Int", "done")...
    done (took 0.134957772 seconds)
    (9/30) benchmarking ("Vector", "String", "done")...
    done (took 0.1102404 seconds)
    (10/30) benchmarking ("Vector", "Any", "done")...
    done (took 0.108996713 seconds)
    (11/30) benchmarking ("Dict", "String", "done")...
    done (took 0.10951157 seconds)
    (12/30) benchmarking ("Vector", "Int", "next")...
    done (took 0.205454375 seconds)
    (13/30) benchmarking ("Set", "Int", "next")...
    done (took 0.11557789 seconds)
    (14/30) benchmarking ("Vector", "Int", "start")...
    done (took 0.13184504 seconds)
    (15/30) benchmarking ("Dict", "Int", "start")...
    done (took 0.113292339 seconds)
    (16/30) benchmarking ("Vector", "Any", "next")...
    done (took 0.100987953 seconds)
    (17/30) benchmarking ("Dict", "Any", "next")...
    done (took 0.220600892 seconds)
    (18/30) benchmarking ("Set", "String", "start")...
    done (took 0.111406759 seconds)
    (19/30) benchmarking ("Vector", "String", "next")...
    done (took 0.101590542 seconds)
    (20/30) benchmarking ("Set", "Any", "next")...
    done (took 0.083784193 seconds)
    (21/30) benchmarking ("Vector", "String", "start")...
    done (took 0.132852352 seconds)
    (22/30) benchmarking ("Dict", "Any", "done")...
    done (took 0.109751449 seconds)
    (23/30) benchmarking ("Dict", "Int", "next")...
    done (took 0.233843433 seconds)
    (24/30) benchmarking ("Vector", "Any", "start")...
    done (took 0.107617906 seconds)
    (25/30) benchmarking ("Set", "String", "done")...
    done (took 0.108462881 seconds)
    (26/30) benchmarking ("Set", "Any", "done")...
    done (took 0.135234296 seconds)
    (27/30) benchmarking ("Set", "Int", "start")...
    done (took 0.114258832 seconds)
    (28/30) benchmarking ("BitSet", "Int", "next")...
    done (took 0.113586446 seconds)
    (29/30) benchmarking ("BitSet", "Int", "start")...
    done (took 0.109865028 seconds)
    (30/30) benchmarking ("Dict", "Any", "start")...
    done (took 0.138351249 seconds)
  done (took 4.980158147 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.116724653 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.122853617 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.126329627 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.203381626 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.139039807 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.146726025 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.129961977 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.124523526 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.157030768 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.103348324 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.117449115 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.165412377 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.119130166 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.115094399 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.133651079 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.125019373 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.12463369 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.131102102 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.112736683 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.120520099 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.149655871 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.121537888 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.126615592 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.137318668 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.103197761 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.11098794 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.138132218 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.119271421 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.111846202 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.118405615 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.132671007 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.106948746 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.104551127 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.164828862 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.106073843 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.116101369 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.156569845 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.116449302 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.116553191 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.164287502 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.107615703 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.104960016 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.156263587 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.158168281 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.103650327 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.14450253 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.115756123 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.116807566 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.129903863 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.122111552 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.145898984 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.129420713 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.12408485 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.102109731 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.128803825 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.114414215 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.104651769 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.133959872 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.119748995 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.106468558 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.153175847 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.112647412 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.114625952 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.130593237 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.116336112 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.102874298 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.102702163 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.134595784 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.131076746 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.111233232 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.166488222 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.104587044 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.114960718 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.14313802 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.115992996 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.115975774 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.130016351 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.116450637 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.114306564 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.10931302 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.144563716 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.107323568 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.106059988 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.147402468 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.125947085 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.115919621 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.141923121 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.116849169 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.106005836 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.132740643 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.121060021 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.105240114 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.134780879 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.118176555 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.104000114 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.13375992 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.119248629 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.114397142 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.101066793 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.156768698 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.108918468 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.102788088 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.155187249 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.107340722 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.108227894 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.140477716 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.145837359 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.10364497 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.140789672 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.117844411 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.103079953 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.137607328 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.109532007 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.103923576 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.147682705 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.120376727 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.110680076 seconds)
  done (took 15.624457423 seconds)
  (4/6) benchmarking "optimizations"...
    (1/20) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.299256927 seconds)
    (2/20) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.259652908 seconds)
    (3/20) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.200510555 seconds)
    (4/20) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.290827884 seconds)
    (5/20) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.11674726 seconds)
    (6/20) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.221770365 seconds)
    (7/20) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.284043425 seconds)
    (8/20) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.287292206 seconds)
    (9/20) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.103528232 seconds)
    (10/20) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.168377448 seconds)
    (11/20) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.157203012 seconds)
    (12/20) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.254960376 seconds)
    (13/20) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.132231194 seconds)
    (14/20) benchmarking ("BitSet", "Int8")...
    done (took 0.133474161 seconds)
    (15/20) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.290202078 seconds)
    (16/20) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.341552273 seconds)
    (17/20) benchmarking ("BitSet", "UInt16")...
    done (took 0.160603128 seconds)
    (18/20) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.142838604 seconds)
    (19/20) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.16726386 seconds)
    (20/20) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.119370013 seconds)
  done (took 5.18008217 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/79) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.125621565 seconds)
    (2/79) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.139404065 seconds)
    (3/79) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.154303958 seconds)
    (4/79) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.136169286 seconds)
    (5/79) benchmarking ("BitSet", "Int", "last")...
    done (took 0.114783021 seconds)
    (6/79) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.147319644 seconds)
    (7/79) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.106231627 seconds)
    (8/79) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.126916789 seconds)
    (9/79) benchmarking ("BitSet", "Int", "first")...
    done (took 0.142106302 seconds)
    (10/79) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.114361347 seconds)
    (11/79) benchmarking ("Vector", "String", "push!")...
    done (took 0.105433037 seconds)
    (12/79) benchmarking ("Set", "String", "in", "false")...
    done (took 0.147544385 seconds)
    (13/79) benchmarking ("BitSet", "Int", "length")...
    done (took 0.117736029 seconds)
    (14/79) benchmarking ("Set", "Int", "first")...
    done (took 0.120867051 seconds)
    (15/79) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.145863336 seconds)
    (16/79) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.13859143 seconds)
    (17/79) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.111435138 seconds)
    (18/79) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.136600147 seconds)
    (19/79) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.127588263 seconds)
    (20/79) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.108657868 seconds)
    (21/79) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.119929782 seconds)
    (22/79) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.132115741 seconds)
    (23/79) benchmarking ("Dict", "String", "getindex")...
    done (took 0.1131496 seconds)
    (24/79) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.153732211 seconds)
    (25/79) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.12377013 seconds)
    (26/79) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.114529989 seconds)
    (27/79) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.13010943 seconds)
    (28/79) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.11116722 seconds)
    (29/79) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.11077726 seconds)
    (30/79) benchmarking ("Vector", "Int", "last")...
    done (took 0.139260037 seconds)
    (31/79) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.11014805 seconds)
    (32/79) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.121645455 seconds)
    (33/79) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.137334214 seconds)
    (34/79) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.098312492 seconds)
    (35/79) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.114601074 seconds)
    (36/79) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.118443481 seconds)
    (37/79) benchmarking ("Vector", "Int", "length")...
    done (took 0.137464264 seconds)
    (38/79) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.107212112 seconds)
    (39/79) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.108916718 seconds)
    (40/79) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.13451077 seconds)
    (41/79) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.120558205 seconds)
    (42/79) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.117140205 seconds)
    (43/79) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.138955515 seconds)
    (44/79) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.090089344 seconds)
    (45/79) benchmarking ("Dict", "Int", "first")...
    done (took 0.123297096 seconds)
    (46/79) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.10060361 seconds)
    (47/79) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.14389926 seconds)
    (48/79) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.11867256 seconds)
    (49/79) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.099475559 seconds)
    (50/79) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.123323287 seconds)
    (51/79) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.144751999 seconds)
    (52/79) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.119850428 seconds)
    (53/79) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.111493849 seconds)
    (54/79) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.153599428 seconds)
    (55/79) benchmarking ("Dict", "Int", "length")...
    done (took 0.111974339 seconds)
    (56/79) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.121045235 seconds)
    (57/79) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.142627865 seconds)
    (58/79) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.121025612 seconds)
    (59/79) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.108447603 seconds)
    (60/79) benchmarking ("Vector", "Int", "push!")...
    done (took 0.13009638 seconds)
    (61/79) benchmarking ("Vector", "String", "getindex")...
    done (took 0.104103893 seconds)
    (62/79) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.108619617 seconds)
    (63/79) benchmarking ("Vector", "Int", "first")...
    done (took 0.139327197 seconds)
    (64/79) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.121065029 seconds)
    (65/79) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.116142547 seconds)
    (66/79) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.150943965 seconds)
    (67/79) benchmarking ("Set", "String", "in", "true")...
    done (took 0.122864916 seconds)
    (68/79) benchmarking ("Vector", "Any", "push!")...
    done (took 0.104626903 seconds)
    (69/79) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.134496674 seconds)
    (70/79) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.110519387 seconds)
    (71/79) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.108438419 seconds)
    (72/79) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.117862882 seconds)
    (73/79) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.152966882 seconds)
    (74/79) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.113913655 seconds)
    (75/79) benchmarking ("Set", "Int", "length")...
    done (took 0.112199259 seconds)
    (76/79) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.144069579 seconds)
    (77/79) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.11425645 seconds)
    (78/79) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.086814568 seconds)
    (79/79) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.140471197 seconds)
  done (took 10.812338798 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("Dict", "Int", "filter")...
    done (took 0.130271622 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.117380186 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.147943952 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.142547629 seconds)
    (5/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.120211829 seconds)
    (6/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.111622731 seconds)
    (7/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.146432535 seconds)
    (8/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.124231792 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.121035439 seconds)
    (10/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.15299597 seconds)
    (11/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.123560238 seconds)
    (12/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.118270084 seconds)
    (13/28) benchmarking ("Dict", "Any", "filter")...
    done (took 0.154743203 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.116217311 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.115476645 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.149072414 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.121727093 seconds)
    (18/28) benchmarking ("Dict", "String", "filter")...
    done (took 0.142221545 seconds)
    (19/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.151352119 seconds)
    (20/28) benchmarking ("Dict", "Int", "filter!")...
    done (took 0.132958839 seconds)
    (21/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.149220344 seconds)
    (22/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.111309293 seconds)
    (23/28) benchmarking ("Set", "String", "filter")...
    done (took 0.117180937 seconds)
    (24/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.115556285 seconds)
    (25/28) benchmarking ("Dict", "String", "filter!")...
    done (took 0.160617452 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.115929336 seconds)
    (27/28) benchmarking ("Dict", "Any", "filter!")...
    done (took 0.15876294 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.12275106 seconds)
  done (took 4.744839082 seconds)
done (took 48.014851509 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 2.184451094 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.383449688 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 2.147756286 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.150374335 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 2.177423035 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 2.173620216 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.149779708 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 2.151143382 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 3.448909322 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 2.119449831 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.148513203 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 2.148594838 seconds)
done (took 27.440938325 seconds)
(2/20) benchmarking "string"...
  (1/4) benchmarking "join"...
  done (took 2.158909147 seconds)
  (2/4) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.693469111 seconds)
    (2/2) benchmarking "String"...
    done (took 1.443525733 seconds)
  done (took 4.18623124 seconds)
  (3/4) benchmarking "replace"...
  done (took 2.138555605 seconds)
  (4/4) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 2.138722849 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.387272754 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 2.139708569 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 2.137420371 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.14024113 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.14309225 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.144731564 seconds)
  done (took 15.280410355 seconds)
done (took 24.81507395 seconds)
(3/20) benchmarking "linalg"...
  (1/2) benchmarking "factorization"...
    (1/64) benchmarking ("eig", "LowerTriangular", 1024)...
    done (took 2.166734469 seconds)
    (2/64) benchmarking ("svdfact", "UpperTriangular", 1024)...
    done (took 2.310742672 seconds)
    (3/64) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.38273139 seconds)
    (4/64) benchmarking ("eigfact", "UpperTriangular", 256)...
    done (took 2.14372857 seconds)
    (5/64) benchmarking ("qr", "Matrix", 256)...
    done (took 2.14340801 seconds)
    (6/64) benchmarking ("lu", "Matrix", 256)...
    done (took 2.148406168 seconds)
    (7/64) benchmarking ("eig", "SymTridiagonal", 256)...
    done (took 2.146097388 seconds)
    (8/64) benchmarking ("qrfact", "Matrix", 1024)...
    done (took 2.152089325 seconds)
    (9/64) benchmarking ("eigfact", "Diagonal", 256)...
    done (took 2.142311195 seconds)
    (10/64) benchmarking ("eig", "LowerTriangular", 256)...
    done (took 2.142906167 seconds)
    (11/64) benchmarking ("lufact", "Tridiagonal", 1024)...
    done (took 1.527922707 seconds)
    (12/64) benchmarking ("schurfact", "Matrix", 1024)...
    done (took 2.404768222 seconds)
    (13/64) benchmarking ("eig", "Bidiagonal", 1024)...
    done (took 2.16115067 seconds)
    (14/64) benchmarking ("eigfact", "Matrix", 1024)...
    done (took 2.521309192 seconds)
    (15/64) benchmarking ("eig", "UpperTriangular", 256)...
    done (took 2.140162052 seconds)
    (16/64) benchmarking ("svdfact", "Matrix", 256)...
    done (took 2.163999353 seconds)
    (17/64) benchmarking ("lufact", "Matrix", 256)...
    done (took 2.141127268 seconds)
    (18/64) benchmarking ("svd", "Matrix", 1024)...
    done (took 2.380447164 seconds)
    (19/64) benchmarking ("qrfact", "Matrix", 256)...
    done (took 2.142036681 seconds)
    (20/64) benchmarking ("eigfact", "Matrix", 256)...
    done (took 2.184387601 seconds)
    (21/64) benchmarking ("svd", "Diagonal", 256)...
    done (took 2.119755134 seconds)
    (22/64) benchmarking ("svdfact", "Diagonal", 256)...
    done (took 2.124193728 seconds)
    (23/64) benchmarking ("lufact", "Matrix", 1024)...
    done (took 2.19677507 seconds)
    (24/64) benchmarking ("schur", "Matrix", 256)...
    done (took 2.139783241 seconds)
    (25/64) benchmarking ("eigfact", "SymTridiagonal", 1024)...
    done (took 2.143320989 seconds)
    (26/64) benchmarking ("svd", "LowerTriangular", 256)...
    done (took 2.147339487 seconds)
    (27/64) benchmarking ("eig", "UpperTriangular", 1024)...
    done (took 2.199062355 seconds)
    (28/64) benchmarking ("eig", "Bidiagonal", 256)...
    done (took 2.141187844 seconds)
    (29/64) benchmarking ("svdfact", "LowerTriangular", 1024)...
    done (took 2.31516561 seconds)
    (30/64) benchmarking ("lu", "Matrix", 1024)...
    done (took 2.144012534 seconds)
    (31/64) benchmarking ("eig", "Matrix", 256)...
    done (took 2.167066725 seconds)
    (32/64) benchmarking ("eigfact", "SymTridiagonal", 256)...
    done (took 2.14084176 seconds)
    (33/64) benchmarking ("eigfact", "UpperTriangular", 1024)...
    done (took 2.19278616 seconds)
    (34/64) benchmarking ("svdfact", "Bidiagonal", 256)...
    done (took 2.1432129 seconds)
    (35/64) benchmarking ("lu", "Tridiagonal", 256)...
    done (took 2.142713705 seconds)
    (36/64) benchmarking ("svd", "UpperTriangular", 256)...
    done (took 2.15610372 seconds)
    (37/64) benchmarking ("svd", "UpperTriangular", 1024)...
    done (took 2.312071737 seconds)
    (38/64) benchmarking ("eig", "SymTridiagonal", 1024)...
    done (took 2.145050592 seconds)
    (39/64) benchmarking ("svd", "Diagonal", 1024)...
    done (took 2.122375548 seconds)
    (40/64) benchmarking ("eigfact", "Diagonal", 1024)...
    done (took 2.160257083 seconds)
    (41/64) benchmarking ("svd", "LowerTriangular", 1024)...
    done (took 2.322131694 seconds)
    (42/64) benchmarking ("lu", "Tridiagonal", 1024)...
    done (took 2.161217654 seconds)
    (43/64) benchmarking ("cholfact", "Matrix", 256)...
    done (took 2.141513936 seconds)
    (44/64) benchmarking ("eig", "Diagonal", 1024)...
    done (took 2.168883371 seconds)
    (45/64) benchmarking ("eigfact", "LowerTriangular", 256)...
    done (took 2.147120135 seconds)
    (46/64) benchmarking ("eigfact", "LowerTriangular", 1024)...
    done (took 2.178152429 seconds)
    (47/64) benchmarking ("svdfact", "Diagonal", 1024)...
    done (took 2.123265487 seconds)
    (48/64) benchmarking ("lufact", "Tridiagonal", 256)...
    done (took 1.269485658 seconds)
    (49/64) benchmarking ("svd", "Bidiagonal", 256)...
    done (took 2.163099302 seconds)
    (50/64) benchmarking ("eig", "Diagonal", 256)...
    done (took 2.165374772 seconds)
    (51/64) benchmarking ("svd", "Bidiagonal", 1024)...
    done (took 2.203326729 seconds)
    (52/64) benchmarking ("eig", "Matrix", 1024)...
    done (took 2.503772109 seconds)
    (53/64) benchmarking ("svdfact", "UpperTriangular", 256)...
    done (took 2.144306268 seconds)
    (54/64) benchmarking ("chol", "Matrix", 1024)...
    done (took 2.168343481 seconds)
    (55/64) benchmarking ("svdfact", "LowerTriangular", 256)...
    done (took 2.152469192 seconds)
    (56/64) benchmarking ("svdfact", "Matrix", 1024)...
    done (took 2.352963242 seconds)
    (57/64) benchmarking ("svd", "Matrix", 256)...
    done (took 2.15271756 seconds)
    (58/64) benchmarking ("qr", "Matrix", 1024)...
    done (took 2.182177681 seconds)
    (59/64) benchmarking ("schurfact", "Matrix", 256)...
    done (took 2.167289165 seconds)
    (60/64) benchmarking ("cholfact", "Matrix", 1024)...
    done (took 2.168045184 seconds)
    (61/64) benchmarking ("chol", "Matrix", 256)...
    done (took 2.143081497 seconds)
    (62/64) benchmarking ("eigfact", "Bidiagonal", 256)...
    done (took 2.157897826 seconds)
    (63/64) benchmarking ("svdfact", "Bidiagonal", 1024)...
    done (took 2.183639142 seconds)
    (64/64) benchmarking ("eigfact", "Bidiagonal", 1024)...
    done (took 2.160121693 seconds)
  done (took 139.732258722 seconds)
  (2/2) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 2.143760013 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 2.143967403 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 2.142831561 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 2.15063634 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 2.145141232 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.143906693 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.143309667 seconds)
    (8/36) benchmarking "gemv"...
    done (took 2.143274979 seconds)
    (9/36) benchmarking "syr!"...
    done (took 2.144029205 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 2.172552679 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 2.14444782 seconds)
    (12/36) benchmarking "her!"...
    done (took 2.145554401 seconds)
    (13/36) benchmarking "trsv"...
    done (took 2.146676555 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.112345938 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.153689415 seconds)
    (16/36) benchmarking "herk!"...
    done (took 2.163526826 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.148651141 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.16084988 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.16981771 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.144708642 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 2.163384496 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 2.144410312 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 2.144986029 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.144700228 seconds)
    (25/36) benchmarking "symm"...
    done (took 2.175778677 seconds)
    (26/36) benchmarking "herk"...
    done (took 2.21426301 seconds)
    (27/36) benchmarking "syrk"...
    done (took 2.163196815 seconds)
    (28/36) benchmarking "trsm"...
    done (took 2.158854956 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.154212853 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.145727641 seconds)
    (31/36) benchmarking "gemm"...
    done (took 2.183432466 seconds)
    (32/36) benchmarking "symm!"...
    done (took 2.146303411 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.723278235 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.016616015 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 2.161151009 seconds)
    (36/36) benchmarking "trmm"...
    done (took 2.147864051 seconds)
  done (took 78.005182412 seconds)
done (took 218.786958144 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.017071614 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 1.971174957 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.115616786 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 1.976264858 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 1.961562082 seconds)
  done (took 11.096040785 seconds)
done (took 12.152420277 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/13) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 1.33154452 seconds)
    (2/13) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 1.331052365 seconds)
    (3/13) benchmarking ("BitArray{1}", "90-10")...
    done (took 1.203627559 seconds)
    (4/13) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 1.333231239 seconds)
    (5/13) benchmarking ("BitArray{1}", "50-50")...
    done (took 1.178405095 seconds)
    (6/13) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 1.347527817 seconds)
    (7/13) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 1.315836021 seconds)
    (8/13) benchmarking ("Array{Bool,1}", "10-90")...
    done (took 1.165846113 seconds)
    (9/13) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 1.253698746 seconds)
    (10/13) benchmarking ("Array{Bool,1}", "90-10")...
    done (took 1.228877568 seconds)
    (11/13) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 1.270611979 seconds)
    (12/13) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 1.199585231 seconds)
    (13/13) benchmarking ("BitArray{1}", "10-90")...
    done (took 1.178209993 seconds)
  done (took 17.393471251 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 1.422341189 seconds)
    (2/11) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 2.158032467 seconds)
    (3/11) benchmarking ("BitArray{1}", "90-10")...
    done (took 1.212918829 seconds)
    (4/11) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 1.414227316 seconds)
    (5/11) benchmarking ("BitArray{1}", "50-50")...
    done (took 1.192481171 seconds)
    (6/11) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 1.417985911 seconds)
    (7/11) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 1.453916438 seconds)
    (8/11) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 2.158904199 seconds)
    (9/11) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 1.311538281 seconds)
    (10/11) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 1.170321535 seconds)
    (11/11) benchmarking ("BitArray{1}", "10-90")...
    done (took 1.171114383 seconds)
  done (took 17.141313469 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 1.433233401 seconds)
    (2/11) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 2.161663206 seconds)
    (3/11) benchmarking ("BitArray{1}", "90-10")...
    done (took 1.215960346 seconds)
    (4/11) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 1.406806878 seconds)
    (5/11) benchmarking ("BitArray{1}", "50-50")...
    done (took 1.193930761 seconds)
    (6/11) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 1.438853878 seconds)
    (7/11) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 1.454414403 seconds)
    (8/11) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 2.159822856 seconds)
    (9/11) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 1.295921367 seconds)
    (10/11) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 1.172388466 seconds)
    (11/11) benchmarking ("BitArray{1}", "10-90")...
    done (took 1.169871458 seconds)
  done (took 17.159969762 seconds)
done (took 52.75039756 seconds)
(6/20) benchmarking "tuple"...
  (1/3) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.182564282 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 1.244149227 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.180041178 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.168894539 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.163544878 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.164707032 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.171086924 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.167395902 seconds)
  done (took 10.498947315 seconds)
  (2/3) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.163781814 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.164047392 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.163915721 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.163612666 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.164525466 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.164810441 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.165189437 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.164838293 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.1646665 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.164246729 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.164665604 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.164367927 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.166093322 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.163764282 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.166555617 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.16483684 seconds)
  done (took 19.692308839 seconds)
  (3/3) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.167855926 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 1.164679469 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 1.163218814 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 1.1647166 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.165280856 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.164884205 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 1.1665996 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 1.164599138 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 1.1651907 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 1.164061168 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 1.166619315 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 1.165598269 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 1.165491923 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 1.165290208 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.164822966 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 1.167044191 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.16513421 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 1.164495192 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 1.170256946 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 1.165046535 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 1.166172721 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 1.166530425 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 1.16648254 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 1.164986288 seconds)
  done (took 29.034211225 seconds)
done (took 60.283801796 seconds)
(7/20) benchmarking "dates"...
  (1/6) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.159031741 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.150959148 seconds)
  done (took 5.368747786 seconds)
  (2/6) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.226441082 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.224318174 seconds)
  done (took 3.512617748 seconds)
  (3/6) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.168308802 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.167220181 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.165777293 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.165564593 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.166299161 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.164861139 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.166354448 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.166333712 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.166405542 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.16484553 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.165757219 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.16647179 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.168110481 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.167295856 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.166906881 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.16576025 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.167962916 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.167158884 seconds)
  done (took 22.057383391 seconds)
  (4/6) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.180307519 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.184944681 seconds)
  done (took 3.425979526 seconds)
  (5/6) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.294334823 seconds)
    (2/7) benchmarking "second"...
    done (took 1.209279863 seconds)
    (3/7) benchmarking "month"...
    done (took 1.272069516 seconds)
    (4/7) benchmarking "year"...
    done (took 1.263495071 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.209074238 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.187913916 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.208626786 seconds)
  done (took 9.706358548 seconds)
  (6/6) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.167307566 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.392893488 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.52400949 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.769981731 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.169941823 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.171901123 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.081938098 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.172547255 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.173975836 seconds)
  done (took 13.686262025 seconds)
done (took 58.818212814 seconds)
(8/20) benchmarking "micro"...
  (1/7) benchmarking "quicksort"...
  done (took 2.153253444 seconds)
  (2/7) benchmarking "parseint"...
  done (took 2.224186547 seconds)
  (3/7) benchmarking "randmatstat"...
  done (took 2.17630547 seconds)
  (4/7) benchmarking "pisum"...
  done (took 2.173546857 seconds)
  (5/7) benchmarking "fib"...
  done (took 1.463681271 seconds)
  (6/7) benchmarking "randmatmul"...
  done (took 2.213358636 seconds)
  (7/7) benchmarking "mandel"...
  done (took 2.158812302 seconds)
done (took 15.626256301 seconds)
(9/20) benchmarking "io"...
  (1/2) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 2.134439492 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.138183329 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 2.137631893 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 2.170144368 seconds)
  done (took 9.643738512 seconds)
  (2/2) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.163987365 seconds)
    (2/2) benchmarking "read"...
    done (took 1.479158668 seconds)
  done (took 4.705814906 seconds)
done (took 15.412619312 seconds)
(10/20) benchmarking "scalar"...
  (1/23) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.170495294 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.168966052 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.169836149 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.170259136 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.168963363 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.169536853 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.169676162 seconds)
    (8/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.169803552 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.170649611 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.170120034 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.169752737 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.17151799 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.169605733 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.169011227 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.169882948 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.171072008 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.170567344 seconds)
    (18/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.171712603 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.170653131 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.170027879 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.170986012 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.170490305 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.170298294 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.170530229 seconds)
  done (took 29.148124712 seconds)
  (2/23) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.172958569 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.17031128 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.171535965 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.169889961 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.172132161 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.170887725 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.172379584 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.170890387 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.170895421 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.17077314 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.170578974 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.171760736 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.17135112 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.171072691 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.170127313 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.172254167 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.172086526 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.173768851 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.171493746 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.173156162 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.172005924 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.17151702 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.170995238 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.17216801 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.173206919 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.174822396 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.171654953 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.173085293 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.174262755 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.172450982 seconds)
  done (took 36.220674344 seconds)
  (3/23) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.173907784 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.174082109 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.172081911 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.173465867 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.172881067 seconds)
    (6/72) benchmarking ("isodd", "UInt64")...
    done (took 1.173451777 seconds)
    (7/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.173885063 seconds)
    (8/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.174368082 seconds)
    (9/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.173778868 seconds)
    (10/72) benchmarking ("isnan", "Float64")...
    done (took 1.173479373 seconds)
    (11/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.173153124 seconds)
    (12/72) benchmarking ("isequal", "Float64")...
    done (took 1.17315218 seconds)
    (13/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.173141784 seconds)
    (14/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.17115593 seconds)
    (15/72) benchmarking ("isnan", "Complex{Float32}")...
    done (took 1.173445897 seconds)
    (16/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.174364231 seconds)
    (17/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.172618541 seconds)
    (18/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.17496058 seconds)
    (19/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.173009708 seconds)
    (20/72) benchmarking ("isequal", "Complex{Float64}")...
    done (took 1.172926142 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.173197184 seconds)
    (22/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.173207173 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 1.17387178 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.172824245 seconds)
    (25/72) benchmarking ("isequal", "UInt64")...
    done (took 1.174297257 seconds)
    (26/72) benchmarking ("isinteger", "Int64")...
    done (took 1.17435478 seconds)
    (27/72) benchmarking ("isfinite", "Float64")...
    done (took 1.173233769 seconds)
    (28/72) benchmarking ("isequal", "Int64")...
    done (took 1.173719526 seconds)
    (29/72) benchmarking ("isinf", "Float64")...
    done (took 1.17456444 seconds)
    (30/72) benchmarking ("isless", "UInt64")...
    done (took 1.174159312 seconds)
    (31/72) benchmarking ("isequal", "BigInt")...
    done (took 1.172975936 seconds)
    (32/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.175459546 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 1.172986043 seconds)
    (34/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.174035577 seconds)
    (35/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.174400732 seconds)
    (36/72) benchmarking ("isless", "Float64")...
    done (took 1.174409596 seconds)
    (37/72) benchmarking ("iseven", "BigInt")...
    done (took 1.176061416 seconds)
    (38/72) benchmarking ("isnan", "BigInt")...
    done (took 1.175704523 seconds)
    (39/72) benchmarking ("isequal", "Complex{Float32}")...
    done (took 1.175478257 seconds)
    (40/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.175588443 seconds)
    (41/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.174981863 seconds)
    (42/72) benchmarking ("isnan", "Float32")...
    done (took 1.17522703 seconds)
    (43/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.173298046 seconds)
    (44/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.174833862 seconds)
    (45/72) benchmarking ("iseven", "Int64")...
    done (took 1.174673466 seconds)
    (46/72) benchmarking ("isinteger", "Float64")...
    done (took 1.175597112 seconds)
    (47/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.174905222 seconds)
    (48/72) benchmarking ("isfinite", "Complex{Float32}")...
    done (took 1.174313041 seconds)
    (49/72) benchmarking ("isnan", "Complex{Float64}")...
    done (took 1.17424414 seconds)
    (50/72) benchmarking ("isinteger", "Complex{Float32}")...
    done (took 1.174877029 seconds)
    (51/72) benchmarking ("isinf", "Int64")...
    done (took 1.17542029 seconds)
    (52/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.174933804 seconds)
    (53/72) benchmarking ("isinf", "Complex{Float32}")...
    done (took 1.175712389 seconds)
    (54/72) benchmarking ("isfinite", "Complex{Float64}")...
    done (took 1.175387008 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.175269065 seconds)
    (56/72) benchmarking ("isnan", "Int64")...
    done (took 1.175852982 seconds)
    (57/72) benchmarking ("isinteger", "Float32")...
    done (took 1.175428383 seconds)
    (58/72) benchmarking ("isnan", "UInt64")...
    done (took 1.175435294 seconds)
    (59/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.175431158 seconds)
    (60/72) benchmarking ("isless", "Int64")...
    done (took 1.174643617 seconds)
    (61/72) benchmarking ("isinf", "BigInt")...
    done (took 1.176460337 seconds)
    (62/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.175531232 seconds)
    (63/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.176133569 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.175854837 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.17628497 seconds)
    (66/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.176507611 seconds)
    (67/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.176615735 seconds)
    (68/72) benchmarking ("isinteger", "Complex{Float64}")...
    done (took 1.177385198 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.176376874 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.177407803 seconds)
    (71/72) benchmarking ("isinf", "Complex{Float64}")...
    done (took 1.176198217 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.175829422 seconds)
  done (took 85.635710271 seconds)
  (4/23) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.176770403 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.1767666 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.176260686 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.176201626 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.176379512 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.177034043 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.177276396 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.177034452 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.178049178 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.177749855 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.177087694 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.178487652 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.177110729 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.177818769 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.178179601 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.179694119 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.178647006 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.178349172 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.180076352 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.178636739 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.179051636 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.17916071 seconds)
  done (took 26.981278637 seconds)
  (5/23) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.180434896 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.176696988 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.177663302 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.180222202 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.183218953 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.179652681 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.178908321 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.179001509 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.177875913 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.178521744 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.178119432 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.178040892 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.179616559 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.177495125 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.178069849 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.179239497 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.178317975 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.180177035 seconds)
  done (took 22.292297789 seconds)
  (6/23) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.177550654 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.177339379 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.18071161 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.179050815 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.178670269 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.17921714 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.179844904 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.180403039 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.178762649 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.179067433 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.1804742 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.179203522 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.178905998 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.179365787 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.179378179 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.180276425 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.179022432 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.179971304 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.177935015 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.181247719 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.180792402 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.180110788 seconds)
  done (took 27.018391049 seconds)
  (7/23) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.179693986 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.179491758 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.180695508 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.180881363 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.178877303 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.18044835 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.181829496 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.180706749 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.181182168 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.180790565 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.180633509 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.18132959 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.180908944 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.18030937 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.182049261 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.181013568 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.181373847 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.181373745 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.179921653 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.180608753 seconds)
  done (took 24.687652513 seconds)
  (8/23) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.182717573 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.184166423 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.184067292 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.182202212 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.1834338 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.183547363 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.182281774 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.182418111 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.181260538 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.185637661 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.18339208 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.183044225 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.183243466 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.184285564 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.182751211 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.183353988 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.183309795 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.183331226 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.182383677 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.184225833 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.184126167 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.183778954 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.18273776 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.185518459 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.182042047 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.183904 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.183317425 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.18337005 seconds)
  done (took 34.20845057 seconds)
  (9/23) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.184221947 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.183220737 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.183976837 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.183948063 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.183870589 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.182779815 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.185083 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.183362158 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.182693754 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.182247657 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.184669055 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.184482248 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.184962698 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.184348441 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.185382814 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.183413983 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.183836539 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.183875392 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.184765205 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.18451714 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.183795983 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.184568163 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.185981692 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.183092005 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.182495239 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.184285112 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.184470108 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.184680103 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.185091168 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.18448845 seconds)
  done (took 36.598888451 seconds)
  (10/23) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.203622403 seconds)
    (2/2) benchmarking "in"...
    done (took 1.203390584 seconds)
  done (took 3.483730763 seconds)
  (11/23) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.184904224 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.186493863 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.186263389 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.185268534 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.185362175 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.184124766 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.184904771 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.184732157 seconds)
  done (took 10.558762828 seconds)
  (12/23) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.185282279 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.184077511 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.18578247 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.184513819 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.185385983 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.185440358 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.185495661 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.186018604 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.185827107 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.185039323 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.186035192 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.185992381 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.18581763 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.683273479 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.186937284 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.186662179 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.186667569 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.184771869 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.185864124 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.186022893 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.186245675 seconds)
  done (took 26.475223635 seconds)
  (13/23) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.187848551 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.186565525 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.187759485 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.186512308 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.188145785 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.187311384 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.186949184 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.187848299 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.187044643 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.188079928 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.187604383 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.186394286 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.187339188 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.187267342 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.187556096 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.187044188 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.18832815 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.187174665 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.187280455 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.188619562 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.188155691 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.1876131 seconds)
  done (took 27.203007442 seconds)
  (14/23) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.188706492 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.189380161 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.187557943 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.189993987 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.189090279 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.187630919 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.188318266 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.18740793 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.188161517 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.189098278 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.188560703 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.189173282 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.187326197 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.190778344 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.188214832 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.188324656 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.190012726 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.189711336 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.190217692 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.188472899 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.190400162 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.188122446 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.190446369 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.189511635 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.190097834 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.189177111 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.189521825 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.190216877 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.189661083 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.189080731 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.189226649 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.19036264 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.190113998 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.191300289 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.191600689 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.19111741 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.191066445 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.190862439 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.189844323 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.191766961 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.190022721 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.190670477 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.189099673 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.191132054 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.19000457 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.191701258 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.190922382 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.191765264 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.190001928 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.191620109 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.191029502 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.189912934 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.189737419 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.190231442 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.190593086 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.192022863 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.192471346 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.191889296 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.193001945 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.19128358 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.192178981 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.192062532 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.192496169 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.19299371 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.191923852 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.19231668 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.19260817 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.191645961 seconds)
  done (took 82.018893423 seconds)
  (15/23) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.192264884 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.19231531 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.192059973 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.192982995 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.19431016 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.192470709 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.192719259 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.194141506 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.194007996 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.195146758 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.192759686 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.193134307 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.194058734 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.195021582 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.192978169 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.193561047 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.193439611 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.193311057 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.195138616 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.194565617 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.193844995 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.195023266 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.193623887 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.194063742 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.194197266 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.194071217 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.193623398 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.194364234 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.192893612 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.194676818 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.194081159 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.194148731 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.194094241 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.193705036 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.195160526 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.19423929 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.195285074 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.193417803 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.195187581 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.195901885 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.19600832 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.195561264 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.196105862 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.196183377 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.194671015 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.193850283 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.195991444 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.195644958 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.19496188 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.195574449 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.194809372 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.194556805 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.19454073 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.195301411 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.195664946 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.196460748 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.196891951 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.196785462 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.19521409 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.196415468 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.197061168 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.19662928 seconds)
  done (took 75.146501115 seconds)
  (16/23) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.198036591 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.196454336 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.195302916 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.196442453 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.197121496 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.196673735 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.196137208 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.19673748 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.196547181 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.198130178 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.196762456 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.198876779 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.200383328 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.197288738 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.196869746 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.198235569 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.197290788 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.197099337 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.197063573 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.197095406 seconds)
  done (took 25.029704191 seconds)
  (17/23) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.198258017 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.198365215 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.19754718 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.196668 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.198166813 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.197294974 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.197545634 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.19679279 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.197825846 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.199125376 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.197977626 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.198266908 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.196962107 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.197444713 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.198857603 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.19794817 seconds)
  done (took 20.25274683 seconds)
  (18/23) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.196452773 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.198078046 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.197715124 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.198540544 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.198430701 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.198423762 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.199233741 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.197687015 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.198464656 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.200177945 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.198855644 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.198872906 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.198272028 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.198968068 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.198031259 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.198612125 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.198158334 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.197653125 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.200241502 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.198178524 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.199591152 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.198119955 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.198350451 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.198909831 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.198501215 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.200158728 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.199895376 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.198749874 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.198560175 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.200436382 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.199700577 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.199036314 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.199496296 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.199566343 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.19868307 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.199193468 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.199995073 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.200378065 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.198698996 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.199362145 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.201293493 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.200316033 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.199896731 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.200759938 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.201260571 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.202095774 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.200426822 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.201112227 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.199998071 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.200884455 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.202131633 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.202864869 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.201304786 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.202191873 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.199809175 seconds)
  done (took 67.060546989 seconds)
  (19/23) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.201862145 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.201339092 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.200235101 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.201513945 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.201714622 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.203761409 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.201227758 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.204981127 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.201531687 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.201666155 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.201518986 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.203579709 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.201284638 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.201622989 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.202006379 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.201668815 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.203128597 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.202082259 seconds)
  done (took 22.727626179 seconds)
  (20/23) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.20388221 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.20506799 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.202885168 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.20244444 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.203005746 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.204010426 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.202076844 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.202277922 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.200887941 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.202858252 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.202727414 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.202661197 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.201155451 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.202311857 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.204543174 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.20235846 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.203112137 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.202772441 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.201960623 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.20436885 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.20244024 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.202981828 seconds)
  done (took 27.555496869 seconds)
  (21/23) benchmarking "intfuncs"...
    (1/12) benchmarking ("nextpow2", "Int64", "+")...
    done (took 1.194365665 seconds)
    (2/12) benchmarking ("prevpow2", "UInt64", "-")...
    done (took 1.194197373 seconds)
    (3/12) benchmarking ("prevpow2", "Int64", "+")...
    done (took 1.194206432 seconds)
    (4/12) benchmarking ("nextpow2", "BigInt", "-")...
    done (took 1.203913747 seconds)
    (5/12) benchmarking ("prevpow2", "UInt64", "+")...
    done (took 1.197458714 seconds)
    (6/12) benchmarking ("prevpow2", "Int64", "-")...
    done (took 1.19455016 seconds)
    (7/12) benchmarking ("nextpow2", "UInt64", "-")...
    done (took 1.194574079 seconds)
    (8/12) benchmarking ("nextpow2", "UInt64", "+")...
    done (took 1.194991576 seconds)
    (9/12) benchmarking ("prevpow2", "BigInt", "+")...
    done (took 1.205834499 seconds)
    (10/12) benchmarking ("prevpow2", "BigInt", "-")...
    done (took 1.209180505 seconds)
    (11/12) benchmarking ("nextpow2", "BigInt", "+")...
    done (took 1.207395309 seconds)
    (12/12) benchmarking ("nextpow2", "Int64", "-")...
    done (took 1.197512081 seconds)
  done (took 15.481601632 seconds)
  (22/23) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.206080988 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.205875494 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.204295709 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.205909631 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.205208182 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.205882377 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.205007533 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.205701193 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.205314703 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.205589061 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.205508891 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.205200485 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.205685025 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.205766313 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.205446346 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.206593249 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.205248345 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.205211237 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.206467918 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.206760107 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.205669059 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.207418662 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.205795924 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.206992092 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.205959509 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.206694427 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.206245035 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.207146445 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.206660243 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.207742087 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.208011239 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.208413915 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.205700186 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.206945777 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.20656964 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.206790303 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.20595787 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.207049987 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.208162965 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.207373413 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.208926446 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.207897437 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.20753697 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.207397354 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.207954497 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.20842433 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.207002513 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.208410237 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.207907725 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.208898929 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.208970428 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.207152443 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.208918999 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.208891552 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.208990195 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.208767668 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.208579369 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.208470623 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.208273068 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.209646804 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.210646355 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.209247812 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.209382666 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.209202885 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.208685696 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.209820446 seconds)
  done (took 80.770075405 seconds)
  (23/23) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.209389638 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.209574853 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.208686823 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.209973502 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.208549055 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.210351496 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.208792832 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.210306742 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.210436558 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.209472102 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.210983966 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.210237171 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.21168616 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.209264796 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.210254866 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.209596016 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.210543039 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.209691486 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.209869736 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.210995815 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.209863721 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.209088391 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.210848129 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.209814708 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.211554932 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.209751646 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.210043188 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.212189637 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.211934149 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.211180765 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.211032903 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.21069134 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.211679139 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.211332965 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.211114165 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.211391418 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.21067151 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.21244053 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.211280721 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.212510354 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.212194448 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.211814618 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.210647175 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.212275067 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.213452043 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.211840582 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.211906752 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.212706167 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.211637792 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.21237865 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.212871032 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.213365288 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.213285404 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.212743539 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.213780234 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.212095601 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.212235612 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.21301758 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.212667205 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.213468993 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.21344525 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.213141107 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.213372361 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.212039255 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.214349129 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.213446282 seconds)
  done (took 81.04886043 seconds)
done (took 888.667909181 seconds)
(11/20) benchmarking "sparse"...
  (1/4) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 1.37918246 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 1.329038352 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.204651623 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 2.220726476 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.205561901 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 2.20396541 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 2.218913401 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.204726775 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 1.204770456 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 1.2038703 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.204978472 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 1.402634226 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 2.238094875 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.205608838 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.203892946 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 1.300661141 seconds)
  done (took 25.03367862 seconds)
  (2/4) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.232723345 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.211901144 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.321279045 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.212588171 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.2322727 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.392855669 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 1.270837366 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 1.211664864 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 1.374920449 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 1.228797703 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.207060404 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.230708655 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 1.210073336 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.204236798 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 1.227406991 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.391365555 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 1.469709916 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.211729332 seconds)
  done (took 26.944450464 seconds)
  (3/4) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.230064139 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.209362679 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.21121788 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.209133002 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 2.202038923 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 2.2179765 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.207816805 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 2.209878846 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.203525194 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 1.338311466 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 1.211810249 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.225487161 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.211254453 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.210892953 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.21797396 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.25682953 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.354074619 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.22003585 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.219336 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.218009767 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.210595349 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.309933052 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.253720319 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.221366779 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.334997868 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.210371903 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.219275698 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.220050949 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.332323734 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.22223734 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.211968196 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.212742794 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.213676079 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.172368055 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.743098967 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 2.218769218 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.236673435 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.220065985 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.221360191 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.35628208 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.21274319 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.219784373 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 2.213674325 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.737370107 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.329306241 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.331895586 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.208303699 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.218841912 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.214374454 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.278225637 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.215182519 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.214681366 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 1.27266889 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.030616832 seconds)
  done (took 78.729615972 seconds)
  (4/4) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 2.267094045 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.207223216 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.388789967 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 2.225773036 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.205810689 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.225475541 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 2.207188788 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.487810092 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 2.251158154 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.206241406 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.521619943 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.837558364 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 2.214225551 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 2.281020934 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 2.258741376 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 2.276437784 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.210200225 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.224053401 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 2.223061636 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 2.210193432 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.782858029 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.209739177 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.210091153 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 2.298405951 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.249547783 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.743839193 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.220101917 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.208057164 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.229165606 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 2.210606644 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.796961974 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 2.215962714 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 2.269229279 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 2.213511712 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.494857568 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.592963367 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.554094146 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 2.20949628 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 2.246508715 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 2.211838166 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.234917827 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.736897304 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.577164048 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.208456885 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.210044293 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.733407253 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.211076374 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 2.212199613 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.217790479 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.480009179 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.210583719 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.211877216 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.210578741 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 2.230054872 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 2.210138918 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 2.288246868 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 2.278220923 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.746402666 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.210495874 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.20967364 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 2.215027341 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 2.210248137 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 2.22092283 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.215629282 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 2.211045625 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.585273705 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 2.473312143 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 2.213810298 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.579313524 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.790024499 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.213092556 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.881236501 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.21563034 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.23364113 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 2.256065939 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.210175715 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.211728664 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.751389651 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 2.222451065 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 2.211595674 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.566972665 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.219669286 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.515964086 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.228893019 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.21051761 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.811578152 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.22145064 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 2.26699648 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.219726475 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.211805726 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.212240271 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.213464833 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.502219393 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.263624299 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 2.211600164 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 2.212257104 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 2.262810363 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.212782881 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 2.229472306 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.216662572 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.862525591 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.225400846 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.213296225 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.232097152 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.213317063 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 2.219485746 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.214675356 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 2.218258666 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.50355988 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.216657344 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 2.219645102 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 2.215369752 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.218379883 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.21786259 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 2.308933184 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 2.218614362 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.52695694 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 2.221821761 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.214219876 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 2.221266354 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.21495106 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 2.25028943 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.216448158 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 2.23143383 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.201076482 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.521175337 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.232396306 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 2.230254133 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.214817807 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.215658854 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.229500317 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.216936475 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 2.282383436 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 2.217691063 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.075129418 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 2.258757868 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 2.215950915 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.216965971 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 2.217249699 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.216507302 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 2.225389098 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.21691277 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.518706236 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.5072211 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 2.460598365 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.21703784 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.216834558 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.066329588 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 2.222363682 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.400048952 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 2.233964382 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.216995949 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.496536722 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 2.445711704 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 2.21651304 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 2.216134097 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 2.218777377 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.498856416 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.21671672 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.557794308 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.833847899 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.221993132 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 2.227762172 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.075027113 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.038012471 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.223697378 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 2.216035293 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.518142689 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 2.23445351 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 2.217447471 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 2.216681225 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.21832365 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.217577152 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 2.221648291 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 2.224492532 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.217138635 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 2.218516444 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 2.559248165 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.412172689 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 2.233984437 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 2.225630761 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.760308342 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 2.253555749 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.218923592 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 2.226317813 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.220251966 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.219440674 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 2.278149375 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 2.224705775 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 2.267384297 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 2.218896735 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 2.222207905 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.782486779 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.221437006 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.223720451 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.415393892 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.989873209 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.222876269 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.218552314 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.219048147 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 2.290118215 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.793889164 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 2.268238901 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.533567873 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 2.224850218 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.262187571 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.219721316 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 2.24501755 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.794752124 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.226875901 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.237041739 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.965778202 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 2.224402875 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 4.69993421 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 2.220754873 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.221807488 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.892917604 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 2.221200075 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 2.225138755 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.220705648 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.237395876 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.557711001 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 2.221044042 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.259066296 seconds)
  done (took 473.160153586 seconds)
done (took 604.969374956 seconds)
(12/20) benchmarking "broadcast"...
  (1/5) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 2.219859167 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 2.222072869 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 2.205400844 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 2.224901821 seconds)
  done (took 9.99222768 seconds)
  (2/5) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 1.21695469 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 1.229466543 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 1.212576888 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 1.228974999 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 1.214120348 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 1.23291592 seconds)
  done (took 8.455250313 seconds)
  (3/5) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 2.222084099 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 2.22258848 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 2.22699821 seconds)
  done (took 7.791439332 seconds)
  (4/5) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 1.452277438 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.241247849 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 1.583069876 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.231701191 seconds)
  done (took 8.628237779 seconds)
  (5/5) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.238306301 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 1.236606167 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 1.237498481 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 1.238018013 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 1.23943645 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.240461542 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 1.241170911 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.240669694 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 1.240787641 seconds)
  done (took 12.272292758 seconds)
done (took 48.259073818 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/192) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.204765227 seconds)
    (2/192) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 1.291773262 seconds)
    (3/192) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 1.326683776 seconds)
    (4/192) benchmarking ("broadcast", identity, Float32, false)...
    done (took 1.353706257 seconds)
    (5/192) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 2.201700459 seconds)
    (6/192) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.053001212 seconds)
    (7/192) benchmarking ("perf_simplecopy", Complex{Float64}, true)...
    done (took 1.412214509 seconds)
    (8/192) benchmarking ("perf_countnothing", Int64, false)...
    done (took 1.259617666 seconds)
    (9/192) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 2.202284393 seconds)
    (10/192) benchmarking ("map", abs, Complex{Float64}, false)...
    done (took 1.365191628 seconds)
    (11/192) benchmarking ("map", identity, Float32, true)...
    done (took 1.392224231 seconds)
    (12/192) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 2.213335626 seconds)
    (13/192) benchmarking ("map", identity, Float64, true)...
    done (took 1.440863334 seconds)
    (14/192) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 1.258949935 seconds)
    (15/192) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.201260394 seconds)
    (16/192) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 1.34404022 seconds)
    (17/192) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 1.382683979 seconds)
    (18/192) benchmarking ("map", abs, Float32, true)...
    done (took 1.392240758 seconds)
    (19/192) benchmarking ("perf_sum", Bool, true)...
    done (took 1.310408263 seconds)
    (20/192) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 1.302590302 seconds)
    (21/192) benchmarking ("perf_countnothing", Float32, false)...
    done (took 1.262833773 seconds)
    (22/192) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 1.345829686 seconds)
    (23/192) benchmarking ("map", abs, BigInt, false)...
    done (took 2.117087024 seconds)
    (24/192) benchmarking ("perf_sum", Float64, true)...
    done (took 1.308164952 seconds)
    (25/192) benchmarking ("perf_countequals", "Int8")...
    done (took 1.307588419 seconds)
    (26/192) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 1.406785494 seconds)
    (27/192) benchmarking ("broadcast", abs, Int8, false)...
    done (took 1.328001958 seconds)
    (28/192) benchmarking ("map", identity, Float64, false)...
    done (took 1.303967846 seconds)
    (29/192) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.205044332 seconds)
    (30/192) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 2.228135704 seconds)
    (31/192) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.204743747 seconds)
    (32/192) benchmarking ("perf_sum", Bool, false)...
    done (took 1.31859943 seconds)
    (33/192) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 1.31111235 seconds)
    (34/192) benchmarking ("map", abs, Float32, false)...
    done (took 1.295074459 seconds)
    (35/192) benchmarking ("broadcast", abs, Float64, false)...
    done (took 1.370946879 seconds)
    (36/192) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.203745356 seconds)
    (37/192) benchmarking ("map", *, Complex{Float64}, (true, true))...
    done (took 2.206186051 seconds)
    (38/192) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 1.258756018 seconds)
    (39/192) benchmarking ("map", *, BigInt, (false, false))...
    done (took 2.204034695 seconds)
    (40/192) benchmarking ("broadcast", identity, Complex{Float64}, false)...
    done (took 1.47604364 seconds)
    (41/192) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 2.255069918 seconds)
    (42/192) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 1.343831324 seconds)
    (43/192) benchmarking ("broadcast", identity, Bool, false)...
    done (took 1.339714448 seconds)
    (44/192) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.215529198 seconds)
    (45/192) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.20665451 seconds)
    (46/192) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 1.385338425 seconds)
    (47/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (false, true))...
    done (took 1.474645274 seconds)
    (48/192) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 2.224043984 seconds)
    (49/192) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 1.25821577 seconds)
    (50/192) benchmarking ("map", abs, BigFloat, false)...
    done (took 2.220060439 seconds)
    (51/192) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.009567118 seconds)
    (52/192) benchmarking ("broadcast", abs, Complex{Float64}, true)...
    done (took 2.19324411 seconds)
    (53/192) benchmarking ("map", abs, BigInt, true)...
    done (took 2.205392549 seconds)
    (54/192) benchmarking ("broadcast", abs, Bool, false)...
    done (took 1.341555023 seconds)
    (55/192) benchmarking ("broadcast", *, Complex{Float64}, (false, false))...
    done (took 1.499158571 seconds)
    (56/192) benchmarking ("broadcast", identity, Complex{Float64}, true)...
    done (took 2.209554626 seconds)
    (57/192) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 1.388689779 seconds)
    (58/192) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 1.351032222 seconds)
    (59/192) benchmarking ("perf_sum", BigInt, true)...
    done (took 2.234208897 seconds)
    (60/192) benchmarking ("map", abs, Int64, true)...
    done (took 1.444843038 seconds)
    (61/192) benchmarking ("broadcast", identity, Int8, false)...
    done (took 1.329961988 seconds)
    (62/192) benchmarking ("perf_countequals", "Float32")...
    done (took 1.32162831 seconds)
    (63/192) benchmarking ("perf_sum", Complex{Float64}, false)...
    done (took 1.3795813 seconds)
    (64/192) benchmarking ("map", *, Complex{Float64}, (false, true))...
    done (took 2.206294954 seconds)
    (65/192) benchmarking ("map", abs, Int64, false)...
    done (took 1.308319878 seconds)
    (66/192) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 1.406488805 seconds)
    (67/192) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.078252226 seconds)
    (68/192) benchmarking ("map", *, BigInt, (true, true))...
    done (took 2.207181652 seconds)
    (69/192) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 1.339872407 seconds)
    (70/192) benchmarking ("perf_countnothing", Complex{Float64}, false)...
    done (took 1.264926997 seconds)
    (71/192) benchmarking ("perf_sum", Float64, false)...
    done (took 1.298264755 seconds)
    (72/192) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 2.206981244 seconds)
    (73/192) benchmarking ("map", identity, Int64, true)...
    done (took 1.442745534 seconds)
    (74/192) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 1.297787265 seconds)
    (75/192) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 1.262780993 seconds)
    (76/192) benchmarking ("map", abs, Float64, true)...
    done (took 1.446283056 seconds)
    (77/192) benchmarking ("map", identity, BigFloat, false)...
    done (took 1.32884298 seconds)
    (78/192) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 1.339766174 seconds)
    (79/192) benchmarking ("perf_countequals", "Int64")...
    done (took 1.315161698 seconds)
    (80/192) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.004253159 seconds)
    (81/192) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.045959098 seconds)
    (82/192) benchmarking ("broadcast", *, Complex{Float64}, (false, true))...
    done (took 2.220828933 seconds)
    (83/192) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 1.344153322 seconds)
    (84/192) benchmarking ("perf_countequals", "Bool")...
    done (took 1.314489131 seconds)
    (85/192) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.208333236 seconds)
    (86/192) benchmarking ("perf_sum", Complex{Float64}, true)...
    done (took 1.375010446 seconds)
    (87/192) benchmarking ("map", identity, Int8, true)...
    done (took 1.346100012 seconds)
    (88/192) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.060634298 seconds)
    (89/192) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 2.234565995 seconds)
    (90/192) benchmarking ("perf_sum", Float32, false)...
    done (took 1.304692652 seconds)
    (91/192) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 1.345948975 seconds)
    (92/192) benchmarking ("perf_countnothing", Bool, false)...
    done (took 1.262766917 seconds)
    (93/192) benchmarking ("map", identity, BigFloat, true)...
    done (took 1.477489035 seconds)
    (94/192) benchmarking ("map", identity, BigInt, true)...
    done (took 1.492567977 seconds)
    (95/192) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 1.324932345 seconds)
    (96/192) benchmarking ("perf_sum", Int64, true)...
    done (took 1.305646036 seconds)
    (97/192) benchmarking ("perf_sum", BigInt, false)...
    done (took 2.232144341 seconds)
    (98/192) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 1.348277905 seconds)
    (99/192) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 1.380267792 seconds)
    (100/192) benchmarking ("map", identity, Complex{Float64}, true)...
    done (took 1.591414678 seconds)
    (101/192) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.21496498 seconds)
    (102/192) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 2.244327944 seconds)
    (103/192) benchmarking ("perf_sum", BigFloat, true)...
    done (took 2.237623643 seconds)
    (104/192) benchmarking ("perf_countnothing", Float32, true)...
    done (took 1.277669935 seconds)
    (105/192) benchmarking ("map", identity, Complex{Float64}, false)...
    done (took 1.415386912 seconds)
    (106/192) benchmarking ("map", abs, BigFloat, true)...
    done (took 2.222091678 seconds)
    (107/192) benchmarking ("broadcast", identity, Int8, true)...
    done (took 1.971128042 seconds)
    (108/192) benchmarking ("broadcast", abs, Float32, false)...
    done (took 1.365352375 seconds)
    (109/192) benchmarking ("map", identity, Bool, true)...
    done (took 1.350057092 seconds)
    (110/192) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.059462053 seconds)
    (111/192) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 2.21502195 seconds)
    (112/192) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 2.240561236 seconds)
    (113/192) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 1.410633626 seconds)
    (114/192) benchmarking ("perf_countnothing", Int64, true)...
    done (took 1.273969647 seconds)
    (115/192) benchmarking ("map", abs, Bool, true)...
    done (took 1.349852378 seconds)
    (116/192) benchmarking ("perf_sum", Float32, true)...
    done (took 1.311187986 seconds)
    (117/192) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 1.932219304 seconds)
    (118/192) benchmarking ("perf_countnothing", Complex{Float64}, true)...
    done (took 1.272611539 seconds)
    (119/192) benchmarking ("map", *, BigInt, (false, true))...
    done (took 2.232370166 seconds)
    (120/192) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 1.417301891 seconds)
    (121/192) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.078316367 seconds)
    (122/192) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 1.392692115 seconds)
    (123/192) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.209895331 seconds)
    (124/192) benchmarking ("map", identity, BigInt, false)...
    done (took 1.330928023 seconds)
    (125/192) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 1.374167471 seconds)
    (126/192) benchmarking ("map", abs, Bool, false)...
    done (took 1.262030657 seconds)
    (127/192) benchmarking ("broadcast", abs, Complex{Float64}, false)...
    done (took 1.451288003 seconds)
    (128/192) benchmarking ("map", abs, Int8, false)...
    done (took 1.262540009 seconds)
    (129/192) benchmarking ("map", identity, Int8, false)...
    done (took 1.259759827 seconds)
    (130/192) benchmarking ("broadcast", abs, Int8, true)...
    done (took 1.958586926 seconds)
    (131/192) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.369686459 seconds)
    (132/192) benchmarking ("perf_countequals", "Float64")...
    done (took 1.328976178 seconds)
    (133/192) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.056397128 seconds)
    (134/192) benchmarking ("map", *, Complex{Float64}, (false, false))...
    done (took 2.216289786 seconds)
    (135/192) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 2.228174632 seconds)
    (136/192) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.21757392 seconds)
    (137/192) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.05702351 seconds)
    (138/192) benchmarking ("perf_sum", Int64, false)...
    done (took 1.301248046 seconds)
    (139/192) benchmarking ("broadcast", *, Complex{Float64}, (true, true))...
    done (took 2.220646888 seconds)
    (140/192) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 1.35236254 seconds)
    (141/192) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.212391556 seconds)
    (142/192) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 1.987616704 seconds)
    (143/192) benchmarking ("perf_sum", BigFloat, false)...
    done (took 2.246720123 seconds)
    (144/192) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 1.993626756 seconds)
    (145/192) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 2.253343393 seconds)
    (146/192) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.114576759 seconds)
    (147/192) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 1.936151237 seconds)
    (148/192) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 2.238370598 seconds)
    (149/192) benchmarking ("broadcast", abs, Int64, false)...
    done (took 1.382192677 seconds)
    (150/192) benchmarking ("map", abs, Float64, false)...
    done (took 1.317020391 seconds)
    (151/192) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 1.356481135 seconds)
    (152/192) benchmarking ("map", identity, Float32, false)...
    done (took 1.298456596 seconds)
    (153/192) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.080458055 seconds)
    (154/192) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 1.347998932 seconds)
    (155/192) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 1.2959006 seconds)
    (156/192) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 2.212522201 seconds)
    (157/192) benchmarking ("map", abs, Complex{Float64}, true)...
    done (took 1.497731896 seconds)
    (158/192) benchmarking ("broadcast", identity, Int64, false)...
    done (took 1.383462945 seconds)
    (159/192) benchmarking ("map", identity, Int64, false)...
    done (took 1.319662457 seconds)
    (160/192) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 1.343103358 seconds)
    (161/192) benchmarking ("map", identity, Bool, false)...
    done (took 1.263873994 seconds)
    (162/192) benchmarking ("perf_countnothing", Bool, true)...
    done (took 1.274384972 seconds)
    (163/192) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.228760515 seconds)
    (164/192) benchmarking ("perf_countequals", "Complex{Float64}")...
    done (took 1.346501297 seconds)
    (165/192) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 2.248594754 seconds)
    (166/192) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.140174703 seconds)
    (167/192) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 1.405514929 seconds)
    (168/192) benchmarking ("broadcast", identity, Bool, true)...
    done (took 1.916214433 seconds)
    (169/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (false, false))...
    done (took 1.488914208 seconds)
    (170/192) benchmarking ("perf_countnothing", Float64, true)...
    done (took 1.279020849 seconds)
    (171/192) benchmarking ("perf_countnothing", Float64, false)...
    done (took 1.269622951 seconds)
    (172/192) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 1.358428866 seconds)
    (173/192) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 1.392472524 seconds)
    (174/192) benchmarking ("perf_countnothing", Int8, false)...
    done (took 1.270529217 seconds)
    (175/192) benchmarking ("map", abs, Int8, true)...
    done (took 1.352970147 seconds)
    (176/192) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.216856141 seconds)
    (177/192) benchmarking ("perf_sum", Int8, true)...
    done (took 1.331169321 seconds)
    (178/192) benchmarking ("perf_countnothing", Int8, true)...
    done (took 1.274519145 seconds)
    (179/192) benchmarking ("perf_simplecopy", Complex{Float64}, false)...
    done (took 1.421487055 seconds)
    (180/192) benchmarking ("perf_countequals", "BigFloat")...
    done (took 1.437938712 seconds)
    (181/192) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 1.335427161 seconds)
    (182/192) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 2.213979747 seconds)
    (183/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (true, true))...
    done (took 1.486141961 seconds)
    (184/192) benchmarking ("broadcast", identity, Float64, false)...
    done (took 1.378812041 seconds)
    (185/192) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 1.299500492 seconds)
    (186/192) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.229190834 seconds)
    (187/192) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 2.237060064 seconds)
    (188/192) benchmarking ("broadcast", abs, Bool, true)...
    done (took 1.950727603 seconds)
    (189/192) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.089119247 seconds)
    (190/192) benchmarking ("perf_sum", Int8, false)...
    done (took 1.312108324 seconds)
    (191/192) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 2.225278152 seconds)
    (192/192) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 1.431024765 seconds)
  done (took 320.373459201 seconds)
done (took 321.495648509 seconds)
(14/20) benchmarking "simd"...
  (1/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.263972128 seconds)
  (2/72) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.340240663 seconds)
  (3/72) benchmarking ("axpy!", "Float32", 4095)...
  done (took 1.244023201 seconds)
  (4/72) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.245791322 seconds)
  (5/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.245763381 seconds)
  (6/72) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.246254231 seconds)
  (7/72) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.269805682 seconds)
  (8/72) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 1.244779963 seconds)
  (9/72) benchmarking ("inner", "Float64", 4096)...
  done (took 1.258916896 seconds)
  (10/72) benchmarking ("inner", "Float64", 4095)...
  done (took 1.260440312 seconds)
  (11/72) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.244825823 seconds)
  (12/72) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.258653425 seconds)
  (13/72) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.258151693 seconds)
  (14/72) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.254544787 seconds)
  (15/72) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.277395973 seconds)
  (16/72) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 1.245008615 seconds)
  (17/72) benchmarking ("axpy!", "Float32", 4096)...
  done (took 1.243193036 seconds)
  (18/72) benchmarking ("inner", "Int32", 4096)...
  done (took 1.254210925 seconds)
  (19/72) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.260629448 seconds)
  (20/72) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.260771495 seconds)
  (21/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.244570863 seconds)
  (22/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.243987429 seconds)
  (23/72) benchmarking ("inner", "Int64", 4095)...
  done (took 1.272239704 seconds)
  (24/72) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.244416627 seconds)
  (25/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.252399558 seconds)
  (26/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.25319537 seconds)
  (27/72) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.249504461 seconds)
  (28/72) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.238699196 seconds)
  (29/72) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.25048525 seconds)
  (30/72) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.260553511 seconds)
  (31/72) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.240496466 seconds)
  (32/72) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.249308048 seconds)
  (33/72) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.260343786 seconds)
  (34/72) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.255584643 seconds)
  (35/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.245614219 seconds)
  (36/72) benchmarking ("inner", "Int32", 4095)...
  done (took 1.25451551 seconds)
  (37/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.244333779 seconds)
  (38/72) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.339517654 seconds)
  (39/72) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.264437172 seconds)
  (40/72) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.252847409 seconds)
  (41/72) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.251786532 seconds)
  (42/72) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.26063962 seconds)
  (43/72) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.248521138 seconds)
  (44/72) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 1.247034956 seconds)
  (45/72) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.255882883 seconds)
  (46/72) benchmarking ("inner", "Int64", 4096)...
  done (took 1.27175814 seconds)
  (47/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.252741433 seconds)
  (48/72) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.259574697 seconds)
  (49/72) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.24227648 seconds)
  (50/72) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.248864072 seconds)
  (51/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.268110846 seconds)
  (52/72) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 1.255697833 seconds)
  (53/72) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.252725637 seconds)
  (54/72) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.235279991 seconds)
  (55/72) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.250285825 seconds)
  (56/72) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.258385612 seconds)
  (57/72) benchmarking ("inner", "Float32", 4095)...
  done (took 1.25300881 seconds)
  (58/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.261767151 seconds)
  (59/72) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.252614405 seconds)
  (60/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.244569066 seconds)
  (61/72) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.276536799 seconds)
  (62/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.263928255 seconds)
  (63/72) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 1.256024517 seconds)
  (64/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.250871179 seconds)
  (65/72) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.250704431 seconds)
  (66/72) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.25909444 seconds)
  (67/72) benchmarking ("inner", "Float32", 4096)...
  done (took 1.255582481 seconds)
  (68/72) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.259944255 seconds)
  (69/72) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.250853408 seconds)
  (70/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.244595425 seconds)
  (71/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.244553824 seconds)
  (72/72) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.250840683 seconds)
done (took 99.565031719 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.366829322 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 2.240192015 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.399820075 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.251221172 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.406601582 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.36677317 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.250248691 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.250908286 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.251309063 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.038481124 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.25141314 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 1.249328509 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 2.23882736 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.250936017 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.363583437 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.25070156 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.249674525 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.940926433 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.251573516 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.382317161 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.242773647 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.25135635 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.252165134 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.041925122 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 2.240370028 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.236076598 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.38266008 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.250416861 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.937471672 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.235500822 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.237631312 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.938633751 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.382482695 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 1.270141835 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 1.259859232 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.259755377 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.409849799 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 1.255624334 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.36783278 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.36748842 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.400915468 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 1.291635477 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.237604671 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.242589269 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.254574071 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.253169196 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.250836872 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.280668181 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 2.241850951 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 1.252585131 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.938957728 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 1.262401879 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 1.25187202 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.252434987 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.253675038 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 1.281019359 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.252152026 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.253987529 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.384676075 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.252316637 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.367996101 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.04190347 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.04121107 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.252588306 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.242567059 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.253327761 seconds)
  done (took 102.49380388 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.317305436 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.322482716 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.355646033 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 1.246748921 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.294748155 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.358158779 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 1.248784685 seconds)
  done (took 10.276863673 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 1.25056341 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.254320447 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.292844639 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.292761612 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.254589474 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.418437982 seconds)
    (7/97) benchmarking ("randn", "MersenneTwister", "Complex{Float32}")...
    done (took 1.254951708 seconds)
    (8/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.255353149 seconds)
    (9/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 1.25370598 seconds)
    (10/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.296610489 seconds)
    (11/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.257101486 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "Complex{Float16}")...
    done (took 1.256107838 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 1.264287015 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.245812428 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.294230082 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.258999984 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.364042304 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 1.246721521 seconds)
    (19/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.254004098 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.397154953 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 1.254302775 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 1.265232756 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.296836932 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.258451347 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.258725467 seconds)
    (26/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 1.253077362 seconds)
    (27/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float16}")...
    done (took 2.029507837 seconds)
    (28/97) benchmarking ("randn", "MersenneTwister", "Complex{Float64}")...
    done (took 1.254645352 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.25432262 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.256170125 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.256678902 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.313270488 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.256086344 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.245958742 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.255900852 seconds)
    (36/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float32}")...
    done (took 1.3598892 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.256255629 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.253619754 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.256046651 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.246959143 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.257287747 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.254795174 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.255268121 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.254811502 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.255657551 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.271981836 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.255902114 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.255448874 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.256157817 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.256480235 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.297722631 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.257720113 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.256816967 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 1.255374255 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.301241004 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 1.264986491 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.257247317 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.256268735 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.257501666 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.257211166 seconds)
    (61/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.401180269 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.295932891 seconds)
    (63/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.256970177 seconds)
    (64/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.294401076 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{Float32}")...
    done (took 1.258657124 seconds)
    (66/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.257428441 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.257013067 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.25815102 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float64}")...
    done (took 1.339811899 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.259017384 seconds)
    (71/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.297737443 seconds)
    (72/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.258029355 seconds)
    (73/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.431013527 seconds)
    (74/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.275166957 seconds)
    (75/97) benchmarking ("randn", "MersenneTwister", "Complex{Float16}")...
    done (took 1.259834921 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.252245342 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.252498015 seconds)
    (78/97) benchmarking ("rand", "MersenneTwister", "Complex{Float64}")...
    done (took 1.25938478 seconds)
    (79/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.248155452 seconds)
    (80/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.257196085 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.25896417 seconds)
    (82/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 1.252184602 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 1.256714264 seconds)
    (84/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 1.258066329 seconds)
    (85/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.258583495 seconds)
    (86/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float16}")...
    done (took 1.408366761 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float64}")...
    done (took 1.355234658 seconds)
    (88/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.259182918 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 1.265621345 seconds)
    (90/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 1.256862057 seconds)
    (91/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.258356243 seconds)
    (92/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.30149804 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.258963265 seconds)
    (94/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.258415955 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float32}")...
    done (took 1.300072569 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.369337137 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.302924272 seconds)
  done (took 129.665142403 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 1.263961784 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 1.264782581 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 1.254564701 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.277939209 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 1.252436697 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 1.250920554 seconds)
  done (took 8.70294798 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.253500657 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.260973709 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.26082866 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.260656003 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.260988125 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.26095321 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.259998993 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.251689133 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 1.261684704 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.261603377 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.263023175 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.263299973 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.262048582 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.260408967 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.261439017 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.26089056 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.261077671 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.260231121 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.26390369 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.260926724 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.248907716 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.262024568 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.261388844 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.254025678 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 1.263589244 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.261749646 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.276781775 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.261531746 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.25954709 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.257995159 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.265896221 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.26413395 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.252825573 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.254807063 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.261498603 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.253716027 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.261468077 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.26585337 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.261735154 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.262893301 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.265093985 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.262625071 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.261488839 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.263185849 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 1.255444861 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 1.253586967 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.264704089 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.277329015 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.263461745 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.264959222 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.26408033 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.261731974 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.263803973 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.265125859 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.256271259 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.257609434 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 1.265868646 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.263840731 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.261927206 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.255343654 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.264823807 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.265954484 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.254860415 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.264600354 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 1.261179393 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.265466493 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.254122535 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.264050395 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.264322796 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.262986025 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.266000501 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.262690112 seconds)
  done (took 92.961077694 seconds)
done (took 345.230549876 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 2.562455293 seconds)
  done (took 3.702298573 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 2.252386286 seconds)
  done (took 3.392161246 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 21.380960028 seconds)
  done (took 22.523383815 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 2.264007151 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 2.277038103 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 2.271953033 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 2.253355392 seconds)
  done (took 10.204426943 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 3.907778498 seconds)
  done (took 5.047150534 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 2.258007828 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 2.263942592 seconds)
  done (took 5.661962337 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 2.380504526 seconds)
  done (took 3.520916195 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 2.585768961 seconds)
  done (took 3.724621612 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 2.25565162 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 2.25779799 seconds)
  done (took 5.660251172 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 2.2257566 seconds)
  done (took 3.364144416 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 19.573346683 seconds)
  done (took 20.711967235 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 2.27537947 seconds)
  done (took 3.416002504 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 2.322780013 seconds)
  done (took 3.459320301 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 4.658929947 seconds)
  done (took 5.79623754 seconds)
done (took 101.326245565 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 2.246635622 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 2.24654806 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 2.247341083 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 2.24597077 seconds)
  done (took 10.123771728 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Array{Float32,1} generator")...
    done (took 1.325246018 seconds)
    (2/24) benchmarking ("all", "Array{Float32,1}")...
    done (took 1.323322997 seconds)
    (3/24) benchmarking ("any", "Array{Float64,1} generator")...
    done (took 1.333323737 seconds)
    (4/24) benchmarking ("any", "Array{Int64,1}")...
    done (took 1.319060565 seconds)
    (5/24) benchmarking ("any", "Array{Int16,1} generator")...
    done (took 1.318766377 seconds)
    (6/24) benchmarking ("any", "Array{Float32,1}")...
    done (took 1.325646571 seconds)
    (7/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.285844384 seconds)
    (8/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.286326092 seconds)
    (9/24) benchmarking ("all", "Array{Int64,1}")...
    done (took 1.316607304 seconds)
    (10/24) benchmarking ("all", "Array{Int16,1}")...
    done (took 1.313492655 seconds)
    (11/24) benchmarking ("all", "Array{Float64,1}")...
    done (took 1.327586658 seconds)
    (12/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.317291465 seconds)
    (13/24) benchmarking ("any", "Array{Float32,1} generator")...
    done (took 1.32493296 seconds)
    (14/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.301533618 seconds)
    (15/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.313528817 seconds)
    (16/24) benchmarking ("all", "Array{Float64,1} generator")...
    done (took 1.328048899 seconds)
    (17/24) benchmarking ("all", "Array{Int64,1} generator")...
    done (took 1.318611474 seconds)
    (18/24) benchmarking ("any", "Array{Float64,1}")...
    done (took 1.334158988 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.285353838 seconds)
    (20/24) benchmarking ("any", "Array{Int16,1}")...
    done (took 1.318460003 seconds)
    (21/24) benchmarking ("any", "BitArray")...
    done (took 1.262938675 seconds)
    (22/24) benchmarking ("any", "Array{Int64,1} generator")...
    done (took 1.319796015 seconds)
    (23/24) benchmarking ("all", "Array{Int16,1} generator")...
    done (took 1.313936389 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.262940567 seconds)
  done (took 32.613992293 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.746563597 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.323133073 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.405875529 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.304438939 seconds)
  done (took 6.917655601 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.366960748 seconds)
    (2/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Int16,1}")...
    done (took 1.367199761 seconds)
    (3/24) benchmarking ("==", "Array{Float64,1}")...
    done (took 1.383727582 seconds)
    (4/24) benchmarking ("isequal", "Array{Float64,1}")...
    done (took 1.428722252 seconds)
    (5/24) benchmarking ("==", "Array{Int64,1} == Array{Float32,1}")...
    done (took 1.449808604 seconds)
    (6/24) benchmarking ("==", "Array{Float32,1}")...
    done (took 1.381121966 seconds)
    (7/24) benchmarking ("==", "Array{Int64,1}")...
    done (took 1.286651375 seconds)
    (8/24) benchmarking ("==", "Array{Int64,1} == Array{Int64,1}")...
    done (took 1.285091014 seconds)
    (9/24) benchmarking ("==", "Array{Int16,1}")...
    done (took 1.269529007 seconds)
    (10/24) benchmarking ("==", "Array{Int64,1} == Array{Int16,1}")...
    done (took 1.370190488 seconds)
    (11/24) benchmarking ("isequal", "BitArray")...
    done (took 1.445409164 seconds)
    (12/24) benchmarking ("==", "Array{Int64,1} == UnitRange{Int64}")...
    done (took 1.367193787 seconds)
    (13/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Float64,1}")...
    done (took 1.580832912 seconds)
    (14/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Int64,1}")...
    done (took 1.263963028 seconds)
    (15/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Float32,1}")...
    done (took 1.581361907 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.262830609 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.263264063 seconds)
    (18/24) benchmarking ("isequal", "Array{Int16,1}")...
    done (took 1.366517676 seconds)
    (19/24) benchmarking ("isequal", "Array{Float32,1}")...
    done (took 1.416208516 seconds)
    (20/24) benchmarking ("==", "Array{Int64,1} == Array{Float64,1}")...
    done (took 1.445238978 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.264276997 seconds)
    (22/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.365858046 seconds)
    (23/24) benchmarking ("isequal", "Array{Int64,1}")...
    done (took 1.371330763 seconds)
    (24/24) benchmarking ("isequal", "Array{Int64,1} isequal UnitRange{Int64}")...
    done (took 1.366651595 seconds)
  done (took 34.089110877 seconds)
  (5/13) benchmarking "reductions"...
    (1/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norminf", "Int64")...
    done (took 1.271950851 seconds)
    (2/22) benchmarking ("maxabs", "Float64")...
    done (took 1.277953745 seconds)
    (3/22) benchmarking ("sumabs", "Float64")...
    done (took 1.265292886 seconds)
    (4/22) benchmarking ("LinearAlgebra.norm", "Int64")...
    done (took 1.278944359 seconds)
    (5/22) benchmarking ("sumabs", "Int64")...
    done (took 1.264567131 seconds)
    (6/22) benchmarking ("sumabs2", "Float64")...
    done (took 1.265651347 seconds)
    (7/22) benchmarking ("sumabs2", "Int64")...
    done (took 1.266843519 seconds)
    (8/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_mapreduce", "Float64")...
    done (took 1.271415066 seconds)
    (9/22) benchmarking ("sum", "Int64")...
    done (took 1.265234744 seconds)
    (10/22) benchmarking ("mean", "Int64")...
    done (took 1.263949901 seconds)
    (11/22) benchmarking ("mean", "Float64")...
    done (took 1.265755336 seconds)
    (12/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norminf", "Float64")...
    done (took 1.277386532 seconds)
    (13/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_mapreduce", "Int64")...
    done (took 1.263630527 seconds)
    (14/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norm1", "Float64")...
    done (took 1.263779927 seconds)
    (15/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norm1", "Int64")...
    done (took 1.27210161 seconds)
    (16/22) benchmarking ("LinearAlgebra.norm", "Float64")...
    done (took 1.266527307 seconds)
    (17/22) benchmarking ("var", "Float64")...
    done (took 1.265515667 seconds)
    (18/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_reduce", "Float64")...
    done (took 1.270605154 seconds)
    (19/22) benchmarking ("var", "Int64")...
    done (took 1.274401103 seconds)
    (20/22) benchmarking ("sum", "Float64")...
    done (took 1.266761252 seconds)
    (21/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_reduce", "Int64")...
    done (took 1.265470652 seconds)
    (22/22) benchmarking ("maxabs", "Int64")...
    done (took 1.272024336 seconds)
  done (took 29.056077206 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 2.248929508 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 2.248909027 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.601872887 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.505444051 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 2.248279751 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 2.249141332 seconds)
  done (took 13.244330327 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 1.320688044 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 1.461650614 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.261640103 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 1.585863674 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.674271405 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 1.258165727 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 1.258471188 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 1.490247201 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 1.770512396 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 1.77159312 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 1.311116552 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 1.326868896 seconds)
  done (took 18.633307711 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 2.26197466 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 2.256381881 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 2.264612111 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.272290812 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.309362601 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.266369951 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 1.262501421 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 2.250592514 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 1.313392535 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.318620946 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.267146666 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.310118678 seconds)
  done (took 20.496468888 seconds)
  (9/13) benchmarking "index"...
    (1/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.340199165 seconds)
    (2/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.259435723 seconds)
    (3/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 2.260542584 seconds)
    (4/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.295929179 seconds)
    (5/481) benchmarking ("sumcartesian", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.260886416 seconds)
    (6/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.261525353 seconds)
    (7/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.308690471 seconds)
    (8/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.97421244 seconds)
    (9/481) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.267983077 seconds)
    (10/481) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.537765136 seconds)
    (11/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.263643274 seconds)
    (12/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.348181133 seconds)
    (13/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.506404976 seconds)
    (14/481) benchmarking ("sumcolon", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.272952312 seconds)
    (15/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.266581733 seconds)
    (16/481) benchmarking ("sumrange", "BitArray{2}")...
    done (took 2.20855761 seconds)
    (17/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.487106975 seconds)
    (18/481) benchmarking ("sumrange", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.727442435 seconds)
    (19/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.261883047 seconds)
    (20/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.261409882 seconds)
    (21/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.297508733 seconds)
    (22/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.27230412 seconds)
    (23/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.278449823 seconds)
    (24/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.461193505 seconds)
    (25/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.267649317 seconds)
    (26/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.260608903 seconds)
    (27/481) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.58925698 seconds)
    (28/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.262643753 seconds)
    (29/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.525023469 seconds)
    (30/481) benchmarking ("sumrange_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.50175786 seconds)
    (31/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.503146041 seconds)
    (32/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.263332797 seconds)
    (33/481) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.537261864 seconds)
    (34/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.887661237 seconds)
    (35/481) benchmarking ("sumelt", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.370984541 seconds)
    (36/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.453378105 seconds)
    (37/481) benchmarking ("mapr_access", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.26298125 seconds)
    (38/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.261915531 seconds)
    (39/481) benchmarking ("sumlinear_view", "BitArray{2}")...
    done (took 2.245215157 seconds)
    (40/481) benchmarking ("sumlogical", "Array{Float32,2}")...
    done (took 2.268954434 seconds)
    (41/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.282955097 seconds)
    (42/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.26798 seconds)
    (43/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.496116746 seconds)
    (44/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.271635977 seconds)
    (45/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.261899999 seconds)
    (46/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.260020587 seconds)
    (47/481) benchmarking ("sumvector_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.982561128 seconds)
    (48/481) benchmarking ("sumvector", "100000:-1:1")...
    done (took 1.275075017 seconds)
    (49/481) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 2.263393783 seconds)
    (50/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.263871677 seconds)
    (51/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.498046731 seconds)
    (52/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.34907621 seconds)
    (53/481) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.267039199 seconds)
    (54/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.261779491 seconds)
    (55/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.347011908 seconds)
    (56/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.261590089 seconds)
    (57/481) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 1.268726333 seconds)
    (58/481) benchmarking ("mapr_access", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.388689853 seconds)
    (59/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.903686933 seconds)
    (60/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.269233316 seconds)
    (61/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.279881633 seconds)
    (62/481) benchmarking ("sumeach", "Array{Float32,2}")...
    done (took 2.268866406 seconds)
    (63/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.268495756 seconds)
    (64/481) benchmarking ("sumlogical", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.264164196 seconds)
    (65/481) benchmarking ("sumvector", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.889844839 seconds)
    (66/481) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.269618221 seconds)
    (67/481) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.268289617 seconds)
    (68/481) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.267702459 seconds)
    (69/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.262159799 seconds)
    (70/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.260990166 seconds)
    (71/481) benchmarking ("sumeach", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.289334204 seconds)
    (72/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.260801224 seconds)
    (73/481) benchmarking ("sum", "3dsubarray")...
    done (took 1.284027437 seconds)
    (74/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.260237686 seconds)
    (75/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.0366691 seconds)
    (76/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.266739284 seconds)
    (77/481) benchmarking ("sumeach_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.268642915 seconds)
    (78/481) benchmarking ("sumcolon", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.770852143 seconds)
    (79/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.2744517 seconds)
    (80/481) benchmarking ("sumlinear", "Array{Float32,2}")...
    done (took 2.269057045 seconds)
    (81/481) benchmarking ("sumeach_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.486587803 seconds)
    (82/481) benchmarking ("sumcartesian", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.26134588 seconds)
    (83/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.260855603 seconds)
    (84/481) benchmarking "5d"...
    done (took 2.262433041 seconds)
    (85/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.263820864 seconds)
    (86/481) benchmarking ("sumlogical", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.951582574 seconds)
    (87/481) benchmarking ("sumlinear", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.273848194 seconds)
    (88/481) benchmarking ("sumlogical", "BitArray{2}")...
    done (took 2.231412768 seconds)
    (89/481) benchmarking ("mapr_access", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.307572251 seconds)
    (90/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.961357682 seconds)
    (91/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.456901899 seconds)
    (92/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.285641851 seconds)
    (93/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.291211022 seconds)
    (94/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.483726539 seconds)
    (95/481) benchmarking ("sumelt", "BitArray{2}")...
    done (took 2.230530693 seconds)
    (96/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.263441393 seconds)
    (97/481) benchmarking ("sumlogical_view", "Array{Int32,2}")...
    done (took 2.270571058 seconds)
    (98/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.268601964 seconds)
    (99/481) benchmarking ("sumeach", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.281800268 seconds)
    (100/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.962750856 seconds)
    (101/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.265946386 seconds)
    (102/481) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.269676393 seconds)
    (103/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.510125599 seconds)
    (104/481) benchmarking ("sumlinear", "Array{Int32,2}")...
    done (took 1.473967242 seconds)
    (105/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.267475668 seconds)
    (106/481) benchmarking ("sumcolon", "BitArray{2}")...
    done (took 2.192606963 seconds)
    (107/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.712030763 seconds)
    (108/481) benchmarking ("sumrange", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.268379099 seconds)
    (109/481) benchmarking ("sumcartesian", "Array{Float64,3}")...
    done (took 1.290940606 seconds)
    (110/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.27210365 seconds)
    (111/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.457074733 seconds)
    (112/481) benchmarking ("sumvector", "Array{Float32,2}")...
    done (took 1.860034613 seconds)
    (113/481) benchmarking ("sumrange_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.499598263 seconds)
    (114/481) benchmarking ("sumlogical", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.277664634 seconds)
    (115/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.302350744 seconds)
    (116/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.262842846 seconds)
    (117/481) benchmarking ("sumlogical", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 2.001873571 seconds)
    (118/481) benchmarking ("sumrange", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.27531036 seconds)
    (119/481) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.274591697 seconds)
    (120/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.276905793 seconds)
    (121/481) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.530737664 seconds)
    (122/481) benchmarking ("sumvector", "BitArray{2}")...
    done (took 2.025966276 seconds)
    (123/481) benchmarking ("sumcartesian", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.270283055 seconds)
    (124/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.336035509 seconds)
    (125/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.274087218 seconds)
    (126/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.262672451 seconds)
    (127/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.262164642 seconds)
    (128/481) benchmarking ("sumelt", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.287702257 seconds)
    (129/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.263542855 seconds)
    (130/481) benchmarking ("sumcolon_view", "BitArray{2}")...
    done (took 1.426655241 seconds)
    (131/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.275127339 seconds)
    (132/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.493296833 seconds)
    (133/481) benchmarking "ind2sub"...
    done (took 2.272793485 seconds)
    (134/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.261375717 seconds)
    (135/481) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 2.261445645 seconds)
    (136/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.274827996 seconds)
    (137/481) benchmarking ("sumcartesian", "Array{Float32,2}")...
    done (took 2.27168656 seconds)
    (138/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.484360324 seconds)
    (139/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.261811801 seconds)
    (140/481) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.541196346 seconds)
    (141/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.262479957 seconds)
    (142/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.263556379 seconds)
    (143/481) benchmarking ("sumeach", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.260484543 seconds)
    (144/481) benchmarking ("sumcartesian_view", "Array{Int32,2}")...
    done (took 1.479146655 seconds)
    (145/481) benchmarking ("sumlinear_view", "Array{Float64,3}")...
    done (took 2.270735531 seconds)
    (146/481) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 1.269388322 seconds)
    (147/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.602158582 seconds)
    (148/481) benchmarking ("sumcolon", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.269058378 seconds)
    (149/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.268240341 seconds)
    (150/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.493717859 seconds)
    (151/481) benchmarking ("sumelt", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.299435813 seconds)
    (152/481) benchmarking ("sumelt", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.375344551 seconds)
    (153/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.293453827 seconds)
    (154/481) benchmarking ("sumrange", "Array{Int32,2}")...
    done (took 2.26223342 seconds)
    (155/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.515460432 seconds)
    (156/481) benchmarking ("sumelt", "1:100000")...
    done (took 1.266984545 seconds)
    (157/481) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.268677329 seconds)
    (158/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.264793178 seconds)
    (159/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.271600924 seconds)
    (160/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.267435406 seconds)
    (161/481) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 1.271235103 seconds)
    (162/481) benchmarking ("mapr_access", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.255238235 seconds)
    (163/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.864623258 seconds)
    (164/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.24450095 seconds)
    (165/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.271398229 seconds)
    (166/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.261904439 seconds)
    (167/481) benchmarking ("sumlinear", "Array{Float64,3}")...
    done (took 1.279867711 seconds)
    (168/481) benchmarking ("sumeach", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.336298867 seconds)
    (169/481) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 1.271496492 seconds)
    (170/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.450329014 seconds)
    (171/481) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.270463678 seconds)
    (172/481) benchmarking ("mapr_access", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.290959162 seconds)
    (173/481) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.274204746 seconds)
    (174/481) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 2.267327705 seconds)
    (175/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.488446383 seconds)
    (176/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.48874085 seconds)
    (177/481) benchmarking ("sumlogical", "Array{Int32,2}")...
    done (took 2.282508267 seconds)
    (178/481) benchmarking ("sumlinear", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.444127345 seconds)
    (179/481) benchmarking ("sumvector_view", "Array{Int32,2}")...
    done (took 1.707485606 seconds)
    (180/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.853596409 seconds)
    (181/481) benchmarking ("sumeach_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.286062619 seconds)
    (182/481) benchmarking ("sumelt_boundscheck", "Array{Float32,2}")...
    done (took 2.264548016 seconds)
    (183/481) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 2.263135964 seconds)
    (184/481) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 2.264376505 seconds)
    (185/481) benchmarking ("sumlinear", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.264018523 seconds)
    (186/481) benchmarking ("sumeach", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.265828396 seconds)
    (187/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.264501129 seconds)
    (188/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.449918945 seconds)
    (189/481) benchmarking ("sumrange_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.498403022 seconds)
    (190/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.261892621 seconds)
    (191/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.861344854 seconds)
    (192/481) benchmarking ("sumlinear", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.271701656 seconds)
    (193/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.262886193 seconds)
    (194/481) benchmarking ("sumeach", "1:100000")...
    done (took 1.277018286 seconds)
    (195/481) benchmarking ("sumrange_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.487575263 seconds)
    (196/481) benchmarking ("sumvector", "1:100000")...
    done (took 1.277457452 seconds)
    (197/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.266248635 seconds)
    (198/481) benchmarking ("sumlogical", "1:100000")...
    done (took 2.268908172 seconds)
    (199/481) benchmarking ("sumlogical", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.268215537 seconds)
    (200/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.271814222 seconds)
    (201/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.494707 seconds)
    (202/481) benchmarking ("sumlinear", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.49233257 seconds)
    (203/481) benchmarking ("sumelt_boundscheck", "Array{Float64,3}")...
    done (took 1.279617162 seconds)
    (204/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.264682706 seconds)
    (205/481) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.78348189 seconds)
    (206/481) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.272605509 seconds)
    (207/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.264884438 seconds)
    (208/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.266031459 seconds)
    (209/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.289762763 seconds)
    (210/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.263941865 seconds)
    (211/481) benchmarking ("sumvector_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.096767153 seconds)
    (212/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.605957349 seconds)
    (213/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.267706901 seconds)
    (214/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.49108253 seconds)
    (215/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.281434099 seconds)
    (216/481) benchmarking ("sumelt", "Array{Float64,3}")...
    done (took 1.287669051 seconds)
    (217/481) benchmarking "4d"...
    done (took 2.267512719 seconds)
    (218/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.265617059 seconds)
    (219/481) benchmarking ("sumrange", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.272270319 seconds)
    (220/481) benchmarking ("sumeach_view", "Array{Int32,2}")...
    done (took 2.288776947 seconds)
    (221/481) benchmarking ("sumeach", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.273888136 seconds)
    (222/481) benchmarking ("sumcolon_view", "Array{Float32,2}")...
    done (took 1.452196601 seconds)
    (223/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.274197048 seconds)
    (224/481) benchmarking ("sumelt", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.273908535 seconds)
    (225/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.908923846 seconds)
    (226/481) benchmarking ("sumvector", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.034260508 seconds)
    (227/481) benchmarking ("sumvector", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.799462616 seconds)
    (228/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.273415093 seconds)
    (229/481) benchmarking ("sumrange", "Array{Float32,2}")...
    done (took 2.273908864 seconds)
    (230/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.27134362 seconds)
    (231/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.965949357 seconds)
    (232/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.270994057 seconds)
    (233/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.264943873 seconds)
    (234/481) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.493917078 seconds)
    (235/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.967162254 seconds)
    (236/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.270124557 seconds)
    (237/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.710029071 seconds)
    (238/481) benchmarking ("sumeach_view", "Array{Float64,3}")...
    done (took 2.278887634 seconds)
    (239/481) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.960701013 seconds)
    (240/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.49570343 seconds)
    (241/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.493083304 seconds)
    (242/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.273710086 seconds)
    (243/481) benchmarking ("sumlogical_view", "Array{Float32,2}")...
    done (took 2.266817245 seconds)
    (244/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.510865909 seconds)
    (245/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.477374609 seconds)
    (246/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.293115882 seconds)
    (247/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.267294803 seconds)
    (248/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.272643248 seconds)
    (249/481) benchmarking ("sumelt_boundscheck", "BitArray{2}")...
    done (took 2.235958566 seconds)
    (250/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.775546171 seconds)
    (251/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.273073447 seconds)
    (252/481) benchmarking ("sumelt_boundscheck", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.446476966 seconds)
    (253/481) benchmarking ("sumvector_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.966337739 seconds)
    (254/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.277517287 seconds)
    (255/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.269049491 seconds)
    (256/481) benchmarking ("mapr_access", "BitArray{2}")...
    done (took 2.263417456 seconds)
    (257/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 2.27754872 seconds)
    (258/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.630180691 seconds)
    (259/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.271454047 seconds)
    (260/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.267285376 seconds)
    (261/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.27918702 seconds)
    (262/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.272323219 seconds)
    (263/481) benchmarking ("sumvector_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.071567096 seconds)
    (264/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.274522529 seconds)
    (265/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.268395558 seconds)
    (266/481) benchmarking ("sumvector", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.876485334 seconds)
    (267/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.280872292 seconds)
    (268/481) benchmarking ("sumvector_view", "Array{Float32,2}")...
    done (took 1.718930534 seconds)
    (269/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.274326954 seconds)
    (270/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.453382857 seconds)
    (271/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.498395187 seconds)
    (272/481) benchmarking ("sumrange_view", "BitArray{2}")...
    done (took 1.470260938 seconds)
    (273/481) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.272240904 seconds)
    (274/481) benchmarking ("sumcolon", "1:100000")...
    done (took 2.283221581 seconds)
    (275/481) benchmarking ("sumcartesian_view", "Array{Float32,2}")...
    done (took 1.512848409 seconds)
    (276/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.494262918 seconds)
    (277/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.26998496 seconds)
    (278/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.271367706 seconds)
    (279/481) benchmarking ("sumvector", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.798746245 seconds)
    (280/481) benchmarking "3d"...
    done (took 2.126695053 seconds)
    (281/481) benchmarking ("sum", "3darray")...
    done (took 1.274970029 seconds)
    (282/481) benchmarking ("sumlinear", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.268351468 seconds)
    (283/481) benchmarking ("sumlogical", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.993680338 seconds)
    (284/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.280219612 seconds)
    (285/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.522382859 seconds)
    (286/481) benchmarking ("sumcolon", "Array{Int32,2}")...
    done (took 2.281647534 seconds)
    (287/481) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.273201882 seconds)
    (288/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.283952271 seconds)
    (289/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.267630943 seconds)
    (290/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.268643299 seconds)
    (291/481) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 2.268824121 seconds)
    (292/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.275768313 seconds)
    (293/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.247139713 seconds)
    (294/481) benchmarking ("sumcolon", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.706075847 seconds)
    (295/481) benchmarking ("mapr_access", "Array{Float32,2}")...
    done (took 2.265772239 seconds)
    (296/481) benchmarking ("mapr_access", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.262578924 seconds)
    (297/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.284796236 seconds)
    (298/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.287543151 seconds)
    (299/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.515267442 seconds)
    (300/481) benchmarking ("sumeach", "Array{Float64,3}")...
    done (took 1.284652116 seconds)
    (301/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.846905854 seconds)
    (302/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.494356017 seconds)
    (303/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.273333922 seconds)
    (304/481) benchmarking ("sumelt", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.300710595 seconds)
    (305/481) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.272436045 seconds)
    (306/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.266977897 seconds)
    (307/481) benchmarking ("sumcartesian_view", "BitArray{2}")...
    done (took 2.240221395 seconds)
    (308/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.268932071 seconds)
    (309/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.268084333 seconds)
    (310/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.330603368 seconds)
    (311/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.490102482 seconds)
    (312/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 2.269454508 seconds)
    (313/481) benchmarking ("sumeach", "BitArray{2}")...
    done (took 2.243409542 seconds)
    (314/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.276714611 seconds)
    (315/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.478345595 seconds)
    (316/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.268828821 seconds)
    (317/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.271922638 seconds)
    (318/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.463642477 seconds)
    (319/481) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 2.272559924 seconds)
    (320/481) benchmarking ("sumeach_view", "Array{Float32,2}")...
    done (took 2.281361777 seconds)
    (321/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.008219704 seconds)
    (322/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.300522213 seconds)
    (323/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.27358162 seconds)
    (324/481) benchmarking ("sumcartesian", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.270774533 seconds)
    (325/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.276272755 seconds)
    (326/481) benchmarking ("mapr_access", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.308430476 seconds)
    (327/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.344089653 seconds)
    (328/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.454951927 seconds)
    (329/481) benchmarking ("sumrange_view", "Array{Float32,2}")...
    done (took 1.496841241 seconds)
    (330/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.491224706 seconds)
    (331/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.622241633 seconds)
    (332/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.275264935 seconds)
    (333/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.271250617 seconds)
    (334/481) benchmarking ("sumcartesian_view", "Array{Float64,3}")...
    done (took 1.285132694 seconds)
    (335/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.349910129 seconds)
    (336/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.268739544 seconds)
    (337/481) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.271911524 seconds)
    (338/481) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.281482257 seconds)
    (339/481) benchmarking ("sumvector", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.843624564 seconds)
    (340/481) benchmarking ("sumvector", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.004178627 seconds)
    (341/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.853655491 seconds)
    (342/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.495609519 seconds)
    (343/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.272351977 seconds)
    (344/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.269358304 seconds)
    (345/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.270656284 seconds)
    (346/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.511493584 seconds)
    (347/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.267927891 seconds)
    (348/481) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.546487807 seconds)
    (349/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.269909914 seconds)
    (350/481) benchmarking ("mapr_access", "Array{Int32,2}")...
    done (took 2.278758181 seconds)
    (351/481) benchmarking ("sumlinear", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.291458855 seconds)
    (352/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.269222088 seconds)
    (353/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.283861662 seconds)
    (354/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.480209123 seconds)
    (355/481) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.544702776 seconds)
    (356/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.269943848 seconds)
    (357/481) benchmarking ("sumcolon", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.272744965 seconds)
    (358/481) benchmarking ("sumelt", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.270406189 seconds)
    (359/481) benchmarking ("sumcartesian", "Array{Int32,2}")...
    done (took 2.269887719 seconds)
    (360/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.496282866 seconds)
    (361/481) benchmarking ("sumeach", "Array{Int32,2}")...
    done (took 1.488062348 seconds)
    (362/481) benchmarking ("sumrange", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.707828662 seconds)
    (363/481) benchmarking ("sumcolon", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.765654715 seconds)
    (364/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.274855914 seconds)
    (365/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.279445545 seconds)
    (366/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.960815198 seconds)
    (367/481) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.551733162 seconds)
    (368/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.271097513 seconds)
    (369/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.271262704 seconds)
    (370/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.272539087 seconds)
    (371/481) benchmarking ("sumlinear_view", "Array{Float32,2}")...
    done (took 2.285666593 seconds)
    (372/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 2.272538294 seconds)
    (373/481) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.283205126 seconds)
    (374/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.272689968 seconds)
    (375/481) benchmarking ("sumlinear", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.500757487 seconds)
    (376/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.486697255 seconds)
    (377/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.899270484 seconds)
    (378/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.496818635 seconds)
    (379/481) benchmarking "sub2ind"...
    done (took 2.446723218 seconds)
    (380/481) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.185116271 seconds)
    (381/481) benchmarking ("sumlogical", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.271986533 seconds)
    (382/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.521871599 seconds)
    (383/481) benchmarking ("sumlinear_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.108613956 seconds)
    (384/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.452092686 seconds)
    (385/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.856194627 seconds)
    (386/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.947356883 seconds)
    (387/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.528600966 seconds)
    (388/481) benchmarking ("sumeach", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.346069866 seconds)
    (389/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.45417571 seconds)
    (390/481) benchmarking "6d"...
    done (took 2.279349298 seconds)
    (391/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.508135182 seconds)
    (392/481) benchmarking ("sumrange", "1:100000")...
    done (took 2.271281009 seconds)
    (393/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.271630881 seconds)
    (394/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.272925961 seconds)
    (395/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.271246032 seconds)
    (396/481) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 2.27110006 seconds)
    (397/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.488369991 seconds)
    (398/481) benchmarking ("sumvector", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.857333096 seconds)
    (399/481) benchmarking ("sumeach_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.528578288 seconds)
    (400/481) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 1.278096448 seconds)
    (401/481) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.272325401 seconds)
    (402/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.301005763 seconds)
    (403/481) benchmarking ("sumcolon_view", "Array{Int32,2}")...
    done (took 1.454559185 seconds)
    (404/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.498339627 seconds)
    (405/481) benchmarking ("sumlogical", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.936270749 seconds)
    (406/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.491107699 seconds)
    (407/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.49500428 seconds)
    (408/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.285780571 seconds)
    (409/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.272392132 seconds)
    (410/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.853758453 seconds)
    (411/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.502882183 seconds)
    (412/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.276856781 seconds)
    (413/481) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.279225538 seconds)
    (414/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.465252657 seconds)
    (415/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.27798463 seconds)
    (416/481) benchmarking ("sumelt", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.306810579 seconds)
    (417/481) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.142118195 seconds)
    (418/481) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 2.272877782 seconds)
    (419/481) benchmarking ("sumrange", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.760026692 seconds)
    (420/481) benchmarking ("sumelt_boundscheck", "Array{Int32,2}")...
    done (took 1.484278146 seconds)
    (421/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.293732127 seconds)
    (422/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.279694221 seconds)
    (423/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.955163993 seconds)
    (424/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.854028483 seconds)
    (425/481) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.286228526 seconds)
    (426/481) benchmarking ("sumcolon", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.71343371 seconds)
    (427/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.275618887 seconds)
    (428/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.275442327 seconds)
    (429/481) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.555417446 seconds)
    (430/481) benchmarking ("sumvector_view", "1:100000")...
    done (took 1.280816624 seconds)
    (431/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.276959885 seconds)
    (432/481) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.558206221 seconds)
    (433/481) benchmarking ("sumlinear", "1:100000")...
    done (took 1.280948041 seconds)
    (434/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.279741979 seconds)
    (435/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.462813306 seconds)
    (436/481) benchmarking ("sumvector", "Array{Int32,2}")...
    done (took 1.850846539 seconds)
    (437/481) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.953624457 seconds)
    (438/481) benchmarking ("sumlinear_view", "Array{Int32,2}")...
    done (took 2.294220922 seconds)
    (439/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.27615078 seconds)
    (440/481) benchmarking ("sumelt", "Array{Float32,2}")...
    done (took 2.283940695 seconds)
    (441/481) benchmarking ("sumeach", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.274915024 seconds)
    (442/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.33745599 seconds)
    (443/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.27460978 seconds)
    (444/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.285541988 seconds)
    (445/481) benchmarking ("sumvector_view", "BitArray{2}")...
    done (took 1.627873428 seconds)
    (446/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.279522814 seconds)
    (447/481) benchmarking ("sumeach_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.274946146 seconds)
    (448/481) benchmarking ("sumcartesian_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.288548992 seconds)
    (449/481) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.283731105 seconds)
    (450/481) benchmarking ("sumrange", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.291526116 seconds)
    (451/481) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 2.279573454 seconds)
    (452/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.276103317 seconds)
    (453/481) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 1.282645158 seconds)
    (454/481) benchmarking ("sumeach_view", "BitArray{2}")...
    done (took 2.260467308 seconds)
    (455/481) benchmarking ("sumlogical_view", "BitArray{2}")...
    done (took 2.251833408 seconds)
    (456/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.296196677 seconds)
    (457/481) benchmarking ("mapr_access", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.39961539 seconds)
    (458/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.783873845 seconds)
    (459/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.277549932 seconds)
    (460/481) benchmarking "2d"...
    done (took 1.891745124 seconds)
    (461/481) benchmarking "7d"...
    done (took 1.611278844 seconds)
    (462/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.522315101 seconds)
    (463/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.283172302 seconds)
    (464/481) benchmarking ("sumcartesian", "BitArray{2}")...
    done (took 2.251094214 seconds)
    (465/481) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.281275872 seconds)
    (466/481) benchmarking ("sumlinear", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.277375965 seconds)
    (467/481) benchmarking ("sumeach", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.276249627 seconds)
    (468/481) benchmarking ("sumelt", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.2760981 seconds)
    (469/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.271871747 seconds)
    (470/481) benchmarking ("sumrange", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.76465458 seconds)
    (471/481) benchmarking ("sumcolon", "Array{Float32,2}")...
    done (took 2.277704974 seconds)
    (472/481) benchmarking ("sumrange_view", "Array{Int32,2}")...
    done (took 1.518425496 seconds)
    (473/481) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.284811737 seconds)
    (474/481) benchmarking ("sumelt", "Array{Int32,2}")...
    done (took 1.487470407 seconds)
    (475/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.48796492 seconds)
    (476/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.277966442 seconds)
    (477/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.461638594 seconds)
    (478/481) benchmarking ("sumcolon", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.282695179 seconds)
    (479/481) benchmarking ("sumcartesian", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.302311292 seconds)
    (480/481) benchmarking ("sumlinear", "BitArray{2}")...
    done (took 2.24690626 seconds)
    (481/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.276942611 seconds)
  done (took 927.102693556 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("collect", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 2.27027815 seconds)
    (2/8) benchmarking ("collect", "Array{Float64,1}")...
    done (took 2.279492762 seconds)
    (3/8) benchmarking ("comprehension_collect", "Array{Float64,1}")...
    done (took 2.279733887 seconds)
    (4/8) benchmarking ("comprehension_iteration", "Array{Float64,1}")...
    done (took 2.300879477 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 2.276834619 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 2.368715145 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Array{Float64,1}")...
    done (took 2.327977196 seconds)
    (8/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 2.312163658 seconds)
  done (took 19.573095197 seconds)
  (11/13) benchmarking "cat"...
    (1/16) benchmarking ("hvcat", 500)...
    done (took 2.270383383 seconds)
    (2/16) benchmarking ("hcat_setind", 5)...
    done (took 1.276866522 seconds)
    (3/16) benchmarking ("hvcat_setind", 500)...
    done (took 2.270225371 seconds)
    (4/16) benchmarking ("hvcat", 5)...
    done (took 1.277636389 seconds)
    (5/16) benchmarking ("hcat", 500)...
    done (took 2.277326356 seconds)
    (6/16) benchmarking ("catnd_setind", 5)...
    done (took 1.702461825 seconds)
    (7/16) benchmarking ("vcat_setind", 500)...
    done (took 2.282194932 seconds)
    (8/16) benchmarking ("hvcat_setind", 5)...
    done (took 1.278964979 seconds)
    (9/16) benchmarking ("vcat", 5)...
    done (took 1.292650029 seconds)
    (10/16) benchmarking ("catnd_setind", 500)...
    done (took 2.271716867 seconds)
    (11/16) benchmarking ("vcat", 500)...
    done (took 2.279664757 seconds)
    (12/16) benchmarking ("catnd", 5)...
    done (took 1.851541933 seconds)
    (13/16) benchmarking ("vcat_setind", 5)...
    done (took 1.285446469 seconds)
    (14/16) benchmarking ("hcat_setind", 500)...
    done (took 2.276261184 seconds)
    (15/16) benchmarking ("catnd", 500)...
    done (took 2.281302349 seconds)
    (16/16) benchmarking ("hcat", 5)...
    done (took 1.279678555 seconds)
  done (took 30.612889858 seconds)
  (12/13) benchmarking "subarray"...
    (1/8) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.784330912 seconds)
    (2/8) benchmarking ("lucompletepivSub!", 500)...
    done (took 2.526733959 seconds)
    (3/8) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.397531138 seconds)
    (4/8) benchmarking ("lucompletepivCopy!", 250)...
    done (took 2.299538152 seconds)
    (5/8) benchmarking ("lucompletepivSub!", 250)...
    done (took 2.308835739 seconds)
    (6/8) benchmarking ("lucompletepivCopy!", 100)...
    done (took 2.280052598 seconds)
    (7/8) benchmarking ("lucompletepivCopy!", 500)...
    done (took 2.309625398 seconds)
    (8/8) benchmarking ("lucompletepivSub!", 100)...
    done (took 2.272345646 seconds)
  done (took 24.337967397 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 1.284881143 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 1.283885252 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.286086939 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 1.284247722 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 1.286102363 seconds)
  done (took 7.584179183 seconds)
done (took 1175.524494597 seconds)
(18/20) benchmarking "misc"...
  (1/6) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.286228941 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.286480674 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.284849802 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.286504231 seconds)
  done (took 6.303864001 seconds)
  (2/6) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 2.250127083 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 2.251210546 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 2.251225027 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 1.267003248 seconds)
  done (took 9.179031682 seconds)
  (3/6) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 1.870104677 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 1.74683737 seconds)
  done (took 4.775870785 seconds)
  (4/6) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.812758253 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.813239718 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.81022289 seconds)
  done (took 6.595530237 seconds)
  (5/6) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.563640853 seconds)
  done (took 2.723826987 seconds)
  (6/6) benchmarking "parse"...
    (1/3) benchmarking "Int"...
    done (took 2.257872574 seconds)
    (2/3) benchmarking "Float64"...
    done (took 2.278910142 seconds)
    (3/3) benchmarking "DateTime"...
    done (took 2.000228718 seconds)
  done (took 7.698099268 seconds)
done (took 38.436490908 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.278651915 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 3.031633577 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 2.42773331 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.283560132 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 2.485407509 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 2.429247244 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 2.52469416 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.272051571 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.281422578 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.279267305 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.282960744 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 2.432498811 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 2.511590832 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 3.03104477 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 2.512323361 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 3.034616174 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 2.432390662 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.274404384 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 2.283066584 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 2.273010433 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 2.538106399 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.272579564 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.274182954 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.27379795 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 2.433859475 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 2.417324953 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.283568147 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 3.032009236 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 2.272495183 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.296134365 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 2.419931673 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 2.275082454 seconds)
  done (took 79.312560059 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.273318617 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 2.274574753 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 2.273713223 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.275312094 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 2.272769227 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 2.275581849 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 2.27528767 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.273857485 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.287890996 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.290045664 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.274810914 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 2.272552864 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 2.269695763 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 2.269026293 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 2.271127407 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 2.270281665 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 2.257955677 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.277781879 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 2.271293579 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 2.259065294 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 2.267826678 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.255004626 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.252907503 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.257925962 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 2.252776793 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 2.252740172 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.245966651 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 2.247155964 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 2.266761496 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.243044955 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 2.253536756 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 2.243731704 seconds)
  done (took 73.668764861 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.243479061 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 2.259158192 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 2.248573021 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.255936671 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 2.25091949 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 2.244376466 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 2.243270847 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.255291473 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.238832877 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.2463182 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.242040434 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 2.238961215 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 2.253335939 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 2.244227105 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 2.23954192 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 2.235615481 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 2.237132282 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.236345025 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 2.239773423 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 2.235319726 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 2.236623691 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.242799193 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.2333863 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.232961956 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 2.232383213 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 2.23096929 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.232596003 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 2.230619078 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 2.239857105 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.230215974 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 2.234205842 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 2.231864081 seconds)
  done (took 72.835982114 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.467886589 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.241948378 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 1.244631063 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.236994282 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 1.244886107 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.242100974 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.236825819 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.473267749 seconds)
  done (took 13.512448041 seconds)
done (took 240.490423551 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/33) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.238358273 seconds)
    (2/33) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.679743512 seconds)
    (3/33) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.268101587 seconds)
    (4/33) benchmarking ("Set", "Any", "loop")...
    done (took 2.241654539 seconds)
    (5/33) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.256029915 seconds)
    (6/33) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.268546621 seconds)
    (7/33) benchmarking ("Vector", "String", "loop")...
    done (took 1.441737918 seconds)
    (8/33) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.272395324 seconds)
    (9/33) benchmarking ("Vector", "Int", "loop")...
    done (took 1.445726929 seconds)
    (10/33) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.256724163 seconds)
    (11/33) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.255500431 seconds)
    (12/33) benchmarking ("Dict", "String", "loop")...
    done (took 2.249470629 seconds)
    (13/33) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.942643789 seconds)
    (14/33) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.383859558 seconds)
    (15/33) benchmarking ("Set", "String", "iterator")...
    done (took 2.007142572 seconds)
    (16/33) benchmarking ("Set", "String", "loop")...
    done (took 2.118192873 seconds)
    (17/33) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.020977561 seconds)
    (18/33) benchmarking ("Set", "Any", "iterator")...
    done (took 2.229981469 seconds)
    (19/33) benchmarking ("Set", "Int", "loop")...
    done (took 1.737162913 seconds)
    (20/33) benchmarking ("Vector", "Any", "loop")...
    done (took 1.500995944 seconds)
    (21/33) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.260409825 seconds)
    (22/33) benchmarking ("Dict", "String", "iterator")...
    done (took 2.221462787 seconds)
    (23/33) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.001955472 seconds)
    (24/33) benchmarking ("Dict", "Int", "loop")...
    done (took 2.030714695 seconds)
    (25/33) benchmarking ("Dict", "Any", "iterator")...
    done (took 2.216857733 seconds)
    (26/33) benchmarking ("Vector", "String", "iterator")...
    done (took 1.301664874 seconds)
    (27/33) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.314348539 seconds)
    (28/33) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.447904982 seconds)
    (29/33) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.379217386 seconds)
    (30/33) benchmarking ("Vector", "Int", "iterator")...
    done (took 1.298202283 seconds)
    (31/33) benchmarking ("Set", "Int", "iterator")...
    done (took 1.677490255 seconds)
    (32/33) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.2377294 seconds)
    (33/33) benchmarking ("Dict", "Any", "loop")...
    done (took 2.236116531 seconds)
  done (took 58.563087177 seconds)
  (2/6) benchmarking "iteration"...
    (1/30) benchmarking ("Set", "String", "next")...
    done (took 1.224702858 seconds)
    (2/30) benchmarking ("Set", "Any", "start")...
    done (took 1.234861609 seconds)
    (3/30) benchmarking ("Set", "Int", "done")...
    done (took 1.234462663 seconds)
    (4/30) benchmarking ("Dict", "Int", "done")...
    done (took 1.236782445 seconds)
    (5/30) benchmarking ("Dict", "String", "start")...
    done (took 1.235781593 seconds)
    (6/30) benchmarking ("BitSet", "Int", "done")...
    done (took 1.235171439 seconds)
    (7/30) benchmarking ("Dict", "String", "next")...
    done (took 1.225451563 seconds)
    (8/30) benchmarking ("Vector", "Int", "done")...
    done (took 1.234968797 seconds)
    (9/30) benchmarking ("Vector", "String", "done")...
    done (took 1.233803676 seconds)
    (10/30) benchmarking ("Vector", "Any", "done")...
    done (took 1.235440022 seconds)
    (11/30) benchmarking ("Dict", "String", "done")...
    done (took 1.235511558 seconds)
    (12/30) benchmarking ("Vector", "Int", "next")...
    done (took 1.234592491 seconds)
    (13/30) benchmarking ("Set", "Int", "next")...
    done (took 1.235730164 seconds)
    (14/30) benchmarking ("Vector", "Int", "start")...
    done (took 1.235909512 seconds)
    (15/30) benchmarking ("Dict", "Int", "start")...
    done (took 1.234808557 seconds)
    (16/30) benchmarking ("Vector", "Any", "next")...
    done (took 1.20906034 seconds)
    (17/30) benchmarking ("Dict", "Any", "next")...
    done (took 1.225749797 seconds)
    (18/30) benchmarking ("Set", "String", "start")...
    done (took 1.235366279 seconds)
    (19/30) benchmarking ("Vector", "String", "next")...
    done (took 1.225830769 seconds)
    (20/30) benchmarking ("Set", "Any", "next")...
    done (took 1.210782588 seconds)
    (21/30) benchmarking ("Vector", "String", "start")...
    done (took 1.235482028 seconds)
    (22/30) benchmarking ("Dict", "Any", "done")...
    done (took 1.236301136 seconds)
    (23/30) benchmarking ("Dict", "Int", "next")...
    done (took 1.235810908 seconds)
    (24/30) benchmarking ("Vector", "Any", "start")...
    done (took 1.236904293 seconds)
    (25/30) benchmarking ("Set", "String", "done")...
    done (took 1.236169899 seconds)
    (26/30) benchmarking ("Set", "Any", "done")...
    done (took 1.23701313 seconds)
    (27/30) benchmarking ("Set", "Int", "start")...
    done (took 1.23657694 seconds)
    (28/30) benchmarking ("BitSet", "Int", "next")...
    done (took 1.236875788 seconds)
    (29/30) benchmarking ("BitSet", "Int", "start")...
    done (took 1.236645506 seconds)
    (30/30) benchmarking ("Dict", "Any", "start")...
    done (took 1.236713268 seconds)
  done (took 38.09692053 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.236784149 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.726995797 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.900642699 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.241186646 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.229312321 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 1.233600845 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.474855464 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.243249559 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 1.231920136 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 1.231066512 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.645989524 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.243767579 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.256256523 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.908794446 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 1.242069968 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.245281047 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.242774571 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.236136403 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.739844917 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.246101864 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 1.481885572 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.251031838 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.483754109 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 1.244680356 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.239537382 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.236015101 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 1.242209554 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.007623934 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 1.259292739 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.649642545 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.878027044 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.48186389 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.941234201 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.957004558 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.87234305 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.252788071 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.24683379 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.655426368 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 1.245216811 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.237288611 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.480211241 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 1.242945412 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.913514085 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.910344328 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 1.256693215 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.246285673 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.032474885 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.657461837 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.450442018 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 1.248477086 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.949957388 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 1.245699627 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.247019351 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.238770003 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.444196943 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.23879174 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.238253584 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.013529279 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 1.244187043 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 1.483193132 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.250629734 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.237631557 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.744158884 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 1.242404436 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.735003053 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.24396443 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 1.245557066 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 1.241157952 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.924003631 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 1.247420171 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.917484151 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.252646899 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.246907409 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.652090896 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.740116542 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.079118658 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 1.24620288 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.748590425 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.964931781 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.497341351 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 1.242574124 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.9771338 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 1.498625804 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 1.242584975 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.248990602 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.247900681 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.248484967 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.313725031 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.474740702 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.826106658 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.92315936 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.02737254 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 1.4903015 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 1.237782902 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 1.231024497 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.013136357 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.245262759 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.239386394 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.900512353 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.919690729 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.246688912 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 1.236997377 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.894558913 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 1.244969486 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 1.477984332 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 1.240935132 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.943410429 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 1.236207194 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.308888881 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.237187258 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 1.234740685 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 1.232468699 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 1.47661918 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 1.237117464 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.237919287 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.892507823 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.672128022 seconds)
  done (took 173.583340535 seconds)
  (4/6) benchmarking "optimizations"...
    (1/20) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 2.223569247 seconds)
    (2/20) benchmarking ("Set", "abstract", "Int8")...
    done (took 2.222852835 seconds)
    (3/20) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 2.225708451 seconds)
    (4/20) benchmarking ("Dict", "concrete", "Bool")...
    done (took 2.223269221 seconds)
    (5/20) benchmarking ("Dict", "abstract", "Bool")...
    done (took 2.222395964 seconds)
    (6/20) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.229972435 seconds)
    (7/20) benchmarking ("Set", "abstract", "Bool")...
    done (took 2.222837544 seconds)
    (8/20) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 2.222993912 seconds)
    (9/20) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.229431666 seconds)
    (10/20) benchmarking ("Set", "concrete", "Bool")...
    done (took 2.223173801 seconds)
    (11/20) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 2.224099269 seconds)
    (12/20) benchmarking ("Set", "concrete", "Nothing")...
    done (took 1.231443752 seconds)
    (13/20) benchmarking ("Set", "abstract", "Nothing")...
    done (took 1.233129367 seconds)
    (14/20) benchmarking ("BitSet", "Int8")...
    done (took 2.222344892 seconds)
    (15/20) benchmarking ("Set", "abstract", "UInt16")...
    done (took 2.226761976 seconds)
    (16/20) benchmarking ("Dict", "concrete", "Int8")...
    done (took 2.224268238 seconds)
    (17/20) benchmarking ("BitSet", "UInt16")...
    done (took 2.224452018 seconds)
    (18/20) benchmarking ("Set", "concrete", "UInt16")...
    done (took 2.22705349 seconds)
    (19/20) benchmarking ("Set", "concrete", "Int8")...
    done (took 2.224450844 seconds)
    (20/20) benchmarking ("Dict", "abstract", "Int8")...
    done (took 2.225984898 seconds)
  done (took 41.63183426 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/79) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.238531068 seconds)
    (2/79) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.715359938 seconds)
    (3/79) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.685611531 seconds)
    (4/79) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.245827249 seconds)
    (5/79) benchmarking ("BitSet", "Int", "last")...
    done (took 1.23988481 seconds)
    (6/79) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.231140733 seconds)
    (7/79) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.279370375 seconds)
    (8/79) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.24061749 seconds)
    (9/79) benchmarking ("BitSet", "Int", "first")...
    done (took 1.240294434 seconds)
    (10/79) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.487786745 seconds)
    (11/79) benchmarking ("Vector", "String", "push!")...
    done (took 1.378398789 seconds)
    (12/79) benchmarking ("Set", "String", "in", "false")...
    done (took 1.242010036 seconds)
    (13/79) benchmarking ("BitSet", "Int", "length")...
    done (took 1.240233343 seconds)
    (14/79) benchmarking ("Set", "Int", "first")...
    done (took 1.240593249 seconds)
    (15/79) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.684788883 seconds)
    (16/79) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.218425399 seconds)
    (17/79) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.488884548 seconds)
    (18/79) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.712215524 seconds)
    (19/79) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.241030986 seconds)
    (20/79) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.712672054 seconds)
    (21/79) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.214673825 seconds)
    (22/79) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.241330227 seconds)
    (23/79) benchmarking ("Dict", "String", "getindex")...
    done (took 1.231175974 seconds)
    (24/79) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.713211482 seconds)
    (25/79) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.497508142 seconds)
    (26/79) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.476166029 seconds)
    (27/79) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.281776491 seconds)
    (28/79) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.713435667 seconds)
    (29/79) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.241316859 seconds)
    (30/79) benchmarking ("Vector", "Int", "last")...
    done (took 1.240499541 seconds)
    (31/79) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.714032624 seconds)
    (32/79) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.242002639 seconds)
    (33/79) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.232739352 seconds)
    (34/79) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.699737566 seconds)
    (35/79) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.241529183 seconds)
    (36/79) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.253933146 seconds)
    (37/79) benchmarking ("Vector", "Int", "length")...
    done (took 1.240344278 seconds)
    (38/79) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.282448802 seconds)
    (39/79) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.284389744 seconds)
    (40/79) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.490783334 seconds)
    (41/79) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 1.720443043 seconds)
    (42/79) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.486605432 seconds)
    (43/79) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.252277483 seconds)
    (44/79) benchmarking ("Vector", "Any", "in", "true")...
    done (took 1.401166842 seconds)
    (45/79) benchmarking ("Dict", "Int", "first")...
    done (took 1.243320801 seconds)
    (46/79) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.212390614 seconds)
    (47/79) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.724102484 seconds)
    (48/79) benchmarking ("Vector", "Int", "in", "true")...
    done (took 1.242924592 seconds)
    (49/79) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.215486279 seconds)
    (50/79) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.244767888 seconds)
    (51/79) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.248897488 seconds)
    (52/79) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.700748658 seconds)
    (53/79) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.235707809 seconds)
    (54/79) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.701174971 seconds)
    (55/79) benchmarking ("Dict", "Int", "length")...
    done (took 1.243447139 seconds)
    (56/79) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.242069497 seconds)
    (57/79) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.716186142 seconds)
    (58/79) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.701893038 seconds)
    (59/79) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.693457288 seconds)
    (60/79) benchmarking ("Vector", "Int", "push!")...
    done (took 1.378025595 seconds)
    (61/79) benchmarking ("Vector", "String", "getindex")...
    done (took 1.238089082 seconds)
    (62/79) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.479344847 seconds)
    (63/79) benchmarking ("Vector", "Int", "first")...
    done (took 1.242013478 seconds)
    (64/79) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.727829227 seconds)
    (65/79) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.244382298 seconds)
    (66/79) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.243704087 seconds)
    (67/79) benchmarking ("Set", "String", "in", "true")...
    done (took 1.244100096 seconds)
    (68/79) benchmarking ("Vector", "Any", "push!")...
    done (took 1.383238811 seconds)
    (69/79) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.720363584 seconds)
    (70/79) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.480179678 seconds)
    (71/79) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.493985149 seconds)
    (72/79) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.494070274 seconds)
    (73/79) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.244241009 seconds)
    (74/79) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.293256396 seconds)
    (75/79) benchmarking ("Set", "Int", "length")...
    done (took 1.245164638 seconds)
    (76/79) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 1.494047075 seconds)
    (77/79) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.293433008 seconds)
    (78/79) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.636675508 seconds)
    (79/79) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.499933651 seconds)
  done (took 111.723678711 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("Dict", "Int", "filter")...
    done (took 1.487471128 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.347579654 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.572832164 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.76808345 seconds)
    (5/28) benchmarking ("Set", "Any", "pop!")...
    done (took 1.697067376 seconds)
    (6/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.366809893 seconds)
    (7/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.340273124 seconds)
    (8/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.461641476 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.243678045 seconds)
    (10/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.345129151 seconds)
    (11/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.807991954 seconds)
    (12/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 1.320760246 seconds)
    (13/28) benchmarking ("Dict", "Any", "filter")...
    done (took 1.960747129 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.298772551 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.338397321 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.3520584 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.593196827 seconds)
    (18/28) benchmarking ("Dict", "String", "filter")...
    done (took 2.128666947 seconds)
    (19/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.816852811 seconds)
    (20/28) benchmarking ("Dict", "Int", "filter!")...
    done (took 1.788658389 seconds)
    (21/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 2.242941192 seconds)
    (22/28) benchmarking ("Vector", "Int", "filter")...
    done (took 1.329492166 seconds)
    (23/28) benchmarking ("Set", "String", "filter")...
    done (took 1.720064166 seconds)
    (24/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.422836932 seconds)
    (25/28) benchmarking ("Dict", "String", "filter!")...
    done (took 2.249269443 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.78352002 seconds)
    (27/28) benchmarking ("Dict", "Any", "filter!")...
    done (took 2.084192524 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.714942028 seconds)
  done (took 47.712213987 seconds)
done (took 472.435041176 seconds)
SAVING RESULT...
DONE!

cset: moving following pidspec: 4141
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 1.393239842 seconds)
loading group "string"... done (took 0.506180259 seconds)
loading group "linalg"... done (took 8.570255236 seconds)
loading group "parallel"... done (took 0.172453581 seconds)
loading group "find"... done (took 1.225394287 seconds)
loading group "tuple"... done (took 1.951133458 seconds)
loading group "dates"... done (took 1.480153867 seconds)
loading group "micro"... done (took 0.197809393 seconds)
loading group "io"... done (took 0.531330399 seconds)
loading group "scalar"... done (took 50.243349119 seconds)
loading group "sparse"... done (took 13.450118774 seconds)
loading group "broadcast"... done (took 1.252800691 seconds)
loading group "union"... done (took 9.023645848 seconds)
loading group "simd"... done (took 2.990690438 seconds)
loading group "random"... done (took 11.191058368 seconds)
loading group "problem"... done (took 2.172285084 seconds)
loading group "array"... done (took 24.596810605 seconds)
loading group "misc"... done (took 1.096077703 seconds)
loading group "sort"... done (took 3.688954308 seconds)
loading group "collection"... done (took 18.980935704 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.593943705 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.125529181 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.261834864 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.278046331 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.226760877 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.164092795 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.14145346 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.241688332 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.536397404 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.199604081 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.135866399 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.498841652 seconds)
done (took 6.127994166 seconds)
(2/20) benchmarking "string"...
  (1/4) benchmarking "join"...
  done (took 0.246546404 seconds)
  (2/4) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.23801419 seconds)
    (2/2) benchmarking "String"...
    done (took 0.162170243 seconds)
  done (took 1.067781867 seconds)
  (3/4) benchmarking "replace"...
  done (took 0.075326807 seconds)
  (4/4) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.154847533 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.1056529 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.090898152 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.090809737 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.107103339 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.091933683 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.107460433 seconds)
  done (took 1.416219677 seconds)
done (took 3.474748592 seconds)
(3/20) benchmarking "linalg"...
  (1/2) benchmarking "factorization"...
    (1/64) benchmarking ("eig", "LowerTriangular", 1024)...
    done (took 0.49278883 seconds)
    (2/64) benchmarking ("svdfact", "UpperTriangular", 1024)...
    done (took 0.878788216 seconds)
    (3/64) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.500279568 seconds)
    (4/64) benchmarking ("eigfact", "UpperTriangular", 256)...
    done (took 0.140713555 seconds)
    (5/64) benchmarking ("qr", "Matrix", 256)...
    done (took 0.304801831 seconds)
    (6/64) benchmarking ("lu", "Matrix", 256)...
    done (took 0.290113323 seconds)
    (7/64) benchmarking ("eig", "SymTridiagonal", 256)...
    done (took 0.26958938 seconds)
    (8/64) benchmarking ("qrfact", "Matrix", 1024)...
    done (took 0.195746494 seconds)
    (9/64) benchmarking ("eigfact", "Diagonal", 256)...
    done (took 0.091499039 seconds)
    (10/64) benchmarking ("eig", "LowerTriangular", 256)...
    done (took 0.087943361 seconds)
    (11/64) benchmarking ("lufact", "Tridiagonal", 1024)...
    done (took 0.170562956 seconds)
    (12/64) benchmarking ("schurfact", "Matrix", 1024)...
    done (took 1.384398937 seconds)
    (13/64) benchmarking ("eig", "Bidiagonal", 1024)...
    done (took 0.380218724 seconds)
    (14/64) benchmarking ("eigfact", "Matrix", 1024)...
    done (took 1.935232165 seconds)
    (15/64) benchmarking ("eig", "UpperTriangular", 256)...
    done (took 0.090829403 seconds)
    (16/64) benchmarking ("svdfact", "Matrix", 256)...
    done (took 0.092416923 seconds)
    (17/64) benchmarking ("lufact", "Matrix", 256)...
    done (took 0.128316685 seconds)
    (18/64) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.753357659 seconds)
    (19/64) benchmarking ("qrfact", "Matrix", 256)...
    done (took 0.078738513 seconds)
    (20/64) benchmarking ("eigfact", "Matrix", 256)...
    done (took 0.109506384 seconds)
    (21/64) benchmarking ("svd", "Diagonal", 256)...
    done (took 0.49294232 seconds)
    (22/64) benchmarking ("svdfact", "Diagonal", 256)...
    done (took 0.179369549 seconds)
    (23/64) benchmarking ("lufact", "Matrix", 1024)...
    done (took 0.098187229 seconds)
    (24/64) benchmarking ("schur", "Matrix", 256)...
    done (took 0.119991291 seconds)
    (25/64) benchmarking ("eigfact", "SymTridiagonal", 1024)...
    done (took 0.183586442 seconds)
    (26/64) benchmarking ("svd", "LowerTriangular", 256)...
    done (took 0.135144391 seconds)
    (27/64) benchmarking ("eig", "UpperTriangular", 1024)...
    done (took 0.158116218 seconds)
    (28/64) benchmarking ("eig", "Bidiagonal", 256)...
    done (took 0.101486227 seconds)
    (29/64) benchmarking ("svdfact", "LowerTriangular", 1024)...
    done (took 0.659744048 seconds)
    (30/64) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.130135544 seconds)
    (31/64) benchmarking ("eig", "Matrix", 256)...
    done (took 0.177167625 seconds)
    (32/64) benchmarking ("eigfact", "SymTridiagonal", 256)...
    done (took 0.097377714 seconds)
    (33/64) benchmarking ("eigfact", "UpperTriangular", 1024)...
    done (took 0.157598107 seconds)
    (34/64) benchmarking ("svdfact", "Bidiagonal", 256)...
    done (took 0.185450228 seconds)
    (35/64) benchmarking ("lu", "Tridiagonal", 256)...
    done (took 0.193503722 seconds)
    (36/64) benchmarking ("svd", "UpperTriangular", 256)...
    done (took 0.109575314 seconds)
    (37/64) benchmarking ("svd", "UpperTriangular", 1024)...
    done (took 0.678015752 seconds)
    (38/64) benchmarking ("eig", "SymTridiagonal", 1024)...
    done (took 0.197832255 seconds)
    (39/64) benchmarking ("svd", "Diagonal", 1024)...
    done (took 0.088129445 seconds)
    (40/64) benchmarking ("eigfact", "Diagonal", 1024)...
    done (took 0.096796903 seconds)
    (41/64) benchmarking ("svd", "LowerTriangular", 1024)...
    done (took 0.667025969 seconds)
    (42/64) benchmarking ("lu", "Tridiagonal", 1024)...
    done (took 0.116020075 seconds)
    (43/64) benchmarking ("cholfact", "Matrix", 256)...
    done (took 0.179726144 seconds)
    (44/64) benchmarking ("eig", "Diagonal", 1024)...
    done (took 0.101253509 seconds)
    (45/64) benchmarking ("eigfact", "LowerTriangular", 256)...
    done (took 0.086550966 seconds)
    (46/64) benchmarking ("eigfact", "LowerTriangular", 1024)...
    done (took 0.178480273 seconds)
    (47/64) benchmarking ("svdfact", "Diagonal", 1024)...
    done (took 0.090496022 seconds)
    (48/64) benchmarking ("lufact", "Tridiagonal", 256)...
    done (took 0.076933413 seconds)
    (49/64) benchmarking ("svd", "Bidiagonal", 256)...
    done (took 0.107556961 seconds)
    (50/64) benchmarking ("eig", "Diagonal", 256)...
    done (took 0.084683146 seconds)
    (51/64) benchmarking ("svd", "Bidiagonal", 1024)...
    done (took 0.15879961 seconds)
    (52/64) benchmarking ("eig", "Matrix", 1024)...
    done (took 1.4575198 seconds)
    (53/64) benchmarking ("svdfact", "UpperTriangular", 256)...
    done (took 0.103290728 seconds)
    (54/64) benchmarking ("chol", "Matrix", 1024)...
    done (took 0.167316196 seconds)
    (55/64) benchmarking ("svdfact", "LowerTriangular", 256)...
    done (took 0.091052916 seconds)
    (56/64) benchmarking ("svdfact", "Matrix", 1024)...
    done (took 0.67822674 seconds)
    (57/64) benchmarking ("svd", "Matrix", 256)...
    done (took 0.096020335 seconds)
    (58/64) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.272519372 seconds)
    (59/64) benchmarking ("schurfact", "Matrix", 256)...
    done (took 0.125536498 seconds)
    (60/64) benchmarking ("cholfact", "Matrix", 1024)...
    done (took 0.092355514 seconds)
    (61/64) benchmarking ("chol", "Matrix", 256)...
    done (took 0.088058047 seconds)
    (62/64) benchmarking ("eigfact", "Bidiagonal", 256)...
    done (took 0.085859808 seconds)
    (63/64) benchmarking ("svdfact", "Bidiagonal", 1024)...
    done (took 0.155649336 seconds)
    (64/64) benchmarking ("eigfact", "Bidiagonal", 1024)...
    done (took 0.092049128 seconds)
  done (took 19.673638202 seconds)
  (2/2) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.144806636 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.160407848 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.076555253 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.153922944 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.120135556 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.078216154 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.099756129 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.077637355 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.107756592 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.191745218 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.135530415 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.149516883 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.089312674 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.089078951 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.125989839 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.247761025 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.108581576 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.118015449 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.08863528 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.087060214 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.137393278 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.095947148 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.089280187 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.106735078 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.168200933 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.202057607 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.109585619 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.124522354 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.090879769 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.095803176 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.139546079 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.14272127 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.090189477 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.087339447 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.185821031 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.105111423 seconds)
  done (took 5.110213451 seconds)
done (took 25.451542335 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.425762353 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.07923695 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.076967962 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.096174656 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.078312887 seconds)
  done (took 1.476067194 seconds)
done (took 2.16724191 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/13) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 0.348395014 seconds)
    (2/13) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 0.184796617 seconds)
    (3/13) benchmarking ("BitArray{1}", "90-10")...
    done (took 0.099517759 seconds)
    (4/13) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 0.18372514 seconds)
    (5/13) benchmarking ("BitArray{1}", "50-50")...
    done (took 0.081542217 seconds)
    (6/13) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 0.192514643 seconds)
    (7/13) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 0.175691535 seconds)
    (8/13) benchmarking ("Array{Bool,1}", "10-90")...
    done (took 0.092226915 seconds)
    (9/13) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 0.200606721 seconds)
    (10/13) benchmarking ("Array{Bool,1}", "90-10")...
    done (took 0.083254174 seconds)
    (11/13) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 0.180416463 seconds)
    (12/13) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 0.080231127 seconds)
    (13/13) benchmarking ("BitArray{1}", "10-90")...
    done (took 0.101412122 seconds)
  done (took 2.721982909 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 0.099700052 seconds)
    (2/11) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 0.10625027 seconds)
    (3/11) benchmarking ("BitArray{1}", "90-10")...
    done (took 0.09879295 seconds)
    (4/11) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 0.115674116 seconds)
    (5/11) benchmarking ("BitArray{1}", "50-50")...
    done (took 0.082650242 seconds)
    (6/11) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 0.097886067 seconds)
    (7/11) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 0.114033476 seconds)
    (8/11) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 0.109091372 seconds)
    (9/11) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 0.096548854 seconds)
    (10/11) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 0.107466591 seconds)
    (11/11) benchmarking ("BitArray{1}", "10-90")...
    done (took 0.083202699 seconds)
  done (took 1.805430358 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 0.097555914 seconds)
    (2/11) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 0.103457012 seconds)
    (3/11) benchmarking ("BitArray{1}", "90-10")...
    done (took 0.094392602 seconds)
    (4/11) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 0.111812596 seconds)
    (5/11) benchmarking ("BitArray{1}", "50-50")...
    done (took 0.082807176 seconds)
    (6/11) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 0.094863082 seconds)
    (7/11) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 0.110697666 seconds)
    (8/11) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 0.105244979 seconds)
    (9/11) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 0.096116257 seconds)
    (10/11) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 0.109410985 seconds)
    (11/11) benchmarking ("BitArray{1}", "10-90")...
    done (took 0.082246684 seconds)
  done (took 1.784986703 seconds)
done (took 7.003633288 seconds)
(6/20) benchmarking "tuple"...
  (1/3) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.064603064 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 10.130673982 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.160555246 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.199222019 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.336294363 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.228218428 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.541970394 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.14759406 seconds)
  done (took 13.648446866 seconds)
  (2/3) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.12212953 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.086188108 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.143339945 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.088539515 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.087454145 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.106747834 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.088748612 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.090835834 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.104707512 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.088443274 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.09043494 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.105786323 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.091598574 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.091595345 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.090572309 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.101631291 seconds)
  done (took 2.335804763 seconds)
  (3/3) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.138701022 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.134779795 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.093699523 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.096888869 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.106762317 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.095942222 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.098100868 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.110938762 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.090943331 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.092795301 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.100145444 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.110644975 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.095386801 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.090573413 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.109002268 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.114986289 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.089727185 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.10868348 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.113957226 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.108912565 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.097520674 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.092591419 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.109595345 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.095443657 seconds)
  done (took 3.273968254 seconds)
done (took 19.956484875 seconds)
(7/20) benchmarking "dates"...
  (1/6) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.144512011 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.096463056 seconds)
  done (took 0.941588983 seconds)
  (2/6) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.133438133 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.148196684 seconds)
  done (took 0.986733405 seconds)
  (3/6) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.090553478 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.091206411 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.117578818 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.129765999 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.095314469 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.105566318 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.093802011 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.091153822 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.107606953 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.087025418 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.093237685 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.118994046 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.093235486 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.120870691 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.09306773 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.093822396 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.110046552 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.092436144 seconds)
  done (took 2.533581824 seconds)
  (4/6) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.088602366 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.088331822 seconds)
  done (took 0.888388171 seconds)
  (5/6) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.090901989 seconds)
    (2/7) benchmarking "second"...
    done (took 0.085988381 seconds)
    (3/7) benchmarking "month"...
    done (took 0.088448672 seconds)
    (4/7) benchmarking "year"...
    done (took 0.103865432 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.087257536 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.085701023 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.102233043 seconds)
  done (took 1.355721855 seconds)
  (6/6) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.47574017 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.258602714 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.348411296 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.107821151 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.140143823 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.345085498 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.140742568 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.099929596 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.101926634 seconds)
  done (took 2.763793886 seconds)
done (took 10.176940191 seconds)
(8/20) benchmarking "micro"...
  (1/7) benchmarking "quicksort"...
  done (took 0.08793175 seconds)
  (2/7) benchmarking "parseint"...
  done (took 0.214074454 seconds)
  (3/7) benchmarking "randmatstat"...
  done (took 0.628818843 seconds)
  (4/7) benchmarking "pisum"...
  done (took 0.109383497 seconds)
  (5/7) benchmarking "fib"...
  done (took 0.087308693 seconds)
  (6/7) benchmarking "randmatmul"...
  done (took 0.154282552 seconds)
  (7/7) benchmarking "mandel"...
  done (took 0.271494615 seconds)
done (took 2.271464306 seconds)
(9/20) benchmarking "io"...
  (1/2) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.332060993 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.135989218 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.07829279 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.088555979 seconds)
  done (took 1.345460115 seconds)
  (2/2) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.078512097 seconds)
    (2/2) benchmarking "read"...
    done (took 0.096088113 seconds)
  done (took 0.893836489 seconds)
done (took 2.958686299 seconds)
(10/20) benchmarking "scalar"...
  (1/23) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.086313947 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.086637854 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.084505858 seconds)
    (4/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.133608469 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.0851467 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.084396725 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.101506376 seconds)
    (8/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.086663899 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.087061336 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.086561263 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.103738851 seconds)
    (12/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.085513422 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.084469395 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.102115074 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.087311225 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.085804999 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.086207901 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.100762724 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.08643336 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.086041739 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.09932432 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.085836778 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.085783688 seconds)
    (24/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.084602715 seconds)
  done (took 2.936646416 seconds)
  (2/23) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.103838479 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.101365105 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.105619002 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.090174996 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.090680177 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.105220197 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.08969232 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.087686728 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.105648263 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.088806657 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.089973036 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.103700074 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.088105038 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.089841217 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.102365897 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.09225239 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.08935024 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.102465709 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.088782567 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.089709282 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.088791181 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.103182094 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.092476867 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.089088758 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.105555905 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.090539658 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.08748668 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.10169464 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.091435964 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.089753032 seconds)
  done (took 3.565620344 seconds)
  (3/23) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.094403755 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.083052845 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.085209902 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.109032963 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.084658716 seconds)
    (6/72) benchmarking ("isodd", "UInt64")...
    done (took 0.08667824 seconds)
    (7/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.097860102 seconds)
    (8/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.084228649 seconds)
    (9/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.087093318 seconds)
    (10/72) benchmarking ("isnan", "Float64")...
    done (took 0.084777289 seconds)
    (11/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.103019219 seconds)
    (12/72) benchmarking ("isequal", "Float64")...
    done (took 0.08704289 seconds)
    (13/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.083653224 seconds)
    (14/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.102629687 seconds)
    (15/72) benchmarking ("isnan", "Complex{Float32}")...
    done (took 0.087640361 seconds)
    (16/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.091045569 seconds)
    (17/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.09357821 seconds)
    (18/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.099868361 seconds)
    (19/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.084207423 seconds)
    (20/72) benchmarking ("isequal", "Complex{Float64}")...
    done (took 0.086094938 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.103961441 seconds)
    (22/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.084007888 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 0.08685017 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.086837162 seconds)
    (25/72) benchmarking ("isequal", "UInt64")...
    done (took 0.102347448 seconds)
    (26/72) benchmarking ("isinteger", "Int64")...
    done (took 0.083142952 seconds)
    (27/72) benchmarking ("isfinite", "Float64")...
    done (took 0.087404976 seconds)
    (28/72) benchmarking ("isequal", "Int64")...
    done (took 0.101362803 seconds)
    (29/72) benchmarking ("isinf", "Float64")...
    done (took 0.087658728 seconds)
    (30/72) benchmarking ("isless", "UInt64")...
    done (took 0.086885768 seconds)
    (31/72) benchmarking ("isequal", "BigInt")...
    done (took 0.087464662 seconds)
    (32/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.104954385 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 0.087524686 seconds)
    (34/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.096499083 seconds)
    (35/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.105177333 seconds)
    (36/72) benchmarking ("isless", "Float64")...
    done (took 0.087649903 seconds)
    (37/72) benchmarking ("iseven", "BigInt")...
    done (took 0.092135053 seconds)
    (38/72) benchmarking ("isnan", "BigInt")...
    done (took 0.098571289 seconds)
    (39/72) benchmarking ("isequal", "Complex{Float32}")...
    done (took 0.089051537 seconds)
    (40/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.084330364 seconds)
    (41/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.082947328 seconds)
    (42/72) benchmarking ("isnan", "Float32")...
    done (took 0.101751944 seconds)
    (43/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.084327855 seconds)
    (44/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.092528614 seconds)
    (45/72) benchmarking ("iseven", "Int64")...
    done (took 0.101418272 seconds)
    (46/72) benchmarking ("isinteger", "Float64")...
    done (took 0.089069429 seconds)
    (47/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.084385333 seconds)
    (48/72) benchmarking ("isfinite", "Complex{Float32}")...
    done (took 0.086777898 seconds)
    (49/72) benchmarking ("isnan", "Complex{Float64}")...
    done (took 0.1035822 seconds)
    (50/72) benchmarking ("isinteger", "Complex{Float32}")...
    done (took 0.090019391 seconds)
    (51/72) benchmarking ("isinf", "Int64")...
    done (took 0.083669292 seconds)
    (52/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.098887849 seconds)
    (53/72) benchmarking ("isinf", "Complex{Float32}")...
    done (took 0.090580732 seconds)
    (54/72) benchmarking ("isfinite", "Complex{Float64}")...
    done (took 0.087812401 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.088824208 seconds)
    (56/72) benchmarking ("isnan", "Int64")...
    done (took 0.099705695 seconds)
    (57/72) benchmarking ("isinteger", "Float32")...
    done (took 0.088761341 seconds)
    (58/72) benchmarking ("isnan", "UInt64")...
    done (took 0.082735902 seconds)
    (59/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.102651527 seconds)
    (60/72) benchmarking ("isless", "Int64")...
    done (took 0.08727882 seconds)
    (61/72) benchmarking ("isinf", "BigInt")...
    done (took 0.082907643 seconds)
    (62/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.082647491 seconds)
    (63/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.107128933 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.088066355 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.101484947 seconds)
    (66/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.110598825 seconds)
    (67/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.083714754 seconds)
    (68/72) benchmarking ("isinteger", "Complex{Float64}")...
    done (took 0.087114958 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.104405088 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.092304428 seconds)
    (71/72) benchmarking ("isinf", "Complex{Float64}")...
    done (took 0.087928406 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.111562439 seconds)
  done (took 7.352054911 seconds)
  (4/23) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.099069919 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.096129011 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.088343814 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.103640816 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.087409888 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.086295223 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.107285425 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.087700872 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.088083822 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.110317344 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.088700865 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.088299862 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.087245016 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.104946835 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.088273163 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.088110511 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.109691972 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.087730636 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.088617639 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.104146197 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.088842515 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.092360972 seconds)
  done (took 2.799195939 seconds)
  (5/23) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.231861311 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.093604011 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.135325099 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.116759661 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.106193789 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.116056013 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.209517221 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.093589697 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.105679418 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.097323321 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.095653523 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.108177982 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.106539284 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.094890538 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.11144419 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.097280814 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.106904854 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.097246475 seconds)
  done (took 2.856136776 seconds)
  (6/23) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.100583031 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.090422103 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.123439726 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.090143601 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.089828461 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.088220356 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.110465895 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.10745708 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.104267122 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.09023071 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.095295153 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.089524274 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.105880825 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.090536577 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.088350593 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.104946836 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.089773709 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.088846662 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.112510857 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.095210196 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.094591289 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.114809647 seconds)
  done (took 2.898440201 seconds)
  (7/23) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.101943878 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.089255835 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.122110275 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.091721091 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.090180458 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.087770154 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.110962184 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.088492099 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.093599306 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.106257776 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.088943108 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.087446229 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.119667673 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.090237511 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.0943358 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.10439463 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.090686593 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.089219205 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.1037801 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.088020051 seconds)
  done (took 2.671278268 seconds)
  (8/23) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.160293275 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.119833405 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.105011179 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.112263935 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.119987339 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.106229855 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.110682654 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.121043835 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.104552999 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.131051741 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.105272381 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.10350552 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.127820732 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.110665952 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.10291918 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.128872172 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.112342037 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.128287253 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.10440526 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.10377557 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.132373739 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.106325968 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.129269052 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.105794916 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.105284688 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.120695293 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.103870548 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.107609228 seconds)
  done (took 3.966301736 seconds)
  (9/23) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.08967786 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.087940892 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.087136797 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.103539135 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.087457826 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.087649277 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.087374492 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.10339006 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.087320095 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.087447888 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.102904016 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.089144609 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.088516253 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.087785111 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.103144836 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.087557023 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.08744768 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.103828024 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.088316021 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.088194289 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.086978028 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.103068113 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.088028861 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.088211921 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.103234715 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.088266314 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.087856896 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.0864002 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.103020979 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.08807625 seconds)
  done (took 3.49804551 seconds)
  (10/23) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.100445294 seconds)
    (2/2) benchmarking "in"...
    done (took 0.098176943 seconds)
  done (took 0.938122354 seconds)
  (11/23) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.096600986 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.102466609 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.087227395 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.105314269 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.097090347 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.087936915 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.112220759 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.095297067 seconds)
  done (took 1.525603103 seconds)
  (12/23) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.141333522 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.095315935 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.104551792 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.089564973 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.1043816 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.105619589 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.088932028 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.090005239 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.106317333 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.097990875 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.088161405 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.104105302 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.103053547 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.106845526 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.122325084 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.09823901 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.104298145 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.089969783 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.089764923 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.088885591 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.118459945 seconds)
  done (took 2.879269249 seconds)
  (13/23) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.105612105 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.102057593 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.115083142 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.102587385 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.093663701 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.117502562 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.100460565 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.116724185 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.103237785 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.096644012 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.118100638 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.100382483 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.112843824 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.096624758 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.096012365 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.113747507 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.102951578 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.0942307 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.116726127 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.100951972 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.112900331 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.100272587 seconds)
  done (took 3.0601193 seconds)
  (14/23) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.11707878 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.147678707 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.115720977 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.143182946 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.101197862 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.097540624 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.111173122 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.125215589 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.089670132 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.110297691 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.101734812 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.120044344 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.092908926 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.095989854 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.111760655 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.092915918 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.094440068 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.107878864 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.097115419 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.091729611 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.112237259 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.09320912 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.102006169 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.118854403 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.096490448 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.09247554 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.10988376 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.095348402 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.116798232 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.099203836 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.096798697 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.111971727 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.104228709 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.094199386 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.108972515 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.093906982 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.102370236 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.109573501 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.093769346 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.091898076 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.110908932 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.096457656 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.093625225 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.121012409 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.094670249 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.094434816 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.109696767 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.09277112 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.10089393 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.111525979 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.099016235 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.119073466 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.096241761 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.093831915 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.111541593 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.102989771 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.094383653 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.109880329 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.094663339 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.101126513 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.1087285 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.095892867 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.101805237 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.109927813 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.098061182 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.1199175 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.095803303 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.096550189 seconds)
  done (took 7.938104906 seconds)
  (15/23) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.123539356 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096764075 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.120363935 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.106270747 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.096447251 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.11463118 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.096787315 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.096090093 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.115417427 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.101379551 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.112217219 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.179271268 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.109923195 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.100856555 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.095820715 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.113506081 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.097148979 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.097341497 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.114395073 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.098272822 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.095081202 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.12080035 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.098066263 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.120135714 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.107934418 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.093389005 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.112215353 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.097656154 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.104288326 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.113547137 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.107478859 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.112559466 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.096315586 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.105474566 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.124164538 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.09863902 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.090556261 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.113368225 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.097405839 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.095481658 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.111394612 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.105878301 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.112813142 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.094701635 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.097014864 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.113346208 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.106879378 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.107716413 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.117483261 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.102967905 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.113194504 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.106279026 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.096301635 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.113064942 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.105532965 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.110548822 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.121776829 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.105617089 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.113822461 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.10552369 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.120160026 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.113410632 seconds)
  done (took 7.436925538 seconds)
  (16/23) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.090371414 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.09072739 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.089337143 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.107288897 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.091337153 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.090514749 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.089687275 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.110169283 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.09182257 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.08962046 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.108111101 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.091000583 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.090725539 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.089386217 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.107318404 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.090515653 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.090628964 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.107082068 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.094650615 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.09114719 seconds)
  done (took 2.656064558 seconds)
  (17/23) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.100273768 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.106838433 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.109632915 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.100486944 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.093635388 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.115282069 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.093480677 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.093711155 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.092212019 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.111688764 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.101381405 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.117643144 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.093274759 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.099053516 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.118133192 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.1009075 seconds)
  done (took 2.403378706 seconds)
  (18/23) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.111161806 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.106914119 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.166775575 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.094620209 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.111109508 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.099389388 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.092562688 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.094500698 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.110216123 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.09749288 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.094795932 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.114411376 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.093093229 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.093112689 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.110239948 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.095775668 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.090885868 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.113301437 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.095489775 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.147164565 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.114786493 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.095089693 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.093646565 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.113859347 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.094363269 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.096124642 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.117617177 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.092531518 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.094468053 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.111178624 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.09475615 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.099547474 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.109828395 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.098713386 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.093425266 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.111741992 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.093364044 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.093911662 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.112067588 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.094266119 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.094735317 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.095035735 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.111289457 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.097531757 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.092318106 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.111820432 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.092650349 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.098066984 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.111363311 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.096771719 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.09321495 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.117013181 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.098005067 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.101476924 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.117108188 seconds)
  done (took 6.444239182 seconds)
  (19/23) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.10459829 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.095294807 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.121042521 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.090950411 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.094200058 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.093824301 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.112996707 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.095721994 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.094185086 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.109325082 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.094987189 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.095329966 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.111089914 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.095377327 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.094636653 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.111122061 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.092409554 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.095382523 seconds)
  done (took 2.561341459 seconds)
  (20/23) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.097592366 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.093824838 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.096066364 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.110829665 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.094670572 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.093499465 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.109469322 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.093563237 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.092413946 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.092755912 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.112406985 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.09507803 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.091540773 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.110808337 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.096340164 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.093890467 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.111227065 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.092871133 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.094876394 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.092071628 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.111919164 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.093656156 seconds)
  done (took 2.93398337 seconds)
  (21/23) benchmarking "intfuncs"...
    (1/12) benchmarking ("nextpow2", "Int64", "+")...
    done (took 0.103457689 seconds)
    (2/12) benchmarking ("prevpow2", "UInt64", "-")...
    done (took 0.165750715 seconds)
    (3/12) benchmarking ("prevpow2", "Int64", "+")...
    done (took 0.100393904 seconds)
    (4/12) benchmarking ("nextpow2", "BigInt", "-")...
    done (took 0.174654477 seconds)
    (5/12) benchmarking ("prevpow2", "UInt64", "+")...
    done (took 0.089264178 seconds)
    (6/12) benchmarking ("prevpow2", "Int64", "-")...
    done (took 0.088142199 seconds)
    (7/12) benchmarking ("nextpow2", "UInt64", "-")...
    done (took 0.117649256 seconds)
    (8/12) benchmarking ("nextpow2", "UInt64", "+")...
    done (took 0.089780013 seconds)
    (9/12) benchmarking ("prevpow2", "BigInt", "+")...
    done (took 0.104495583 seconds)
    (10/12) benchmarking ("prevpow2", "BigInt", "-")...
    done (took 0.107031428 seconds)
    (11/12) benchmarking ("nextpow2", "BigInt", "+")...
    done (took 0.088681253 seconds)
    (12/12) benchmarking ("nextpow2", "Int64", "-")...
    done (took 0.088802946 seconds)
  done (took 2.081563831 seconds)
  (22/23) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.121414014 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.12804271 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.112105829 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.095055617 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101876499 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.114725838 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.098166382 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.097438324 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.123037585 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.108412838 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.115068563 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.107065294 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104008925 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.124798789 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.102438335 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.11938935 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.098315226 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.098000297 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.112023432 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.111926417 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.097501481 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.123514153 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.098566095 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096675306 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.11535511 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.106073751 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.121635659 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.109941538 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.098068441 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.126463437 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.101828375 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.09710586 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.12385958 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.108640347 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.11218296 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.106364963 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.097328614 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.13174993 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.100997535 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.123340495 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.095000898 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.101566212 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.122977384 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.103103832 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.123706466 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.099522853 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.10223615 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.116144437 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.098080514 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.116473705 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.119812508 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.105294899 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.119526893 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.106823754 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.105148951 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.136761171 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.108320593 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.124478947 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.101697146 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.126011247 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.105414202 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.101766117 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.123564412 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.109816023 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.119990886 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.105760729 seconds)
  done (took 8.057667941 seconds)
  (23/23) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.131891895 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.093518181 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.115333697 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.111044747 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.12412416 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.099980878 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.097493609 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.118492971 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.099160194 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.095069826 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.157647979 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.098698943 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.105558221 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.127384277 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0978535 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.116574756 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.099482938 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.10578153 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.113768693 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.119358324 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.11640396 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.10613073 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.105399823 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.124057825 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.109405855 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.119553846 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.099460487 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.097424343 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.117149476 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.099393915 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.10308208 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.116364805 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.10681478 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.093458965 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.12464873 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.099158016 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.099372261 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.122340763 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.098242496 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.119762761 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.10599879 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.111200199 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.118511869 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.098740245 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.12802527 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.101546696 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.098342701 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.114584755 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.099471295 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.095630412 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.129810286 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.11082047 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.128367881 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.107719329 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.098117742 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.117558575 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.099584173 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.099666826 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.117881425 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105085278 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.124956148 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10105902 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.118750987 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.11711835 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.098911937 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.125172203 seconds)
  done (took 8.052159057 seconds)
done (took 92.231567285 seconds)
(11/20) benchmarking "sparse"...
  (1/4) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.132583921 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.166949063 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.130406512 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.164663953 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.085119516 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.118678123 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.115495803 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.150936418 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.084032776 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.103807627 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.085585154 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.086404534 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.171234707 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.085600428 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.084654207 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.086964397 seconds)
  done (took 2.622167583 seconds)
  (2/4) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.182197245 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.294043236 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.099865036 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.108115447 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.090744596 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.089393949 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.108726891 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.090884858 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.089358201 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.115558584 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.090514755 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.096848923 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.114901957 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.086164996 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.088953188 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107807027 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.096103476 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.089682071 seconds)
  done (took 2.816940752 seconds)
  (3/4) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.118887203 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.197608615 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.325445197 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.135615227 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.131248356 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.105797578 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.156793078 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.102990078 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.198385057 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.103338124 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.103223283 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.107308209 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.114712256 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.094358443 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.125248666 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.087953527 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.136271625 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.104560855 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.113375552 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.109116509 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.113420577 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.092771421 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.113997102 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.105393746 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.169466884 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.120842435 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.09381631 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.112228692 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.093670102 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.104219857 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.115614959 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.10643879 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.119838749 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.147729265 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.11165678 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.144402105 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.115075324 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.090677917 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.103304454 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.109831419 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.095079938 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.093044888 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.121403902 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.088336499 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.093751164 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.115801007 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.093864002 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.112632672 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.098691654 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.097370994 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.116558977 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.097415631 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.162720193 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.097537759 seconds)
  done (took 7.257777022 seconds)
  (4/4) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.837616466 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.132169098 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.091673532 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 1.084454995 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.140127167 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.104132395 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.836421874 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.113183289 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.241813502 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.860999907 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.106727526 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.124082612 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.223604463 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.266732025 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 1.244359676 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.343606949 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.725018393 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.104525883 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.137637857 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.130730971 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.117150506 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.118261561 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.128946585 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.488957617 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.10980944 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.091903922 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.098903994 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.122621807 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.1436762 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.111490146 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.096468221 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.183845092 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.278863062 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.194156206 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.09069565 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.089658467 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.110082604 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.15337366 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.254155581 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.202812613 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.181970379 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.088931767 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.109870039 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.100061174 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.127648361 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.088494693 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.167970026 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.161355852 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.17693469 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.113466258 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.104116304 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.101483342 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.118419464 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.16393588 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.089561375 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.345879834 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.348028912 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.110181595 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.10047444 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.106040073 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.253691048 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.112997464 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.221229336 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.118427442 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.199640296 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.110303477 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.825217163 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.153137392 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.111339849 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.100000233 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.116234286 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.098062087 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.099410361 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.178621555 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.469660679 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.125009273 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.095818892 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.110228025 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.219443755 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.093777423 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.092278122 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.167739086 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.092529609 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.119727769 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.106200406 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.122449113 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.157840048 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.257611152 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.103992059 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.120033174 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.097927828 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.122395098 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.092223623 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.219850477 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.213659024 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.160985802 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.199150231 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.118816303 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.169399115 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.153777949 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.116986152 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.15630583 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.117938492 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.107291609 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.119617196 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.210239373 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.126421617 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.113161345 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.097692628 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.101066484 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.147458683 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.094874095 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.120349727 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.155079831 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.544883958 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.171082335 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.088674804 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.115632794 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102565103 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.168396523 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.10028423 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.247549295 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.119070092 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.153326084 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.118866915 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.089989647 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.099888716 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.169122021 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.120029101 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.101515963 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.099553088 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.121571534 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.247035356 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.226658536 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.106591522 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.234855606 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.18612478 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.101720767 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.181036108 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.100310721 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.175524094 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.102402853 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.119675108 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.093724877 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.819831611 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.105926664 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.120367109 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.097641318 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.196171975 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.093121428 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.093014294 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.112061534 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.089024601 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.797828624 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.09395926 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.108975316 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.094538218 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.098751544 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.118633437 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.100885492 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.099435426 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.165277032 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.229801045 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.124609184 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.098660925 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.111762184 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.144928731 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.112249854 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.093049964 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.092897952 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.112035873 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.102270988 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.095982923 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.113883424 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.160140594 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.1637137 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.214395258 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.620692396 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.111416025 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.093657356 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.226887372 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.092041195 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.326733251 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101227037 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.220798854 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.170912867 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.089668106 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.345436273 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.173226737 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.195881577 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.095980498 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.179141906 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.090081692 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.100018998 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.166682753 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.110868487 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.10164621 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.163061941 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.108086266 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.122707736 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 1.262476049 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.092320024 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.24172734 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.089682465 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.175709913 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.094331652 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.099709166 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.331592297 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.093174096 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.109028074 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.167580215 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.113759546 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.094685023 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 3.658292194 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.094454184 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.102714011 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.12067968 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.222146186 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.173223883 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.10092414 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.120917269 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.107076908 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.170874427 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.217819716 seconds)
  done (took 45.262592204 seconds)
done (took 58.73328466 seconds)
(12/20) benchmarking "broadcast"...
  (1/5) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.287863763 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.242664777 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.28791218 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.197319583 seconds)
  done (took 1.886050269 seconds)
  (2/5) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.240019095 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.149004197 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.210661571 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.089328348 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.21737846 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.089034598 seconds)
  done (took 1.803773423 seconds)
  (3/5) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.463895112 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.355425168 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.287891192 seconds)
  done (took 1.917114217 seconds)
  (4/5) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.239383135 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.227399217 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.31657912 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.397932588 seconds)
  done (took 2.09725102 seconds)
  (5/5) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.237566661 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.115664363 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.11530466 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.185513494 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.203456502 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.187955095 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.117220247 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.15993076 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.119083099 seconds)
  done (took 2.294062682 seconds)
done (took 10.799958118 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/192) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.327405637 seconds)
    (2/192) benchmarking ("perf_sum", Int8, true)...
    done (took 0.195826523 seconds)
    (3/192) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.17451378 seconds)
    (4/192) benchmarking ("map", identity, Float32, false)...
    done (took 0.285882381 seconds)
    (5/192) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.24540971 seconds)
    (6/192) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.132894088 seconds)
    (7/192) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.101217906 seconds)
    (8/192) benchmarking ("map", identity, Int64, false)...
    done (took 0.204980583 seconds)
    (9/192) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.099133862 seconds)
    (10/192) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.231170989 seconds)
    (11/192) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.092503455 seconds)
    (12/192) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.19637729 seconds)
    (13/192) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.109778792 seconds)
    (14/192) benchmarking ("perf_simplecopy", Complex{Float64}, true)...
    done (took 0.174708149 seconds)
    (15/192) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.167204282 seconds)
    (16/192) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.276867814 seconds)
    (17/192) benchmarking ("map", *, Complex{Float64}, (false, false))...
    done (took 0.275695126 seconds)
    (18/192) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.147879547 seconds)
    (19/192) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.217795323 seconds)
    (20/192) benchmarking ("map", abs, Float64, true)...
    done (took 0.186972527 seconds)
    (21/192) benchmarking ("map", identity, BigInt, false)...
    done (took 0.165498097 seconds)
    (22/192) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.196460262 seconds)
    (23/192) benchmarking ("perf_sum", Bool, true)...
    done (took 0.139226023 seconds)
    (24/192) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.243287503 seconds)
    (25/192) benchmarking ("map", identity, Bool, false)...
    done (took 0.253585156 seconds)
    (26/192) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.100162991 seconds)
    (27/192) benchmarking ("perf_sum", Float32, false)...
    done (took 0.139557074 seconds)
    (28/192) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.175891981 seconds)
    (29/192) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.193390051 seconds)
    (30/192) benchmarking ("map", abs, Bool, false)...
    done (took 0.125544309 seconds)
    (31/192) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.149553506 seconds)
    (32/192) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.459826506 seconds)
    (33/192) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.153453892 seconds)
    (34/192) benchmarking ("map", abs, Int64, true)...
    done (took 0.174356585 seconds)
    (35/192) benchmarking ("map", *, Complex{Float64}, (true, true))...
    done (took 0.100612268 seconds)
    (36/192) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.12177259 seconds)
    (37/192) benchmarking ("perf_countequals", "Int8")...
    done (took 0.134400068 seconds)
    (38/192) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.122941449 seconds)
    (39/192) benchmarking ("perf_sum", Bool, false)...
    done (took 0.100573922 seconds)
    (40/192) benchmarking ("map", identity, Float32, true)...
    done (took 0.095917121 seconds)
    (41/192) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.067342225 seconds)
    (42/192) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.155114357 seconds)
    (43/192) benchmarking ("map", identity, Complex{Float64}, true)...
    done (took 0.160393199 seconds)
    (44/192) benchmarking ("map", identity, Float64, false)...
    done (took 0.126481628 seconds)
    (45/192) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.099098547 seconds)
    (46/192) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.112797188 seconds)
    (47/192) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.165654885 seconds)
    (48/192) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.089885054 seconds)
    (49/192) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.11318209 seconds)
    (50/192) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.159309816 seconds)
    (51/192) benchmarking ("perf_sum", Float64, false)...
    done (took 0.137191065 seconds)
    (52/192) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.149696445 seconds)
    (53/192) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.150065358 seconds)
    (54/192) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.251053249 seconds)
    (55/192) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.186693726 seconds)
    (56/192) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.097405463 seconds)
    (57/192) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.163293611 seconds)
    (58/192) benchmarking ("perf_countequals", "Float32")...
    done (took 0.133058417 seconds)
    (59/192) benchmarking ("map", abs, Float32, true)...
    done (took 0.131610311 seconds)
    (60/192) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.091687877 seconds)
    (61/192) benchmarking ("map", identity, Int8, false)...
    done (took 0.249685395 seconds)
    (62/192) benchmarking ("map", abs, Complex{Float64}, true)...
    done (took 0.150415485 seconds)
    (63/192) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.172036376 seconds)
    (64/192) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.095264524 seconds)
    (65/192) benchmarking ("perf_sum", Complex{Float64}, true)...
    done (took 0.12198006 seconds)
    (66/192) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.098876298 seconds)
    (67/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (true, true))...
    done (took 0.123343975 seconds)
    (68/192) benchmarking ("map", *, Complex{Float64}, (false, true))...
    done (took 0.067965617 seconds)
    (69/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (false, false))...
    done (took 0.112819856 seconds)
    (70/192) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.067535418 seconds)
    (71/192) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.067105161 seconds)
    (72/192) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.098842489 seconds)
    (73/192) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.074676858 seconds)
    (74/192) benchmarking ("perf_countequals", "Int64")...
    done (took 0.131900171 seconds)
    (75/192) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.092540539 seconds)
    (76/192) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.09197624 seconds)
    (77/192) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.115734109 seconds)
    (78/192) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.139671845 seconds)
    (79/192) benchmarking ("perf_countequals", "Bool")...
    done (took 0.110007485 seconds)
    (80/192) benchmarking ("map", abs, BigInt, true)...
    done (took 0.159714859 seconds)
    (81/192) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.164919805 seconds)
    (82/192) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.1255339 seconds)
    (83/192) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.171641885 seconds)
    (84/192) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.147799051 seconds)
    (85/192) benchmarking ("broadcast", identity, Complex{Float64}, true)...
    done (took 0.190740383 seconds)
    (86/192) benchmarking ("broadcast", abs, Complex{Float64}, false)...
    done (took 0.131792492 seconds)
    (87/192) benchmarking ("perf_sum", Int8, false)...
    done (took 0.09999854 seconds)
    (88/192) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.113415542 seconds)
    (89/192) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.10067811 seconds)
    (90/192) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.066824663 seconds)
    (91/192) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.066869206 seconds)
    (92/192) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.098081594 seconds)
    (93/192) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.093482947 seconds)
    (94/192) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.152091092 seconds)
    (95/192) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.114489029 seconds)
    (96/192) benchmarking ("map", identity, BigInt, true)...
    done (took 0.076305686 seconds)
    (97/192) benchmarking ("perf_sum", Int64, true)...
    done (took 0.117491252 seconds)
    (98/192) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.07639416 seconds)
    (99/192) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.087494986 seconds)
    (100/192) benchmarking ("map", identity, Float64, true)...
    done (took 0.074875457 seconds)
    (101/192) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.067860713 seconds)
    (102/192) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.067708137 seconds)
    (103/192) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.067556215 seconds)
    (104/192) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.120572517 seconds)
    (105/192) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.078182334 seconds)
    (106/192) benchmarking ("map", abs, BigInt, false)...
    done (took 0.069617987 seconds)
    (107/192) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.149040712 seconds)
    (108/192) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.176733953 seconds)
    (109/192) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.101197218 seconds)
    (110/192) benchmarking ("perf_countnothing", Complex{Float64}, false)...
    done (took 0.10089803 seconds)
    (111/192) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.082070878 seconds)
    (112/192) benchmarking ("map", abs, Int64, false)...
    done (took 0.090925058 seconds)
    (113/192) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.069477995 seconds)
    (114/192) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.156143237 seconds)
    (115/192) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.122084359 seconds)
    (116/192) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.094241341 seconds)
    (117/192) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.070047287 seconds)
    (118/192) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.067508865 seconds)
    (119/192) benchmarking ("perf_sum", Complex{Float64}, false)...
    done (took 0.101209113 seconds)
    (120/192) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.12184226 seconds)
    (121/192) benchmarking ("map", identity, Int8, true)...
    done (took 0.074809401 seconds)
    (122/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (false, true))...
    done (took 0.094402728 seconds)
    (123/192) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.115515021 seconds)
    (124/192) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.067679635 seconds)
    (125/192) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.099769921 seconds)
    (126/192) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.09600035 seconds)
    (127/192) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.087767715 seconds)
    (128/192) benchmarking ("map", identity, Bool, true)...
    done (took 0.075517023 seconds)
    (129/192) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.068562518 seconds)
    (130/192) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.067149567 seconds)
    (131/192) benchmarking ("broadcast", abs, Complex{Float64}, true)...
    done (took 0.077177897 seconds)
    (132/192) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.066932573 seconds)
    (133/192) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.120417073 seconds)
    (134/192) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.070330812 seconds)
    (135/192) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.168810528 seconds)
    (136/192) benchmarking ("perf_countnothing", Complex{Float64}, true)...
    done (took 0.122331772 seconds)
    (137/192) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.131757753 seconds)
    (138/192) benchmarking ("perf_countequals", "Float64")...
    done (took 0.113231955 seconds)
    (139/192) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.091036199 seconds)
    (140/192) benchmarking ("map", identity, Int64, true)...
    done (took 0.074848323 seconds)
    (141/192) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.068462722 seconds)
    (142/192) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.06848146 seconds)
    (143/192) benchmarking ("perf_sum", Int64, false)...
    done (took 0.100038196 seconds)
    (144/192) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.126799207 seconds)
    (145/192) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.068207313 seconds)
    (146/192) benchmarking ("map", abs, Int8, true)...
    done (took 0.130639065 seconds)
    (147/192) benchmarking ("map", abs, Int8, false)...
    done (took 0.069893759 seconds)
    (148/192) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.114197756 seconds)
    (149/192) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.092209756 seconds)
    (150/192) benchmarking ("map", identity, Complex{Float64}, false)...
    done (took 0.069347147 seconds)
    (151/192) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.069524423 seconds)
    (152/192) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.089237427 seconds)
    (153/192) benchmarking ("broadcast", identity, Complex{Float64}, false)...
    done (took 0.067726189 seconds)
    (154/192) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.152739769 seconds)
    (155/192) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.114129715 seconds)
    (156/192) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.094561628 seconds)
    (157/192) benchmarking ("perf_sum", Float64, true)...
    done (took 0.103429743 seconds)
    (158/192) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.098325546 seconds)
    (159/192) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.113174713 seconds)
    (160/192) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.070439385 seconds)
    (161/192) benchmarking ("map", abs, Float64, false)...
    done (took 0.070780479 seconds)
    (162/192) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.099722726 seconds)
    (163/192) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.089345731 seconds)
    (164/192) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.070407062 seconds)
    (165/192) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.091144708 seconds)
    (166/192) benchmarking ("perf_countequals", "Complex{Float64}")...
    done (took 0.112918708 seconds)
    (167/192) benchmarking ("map", abs, Complex{Float64}, false)...
    done (took 0.09131735 seconds)
    (168/192) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.098909155 seconds)
    (169/192) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.077355364 seconds)
    (170/192) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.093212327 seconds)
    (171/192) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.112522453 seconds)
    (172/192) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.070393642 seconds)
    (173/192) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.06851993 seconds)
    (174/192) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.093785414 seconds)
    (175/192) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.11273842 seconds)
    (176/192) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.069961436 seconds)
    (177/192) benchmarking ("map", abs, Bool, true)...
    done (took 0.075700292 seconds)
    (178/192) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.070038814 seconds)
    (179/192) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.120473514 seconds)
    (180/192) benchmarking ("broadcast", *, Complex{Float64}, (false, true))...
    done (took 0.171613117 seconds)
    (181/192) benchmarking ("perf_sum", Float32, true)...
    done (took 0.10398648 seconds)
    (182/192) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.134444944 seconds)
    (183/192) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.069277715 seconds)
    (184/192) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.068064254 seconds)
    (185/192) benchmarking ("perf_simplecopy", Complex{Float64}, false)...
    done (took 0.091925303 seconds)
    (186/192) benchmarking ("broadcast", *, Complex{Float64}, (false, false))...
    done (took 0.067724694 seconds)
    (187/192) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.116179639 seconds)
    (188/192) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.068108078 seconds)
    (189/192) benchmarking ("broadcast", *, Complex{Float64}, (true, true))...
    done (took 0.068721209 seconds)
    (190/192) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.067820675 seconds)
    (191/192) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.068002852 seconds)
    (192/192) benchmarking ("map", abs, Float32, false)...
    done (took 0.09175719 seconds)
  done (took 24.180819272 seconds)
done (took 24.997613017 seconds)
(14/20) benchmarking "simd"...
  (1/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.195330368 seconds)
  (2/72) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.115996084 seconds)
  (3/72) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.10147891 seconds)
  (4/72) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.152803747 seconds)
  (5/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.183139714 seconds)
  (6/72) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.107707471 seconds)
  (7/72) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.139972966 seconds)
  (8/72) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.101648337 seconds)
  (9/72) benchmarking ("inner", "Float64", 4096)...
  done (took 0.109497234 seconds)
  (10/72) benchmarking ("inner", "Float64", 4095)...
  done (took 0.123115501 seconds)
  (11/72) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.092735516 seconds)
  (12/72) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.112495075 seconds)
  (13/72) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.124187667 seconds)
  (14/72) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.165982706 seconds)
  (15/72) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.126571388 seconds)
  (16/72) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.095017728 seconds)
  (17/72) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.091615821 seconds)
  (18/72) benchmarking ("inner", "Int32", 4096)...
  done (took 0.133900707 seconds)
  (19/72) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.118555981 seconds)
  (20/72) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.117130999 seconds)
  (21/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.184455676 seconds)
  (22/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.094136606 seconds)
  (23/72) benchmarking ("inner", "Int64", 4095)...
  done (took 0.131162905 seconds)
  (24/72) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.093293409 seconds)
  (25/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.16366118 seconds)
  (26/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.116278456 seconds)
  (27/72) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.102169453 seconds)
  (28/72) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.100615732 seconds)
  (29/72) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.13653324 seconds)
  (30/72) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.102747009 seconds)
  (31/72) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.102134913 seconds)
  (32/72) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.1147199 seconds)
  (33/72) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.117926814 seconds)
  (34/72) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.116383074 seconds)
  (35/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.114000125 seconds)
  (36/72) benchmarking ("inner", "Int32", 4095)...
  done (took 0.103419975 seconds)
  (37/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.091063093 seconds)
  (38/72) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.076702029 seconds)
  (39/72) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.124037413 seconds)
  (40/72) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.10409656 seconds)
  (41/72) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.113087358 seconds)
  (42/72) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.124157892 seconds)
  (43/72) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.102974114 seconds)
  (44/72) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.093086028 seconds)
  (45/72) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.124759197 seconds)
  (46/72) benchmarking ("inner", "Int64", 4096)...
  done (took 0.101983837 seconds)
  (47/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.092504818 seconds)
  (48/72) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.125925704 seconds)
  (49/72) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.092443298 seconds)
  (50/72) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.101499475 seconds)
  (51/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.114857614 seconds)
  (52/72) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.118644483 seconds)
  (53/72) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.100239817 seconds)
  (54/72) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.112014207 seconds)
  (55/72) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.092636233 seconds)
  (56/72) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.095256245 seconds)
  (57/72) benchmarking ("inner", "Float32", 4095)...
  done (took 0.110132706 seconds)
  (58/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.116234589 seconds)
  (59/72) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.115499003 seconds)
  (60/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.091714398 seconds)
  (61/72) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.115435598 seconds)
  (62/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.093312479 seconds)
  (63/72) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.102887741 seconds)
  (64/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.114973311 seconds)
  (65/72) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.102260374 seconds)
  (66/72) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.092476102 seconds)
  (67/72) benchmarking ("inner", "Float32", 4096)...
  done (took 0.122851844 seconds)
  (68/72) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.105217618 seconds)
  (69/72) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.100507811 seconds)
  (70/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.094903771 seconds)
  (71/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.115141628 seconds)
  (72/72) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.103213668 seconds)
done (took 9.051407956 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.098483487 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.137249209 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.181117613 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.190630544 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.120007223 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.106868693 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.129865679 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.116221985 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.105324958 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.133882274 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.129063623 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.146166859 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.169166407 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.129781202 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.108450523 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.10385721 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.126839601 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.10162985 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.189230484 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.117090503 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.117491591 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.13257554 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.121100173 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.131473818 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.098308976 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.127010161 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.12315283 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.105088923 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.096120054 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.127358262 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.118327859 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.096862462 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.120230689 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.116434944 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.113370051 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.127814303 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.108536982 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.10520908 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.118399095 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.098783279 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.105522592 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.134504536 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.099071471 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.107439935 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.126641295 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.112486346 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.103397874 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.131221732 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.100401511 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.104756725 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.120023664 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.124398191 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.108105882 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.136435911 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.10959941 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.109982448 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.132673234 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.111310527 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.099397554 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.131618348 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.099261334 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.097463341 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.121561082 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.118217715 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.098265626 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.135038983 seconds)
  done (took 8.772925836 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.117973496 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.12636809 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.129459748 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.109432336 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.100027011 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.113692626 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.092269451 seconds)
  done (took 1.651826003 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.094876148 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.168618342 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.191691658 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.1922587 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.165227642 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.20044517 seconds)
    (7/97) benchmarking ("randn", "MersenneTwister", "Complex{Float32}")...
    done (took 0.194989912 seconds)
    (8/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.092760897 seconds)
    (9/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.1494448 seconds)
    (10/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.10284336 seconds)
    (11/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.167977665 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "Complex{Float16}")...
    done (took 0.219460592 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.124875723 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.10879277 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.193616893 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.093099432 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.194998234 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.094083982 seconds)
    (19/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.188382799 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.169421895 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.131001218 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.125407417 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.105216847 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.115533477 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.16501365 seconds)
    (26/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.116621343 seconds)
    (27/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float16}")...
    done (took 0.221214678 seconds)
    (28/97) benchmarking ("randn", "MersenneTwister", "Complex{Float64}")...
    done (took 0.132938194 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.102677235 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.106444869 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.129137138 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.169984016 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.188867071 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.105941576 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.121655373 seconds)
    (36/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float32}")...
    done (took 0.168309053 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.188843131 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.106421617 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.202635246 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.096953202 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.189461179 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.106839826 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.129755694 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.108417042 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.107848408 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.178431666 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.110898348 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.129166235 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.106903795 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.171387684 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.126490082 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.168022995 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.127631982 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.10688782 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.103620272 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.131908785 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.177026105 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.131256833 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.173366948 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.132706552 seconds)
    (61/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.168087192 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.193671027 seconds)
    (63/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.188514849 seconds)
    (64/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.168953446 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{Float32}")...
    done (took 0.140589734 seconds)
    (66/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.169607082 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.18708649 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.106270041 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float64}")...
    done (took 0.125553096 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.166056678 seconds)
    (71/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.194626394 seconds)
    (72/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.105055566 seconds)
    (73/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.128293265 seconds)
    (74/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.159295573 seconds)
    (75/97) benchmarking ("randn", "MersenneTwister", "Complex{Float16}")...
    done (took 0.134754265 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.171542082 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.193996422 seconds)
    (78/97) benchmarking ("rand", "MersenneTwister", "Complex{Float64}")...
    done (took 0.104974281 seconds)
    (79/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.127717022 seconds)
    (80/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.097082546 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.104121504 seconds)
    (82/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.115992017 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.162726344 seconds)
    (84/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.105505894 seconds)
    (85/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.129056302 seconds)
    (86/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float16}")...
    done (took 0.111528149 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float64}")...
    done (took 0.127469715 seconds)
    (88/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.111028661 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.098210544 seconds)
    (90/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.137929601 seconds)
    (91/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.107073926 seconds)
    (92/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.104091819 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.134455159 seconds)
    (94/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.107707239 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float32}")...
    done (took 0.108532678 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.197340451 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.102248017 seconds)
  done (took 14.591494542 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.09603944 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.094281284 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.098889645 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.11787635 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.096029551 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.094677292 seconds)
  done (took 1.482077654 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.131286055 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.107675521 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.139119616 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.109442265 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.151430931 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.199327469 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.202502403 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.101824857 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.146376775 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.11877314 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.196779455 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.178542078 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.199650815 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.110227466 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.204001239 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.109689583 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.203060514 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.106677594 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.137632998 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.105913582 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.108110249 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.133249678 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.107175381 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.190054772 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.109982898 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.108911395 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.125716435 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.116607361 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.115632935 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.125974737 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.110910387 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.108344889 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.124758304 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.102136349 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.203734632 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.101550019 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.127073965 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.113339224 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.111234252 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.1320328 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.179804675 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.127974788 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.115929748 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.111325295 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.124690227 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.102236537 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.110748422 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.125796847 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.181203396 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.134042626 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.112590309 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.107734257 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.132221201 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.112778753 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.100668477 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.127724351 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.112220788 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.208225909 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.111031978 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.122983216 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.109567264 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.109236997 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.125860975 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.114328862 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.109378424 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.134360233 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.10283082 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.109648878 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.127515424 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.111598334 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.110427668 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.131942483 seconds)
  done (took 10.279547768 seconds)
done (took 37.6340079 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 1.52717063 seconds)
  done (took 2.407942584 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.011082683 seconds)
  done (took 1.8944035 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 16.921474619 seconds)
  done (took 17.836830794 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.493959642 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.557196017 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.095673897 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.15896186 seconds)
  done (took 3.192319465 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 2.989072115 seconds)
  done (took 3.885653416 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.277541925 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.253271208 seconds)
  done (took 1.422109452 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.674468013 seconds)
  done (took 1.575760314 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.464782997 seconds)
  done (took 2.357057532 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.33340816 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.168749648 seconds)
  done (took 1.409248434 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.584694046 seconds)
  done (took 1.491153104 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 19.349229657 seconds)
  done (took 20.25738098 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.244765674 seconds)
  done (took 1.155977305 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.273845901 seconds)
  done (took 1.184293831 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 3.484694629 seconds)
  done (took 4.394235265 seconds)
done (took 65.353970992 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.104801168 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.108091122 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.106374032 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.130043622 seconds)
  done (took 1.351278309 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Array{Float32,1} generator")...
    done (took 0.112277152 seconds)
    (2/24) benchmarking ("all", "Array{Float32,1}")...
    done (took 0.106508596 seconds)
    (3/24) benchmarking ("any", "Array{Float64,1} generator")...
    done (took 0.109875442 seconds)
    (4/24) benchmarking ("any", "Array{Int64,1}")...
    done (took 0.131366356 seconds)
    (5/24) benchmarking ("any", "Array{Int16,1} generator")...
    done (took 0.113894829 seconds)
    (6/24) benchmarking ("any", "Array{Float32,1}")...
    done (took 0.106507324 seconds)
    (7/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.13012836 seconds)
    (8/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.110977829 seconds)
    (9/24) benchmarking ("all", "Array{Int64,1}")...
    done (took 0.106568702 seconds)
    (10/24) benchmarking ("all", "Array{Int16,1}")...
    done (took 0.132904635 seconds)
    (11/24) benchmarking ("all", "Array{Float64,1}")...
    done (took 0.107618401 seconds)
    (12/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.106818232 seconds)
    (13/24) benchmarking ("any", "Array{Float32,1} generator")...
    done (took 0.133693536 seconds)
    (14/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.107503451 seconds)
    (15/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.104529626 seconds)
    (16/24) benchmarking ("all", "Array{Float64,1} generator")...
    done (took 0.132008996 seconds)
    (17/24) benchmarking ("all", "Array{Int64,1} generator")...
    done (took 0.11162916 seconds)
    (18/24) benchmarking ("any", "Array{Float64,1}")...
    done (took 0.107445718 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.130168355 seconds)
    (20/24) benchmarking ("any", "Array{Int16,1}")...
    done (took 0.108730359 seconds)
    (21/24) benchmarking ("any", "BitArray")...
    done (took 0.10874791 seconds)
    (22/24) benchmarking ("any", "Array{Int64,1} generator")...
    done (took 0.130753318 seconds)
    (23/24) benchmarking ("all", "Array{Int16,1} generator")...
    done (took 0.111999426 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.111548512 seconds)
  done (took 3.684589923 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.104151366 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.098101347 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.100143608 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.120243467 seconds)
  done (took 1.336760368 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.116224178 seconds)
    (2/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Int16,1}")...
    done (took 0.118341558 seconds)
    (3/24) benchmarking ("==", "Array{Float64,1}")...
    done (took 0.14058891 seconds)
    (4/24) benchmarking ("isequal", "Array{Float64,1}")...
    done (took 0.116128071 seconds)
    (5/24) benchmarking ("==", "Array{Int64,1} == Array{Float32,1}")...
    done (took 0.120074518 seconds)
    (6/24) benchmarking ("==", "Array{Float32,1}")...
    done (took 0.140979424 seconds)
    (7/24) benchmarking ("==", "Array{Int64,1}")...
    done (took 0.108885303 seconds)
    (8/24) benchmarking ("==", "Array{Int64,1} == Array{Int64,1}")...
    done (took 0.104236184 seconds)
    (9/24) benchmarking ("==", "Array{Int16,1}")...
    done (took 0.128638436 seconds)
    (10/24) benchmarking ("==", "Array{Int64,1} == Array{Int16,1}")...
    done (took 0.116999238 seconds)
    (11/24) benchmarking ("isequal", "BitArray")...
    done (took 0.122625382 seconds)
    (12/24) benchmarking ("==", "Array{Int64,1} == UnitRange{Int64}")...
    done (took 0.142630214 seconds)
    (13/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Float64,1}")...
    done (took 0.118927998 seconds)
    (14/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Int64,1}")...
    done (took 0.110394161 seconds)
    (15/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Float32,1}")...
    done (took 0.14250467 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.102722232 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.108375831 seconds)
    (18/24) benchmarking ("isequal", "Array{Int16,1}")...
    done (took 0.143784276 seconds)
    (19/24) benchmarking ("isequal", "Array{Float32,1}")...
    done (took 0.115666941 seconds)
    (20/24) benchmarking ("==", "Array{Int64,1} == Array{Float64,1}")...
    done (took 0.116741179 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.133930702 seconds)
    (22/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.114814187 seconds)
    (23/24) benchmarking ("isequal", "Array{Int64,1}")...
    done (took 0.114117072 seconds)
    (24/24) benchmarking ("isequal", "Array{Int64,1} isequal UnitRange{Int64}")...
    done (took 0.139481419 seconds)
  done (took 3.849521899 seconds)
  (5/13) benchmarking "reductions"...
    (1/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norminf", "Int64")...
    done (took 0.183119138 seconds)
    (2/22) benchmarking ("maxabs", "Float64")...
    done (took 0.120658863 seconds)
    (3/22) benchmarking ("sumabs", "Float64")...
    done (took 0.162350029 seconds)
    (4/22) benchmarking ("LinearAlgebra.norm", "Int64")...
    done (took 0.151989051 seconds)
    (5/22) benchmarking ("sumabs", "Int64")...
    done (took 0.164523619 seconds)
    (6/22) benchmarking ("sumabs2", "Float64")...
    done (took 0.106228633 seconds)
    (7/22) benchmarking ("sumabs2", "Int64")...
    done (took 0.135143746 seconds)
    (8/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_mapreduce", "Float64")...
    done (took 0.137943345 seconds)
    (9/22) benchmarking ("sum", "Int64")...
    done (took 0.114066629 seconds)
    (10/22) benchmarking ("mean", "Int64")...
    done (took 0.110730385 seconds)
    (11/22) benchmarking ("mean", "Float64")...
    done (took 0.134718791 seconds)
    (12/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norminf", "Float64")...
    done (took 0.152140934 seconds)
    (13/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_mapreduce", "Int64")...
    done (took 0.136374036 seconds)
    (14/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norm1", "Float64")...
    done (took 0.112182296 seconds)
    (15/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norm1", "Int64")...
    done (took 0.10934628 seconds)
    (16/22) benchmarking ("LinearAlgebra.norm", "Float64")...
    done (took 0.135487765 seconds)
    (17/22) benchmarking ("var", "Float64")...
    done (took 0.120958344 seconds)
    (18/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_reduce", "Float64")...
    done (took 0.112894698 seconds)
    (19/22) benchmarking ("var", "Int64")...
    done (took 0.177081184 seconds)
    (20/22) benchmarking ("sum", "Float64")...
    done (took 0.112928942 seconds)
    (21/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_reduce", "Int64")...
    done (took 0.138318293 seconds)
    (22/22) benchmarking ("maxabs", "Int64")...
    done (took 0.121036927 seconds)
  done (took 3.863554053 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.111174946 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.099472038 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.094626974 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.124906906 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.110113793 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.100674045 seconds)
  done (took 1.560362776 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.098419535 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.092680618 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.093944079 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.115976073 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.097148009 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.09447465 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.09105914 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.116818972 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.093967795 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.093502241 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.117260442 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.094098444 seconds)
  done (took 2.118626231 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.320764024 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.098778808 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.122842344 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.101420628 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.103644187 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.0959786 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.13430278 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.098082699 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.2522488 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.094382847 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.132116609 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.186190688 seconds)
  done (took 2.660557786 seconds)
  (9/13) benchmarking "index"...
    (1/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.193006614 seconds)
    (2/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.13427508 seconds)
    (3/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.262392675 seconds)
    (4/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.327119114 seconds)
    (5/481) benchmarking ("sumcartesian", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.170860781 seconds)
    (6/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.155195315 seconds)
    (7/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.274986005 seconds)
    (8/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.176110002 seconds)
    (9/481) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.166996985 seconds)
    (10/481) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.151098492 seconds)
    (11/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.19381411 seconds)
    (12/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.150573563 seconds)
    (13/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.141112776 seconds)
    (14/481) benchmarking ("sumcolon", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.196739796 seconds)
    (15/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.128559451 seconds)
    (16/481) benchmarking ("sumrange", "BitArray{2}")...
    done (took 0.172464573 seconds)
    (17/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.149617805 seconds)
    (18/481) benchmarking ("sumrange", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.218210963 seconds)
    (19/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.156590906 seconds)
    (20/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.197488367 seconds)
    (21/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.169431044 seconds)
    (22/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.183604481 seconds)
    (23/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.180648796 seconds)
    (24/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.160919439 seconds)
    (25/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.127757299 seconds)
    (26/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.173332789 seconds)
    (27/481) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.110776122 seconds)
    (28/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.11726762 seconds)
    (29/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.178635156 seconds)
    (30/481) benchmarking ("sumrange_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.15030741 seconds)
    (31/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.184037177 seconds)
    (32/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.161081271 seconds)
    (33/481) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.13053378 seconds)
    (34/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.200226669 seconds)
    (35/481) benchmarking ("sumelt", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.211905017 seconds)
    (36/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.184909031 seconds)
    (37/481) benchmarking ("mapr_access", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.259252166 seconds)
    (38/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.146938399 seconds)
    (39/481) benchmarking ("sumlinear_view", "BitArray{2}")...
    done (took 0.156832333 seconds)
    (40/481) benchmarking ("sumlogical", "Array{Float32,2}")...
    done (took 0.20105457 seconds)
    (41/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.242277629 seconds)
    (42/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.130453273 seconds)
    (43/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.197764697 seconds)
    (44/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.139587977 seconds)
    (45/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.143332665 seconds)
    (46/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.171149968 seconds)
    (47/481) benchmarking ("sumvector_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.164778039 seconds)
    (48/481) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.193993721 seconds)
    (49/481) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.122995071 seconds)
    (50/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.132122427 seconds)
    (51/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.191142604 seconds)
    (52/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.189415473 seconds)
    (53/481) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.163120997 seconds)
    (54/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.149699079 seconds)
    (55/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.285000338 seconds)
    (56/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.123661693 seconds)
    (57/481) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.129770215 seconds)
    (58/481) benchmarking ("mapr_access", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.178027561 seconds)
    (59/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.200700715 seconds)
    (60/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.187554721 seconds)
    (61/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.188585303 seconds)
    (62/481) benchmarking ("sumeach", "Array{Float32,2}")...
    done (took 0.113622165 seconds)
    (63/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.189330055 seconds)
    (64/481) benchmarking ("sumlogical", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.203758072 seconds)
    (65/481) benchmarking ("sumvector", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.19804354 seconds)
    (66/481) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.155382446 seconds)
    (67/481) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.151058534 seconds)
    (68/481) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.139475812 seconds)
    (69/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.152708941 seconds)
    (70/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.216754014 seconds)
    (71/481) benchmarking ("sumeach", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.192710946 seconds)
    (72/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.147161835 seconds)
    (73/481) benchmarking ("sum", "3dsubarray")...
    done (took 0.214526817 seconds)
    (74/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.146211437 seconds)
    (75/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.159418966 seconds)
    (76/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.181931451 seconds)
    (77/481) benchmarking ("sumeach_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.141298217 seconds)
    (78/481) benchmarking ("sumcolon", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.214463519 seconds)
    (79/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.181833344 seconds)
    (80/481) benchmarking ("sumlinear", "Array{Float32,2}")...
    done (took 0.109728548 seconds)
    (81/481) benchmarking ("sumeach_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.138041741 seconds)
    (82/481) benchmarking ("sumcartesian", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.146891659 seconds)
    (83/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.115192431 seconds)
    (84/481) benchmarking "5d"...
    done (took 0.199915012 seconds)
    (85/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.113041213 seconds)
    (86/481) benchmarking ("sumlogical", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.2261567 seconds)
    (87/481) benchmarking ("sumlinear", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.121332504 seconds)
    (88/481) benchmarking ("sumlogical", "BitArray{2}")...
    done (took 0.325246475 seconds)
    (89/481) benchmarking ("mapr_access", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.194495706 seconds)
    (90/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.143351767 seconds)
    (91/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.172969957 seconds)
    (92/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.146954701 seconds)
    (93/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.17543708 seconds)
    (94/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.135652615 seconds)
    (95/481) benchmarking ("sumelt", "BitArray{2}")...
    done (took 0.115945575 seconds)
    (96/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.132847749 seconds)
    (97/481) benchmarking ("sumlogical_view", "Array{Int32,2}")...
    done (took 0.148656678 seconds)
    (98/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.169947917 seconds)
    (99/481) benchmarking ("sumeach", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.117453752 seconds)
    (100/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.168430268 seconds)
    (101/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.129264866 seconds)
    (102/481) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.138323618 seconds)
    (103/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.139981666 seconds)
    (104/481) benchmarking ("sumlinear", "Array{Int32,2}")...
    done (took 0.111132483 seconds)
    (105/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.181147448 seconds)
    (106/481) benchmarking ("sumcolon", "BitArray{2}")...
    done (took 0.122754852 seconds)
    (107/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.175263749 seconds)
    (108/481) benchmarking ("sumrange", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.156808465 seconds)
    (109/481) benchmarking ("sumcartesian", "Array{Float64,3}")...
    done (took 0.146283616 seconds)
    (110/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.166665433 seconds)
    (111/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.160045972 seconds)
    (112/481) benchmarking ("sumvector", "Array{Float32,2}")...
    done (took 0.151289936 seconds)
    (113/481) benchmarking ("sumrange_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.178296618 seconds)
    (114/481) benchmarking ("sumlogical", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.203329985 seconds)
    (115/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.120409519 seconds)
    (116/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.119941959 seconds)
    (117/481) benchmarking ("sumlogical", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.22736666 seconds)
    (118/481) benchmarking ("sumrange", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.180851903 seconds)
    (119/481) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.127053348 seconds)
    (120/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.185327842 seconds)
    (121/481) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.183369472 seconds)
    (122/481) benchmarking ("sumvector", "BitArray{2}")...
    done (took 0.164512065 seconds)
    (123/481) benchmarking ("sumcartesian", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.124498208 seconds)
    (124/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.175376977 seconds)
    (125/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.20499113 seconds)
    (126/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.133659784 seconds)
    (127/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.208844236 seconds)
    (128/481) benchmarking ("sumelt", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.125687401 seconds)
    (129/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.145347422 seconds)
    (130/481) benchmarking ("sumcolon_view", "BitArray{2}")...
    done (took 0.128890421 seconds)
    (131/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.18146632 seconds)
    (132/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.146113926 seconds)
    (133/481) benchmarking "ind2sub"...
    done (took 0.164623312 seconds)
    (134/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.117929922 seconds)
    (135/481) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.15133815 seconds)
    (136/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.201246289 seconds)
    (137/481) benchmarking ("sumcartesian", "Array{Float32,2}")...
    done (took 0.138037418 seconds)
    (138/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.129244321 seconds)
    (139/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.190075343 seconds)
    (140/481) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.122648999 seconds)
    (141/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.115269946 seconds)
    (142/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.150748895 seconds)
    (143/481) benchmarking ("sumeach", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.12603336 seconds)
    (144/481) benchmarking ("sumcartesian_view", "Array{Int32,2}")...
    done (took 0.12986114 seconds)
    (145/481) benchmarking ("sumlinear_view", "Array{Float64,3}")...
    done (took 0.162584775 seconds)
    (146/481) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.128061992 seconds)
    (147/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.166078606 seconds)
    (148/481) benchmarking ("sumcolon", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.152535266 seconds)
    (149/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.177319686 seconds)
    (150/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.142985867 seconds)
    (151/481) benchmarking ("sumelt", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.148965942 seconds)
    (152/481) benchmarking ("sumelt", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.157145406 seconds)
    (153/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.145046144 seconds)
    (154/481) benchmarking ("sumrange", "Array{Int32,2}")...
    done (took 0.155907733 seconds)
    (155/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.161335506 seconds)
    (156/481) benchmarking ("sumelt", "1:100000")...
    done (took 0.109771491 seconds)
    (157/481) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.187281897 seconds)
    (158/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.182257722 seconds)
    (159/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.143229154 seconds)
    (160/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.167368479 seconds)
    (161/481) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.174565461 seconds)
    (162/481) benchmarking ("mapr_access", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.196418667 seconds)
    (163/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.160533308 seconds)
    (164/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.142830742 seconds)
    (165/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.172106395 seconds)
    (166/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.142223145 seconds)
    (167/481) benchmarking ("sumlinear", "Array{Float64,3}")...
    done (took 0.11020161 seconds)
    (168/481) benchmarking ("sumeach", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.14735619 seconds)
    (169/481) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.18321679 seconds)
    (170/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.176049372 seconds)
    (171/481) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.176800872 seconds)
    (172/481) benchmarking ("mapr_access", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.195131253 seconds)
    (173/481) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.177223151 seconds)
    (174/481) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.149966981 seconds)
    (175/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.163796288 seconds)
    (176/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.154569164 seconds)
    (177/481) benchmarking ("sumlogical", "Array{Int32,2}")...
    done (took 0.19475757 seconds)
    (178/481) benchmarking ("sumlinear", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.167276562 seconds)
    (179/481) benchmarking ("sumvector_view", "Array{Int32,2}")...
    done (took 0.132183766 seconds)
    (180/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.182758272 seconds)
    (181/481) benchmarking ("sumeach_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.156683421 seconds)
    (182/481) benchmarking ("sumelt_boundscheck", "Array{Float32,2}")...
    done (took 0.109217638 seconds)
    (183/481) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.137563259 seconds)
    (184/481) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.117467868 seconds)
    (185/481) benchmarking ("sumlinear", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.125126978 seconds)
    (186/481) benchmarking ("sumeach", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.143460059 seconds)
    (187/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.12654526 seconds)
    (188/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.189027904 seconds)
    (189/481) benchmarking ("sumrange_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.149708719 seconds)
    (190/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.194128014 seconds)
    (191/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.181923744 seconds)
    (192/481) benchmarking ("sumlinear", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.126606491 seconds)
    (193/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.203563402 seconds)
    (194/481) benchmarking ("sumeach", "1:100000")...
    done (took 0.114670136 seconds)
    (195/481) benchmarking ("sumrange_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.17245226 seconds)
    (196/481) benchmarking ("sumvector", "1:100000")...
    done (took 0.163661848 seconds)
    (197/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.152780187 seconds)
    (198/481) benchmarking ("sumlogical", "1:100000")...
    done (took 0.174044022 seconds)
    (199/481) benchmarking ("sumlogical", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.2043396 seconds)
    (200/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.189468695 seconds)
    (201/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.131136411 seconds)
    (202/481) benchmarking ("sumlinear", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.173907444 seconds)
    (203/481) benchmarking ("sumelt_boundscheck", "Array{Float64,3}")...
    done (took 0.111543824 seconds)
    (204/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.115966753 seconds)
    (205/481) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.146878496 seconds)
    (206/481) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.150663008 seconds)
    (207/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.150256203 seconds)
    (208/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.125523436 seconds)
    (209/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.128381312 seconds)
    (210/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.204012811 seconds)
    (211/481) benchmarking ("sumvector_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.183338826 seconds)
    (212/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.136554552 seconds)
    (213/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.20591144 seconds)
    (214/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.177246056 seconds)
    (215/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.186652064 seconds)
    (216/481) benchmarking ("sumelt", "Array{Float64,3}")...
    done (took 0.136240207 seconds)
    (217/481) benchmarking "4d"...
    done (took 0.149755239 seconds)
    (218/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.181637789 seconds)
    (219/481) benchmarking ("sumrange", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.156446063 seconds)
    (220/481) benchmarking ("sumeach_view", "Array{Int32,2}")...
    done (took 0.19214747 seconds)
    (221/481) benchmarking ("sumeach", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.122718004 seconds)
    (222/481) benchmarking ("sumcolon_view", "Array{Float32,2}")...
    done (took 0.145378228 seconds)
    (223/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.202655748 seconds)
    (224/481) benchmarking ("sumelt", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.152896226 seconds)
    (225/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.180702997 seconds)
    (226/481) benchmarking ("sumvector", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.180562856 seconds)
    (227/481) benchmarking ("sumvector", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.165555704 seconds)
    (228/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.207880408 seconds)
    (229/481) benchmarking ("sumrange", "Array{Float32,2}")...
    done (took 0.177623985 seconds)
    (230/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.121492584 seconds)
    (231/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.135030195 seconds)
    (232/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.173231347 seconds)
    (233/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.125646649 seconds)
    (234/481) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.177408925 seconds)
    (235/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.134578641 seconds)
    (236/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.145164635 seconds)
    (237/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.14072204 seconds)
    (238/481) benchmarking ("sumeach_view", "Array{Float64,3}")...
    done (took 0.152645963 seconds)
    (239/481) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.129995954 seconds)
    (240/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.195746353 seconds)
    (241/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.132634907 seconds)
    (242/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.191299682 seconds)
    (243/481) benchmarking ("sumlogical_view", "Array{Float32,2}")...
    done (took 0.14626314 seconds)
    (244/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.183543769 seconds)
    (245/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.113686243 seconds)
    (246/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.155110949 seconds)
    (247/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.161224799 seconds)
    (248/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.159880554 seconds)
    (249/481) benchmarking ("sumelt_boundscheck", "BitArray{2}")...
    done (took 0.096354381 seconds)
    (250/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.180387042 seconds)
    (251/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.182049255 seconds)
    (252/481) benchmarking ("sumelt_boundscheck", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.162462184 seconds)
    (253/481) benchmarking ("sumvector_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.147919522 seconds)
    (254/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.185179893 seconds)
    (255/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.119282185 seconds)
    (256/481) benchmarking ("mapr_access", "BitArray{2}")...
    done (took 0.326156607 seconds)
    (257/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.171175761 seconds)
    (258/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.188304607 seconds)
    (259/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.123543486 seconds)
    (260/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.153834294 seconds)
    (261/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.159054564 seconds)
    (262/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.174183852 seconds)
    (263/481) benchmarking ("sumvector_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.14608899 seconds)
    (264/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.197064007 seconds)
    (265/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.152639603 seconds)
    (266/481) benchmarking ("sumvector", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.192487915 seconds)
    (267/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.18167422 seconds)
    (268/481) benchmarking ("sumvector_view", "Array{Float32,2}")...
    done (took 0.131000294 seconds)
    (269/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.143313233 seconds)
    (270/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.136881355 seconds)
    (271/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.137322937 seconds)
    (272/481) benchmarking ("sumrange_view", "BitArray{2}")...
    done (took 0.153937216 seconds)
    (273/481) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.136878945 seconds)
    (274/481) benchmarking ("sumcolon", "1:100000")...
    done (took 0.179054685 seconds)
    (275/481) benchmarking ("sumcartesian_view", "Array{Float32,2}")...
    done (took 0.130955514 seconds)
    (276/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.195435929 seconds)
    (277/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.149416417 seconds)
    (278/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.156971909 seconds)
    (279/481) benchmarking ("sumvector", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.186299626 seconds)
    (280/481) benchmarking "3d"...
    done (took 0.133716333 seconds)
    (281/481) benchmarking ("sum", "3darray")...
    done (took 0.136629443 seconds)
    (282/481) benchmarking ("sumlinear", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.152689385 seconds)
    (283/481) benchmarking ("sumlogical", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.232814082 seconds)
    (284/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.156568536 seconds)
    (285/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.1849677 seconds)
    (286/481) benchmarking ("sumcolon", "Array{Int32,2}")...
    done (took 0.150894316 seconds)
    (287/481) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.177244817 seconds)
    (288/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.167842967 seconds)
    (289/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.136831824 seconds)
    (290/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.114808214 seconds)
    (291/481) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.119572106 seconds)
    (292/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.196484222 seconds)
    (293/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.115885695 seconds)
    (294/481) benchmarking ("sumcolon", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.188182451 seconds)
    (295/481) benchmarking ("mapr_access", "Array{Float32,2}")...
    done (took 0.178820652 seconds)
    (296/481) benchmarking ("mapr_access", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.194616692 seconds)
    (297/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.162648049 seconds)
    (298/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.175855771 seconds)
    (299/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.128750557 seconds)
    (300/481) benchmarking ("sumeach", "Array{Float64,3}")...
    done (took 0.114031362 seconds)
    (301/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.179158343 seconds)
    (302/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.133616687 seconds)
    (303/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.199474067 seconds)
    (304/481) benchmarking ("sumelt", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.147250529 seconds)
    (305/481) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.126118809 seconds)
    (306/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.198485953 seconds)
    (307/481) benchmarking ("sumcartesian_view", "BitArray{2}")...
    done (took 0.116578184 seconds)
    (308/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.142384873 seconds)
    (309/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.149424225 seconds)
    (310/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.275712762 seconds)
    (311/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.135646472 seconds)
    (312/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.185439321 seconds)
    (313/481) benchmarking ("sumeach", "BitArray{2}")...
    done (took 0.096788024 seconds)
    (314/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.272627842 seconds)
    (315/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.118289566 seconds)
    (316/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.120402381 seconds)
    (317/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.175880829 seconds)
    (318/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.155119163 seconds)
    (319/481) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.147663731 seconds)
    (320/481) benchmarking ("sumeach_view", "Array{Float32,2}")...
    done (took 0.168808627 seconds)
    (321/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.186067187 seconds)
    (322/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.128855212 seconds)
    (323/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.174523141 seconds)
    (324/481) benchmarking ("sumcartesian", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.123565878 seconds)
    (325/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.192504097 seconds)
    (326/481) benchmarking ("mapr_access", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.173859118 seconds)
    (327/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.179377058 seconds)
    (328/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.18657334 seconds)
    (329/481) benchmarking ("sumrange_view", "Array{Float32,2}")...
    done (took 0.132353327 seconds)
    (330/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.174810036 seconds)
    (331/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.148483246 seconds)
    (332/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.187231734 seconds)
    (333/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.133219108 seconds)
    (334/481) benchmarking ("sumcartesian_view", "Array{Float64,3}")...
    done (took 0.160979196 seconds)
    (335/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.146478555 seconds)
    (336/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.205250545 seconds)
    (337/481) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.167536156 seconds)
    (338/481) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.145543133 seconds)
    (339/481) benchmarking ("sumvector", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.154783019 seconds)
    (340/481) benchmarking ("sumvector", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.181687603 seconds)
    (341/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.157123615 seconds)
    (342/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.184568748 seconds)
    (343/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.126172349 seconds)
    (344/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.19708431 seconds)
    (345/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.116578843 seconds)
    (346/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.178111342 seconds)
    (347/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.124448827 seconds)
    (348/481) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.139191295 seconds)
    (349/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.147565717 seconds)
    (350/481) benchmarking ("mapr_access", "Array{Int32,2}")...
    done (took 0.180417158 seconds)
    (351/481) benchmarking ("sumlinear", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.120214538 seconds)
    (352/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.187463723 seconds)
    (353/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.159437181 seconds)
    (354/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.145109863 seconds)
    (355/481) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.116835451 seconds)
    (356/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.158872283 seconds)
    (357/481) benchmarking ("sumcolon", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.154098795 seconds)
    (358/481) benchmarking ("sumelt", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.126256912 seconds)
    (359/481) benchmarking ("sumcartesian", "Array{Int32,2}")...
    done (took 0.144099816 seconds)
    (360/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.193844782 seconds)
    (361/481) benchmarking ("sumeach", "Array{Int32,2}")...
    done (took 0.119641566 seconds)
    (362/481) benchmarking ("sumrange", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.167123578 seconds)
    (363/481) benchmarking ("sumcolon", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.218000976 seconds)
    (364/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.117372219 seconds)
    (365/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.180300096 seconds)
    (366/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.134497037 seconds)
    (367/481) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.144210588 seconds)
    (368/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.127169773 seconds)
    (369/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.156912713 seconds)
    (370/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.121493182 seconds)
    (371/481) benchmarking ("sumlinear_view", "Array{Float32,2}")...
    done (took 0.161813483 seconds)
    (372/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.193158548 seconds)
    (373/481) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.12112479 seconds)
    (374/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.192938034 seconds)
    (375/481) benchmarking ("sumlinear", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.149227677 seconds)
    (376/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.176326818 seconds)
    (377/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.168943747 seconds)
    (378/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.13312355 seconds)
    (379/481) benchmarking "sub2ind"...
    done (took 1.322661211 seconds)
    (380/481) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.1424988 seconds)
    (381/481) benchmarking ("sumlogical", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.179022402 seconds)
    (382/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.164805561 seconds)
    (383/481) benchmarking ("sumlinear_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.182714998 seconds)
    (384/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.166407377 seconds)
    (385/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.162045839 seconds)
    (386/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.184198035 seconds)
    (387/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.136908395 seconds)
    (388/481) benchmarking ("sumeach", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.176435468 seconds)
    (389/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.134930389 seconds)
    (390/481) benchmarking "6d"...
    done (took 0.234102308 seconds)
    (391/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.175519908 seconds)
    (392/481) benchmarking ("sumrange", "1:100000")...
    done (took 0.158376236 seconds)
    (393/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.120337409 seconds)
    (394/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.156799381 seconds)
    (395/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.12752385 seconds)
    (396/481) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.148001426 seconds)
    (397/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.14238864 seconds)
    (398/481) benchmarking ("sumvector", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.183189091 seconds)
    (399/481) benchmarking ("sumeach_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.130967306 seconds)
    (400/481) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.124899329 seconds)
    (401/481) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.181234646 seconds)
    (402/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.132398274 seconds)
    (403/481) benchmarking ("sumcolon_view", "Array{Int32,2}")...
    done (took 0.160898654 seconds)
    (404/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.129491129 seconds)
    (405/481) benchmarking ("sumlogical", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.212173711 seconds)
    (406/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.139400312 seconds)
    (407/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.197207045 seconds)
    (408/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.199353908 seconds)
    (409/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.125687875 seconds)
    (410/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.18885069 seconds)
    (411/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.160128541 seconds)
    (412/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.143602398 seconds)
    (413/481) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.151522643 seconds)
    (414/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.184237605 seconds)
    (415/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.133286585 seconds)
    (416/481) benchmarking ("sumelt", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.163974173 seconds)
    (417/481) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.123272196 seconds)
    (418/481) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.127438609 seconds)
    (419/481) benchmarking ("sumrange", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.223803233 seconds)
    (420/481) benchmarking ("sumelt_boundscheck", "Array{Int32,2}")...
    done (took 0.115599811 seconds)
    (421/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.172374608 seconds)
    (422/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.160451325 seconds)
    (423/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.182488561 seconds)
    (424/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.159314863 seconds)
    (425/481) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.14923624 seconds)
    (426/481) benchmarking ("sumcolon", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.163057507 seconds)
    (427/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.154207237 seconds)
    (428/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.161371923 seconds)
    (429/481) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.142947532 seconds)
    (430/481) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.140670397 seconds)
    (431/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.182368957 seconds)
    (432/481) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.123249827 seconds)
    (433/481) benchmarking ("sumlinear", "1:100000")...
    done (took 0.140222431 seconds)
    (434/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.158801424 seconds)
    (435/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.170882633 seconds)
    (436/481) benchmarking ("sumvector", "Array{Int32,2}")...
    done (took 0.155014821 seconds)
    (437/481) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.154135533 seconds)
    (438/481) benchmarking ("sumlinear_view", "Array{Int32,2}")...
    done (took 0.16094568 seconds)
    (439/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.182983744 seconds)
    (440/481) benchmarking ("sumelt", "Array{Float32,2}")...
    done (took 0.136934586 seconds)
    (441/481) benchmarking ("sumeach", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.121826957 seconds)
    (442/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.283013895 seconds)
    (443/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.147982275 seconds)
    (444/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.207482929 seconds)
    (445/481) benchmarking ("sumvector_view", "BitArray{2}")...
    done (took 0.124475817 seconds)
    (446/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.152591637 seconds)
    (447/481) benchmarking ("sumeach_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.132945331 seconds)
    (448/481) benchmarking ("sumcartesian_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.170410077 seconds)
    (449/481) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.152617559 seconds)
    (450/481) benchmarking ("sumrange", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.185354557 seconds)
    (451/481) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.122513788 seconds)
    (452/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.118158632 seconds)
    (453/481) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.159823562 seconds)
    (454/481) benchmarking ("sumeach_view", "BitArray{2}")...
    done (took 0.145724416 seconds)
    (455/481) benchmarking ("sumlogical_view", "BitArray{2}")...
    done (took 0.154644308 seconds)
    (456/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.156635646 seconds)
    (457/481) benchmarking ("mapr_access", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.184589911 seconds)
    (458/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.148067897 seconds)
    (459/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.198306904 seconds)
    (460/481) benchmarking "2d"...
    done (took 0.12291806 seconds)
    (461/481) benchmarking "7d"...
    done (took 0.271172531 seconds)
    (462/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.130662139 seconds)
    (463/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.184695041 seconds)
    (464/481) benchmarking ("sumcartesian", "BitArray{2}")...
    done (took 0.106741496 seconds)
    (465/481) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.116740908 seconds)
    (466/481) benchmarking ("sumlinear", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.154796407 seconds)
    (467/481) benchmarking ("sumeach", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.12323086 seconds)
    (468/481) benchmarking ("sumelt", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.155554335 seconds)
    (469/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.194688016 seconds)
    (470/481) benchmarking ("sumrange", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.201911678 seconds)
    (471/481) benchmarking ("sumcolon", "Array{Float32,2}")...
    done (took 0.179243864 seconds)
    (472/481) benchmarking ("sumrange_view", "Array{Int32,2}")...
    done (took 0.136292119 seconds)
    (473/481) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.148181314 seconds)
    (474/481) benchmarking ("sumelt", "Array{Int32,2}")...
    done (took 0.119574352 seconds)
    (475/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.120385614 seconds)
    (476/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.1782664 seconds)
    (477/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.139762904 seconds)
    (478/481) benchmarking ("sumcolon", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.181454917 seconds)
    (479/481) benchmarking ("sumcartesian", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.13549922 seconds)
    (480/481) benchmarking ("sumlinear", "BitArray{2}")...
    done (took 0.093410699 seconds)
    (481/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.155195036 seconds)
  done (took 79.534094245 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("collect", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 0.148649296 seconds)
    (2/8) benchmarking ("collect", "Array{Float64,1}")...
    done (took 0.140142492 seconds)
    (3/8) benchmarking ("comprehension_collect", "Array{Float64,1}")...
    done (took 0.155619968 seconds)
    (4/8) benchmarking ("comprehension_iteration", "Array{Float64,1}")...
    done (took 0.208248306 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 0.180587546 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 0.275736973 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Array{Float64,1}")...
    done (took 0.215099326 seconds)
    (8/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 0.230638066 seconds)
  done (took 2.556260825 seconds)
  (11/13) benchmarking "cat"...
    (1/16) benchmarking ("hvcat", 500)...
    done (took 0.109466201 seconds)
    (2/16) benchmarking ("hcat_setind", 5)...
    done (took 0.144515262 seconds)
    (3/16) benchmarking ("hvcat_setind", 500)...
    done (took 0.13154127 seconds)
    (4/16) benchmarking ("hvcat", 5)...
    done (took 0.130962237 seconds)
    (5/16) benchmarking ("hcat", 500)...
    done (took 0.100160703 seconds)
    (6/16) benchmarking ("catnd_setind", 5)...
    done (took 0.417696893 seconds)
    (7/16) benchmarking ("vcat_setind", 500)...
    done (took 0.173359035 seconds)
    (8/16) benchmarking ("hvcat_setind", 5)...
    done (took 0.110023113 seconds)
    (9/16) benchmarking ("vcat", 5)...
    done (took 0.149668549 seconds)
    (10/16) benchmarking ("catnd_setind", 500)...
    done (took 0.138445141 seconds)
    (11/16) benchmarking ("vcat", 500)...
    done (took 0.122187942 seconds)
    (12/16) benchmarking ("catnd", 5)...
    done (took 0.510477798 seconds)
    (13/16) benchmarking ("vcat_setind", 5)...
    done (took 0.106034052 seconds)
    (14/16) benchmarking ("hcat_setind", 500)...
    done (took 0.129336144 seconds)
    (15/16) benchmarking ("catnd", 500)...
    done (took 0.110441973 seconds)
    (16/16) benchmarking ("hcat", 5)...
    done (took 0.12240863 seconds)
  done (took 3.702071382 seconds)
  (12/13) benchmarking "subarray"...
    (1/8) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.596266485 seconds)
    (2/8) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.514235084 seconds)
    (3/8) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.753003916 seconds)
    (4/8) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.272037869 seconds)
    (5/8) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.238299447 seconds)
    (6/8) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.186703215 seconds)
    (7/8) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.701707847 seconds)
    (8/8) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.185750817 seconds)
  done (took 11.446964985 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.145437604 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.133396657 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.393470319 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.233292119 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.189364175 seconds)
  done (took 2.103996652 seconds)
done (took 120.671258152 seconds)
(18/20) benchmarking "misc"...
  (1/6) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.11302752 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.113077008 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.11253772 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.140190129 seconds)
  done (took 1.476065598 seconds)
  (2/6) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.161822577 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.081836793 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.084170497 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.10562548 seconds)
  done (took 1.439429884 seconds)
  (3/6) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.424629879 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.080858701 seconds)
  done (took 1.536579158 seconds)
  (4/6) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.136806607 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.129470756 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.151926612 seconds)
  done (took 1.439149097 seconds)
  (5/6) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.12850513 seconds)
  done (took 1.142622197 seconds)
  (6/6) benchmarking "parse"...
    (1/3) benchmarking "Int"...
    done (took 0.112551299 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.105155505 seconds)
    (3/3) benchmarking "DateTime"...
    done (took 0.218378495 seconds)
  done (took 1.452684337 seconds)
done (took 9.496572183 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.109175174 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.913213274 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.418478833 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.123127727 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.700547386 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.417031825 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.408715503 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.163134009 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.164074176 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.126191712 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.122221752 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.680471666 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.422165432 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.869171627 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 1.381634482 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.895283725 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.685525605 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.101364028 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.132725613 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.100789264 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 1.388017967 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.124111415 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.101287977 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.10172435 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.70432108 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.410103685 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.098551616 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.901723474 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.099550712 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.102137055 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.41456774 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.100604125 seconds)
  done (took 20.485527811 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.108794591 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.154423834 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.132095914 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.102080773 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.103018664 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.126937224 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.113098608 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.111308578 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.188549591 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.099589146 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.14730224 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.099255234 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.10535079 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.126528841 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.126216161 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.098863599 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.12851385 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.102150018 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.106540128 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.12693117 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.122976347 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.098163278 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.127264069 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.102695713 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.100436261 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.146066416 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.101856958 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.111596209 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.124365374 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.105797178 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.105342766 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.126117397 seconds)
  done (took 4.80152986 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.148504686 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.16413726 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.134791976 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.136715945 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.172714495 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.103241128 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.211967323 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.138851101 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.18898016 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.100615536 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.122334201 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.124651656 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.140114036 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.100997358 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.150420283 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.100955918 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.104367412 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.127212297 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.107910135 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.1009794 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.146422722 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.100049344 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.101200274 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.128293944 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.101522358 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.121833132 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.125578416 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.113518459 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.100031402 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.130493028 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.106521218 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.10136715 seconds)
  done (took 5.076256688 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.11576657 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.116279078 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.12341331 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.148129444 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.129976183 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.113813576 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.141414479 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.110598022 seconds)
  done (took 2.025543488 seconds)
done (took 33.402426107 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/33) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.125342664 seconds)
    (2/33) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.11933703 seconds)
    (3/33) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.119997025 seconds)
    (4/33) benchmarking ("Set", "Any", "loop")...
    done (took 0.141473955 seconds)
    (5/33) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.172630043 seconds)
    (6/33) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.134282621 seconds)
    (7/33) benchmarking ("Vector", "String", "loop")...
    done (took 0.117215152 seconds)
    (8/33) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.107189631 seconds)
    (9/33) benchmarking ("Vector", "Int", "loop")...
    done (took 0.138994694 seconds)
    (10/33) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.123031344 seconds)
    (11/33) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.099064044 seconds)
    (12/33) benchmarking ("Dict", "String", "loop")...
    done (took 0.106801903 seconds)
    (13/33) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.148259513 seconds)
    (14/33) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.111496084 seconds)
    (15/33) benchmarking ("Set", "String", "iterator")...
    done (took 0.200406552 seconds)
    (16/33) benchmarking ("Set", "String", "loop")...
    done (took 0.11535801 seconds)
    (17/33) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.204727012 seconds)
    (18/33) benchmarking ("Set", "Any", "iterator")...
    done (took 0.174496604 seconds)
    (19/33) benchmarking ("Set", "Int", "loop")...
    done (took 0.136015063 seconds)
    (20/33) benchmarking ("Vector", "Any", "loop")...
    done (took 0.115450553 seconds)
    (21/33) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.109808848 seconds)
    (22/33) benchmarking ("Dict", "String", "iterator")...
    done (took 0.206488879 seconds)
    (23/33) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.111588777 seconds)
    (24/33) benchmarking ("Dict", "Int", "loop")...
    done (took 0.1082222 seconds)
    (25/33) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.203677212 seconds)
    (26/33) benchmarking ("Vector", "String", "iterator")...
    done (took 0.102965025 seconds)
    (27/33) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.197202099 seconds)
    (28/33) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.111470713 seconds)
    (29/33) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.137442635 seconds)
    (30/33) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.123793333 seconds)
    (31/33) benchmarking ("Set", "Int", "iterator")...
    done (took 0.174873563 seconds)
    (32/33) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.139531159 seconds)
    (33/33) benchmarking ("Dict", "Any", "loop")...
    done (took 0.108742825 seconds)
  done (took 5.562632407 seconds)
  (2/6) benchmarking "iteration"...
    (1/30) benchmarking ("Set", "String", "next")...
    done (took 0.190301979 seconds)
    (2/30) benchmarking ("Set", "Any", "start")...
    done (took 0.111222102 seconds)
    (3/30) benchmarking ("Set", "Int", "done")...
    done (took 0.136399812 seconds)
    (4/30) benchmarking ("Dict", "Int", "done")...
    done (took 0.10958504 seconds)
    (5/30) benchmarking ("Dict", "String", "start")...
    done (took 0.109071575 seconds)
    (6/30) benchmarking ("BitSet", "Int", "done")...
    done (took 0.134298093 seconds)
    (7/30) benchmarking ("Dict", "String", "next")...
    done (took 0.192610088 seconds)
    (8/30) benchmarking ("Vector", "Int", "done")...
    done (took 0.135710773 seconds)
    (9/30) benchmarking ("Vector", "String", "done")...
    done (took 0.108578599 seconds)
    (10/30) benchmarking ("Vector", "Any", "done")...
    done (took 0.108502744 seconds)
    (11/30) benchmarking ("Dict", "String", "done")...
    done (took 0.107608635 seconds)
    (12/30) benchmarking ("Vector", "Int", "next")...
    done (took 0.204684036 seconds)
    (13/30) benchmarking ("Set", "Int", "next")...
    done (took 0.114468273 seconds)
    (14/30) benchmarking ("Vector", "Int", "start")...
    done (took 0.131968586 seconds)
    (15/30) benchmarking ("Dict", "Int", "start")...
    done (took 0.113327658 seconds)
    (16/30) benchmarking ("Vector", "Any", "next")...
    done (took 0.099515396 seconds)
    (17/30) benchmarking ("Dict", "Any", "next")...
    done (took 0.220616127 seconds)
    (18/30) benchmarking ("Set", "String", "start")...
    done (took 0.112350947 seconds)
    (19/30) benchmarking ("Vector", "String", "next")...
    done (took 0.099598289 seconds)
    (20/30) benchmarking ("Set", "Any", "next")...
    done (took 0.083024628 seconds)
    (21/30) benchmarking ("Vector", "String", "start")...
    done (took 0.131256933 seconds)
    (22/30) benchmarking ("Dict", "Any", "done")...
    done (took 0.108725244 seconds)
    (23/30) benchmarking ("Dict", "Int", "next")...
    done (took 0.232591421 seconds)
    (24/30) benchmarking ("Vector", "Any", "start")...
    done (took 0.104678959 seconds)
    (25/30) benchmarking ("Set", "String", "done")...
    done (took 0.108622767 seconds)
    (26/30) benchmarking ("Set", "Any", "done")...
    done (took 0.13586342 seconds)
    (27/30) benchmarking ("Set", "Int", "start")...
    done (took 0.113666712 seconds)
    (28/30) benchmarking ("BitSet", "Int", "next")...
    done (took 0.114149031 seconds)
    (29/30) benchmarking ("BitSet", "Int", "start")...
    done (took 0.110580043 seconds)
    (30/30) benchmarking ("Dict", "Any", "start")...
    done (took 0.138030865 seconds)
  done (took 4.955771739 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.114371611 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.120919016 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.127173987 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.201733568 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.137438016 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.147001308 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.128956798 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.122684417 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.157859324 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.103904583 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.117453736 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.16511888 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.118658686 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.112944828 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.132813982 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.123354188 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.123348978 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.129219247 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.111223113 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.1199106 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.148993146 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.121593664 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.126145553 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.137521796 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.10414641 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.109542598 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.137924776 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.119552086 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.110950525 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.115931415 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.133017574 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.106832327 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.105634046 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.164851963 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.104777123 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.115413286 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.154665295 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.115686363 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.11624493 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.160980475 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.107262114 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.104153981 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.154751025 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.156068231 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.104377792 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.144491602 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.116079534 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.116207325 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.129089377 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.123209052 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.143884685 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.12906954 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.123746493 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.100947446 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.12737599 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.112087077 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.102679558 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.133685324 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.118084316 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.10504916 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.152191995 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.110999901 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.113319124 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.131069861 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.114787574 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.102454188 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.101178341 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.133718631 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.130048539 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.110681579 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.165706476 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.103543718 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.113982076 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.142335281 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.114409893 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.115262709 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.128310885 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.114946 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.113756932 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.107895 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.142418499 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.108416979 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.10624412 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.147180774 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.124027105 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.116019355 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.143001109 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.116914253 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.105661332 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.132407165 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.121303781 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.104433538 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.134281772 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.11712457 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.103064769 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.132013346 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.117596449 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.114988511 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.101354662 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.155834086 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.10700083 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.1019357 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.155411865 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.107353635 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.108161936 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.1398654 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.145418508 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.102683097 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.141534642 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.118346793 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.104793203 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.137011738 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.107617584 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.102666055 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.148128323 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.1197986 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.111035016 seconds)
  done (took 15.537384659 seconds)
  (4/6) benchmarking "optimizations"...
    (1/20) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.297855416 seconds)
    (2/20) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.256733606 seconds)
    (3/20) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.197326204 seconds)
    (4/20) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.287304442 seconds)
    (5/20) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.115850068 seconds)
    (6/20) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.219210308 seconds)
    (7/20) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.28356531 seconds)
    (8/20) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.285247779 seconds)
    (9/20) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.102767635 seconds)
    (10/20) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.167018745 seconds)
    (11/20) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.153366829 seconds)
    (12/20) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.253162723 seconds)
    (13/20) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.131682645 seconds)
    (14/20) benchmarking ("BitSet", "Int8")...
    done (took 0.133084234 seconds)
    (15/20) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.286658693 seconds)
    (16/20) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.338409946 seconds)
    (17/20) benchmarking ("BitSet", "UInt16")...
    done (took 0.158306696 seconds)
    (18/20) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.141987781 seconds)
    (19/20) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.166678117 seconds)
    (20/20) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.117547764 seconds)
  done (took 5.139813052 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/79) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.122809525 seconds)
    (2/79) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.137781027 seconds)
    (3/79) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.152500817 seconds)
    (4/79) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.131390432 seconds)
    (5/79) benchmarking ("BitSet", "Int", "last")...
    done (took 0.114401965 seconds)
    (6/79) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.147336564 seconds)
    (7/79) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.104970625 seconds)
    (8/79) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.125303109 seconds)
    (9/79) benchmarking ("BitSet", "Int", "first")...
    done (took 0.144351717 seconds)
    (10/79) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.113627172 seconds)
    (11/79) benchmarking ("Vector", "String", "push!")...
    done (took 0.106117259 seconds)
    (12/79) benchmarking ("Set", "String", "in", "false")...
    done (took 0.146913024 seconds)
    (13/79) benchmarking ("BitSet", "Int", "length")...
    done (took 0.117963042 seconds)
    (14/79) benchmarking ("Set", "Int", "first")...
    done (took 0.119655012 seconds)
    (15/79) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.146271156 seconds)
    (16/79) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.137865292 seconds)
    (17/79) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.111067881 seconds)
    (18/79) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.135322402 seconds)
    (19/79) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.128214071 seconds)
    (20/79) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.108662705 seconds)
    (21/79) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.119917738 seconds)
    (22/79) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.131522619 seconds)
    (23/79) benchmarking ("Dict", "String", "getindex")...
    done (took 0.111360503 seconds)
    (24/79) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.151843781 seconds)
    (25/79) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.124268567 seconds)
    (26/79) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.114194378 seconds)
    (27/79) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.128637842 seconds)
    (28/79) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.109652581 seconds)
    (29/79) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.109800855 seconds)
    (30/79) benchmarking ("Vector", "Int", "last")...
    done (took 0.138562235 seconds)
    (31/79) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.110909668 seconds)
    (32/79) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.121671145 seconds)
    (33/79) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.137015449 seconds)
    (34/79) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.095974401 seconds)
    (35/79) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.115743831 seconds)
    (36/79) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.117741531 seconds)
    (37/79) benchmarking ("Vector", "Int", "length")...
    done (took 0.13794012 seconds)
    (38/79) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.108098292 seconds)
    (39/79) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.107384679 seconds)
    (40/79) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.133020527 seconds)
    (41/79) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.120591904 seconds)
    (42/79) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.116755303 seconds)
    (43/79) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.137683343 seconds)
    (44/79) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.089521915 seconds)
    (45/79) benchmarking ("Dict", "Int", "first")...
    done (took 0.124456553 seconds)
    (46/79) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.100165483 seconds)
    (47/79) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.143620634 seconds)
    (48/79) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.117610857 seconds)
    (49/79) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.098107533 seconds)
    (50/79) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.123020202 seconds)
    (51/79) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.143425219 seconds)
    (52/79) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.118961787 seconds)
    (53/79) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.110491837 seconds)
    (54/79) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.153055232 seconds)
    (55/79) benchmarking ("Dict", "Int", "length")...
    done (took 0.112162584 seconds)
    (56/79) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.120224358 seconds)
    (57/79) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.141766733 seconds)
    (58/79) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.118945184 seconds)
    (59/79) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.108335427 seconds)
    (60/79) benchmarking ("Vector", "Int", "push!")...
    done (took 0.128263652 seconds)
    (61/79) benchmarking ("Vector", "String", "getindex")...
    done (took 0.104000975 seconds)
    (62/79) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.107548246 seconds)
    (63/79) benchmarking ("Vector", "Int", "first")...
    done (took 0.112805585 seconds)
    (64/79) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.146226239 seconds)
    (65/79) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.116676076 seconds)
    (66/79) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.149776002 seconds)
    (67/79) benchmarking ("Set", "String", "in", "true")...
    done (took 0.120410756 seconds)
    (68/79) benchmarking ("Vector", "Any", "push!")...
    done (took 0.104921314 seconds)
    (69/79) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.132554838 seconds)
    (70/79) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.108870002 seconds)
    (71/79) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.10793711 seconds)
    (72/79) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.117124288 seconds)
    (73/79) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.15120047 seconds)
    (74/79) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.113064133 seconds)
    (75/79) benchmarking ("Set", "Int", "length")...
    done (took 0.110867436 seconds)
    (76/79) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.142333719 seconds)
    (77/79) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.113072312 seconds)
    (78/79) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.085680229 seconds)
    (79/79) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.137981516 seconds)
  done (took 10.743629946 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("Dict", "Int", "filter")...
    done (took 0.128528042 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.115575064 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.122403281 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.165822823 seconds)
    (5/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.117735002 seconds)
    (6/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.109873253 seconds)
    (7/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.142137397 seconds)
    (8/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.124378569 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.117568546 seconds)
    (10/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.150158515 seconds)
    (11/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.12036744 seconds)
    (12/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.116638647 seconds)
    (13/28) benchmarking ("Dict", "Any", "filter")...
    done (took 0.15259873 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.116068958 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.113185475 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.147360605 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.119231672 seconds)
    (18/28) benchmarking ("Dict", "String", "filter")...
    done (took 0.139558063 seconds)
    (19/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.150305039 seconds)
    (20/28) benchmarking ("Dict", "Int", "filter!")...
    done (took 0.132519457 seconds)
    (21/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.119006911 seconds)
    (22/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.138676011 seconds)
    (23/28) benchmarking ("Set", "String", "filter")...
    done (took 0.117241831 seconds)
    (24/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.114683635 seconds)
    (25/28) benchmarking ("Dict", "String", "filter!")...
    done (took 0.160450139 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.11653691 seconds)
    (27/28) benchmarking ("Dict", "Any", "filter!")...
    done (took 0.130252087 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.147552703 seconds)
  done (took 4.699369835 seconds)
done (took 47.665324315 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 2.205060886 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.366466645 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 2.148390593 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.145030958 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 2.172320502 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 2.155329988 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.150217494 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 2.151082683 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 3.475352798 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 2.115167993 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.146915373 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 2.148157679 seconds)
done (took 27.435310217 seconds)
(2/20) benchmarking "string"...
  (1/4) benchmarking "join"...
  done (took 2.15363982 seconds)
  (2/4) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.690035599 seconds)
    (2/2) benchmarking "String"...
    done (took 1.462720031 seconds)
  done (took 4.200414358 seconds)
  (3/4) benchmarking "replace"...
  done (took 2.136998638 seconds)
  (4/4) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 2.136877719 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.383399762 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 2.136019563 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 2.153554139 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.137106029 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.137845408 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.138954019 seconds)
  done (took 15.270791877 seconds)
done (took 24.809824699 seconds)
(3/20) benchmarking "linalg"...
  (1/2) benchmarking "factorization"...
    (1/64) benchmarking ("eig", "LowerTriangular", 1024)...
    done (took 2.164448992 seconds)
    (2/64) benchmarking ("svdfact", "UpperTriangular", 1024)...
    done (took 2.307247632 seconds)
    (3/64) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.371632354 seconds)
    (4/64) benchmarking ("eigfact", "UpperTriangular", 256)...
    done (took 2.137275182 seconds)
    (5/64) benchmarking ("qr", "Matrix", 256)...
    done (took 2.143255037 seconds)
    (6/64) benchmarking ("lu", "Matrix", 256)...
    done (took 2.138431571 seconds)
    (7/64) benchmarking ("eig", "SymTridiagonal", 256)...
    done (took 2.160564143 seconds)
    (8/64) benchmarking ("qrfact", "Matrix", 1024)...
    done (took 2.153447217 seconds)
    (9/64) benchmarking ("eigfact", "Diagonal", 256)...
    done (took 2.148752014 seconds)
    (10/64) benchmarking ("eig", "LowerTriangular", 256)...
    done (took 2.140171561 seconds)
    (11/64) benchmarking ("lufact", "Tridiagonal", 1024)...
    done (took 1.529071783 seconds)
    (12/64) benchmarking ("schurfact", "Matrix", 1024)...
    done (took 2.395549074 seconds)
    (13/64) benchmarking ("eig", "Bidiagonal", 1024)...
    done (took 2.150950333 seconds)
    (14/64) benchmarking ("eigfact", "Matrix", 1024)...
    done (took 2.503688856 seconds)
    (15/64) benchmarking ("eig", "UpperTriangular", 256)...
    done (took 2.13837836 seconds)
    (16/64) benchmarking ("svdfact", "Matrix", 256)...
    done (took 2.159988504 seconds)
    (17/64) benchmarking ("lufact", "Matrix", 256)...
    done (took 2.137406177 seconds)
    (18/64) benchmarking ("svd", "Matrix", 1024)...
    done (took 2.374695777 seconds)
    (19/64) benchmarking ("qrfact", "Matrix", 256)...
    done (took 2.139941264 seconds)
    (20/64) benchmarking ("eigfact", "Matrix", 256)...
    done (took 2.180613203 seconds)
    (21/64) benchmarking ("svd", "Diagonal", 256)...
    done (took 2.117115594 seconds)
    (22/64) benchmarking ("svdfact", "Diagonal", 256)...
    done (took 2.117065992 seconds)
    (23/64) benchmarking ("lufact", "Matrix", 1024)...
    done (took 2.17032322 seconds)
    (24/64) benchmarking ("schur", "Matrix", 256)...
    done (took 2.138697933 seconds)
    (25/64) benchmarking ("eigfact", "SymTridiagonal", 1024)...
    done (took 2.141486587 seconds)
    (26/64) benchmarking ("svd", "LowerTriangular", 256)...
    done (took 2.141046954 seconds)
    (27/64) benchmarking ("eig", "UpperTriangular", 1024)...
    done (took 2.193845409 seconds)
    (28/64) benchmarking ("eig", "Bidiagonal", 256)...
    done (took 2.140665127 seconds)
    (29/64) benchmarking ("svdfact", "LowerTriangular", 1024)...
    done (took 2.303136187 seconds)
    (30/64) benchmarking ("lu", "Matrix", 1024)...
    done (took 2.143310243 seconds)
    (31/64) benchmarking ("eig", "Matrix", 256)...
    done (took 2.167684844 seconds)
    (32/64) benchmarking ("eigfact", "SymTridiagonal", 256)...
    done (took 2.143000076 seconds)
    (33/64) benchmarking ("eigfact", "UpperTriangular", 1024)...
    done (took 2.187618861 seconds)
    (34/64) benchmarking ("svdfact", "Bidiagonal", 256)...
    done (took 2.143067955 seconds)
    (35/64) benchmarking ("lu", "Tridiagonal", 256)...
    done (took 2.149457935 seconds)
    (36/64) benchmarking ("svd", "UpperTriangular", 256)...
    done (took 2.151462925 seconds)
    (37/64) benchmarking ("svd", "UpperTriangular", 1024)...
    done (took 2.319820342 seconds)
    (38/64) benchmarking ("eig", "SymTridiagonal", 1024)...
    done (took 2.142289275 seconds)
    (39/64) benchmarking ("svd", "Diagonal", 1024)...
    done (took 2.12162655 seconds)
    (40/64) benchmarking ("eigfact", "Diagonal", 1024)...
    done (took 2.158907026 seconds)
    (41/64) benchmarking ("svd", "LowerTriangular", 1024)...
    done (took 2.312885671 seconds)
    (42/64) benchmarking ("lu", "Tridiagonal", 1024)...
    done (took 2.161361233 seconds)
    (43/64) benchmarking ("cholfact", "Matrix", 256)...
    done (took 2.151109857 seconds)
    (44/64) benchmarking ("eig", "Diagonal", 1024)...
    done (took 2.139814483 seconds)
    (45/64) benchmarking ("eigfact", "LowerTriangular", 256)...
    done (took 2.1441544 seconds)
    (46/64) benchmarking ("eigfact", "LowerTriangular", 1024)...
    done (took 2.162449962 seconds)
    (47/64) benchmarking ("svdfact", "Diagonal", 1024)...
    done (took 2.139492357 seconds)
    (48/64) benchmarking ("lufact", "Tridiagonal", 256)...
    done (took 1.247473037 seconds)
    (49/64) benchmarking ("svd", "Bidiagonal", 256)...
    done (took 2.162457445 seconds)
    (50/64) benchmarking ("eig", "Diagonal", 256)...
    done (took 2.157106589 seconds)
    (51/64) benchmarking ("svd", "Bidiagonal", 1024)...
    done (took 2.189981999 seconds)
    (52/64) benchmarking ("eig", "Matrix", 1024)...
    done (took 2.500902237 seconds)
    (53/64) benchmarking ("svdfact", "UpperTriangular", 256)...
    done (took 2.149961697 seconds)
    (54/64) benchmarking ("chol", "Matrix", 1024)...
    done (took 2.166164117 seconds)
    (55/64) benchmarking ("svdfact", "LowerTriangular", 256)...
    done (took 2.142278236 seconds)
    (56/64) benchmarking ("svdfact", "Matrix", 1024)...
    done (took 2.34371573 seconds)
    (57/64) benchmarking ("svd", "Matrix", 256)...
    done (took 2.143446429 seconds)
    (58/64) benchmarking ("qr", "Matrix", 1024)...
    done (took 2.1852921 seconds)
    (59/64) benchmarking ("schurfact", "Matrix", 256)...
    done (took 2.161189464 seconds)
    (60/64) benchmarking ("cholfact", "Matrix", 1024)...
    done (took 2.166566009 seconds)
    (61/64) benchmarking ("chol", "Matrix", 256)...
    done (took 2.153055693 seconds)
    (62/64) benchmarking ("eigfact", "Bidiagonal", 256)...
    done (took 2.14094578 seconds)
    (63/64) benchmarking ("svdfact", "Bidiagonal", 1024)...
    done (took 2.150084598 seconds)
    (64/64) benchmarking ("eigfact", "Bidiagonal", 1024)...
    done (took 2.159737084 seconds)
  done (took 139.448213033 seconds)
  (2/2) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 2.141170334 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 2.144428965 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 2.144493862 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 2.14609531 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 2.145190198 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.145142259 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.141975591 seconds)
    (8/36) benchmarking "gemv"...
    done (took 2.142126392 seconds)
    (9/36) benchmarking "syr!"...
    done (took 2.143918423 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 2.171718122 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 2.145994035 seconds)
    (12/36) benchmarking "her!"...
    done (took 2.145531417 seconds)
    (13/36) benchmarking "trsv"...
    done (took 2.145669254 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.090663001 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.150530082 seconds)
    (16/36) benchmarking "herk!"...
    done (took 2.162990091 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.145004057 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.14525639 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.172006218 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.142702148 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 2.151287294 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 2.14550672 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 2.14243568 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.1415133 seconds)
    (25/36) benchmarking "symm"...
    done (took 2.182176124 seconds)
    (26/36) benchmarking "herk"...
    done (took 2.216612681 seconds)
    (27/36) benchmarking "syrk"...
    done (took 2.160250376 seconds)
    (28/36) benchmarking "trsm"...
    done (took 2.163004425 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.155463531 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.13995598 seconds)
    (31/36) benchmarking "gemm"...
    done (took 2.176736036 seconds)
    (32/36) benchmarking "symm!"...
    done (took 2.149240779 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.716319735 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.012839296 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 2.150668023 seconds)
    (36/36) benchmarking "trmm"...
    done (took 2.152654573 seconds)
  done (took 77.92200667 seconds)
done (took 218.418692802 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.034674512 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 1.982886402 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.122136218 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 1.991860823 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 1.97341122 seconds)
  done (took 11.157579963 seconds)
done (took 12.209903103 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/13) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 1.328273949 seconds)
    (2/13) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 1.33325195 seconds)
    (3/13) benchmarking ("BitArray{1}", "90-10")...
    done (took 1.204756547 seconds)
    (4/13) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 1.335550976 seconds)
    (5/13) benchmarking ("BitArray{1}", "50-50")...
    done (took 1.178339705 seconds)
    (6/13) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 1.346320656 seconds)
    (7/13) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 1.318800831 seconds)
    (8/13) benchmarking ("Array{Bool,1}", "10-90")...
    done (took 1.161105909 seconds)
    (9/13) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 1.251657473 seconds)
    (10/13) benchmarking ("Array{Bool,1}", "90-10")...
    done (took 1.222949335 seconds)
    (11/13) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 1.25236945 seconds)
    (12/13) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 1.195913257 seconds)
    (13/13) benchmarking ("BitArray{1}", "10-90")...
    done (took 1.175837575 seconds)
  done (took 17.358789639 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 1.426752957 seconds)
    (2/11) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 2.158738941 seconds)
    (3/11) benchmarking ("BitArray{1}", "90-10")...
    done (took 1.211782895 seconds)
    (4/11) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 1.406066648 seconds)
    (5/11) benchmarking ("BitArray{1}", "50-50")...
    done (took 1.192959853 seconds)
    (6/11) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 1.445321777 seconds)
    (7/11) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 1.468251459 seconds)
    (8/11) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 2.159806162 seconds)
    (9/11) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 1.300587663 seconds)
    (10/11) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 1.189310603 seconds)
    (11/11) benchmarking ("BitArray{1}", "10-90")...
    done (took 1.168133404 seconds)
  done (took 17.182675425 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 1.426598745 seconds)
    (2/11) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 2.158854392 seconds)
    (3/11) benchmarking ("BitArray{1}", "90-10")...
    done (took 1.215548729 seconds)
    (4/11) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 1.408687642 seconds)
    (5/11) benchmarking ("BitArray{1}", "50-50")...
    done (took 1.193980853 seconds)
    (6/11) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 1.421857815 seconds)
    (7/11) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 1.455334713 seconds)
    (8/11) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 2.160892756 seconds)
    (9/11) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 1.302565211 seconds)
    (10/11) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 1.168194616 seconds)
    (11/11) benchmarking ("BitArray{1}", "10-90")...
    done (took 1.169091492 seconds)
  done (took 17.136146407 seconds)
done (took 52.730607716 seconds)
(6/20) benchmarking "tuple"...
  (1/3) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.181777823 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 1.241768162 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.181193633 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.166602552 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.162505993 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.161980064 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.166550289 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.163238147 seconds)
  done (took 10.48078881 seconds)
  (2/3) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.162597548 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.160709861 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.161133853 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.161902708 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.160300228 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.161155017 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.161326323 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.160664547 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.162420715 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.160631781 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.16064393 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.161562718 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.161544405 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.161893287 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.16028937 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.160835287 seconds)
  done (took 19.635906232 seconds)
  (3/3) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.164429558 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 1.161865325 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 1.163646178 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 1.163530555 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.162777843 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.16289088 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 1.162234808 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 1.161953327 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 1.161238152 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 1.162096278 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 1.162143119 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 1.161859103 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 1.163531328 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 1.162284371 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.162416522 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 1.163380451 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.162549933 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 1.163155219 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 1.167340747 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 1.161846489 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 1.162461216 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 1.162613498 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 1.162292187 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 1.163169708 seconds)
  done (took 28.964181987 seconds)
done (took 60.136501421 seconds)
(7/20) benchmarking "dates"...
  (1/6) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.162723379 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.149820259 seconds)
  done (took 5.371132688 seconds)
  (2/6) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.219481841 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.219569003 seconds)
  done (took 3.499253546 seconds)
  (3/6) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.163678411 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.163002547 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.162400615 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.163239914 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.164090646 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.163157818 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.163907379 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.166103878 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.163857059 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.163850897 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.163605584 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.162464425 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.164147762 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.163935182 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.163335363 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.1654534 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.163871633 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.164069551 seconds)
  done (took 22.00708221 seconds)
  (4/6) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.178224169 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.182538408 seconds)
  done (took 3.419369393 seconds)
  (5/6) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.291662056 seconds)
    (2/7) benchmarking "second"...
    done (took 1.205875438 seconds)
    (3/7) benchmarking "month"...
    done (took 1.267176366 seconds)
    (4/7) benchmarking "year"...
    done (took 1.261110313 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.206517728 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.185000149 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.206657193 seconds)
  done (took 9.683183002 seconds)
  (6/6) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.166432715 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.378757798 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.507865893 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.779953514 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.165386036 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.169388527 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.099906713 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.168664396 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.172401313 seconds)
  done (took 13.667432517 seconds)
done (took 58.703884862 seconds)
(8/20) benchmarking "micro"...
  (1/7) benchmarking "quicksort"...
  done (took 2.159279056 seconds)
  (2/7) benchmarking "parseint"...
  done (took 2.212326798 seconds)
  (3/7) benchmarking "randmatstat"...
  done (took 2.169360149 seconds)
  (4/7) benchmarking "pisum"...
  done (took 2.167985959 seconds)
  (5/7) benchmarking "fib"...
  done (took 1.525166115 seconds)
  (6/7) benchmarking "randmatmul"...
  done (took 2.205529358 seconds)
  (7/7) benchmarking "mandel"...
  done (took 2.155480494 seconds)
done (took 15.655439333 seconds)
(9/20) benchmarking "io"...
  (1/2) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 2.140311003 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.13719131 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 2.143784306 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 2.164483324 seconds)
  done (took 9.644938215 seconds)
  (2/2) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.156966276 seconds)
    (2/2) benchmarking "read"...
    done (took 1.475699065 seconds)
  done (took 4.693283432 seconds)
done (took 15.399484017 seconds)
(10/20) benchmarking "scalar"...
  (1/23) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.166152698 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.166832701 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.167365857 seconds)
    (4/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.165448039 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.166230895 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.169088869 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.168604865 seconds)
    (8/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.167570357 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.166742873 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.167926071 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.168094543 seconds)
    (12/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.167364721 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.168612616 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.167869586 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.167905049 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.168507883 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.168038265 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.167687653 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.169053605 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.166229455 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.16859401 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.168683856 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.167562562 seconds)
    (24/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.167983123 seconds)
  done (took 29.084870432 seconds)
  (2/23) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.168780071 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.169092298 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.166464181 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.16886922 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.167379622 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.167853962 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.167607558 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.167962792 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.167634719 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.16905203 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.166822121 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.166912996 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.168725474 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.168489496 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.167575928 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.168790199 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.16865337 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.170662161 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.168642299 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.167742799 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.16983982 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.167409336 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.169567186 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.16850288 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.168441232 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.168678756 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.16777678 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.169412464 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.167923164 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.170261723 seconds)
  done (took 36.113434713 seconds)
  (3/23) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.171459326 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.171227051 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.168452706 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.16983771 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.169771576 seconds)
    (6/72) benchmarking ("isodd", "UInt64")...
    done (took 1.169224179 seconds)
    (7/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.170753702 seconds)
    (8/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.169986851 seconds)
    (9/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.169061219 seconds)
    (10/72) benchmarking ("isnan", "Float64")...
    done (took 1.169364468 seconds)
    (11/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.170713194 seconds)
    (12/72) benchmarking ("isequal", "Float64")...
    done (took 1.169604105 seconds)
    (13/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.169369308 seconds)
    (14/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.169202068 seconds)
    (15/72) benchmarking ("isnan", "Complex{Float32}")...
    done (took 1.170556411 seconds)
    (16/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.169730072 seconds)
    (17/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.169663425 seconds)
    (18/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.169324987 seconds)
    (19/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.169425361 seconds)
    (20/72) benchmarking ("isequal", "Complex{Float64}")...
    done (took 1.169766025 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.170483507 seconds)
    (22/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.17000035 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 1.172474581 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.170499836 seconds)
    (25/72) benchmarking ("isequal", "UInt64")...
    done (took 1.169715809 seconds)
    (26/72) benchmarking ("isinteger", "Int64")...
    done (took 1.170657627 seconds)
    (27/72) benchmarking ("isfinite", "Float64")...
    done (took 1.171415127 seconds)
    (28/72) benchmarking ("isequal", "Int64")...
    done (took 1.170528692 seconds)
    (29/72) benchmarking ("isinf", "Float64")...
    done (took 1.171547294 seconds)
    (30/72) benchmarking ("isless", "UInt64")...
    done (took 1.169482054 seconds)
    (31/72) benchmarking ("isequal", "BigInt")...
    done (took 1.170441611 seconds)
    (32/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.171313746 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 1.171318573 seconds)
    (34/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.170419791 seconds)
    (35/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.169955934 seconds)
    (36/72) benchmarking ("isless", "Float64")...
    done (took 1.170485716 seconds)
    (37/72) benchmarking ("iseven", "BigInt")...
    done (took 1.173191035 seconds)
    (38/72) benchmarking ("isnan", "BigInt")...
    done (took 1.172283958 seconds)
    (39/72) benchmarking ("isequal", "Complex{Float32}")...
    done (took 1.170664617 seconds)
    (40/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.171617758 seconds)
    (41/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.17104177 seconds)
    (42/72) benchmarking ("isnan", "Float32")...
    done (took 1.173046841 seconds)
    (43/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.17094233 seconds)
    (44/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.171734124 seconds)
    (45/72) benchmarking ("iseven", "Int64")...
    done (took 1.171602335 seconds)
    (46/72) benchmarking ("isinteger", "Float64")...
    done (took 1.1721258 seconds)
    (47/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.17240314 seconds)
    (48/72) benchmarking ("isfinite", "Complex{Float32}")...
    done (took 1.171977686 seconds)
    (49/72) benchmarking ("isnan", "Complex{Float64}")...
    done (took 1.172159765 seconds)
    (50/72) benchmarking ("isinteger", "Complex{Float32}")...
    done (took 1.17273719 seconds)
    (51/72) benchmarking ("isinf", "Int64")...
    done (took 1.170969854 seconds)
    (52/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.172674174 seconds)
    (53/72) benchmarking ("isinf", "Complex{Float32}")...
    done (took 1.171402907 seconds)
    (54/72) benchmarking ("isfinite", "Complex{Float64}")...
    done (took 1.172905689 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.172958095 seconds)
    (56/72) benchmarking ("isnan", "Int64")...
    done (took 1.171738391 seconds)
    (57/72) benchmarking ("isinteger", "Float32")...
    done (took 1.172465388 seconds)
    (58/72) benchmarking ("isnan", "UInt64")...
    done (took 1.172693747 seconds)
    (59/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.172029666 seconds)
    (60/72) benchmarking ("isless", "Int64")...
    done (took 1.173070894 seconds)
    (61/72) benchmarking ("isinf", "BigInt")...
    done (took 1.174013873 seconds)
    (62/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.174786303 seconds)
    (63/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.171438897 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.172076121 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.173665691 seconds)
    (66/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.173558986 seconds)
    (67/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.173842488 seconds)
    (68/72) benchmarking ("isinteger", "Complex{Float64}")...
    done (took 1.173144253 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.171814516 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.17417785 seconds)
    (71/72) benchmarking ("isinf", "Complex{Float64}")...
    done (took 1.174240789 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.173842579 seconds)
  done (took 85.402462415 seconds)
  (4/23) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.174529008 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.175264586 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.173542673 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.172359343 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.173394945 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.173444371 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.172613582 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.172504999 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.172879425 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.175419213 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.173439901 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.173354654 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.175386709 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.174627515 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.175368522 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.173377534 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.174756742 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.173179171 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.173743748 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.175218459 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.175886383 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.17479538 seconds)
  done (took 26.896475455 seconds)
  (5/23) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.176142016 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.17657166 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.174286822 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.176319246 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.175714755 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.176527164 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.174970729 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.176400684 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.174224257 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.175696583 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.173448575 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.175279872 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.176563548 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.175914419 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.175870782 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.178977201 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.175086808 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.17668089 seconds)
  done (took 22.23275846 seconds)
  (6/23) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.175971576 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.174730423 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.175258666 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.176962083 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.177091896 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.17508663 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.176790983 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.176007564 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.175565607 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.175524653 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.175906537 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.176781886 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.177070556 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.176121143 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.17682446 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.178093121 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.17626026 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.17623211 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.177381662 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.176632746 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.177451803 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.178455784 seconds)
  done (took 26.952749585 seconds)
  (7/23) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.176304945 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.177328937 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.177084854 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.17752033 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.176410706 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.178651752 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.17798384 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.177306026 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.179315316 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.176507585 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.177769598 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.177360924 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.178189891 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.177904393 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.178633731 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.177575389 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.178416768 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.17750972 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.17766204 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.177237695 seconds)
  done (took 24.622894569 seconds)
  (8/23) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.18006499 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.177992546 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.178272158 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.178581133 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.178502868 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.179173719 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.178011873 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.179663322 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.177711117 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.180352342 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.178887348 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.179034468 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.178901713 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.17867232 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.178384444 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.179690809 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.180804458 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.179547467 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.179372606 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.17993926 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.179867395 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.181165209 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.178886781 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.180714997 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.180977152 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.179681646 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.180693937 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.180046087 seconds)
  done (took 34.094767978 seconds)
  (9/23) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.179810826 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.180098728 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.178907531 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.179903181 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.17920889 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.17965379 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.181201418 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.180013809 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.179404068 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.178981611 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.181421746 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.180266997 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.179705758 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.179697289 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.179753694 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.181070053 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.179815495 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.180845055 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.181384016 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.181091398 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.180545381 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.180807601 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.181854287 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.181211981 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.182411464 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.180843363 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.181456724 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.183514049 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.182881681 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.180303889 seconds)
  done (took 36.490908374 seconds)
  (10/23) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.201016344 seconds)
    (2/2) benchmarking "in"...
    done (took 1.199307814 seconds)
  done (took 3.473862648 seconds)
  (11/23) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.181068468 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.182277604 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.181623046 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.181279542 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.182835875 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.181797038 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.182152365 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.182002277 seconds)
  done (took 10.528328023 seconds)
  (12/23) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.182737814 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.181494913 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.183583231 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.182654219 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.182910069 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.183343805 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.183090463 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.182628403 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.185061273 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.183730317 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.183457391 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.184896346 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.182003835 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.18494335 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.183377753 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.18357083 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.184018557 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.677455716 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.183909372 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.184172461 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.183712902 seconds)
  done (took 26.42248312 seconds)
  (13/23) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.183635337 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.184585962 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.184375684 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.185149652 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.184403256 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.18538903 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.185097526 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.184368813 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.184762361 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.183861175 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.18450103 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.18464769 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.183820098 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.184845241 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.184634693 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.184955014 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.185101151 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.184230205 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.184445949 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.185484244 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.185413037 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.185287199 seconds)
  done (took 27.139520845 seconds)
  (14/23) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.187184997 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.185425376 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.185551013 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.184815248 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.186135668 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.185541704 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.186141006 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.185034525 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.185285738 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.186710698 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.186831219 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.186295804 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.184800486 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.185715984 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.187206291 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.185760239 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.186272161 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.187299187 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.186427294 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.187224127 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.187029139 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.187186443 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.186944678 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.186901589 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.187798414 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.187436982 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.186478565 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.186460432 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.188256937 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.185996898 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.187453211 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.187650292 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.187886323 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.18540494 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.185939111 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.188816349 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.188415973 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.18780339 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.187829183 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.187269539 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.1883289 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.188613247 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.187710754 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.188266096 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.186350643 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.186153775 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.18841439 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.189377755 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.189784508 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.188031385 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.187536387 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.188167697 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.189172195 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.18759152 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.189487137 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.188041385 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.188942601 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.187912506 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.188975749 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.187781011 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.188267251 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.188316657 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.18861954 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.18918583 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.188425614 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.190178941 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.188100163 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.188485958 seconds)
  done (took 81.820329694 seconds)
  (15/23) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.188952173 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.190106435 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.189977157 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.190463331 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.190708064 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.189416561 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.190168233 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.189104642 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.189490709 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.189844363 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.190693481 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.1909324 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.191577438 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.191443226 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.190588591 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.190623707 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.190459063 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.190061062 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.19034174 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.189052316 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.189519138 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.190328138 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.190742718 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.191668231 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.192958488 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.190505112 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.191023844 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.191201341 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.192423471 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.191512177 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.191123249 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.191021255 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.191476929 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.191249067 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.191111624 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.192986081 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.190980413 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.191974404 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.193409924 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.192226044 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.191588197 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.191438363 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.192714475 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.192954444 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.191035086 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.193643419 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.193815024 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.193960477 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.192748173 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.192433017 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.19328209 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.192756069 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.19342057 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.193172158 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.193427961 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.194611141 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.193555653 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.193430909 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.19396777 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.194014976 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.194507825 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.194393479 seconds)
  done (took 74.966503692 seconds)
  (16/23) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.192433563 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.193511124 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.193587593 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.193422063 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.19466772 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.192861206 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.193086505 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.193055063 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.193471582 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.194862484 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.19390748 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.193354582 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.194451251 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.195059511 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.193867071 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.194908713 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.194422257 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.194872769 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.193381772 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.194114117 seconds)
  done (took 24.961706818 seconds)
  (17/23) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.194074873 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.196130236 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.195628088 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.193360067 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.193996493 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.19496127 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.195073371 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.19498714 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.193686748 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.194480468 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.194718577 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.195770329 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.195317845 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.194389264 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.195724495 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.195696066 seconds)
  done (took 20.202791976 seconds)
  (18/23) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.195169591 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.195577657 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.196318272 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.196898133 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.195799265 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.196713997 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.195801051 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.194032029 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.195092621 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.196591293 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.194757879 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.196080502 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.195380577 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.195488732 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.195854559 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.196160484 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.196064335 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.195510035 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.196527284 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.197580967 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.195837642 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.195314649 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.196415923 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.196554147 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.197416138 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.197168834 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.196171552 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.195770118 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.19662938 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.197689319 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.196910171 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.195907632 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.196512039 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.196167019 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.196833168 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.196424637 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.196888328 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.197821986 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.197349477 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.19761662 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.197104592 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.197261588 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.198127666 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.196842852 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.197222086 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.197194401 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.198536159 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.197167627 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.19846076 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.197984285 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.197849407 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.198390689 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.198147299 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.198581655 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.198180172 seconds)
  done (took 66.905008494 seconds)
  (19/23) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.198187846 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.19892901 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.199326607 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.198600179 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.199980161 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.199872048 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.198908122 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.200136384 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.199081692 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.19860789 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.197450391 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.200299638 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.198644269 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.198516623 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.198999033 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.199531464 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.198890199 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.198784312 seconds)
  done (took 22.671575691 seconds)
  (20/23) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.200843025 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.201670744 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.200257276 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.199470707 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.200363382 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.199407717 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.199395512 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.200451116 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.199877081 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.200550746 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.199951206 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.201673421 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.200362497 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.200605635 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.200009254 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.199563121 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.200267302 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.199317644 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.200492631 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.201219241 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.200476902 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.201128068 seconds)
  done (took 27.4971698 seconds)
  (21/23) benchmarking "intfuncs"...
    (1/12) benchmarking ("nextpow2", "Int64", "+")...
    done (took 1.191877979 seconds)
    (2/12) benchmarking ("prevpow2", "UInt64", "-")...
    done (took 1.191605162 seconds)
    (3/12) benchmarking ("prevpow2", "Int64", "+")...
    done (took 1.19083687 seconds)
    (4/12) benchmarking ("nextpow2", "BigInt", "-")...
    done (took 1.198730552 seconds)
    (5/12) benchmarking ("prevpow2", "UInt64", "+")...
    done (took 1.19360128 seconds)
    (6/12) benchmarking ("prevpow2", "Int64", "-")...
    done (took 1.191703249 seconds)
    (7/12) benchmarking ("nextpow2", "UInt64", "-")...
    done (took 1.192371721 seconds)
    (8/12) benchmarking ("nextpow2", "UInt64", "+")...
    done (took 1.191293322 seconds)
    (9/12) benchmarking ("prevpow2", "BigInt", "+")...
    done (took 1.202291359 seconds)
    (10/12) benchmarking ("prevpow2", "BigInt", "-")...
    done (took 1.206499285 seconds)
    (11/12) benchmarking ("nextpow2", "BigInt", "+")...
    done (took 1.204661911 seconds)
    (12/12) benchmarking ("nextpow2", "Int64", "-")...
    done (took 1.196125601 seconds)
  done (took 15.443307506 seconds)
  (22/23) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.201807491 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.203078968 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.201288281 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.202122257 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.202083055 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.201827795 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.201968159 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.202949775 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.201599507 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.204972353 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.202536471 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.201771911 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.204392286 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.203173561 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.202785673 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.202047917 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.20240276 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.202962235 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.204127578 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.203374854 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.202487411 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.203211665 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.202764902 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.202080077 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.202309124 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.204093587 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.202535857 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.203606439 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.202354378 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.203596231 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.20316931 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.203865113 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.204062333 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.203776306 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.20409316 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.204119001 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.205406473 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.20452434 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.20433598 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.204143693 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.204615272 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.203948508 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.203779605 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.204656631 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.205567534 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.204502291 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.205032548 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.204333501 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.204576413 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.205666097 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.204176204 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.205065586 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.205063902 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.205718927 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.205708484 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.205127905 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.206726603 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.205600458 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.205343183 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.207252445 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.20586688 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.206585001 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.205758159 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.206905612 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.206657567 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.205644428 seconds)
  done (took 80.556907363 seconds)
  (23/23) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.207757149 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.207302055 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.206732925 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.207576618 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.207488149 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.207510022 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.206521191 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.205374849 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.207580078 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.207636332 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.208040843 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.207377138 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.207231564 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.206956614 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.207079841 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.206978043 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.207805938 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.206818175 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.208464021 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.208545353 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.208389217 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.206779794 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.206355748 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.207382505 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.209371976 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.207899109 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.20733986 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.207564277 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.208421438 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.209257353 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.207051783 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.20812764 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.208398354 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.207780466 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.209741472 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.210032377 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.208498018 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.207201118 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.209342443 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.20821676 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.208232263 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.208097044 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.208477544 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.209809942 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.210173627 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.209140496 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.209132713 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.209146364 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.210045147 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.209135936 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.208986285 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.209734095 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.210629396 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.209188659 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.209716925 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.209884808 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.20995433 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.209528498 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.209859443 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.210309892 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.210722501 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.210069123 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.210493746 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.210811402 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.211310821 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.210411972 seconds)
  done (took 80.86114657 seconds)
done (took 886.401441785 seconds)
(11/20) benchmarking "sparse"...
  (1/4) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 1.370600136 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 1.324748617 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.201760076 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 2.208260104 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.201465323 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 2.203815807 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 2.214216181 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.202034094 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 1.200815857 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 1.202002055 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.201282442 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 1.391929081 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 2.239063993 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.20190623 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.201791725 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 1.298663546 seconds)
  done (took 24.963647345 seconds)
  (2/4) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.229477387 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.209521897 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.320001922 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.209091645 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.229629171 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.384291994 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 1.266716673 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 1.211280115 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 1.373940906 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 1.228600782 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.205315185 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.232130704 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 1.2071315 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.204114097 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 1.228792418 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.387252255 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 1.459293572 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.214516454 seconds)
  done (took 26.900655951 seconds)
  (3/4) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.22699112 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.207232114 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.208705916 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.206643522 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 2.199266051 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 2.218219038 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.20582722 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 2.207876484 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.211267182 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 1.332412395 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 1.21431287 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.221535726 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.206609332 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.209071756 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.216053336 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.251083938 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.351418223 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.217152088 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.214290266 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.213435646 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.208280605 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.304602496 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.253009151 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.220093898 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.329234997 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.216203489 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.215125197 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.216397936 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.330934246 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.217185102 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.207968068 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.208949335 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.209537921 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.176390527 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.758921929 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 2.206474244 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.232950024 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.219213572 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.217162567 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.346646529 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.210805949 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.216615305 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 2.203193479 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.75314175 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.318369892 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.330843189 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.206971679 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.213820572 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.210556318 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.273812974 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.211734798 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.210862131 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 1.26891654 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.998651732 seconds)
  done (took 78.564317438 seconds)
  (4/4) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 2.259541713 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.203405501 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.386562437 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 2.227078163 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.204211201 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.222780174 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 2.208395342 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.483569787 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 2.233347195 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.206592352 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.531392642 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.839622039 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 2.217814884 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 2.27115876 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 2.239959652 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 2.266279015 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.218819625 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.21981115 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 2.20695172 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 2.210323768 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.775869476 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.209089965 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.205931665 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 2.299705203 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.246972428 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.744747264 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.213847784 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.205121992 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.213873464 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 2.206600847 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.794621536 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 2.215911848 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 2.254165065 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 2.209912939 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.493558093 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.599924202 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.560217968 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 2.210553244 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 2.244378512 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 2.211624408 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.233777389 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.734122972 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.581974548 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.210480454 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.206733492 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.734621214 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.210631038 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 2.215603573 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.207366926 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.474283598 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.207709678 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.208622881 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.218862384 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 2.211048173 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 2.20625181 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 2.278901163 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 2.291739965 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.748959354 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.212109389 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.208004329 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 2.223288274 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 2.209786926 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 2.210794855 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.208074257 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 2.211643219 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.584450045 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 2.467404262 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 2.21443457 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.58177756 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.787461207 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.211857405 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.875234658 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.209464908 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.232190297 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 2.254335439 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.208040095 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.208591857 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.74264427 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 2.235514683 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 2.207872986 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.560018307 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.21346328 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.521244043 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.228145555 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.208437331 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.802891885 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.214323283 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 2.248214643 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.212268542 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.212640247 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.224907109 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.212028547 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.499009203 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.259123161 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 2.208850838 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 2.211855938 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 2.218790061 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.211052254 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 2.22598585 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.211357237 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.8610103 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.214832302 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.209537202 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.229931164 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.21041198 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 2.213644728 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.211143145 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 2.211698766 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.499285495 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.212414052 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 2.218292209 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 2.213222083 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.210926999 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.221522698 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 2.30370769 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 2.220790186 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.517026634 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 2.215114278 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.210649417 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 2.214244177 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.210248716 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 2.246503049 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.210109039 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 2.23202636 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.211299928 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.51251957 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.227269656 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 2.226047732 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.213341712 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.211204164 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.23480526 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.211345403 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 2.26480919 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 2.213149902 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.084629931 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 2.234782678 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 2.226287272 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.212608955 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 2.226011209 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.211955546 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 2.236776613 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.213813052 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.514897616 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.500274149 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 2.464713937 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.216346371 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.211889329 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.068272429 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 2.218613554 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.397698421 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 2.229726546 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.213133918 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.4929839 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 2.440713089 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 2.213302808 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 2.213446089 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 2.21518411 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.49361832 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.226128518 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.528837904 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.826901364 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.214654026 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 2.216032904 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.082179965 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.024944199 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.218796807 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 2.215010856 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.519674651 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 2.231407396 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 2.214067346 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 2.213975482 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.215617153 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.215181291 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 2.218658283 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 2.215718279 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.21499017 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 2.213941064 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 2.505981675 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.40912052 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 2.231497082 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 2.225069215 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.750313723 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 2.237994296 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.216129628 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 2.226306874 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.216307987 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.215304705 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 2.278216806 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 2.214258886 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 2.26515966 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 2.215841023 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 2.216297886 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.772119476 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.215547786 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.219614053 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.410410099 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.000109224 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.219704728 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.218347305 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.215459143 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 2.273898817 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.778709111 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 2.260001749 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.524302107 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 2.225144419 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.257822281 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.219176893 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 2.226500765 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.781465458 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.22273049 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.231477524 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.962107486 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 2.21858437 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 4.69643281 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 2.218232309 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.219126506 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.888217692 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 2.220279657 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 2.218521019 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.226890051 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.217103806 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.555457327 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 2.220090171 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.224405972 seconds)
  done (took 472.283187017 seconds)
done (took 603.810260769 seconds)
(12/20) benchmarking "broadcast"...
  (1/5) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 2.217903029 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 2.223326301 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 2.201709069 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 2.221868889 seconds)
  done (took 9.981314786 seconds)
  (2/5) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 1.23414128 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 1.224389469 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 1.233749574 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 1.222247384 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 1.235541819 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 1.224082864 seconds)
  done (took 8.49168372 seconds)
  (3/5) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 2.217180787 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 2.222085189 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 2.222717299 seconds)
  done (took 7.779699258 seconds)
  (4/5) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 1.432973694 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.250995275 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 1.573755164 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.226966005 seconds)
  done (took 8.603684074 seconds)
  (5/5) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.23581188 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 1.235744144 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 1.234539894 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 1.235339751 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 1.235904666 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.237302828 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 1.234695127 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.236013419 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 1.237950489 seconds)
  done (took 12.2407794 seconds)
done (took 48.213089643 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/192) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 1.978742568 seconds)
    (2/192) benchmarking ("perf_sum", Int8, true)...
    done (took 1.30198261 seconds)
    (3/192) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 1.289176289 seconds)
    (4/192) benchmarking ("map", identity, Float32, false)...
    done (took 1.286305836 seconds)
    (5/192) benchmarking ("broadcast", abs, Float64, false)...
    done (took 1.369837424 seconds)
    (6/192) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 1.323701959 seconds)
    (7/192) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 1.253938131 seconds)
    (8/192) benchmarking ("map", identity, Int64, false)...
    done (took 1.298364658 seconds)
    (9/192) benchmarking ("perf_countnothing", Int64, false)...
    done (took 1.259986178 seconds)
    (10/192) benchmarking ("broadcast", identity, Bool, true)...
    done (took 1.894028021 seconds)
    (11/192) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 1.329490679 seconds)
    (12/192) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 1.369091428 seconds)
    (13/192) benchmarking ("perf_sum", BigInt, false)...
    done (took 2.239198371 seconds)
    (14/192) benchmarking ("perf_simplecopy", Complex{Float64}, true)...
    done (took 1.408527031 seconds)
    (15/192) benchmarking ("broadcast", abs, Int64, false)...
    done (took 1.37148865 seconds)
    (16/192) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.096640974 seconds)
    (17/192) benchmarking ("map", *, Complex{Float64}, (false, false))...
    done (took 2.204929596 seconds)
    (18/192) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.22766308 seconds)
    (19/192) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 2.204107014 seconds)
    (20/192) benchmarking ("map", abs, Float64, true)...
    done (took 1.448085282 seconds)
    (21/192) benchmarking ("map", identity, BigInt, false)...
    done (took 1.328179314 seconds)
    (22/192) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 1.383258327 seconds)
    (23/192) benchmarking ("perf_sum", Bool, true)...
    done (took 1.304773047 seconds)
    (24/192) benchmarking ("map", identity, BigFloat, false)...
    done (took 1.318740879 seconds)
    (25/192) benchmarking ("map", identity, Bool, false)...
    done (took 1.255907369 seconds)
    (26/192) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 1.328464884 seconds)
    (27/192) benchmarking ("perf_sum", Float32, false)...
    done (took 1.299026639 seconds)
    (28/192) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 1.346179624 seconds)
    (29/192) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 2.215000169 seconds)
    (30/192) benchmarking ("map", abs, Bool, false)...
    done (took 1.253148606 seconds)
    (31/192) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.20834898 seconds)
    (32/192) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.00686505 seconds)
    (33/192) benchmarking ("broadcast", abs, Bool, true)...
    done (took 1.9060039 seconds)
    (34/192) benchmarking ("map", abs, Int64, true)...
    done (took 1.434655568 seconds)
    (35/192) benchmarking ("map", *, Complex{Float64}, (true, true))...
    done (took 2.218871382 seconds)
    (36/192) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 1.325799025 seconds)
    (37/192) benchmarking ("perf_countequals", "Int8")...
    done (took 1.312622663 seconds)
    (38/192) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 2.22559016 seconds)
    (39/192) benchmarking ("perf_sum", Bool, false)...
    done (took 1.292644447 seconds)
    (40/192) benchmarking ("map", identity, Float32, true)...
    done (took 1.390100084 seconds)
    (41/192) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.051711738 seconds)
    (42/192) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 2.206093358 seconds)
    (43/192) benchmarking ("map", identity, Complex{Float64}, true)...
    done (took 1.584756491 seconds)
    (44/192) benchmarking ("map", identity, Float64, false)...
    done (took 1.306595329 seconds)
    (45/192) benchmarking ("perf_countnothing", Int8, false)...
    done (took 1.261221805 seconds)
    (46/192) benchmarking ("perf_sum", BigInt, true)...
    done (took 2.255869027 seconds)
    (47/192) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.078858079 seconds)
    (48/192) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 1.344933489 seconds)
    (49/192) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 1.38343233 seconds)
    (50/192) benchmarking ("perf_sum", BigFloat, false)...
    done (took 2.24153799 seconds)
    (51/192) benchmarking ("perf_sum", Float64, false)...
    done (took 1.295828952 seconds)
    (52/192) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.041013197 seconds)
    (53/192) benchmarking ("broadcast", identity, Int8, true)...
    done (took 1.952985601 seconds)
    (54/192) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.115303001 seconds)
    (55/192) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 1.938756463 seconds)
    (56/192) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 1.312866288 seconds)
    (57/192) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.075075075 seconds)
    (58/192) benchmarking ("perf_countequals", "Float32")...
    done (took 1.321307544 seconds)
    (59/192) benchmarking ("map", abs, Float32, true)...
    done (took 1.392888278 seconds)
    (60/192) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 2.251885122 seconds)
    (61/192) benchmarking ("map", identity, Int8, false)...
    done (took 1.250727759 seconds)
    (62/192) benchmarking ("map", abs, Complex{Float64}, true)...
    done (took 1.483466802 seconds)
    (63/192) benchmarking ("broadcast", identity, Float32, false)...
    done (took 1.357113192 seconds)
    (64/192) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 1.294625423 seconds)
    (65/192) benchmarking ("perf_sum", Complex{Float64}, true)...
    done (took 1.369448767 seconds)
    (66/192) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.202581842 seconds)
    (67/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (true, true))...
    done (took 1.473001859 seconds)
    (68/192) benchmarking ("map", *, Complex{Float64}, (false, true))...
    done (took 2.211712309 seconds)
    (69/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (false, false))...
    done (took 1.479869146 seconds)
    (70/192) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 1.976802815 seconds)
    (71/192) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 2.204423391 seconds)
    (72/192) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 1.262724406 seconds)
    (73/192) benchmarking ("map", identity, BigFloat, true)...
    done (took 1.471584631 seconds)
    (74/192) benchmarking ("perf_countequals", "Int64")...
    done (took 1.313544304 seconds)
    (75/192) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 1.335529904 seconds)
    (76/192) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 1.343269926 seconds)
    (77/192) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 1.343098891 seconds)
    (78/192) benchmarking ("broadcast", identity, Bool, false)...
    done (took 1.342599042 seconds)
    (79/192) benchmarking ("perf_countequals", "Bool")...
    done (took 1.311643143 seconds)
    (80/192) benchmarking ("map", abs, BigInt, true)...
    done (took 2.22745283 seconds)
    (81/192) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.038188109 seconds)
    (82/192) benchmarking ("map", abs, BigFloat, false)...
    done (took 2.208360394 seconds)
    (83/192) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.207606274 seconds)
    (84/192) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.205290171 seconds)
    (85/192) benchmarking ("broadcast", identity, Complex{Float64}, true)...
    done (took 2.193508989 seconds)
    (86/192) benchmarking ("broadcast", abs, Complex{Float64}, false)...
    done (took 1.451297578 seconds)
    (87/192) benchmarking ("perf_sum", Int8, false)...
    done (took 1.297190681 seconds)
    (88/192) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 1.345885431 seconds)
    (89/192) benchmarking ("perf_countnothing", Bool, false)...
    done (took 1.263286863 seconds)
    (90/192) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 1.383535183 seconds)
    (91/192) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 1.41642159 seconds)
    (92/192) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.209269004 seconds)
    (93/192) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 1.345117111 seconds)
    (94/192) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.05989796 seconds)
    (95/192) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 1.337886589 seconds)
    (96/192) benchmarking ("map", identity, BigInt, true)...
    done (took 1.482522168 seconds)
    (97/192) benchmarking ("perf_sum", Int64, true)...
    done (took 1.305853506 seconds)
    (98/192) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.205102905 seconds)
    (99/192) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 1.372267244 seconds)
    (100/192) benchmarking ("map", identity, Float64, true)...
    done (took 1.440812691 seconds)
    (101/192) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.083484924 seconds)
    (102/192) benchmarking ("broadcast", abs, Bool, false)...
    done (took 1.3460134 seconds)
    (103/192) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.029968483 seconds)
    (104/192) benchmarking ("perf_countnothing", Float64, true)...
    done (took 1.271193906 seconds)
    (105/192) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.205108461 seconds)
    (106/192) benchmarking ("map", abs, BigInt, false)...
    done (took 2.133168001 seconds)
    (107/192) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.211669791 seconds)
    (108/192) benchmarking ("map", *, BigInt, (false, true))...
    done (took 2.22370954 seconds)
    (109/192) benchmarking ("perf_countnothing", Float32, false)...
    done (took 1.271485115 seconds)
    (110/192) benchmarking ("perf_countnothing", Complex{Float64}, false)...
    done (took 1.265912464 seconds)
    (111/192) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.205730563 seconds)
    (112/192) benchmarking ("map", abs, Int64, false)...
    done (took 1.308751232 seconds)
    (113/192) benchmarking ("map", *, BigInt, (false, false))...
    done (took 2.211131916 seconds)
    (114/192) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 2.212372152 seconds)
    (115/192) benchmarking ("perf_countnothing", Int64, true)...
    done (took 1.298076839 seconds)
    (116/192) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 1.38206839 seconds)
    (117/192) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.211973558 seconds)
    (118/192) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.055830829 seconds)
    (119/192) benchmarking ("perf_sum", Complex{Float64}, false)...
    done (took 1.387295127 seconds)
    (120/192) benchmarking ("perf_countnothing", Int8, true)...
    done (took 1.265222656 seconds)
    (121/192) benchmarking ("map", identity, Int8, true)...
    done (took 1.345232695 seconds)
    (122/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (false, true))...
    done (took 1.47739915 seconds)
    (123/192) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 1.386577434 seconds)
    (124/192) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 1.41113685 seconds)
    (125/192) benchmarking ("perf_countnothing", Float64, false)...
    done (took 1.269814339 seconds)
    (126/192) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 1.338298332 seconds)
    (127/192) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 2.212518313 seconds)
    (128/192) benchmarking ("map", identity, Bool, true)...
    done (took 1.360888918 seconds)
    (129/192) benchmarking ("broadcast", identity, Int64, false)...
    done (took 1.377303364 seconds)
    (130/192) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.009550182 seconds)
    (131/192) benchmarking ("broadcast", abs, Complex{Float64}, true)...
    done (took 2.203847631 seconds)
    (132/192) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 2.210820679 seconds)
    (133/192) benchmarking ("perf_countnothing", Float32, true)...
    done (took 1.271252118 seconds)
    (134/192) benchmarking ("map", *, BigInt, (true, true))...
    done (took 2.207229589 seconds)
    (135/192) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 2.220809977 seconds)
    (136/192) benchmarking ("perf_countnothing", Complex{Float64}, true)...
    done (took 1.270596669 seconds)
    (137/192) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.364391698 seconds)
    (138/192) benchmarking ("perf_countequals", "Float64")...
    done (took 1.320608606 seconds)
    (139/192) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.210130473 seconds)
    (140/192) benchmarking ("map", identity, Int64, true)...
    done (took 1.444650606 seconds)
    (141/192) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 2.211794019 seconds)
    (142/192) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 2.230745803 seconds)
    (143/192) benchmarking ("perf_sum", Int64, false)...
    done (took 1.293295658 seconds)
    (144/192) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 2.228123126 seconds)
    (145/192) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 1.421503478 seconds)
    (146/192) benchmarking ("map", abs, Int8, true)...
    done (took 1.350769275 seconds)
    (147/192) benchmarking ("map", abs, Int8, false)...
    done (took 1.261937855 seconds)
    (148/192) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 1.380845073 seconds)
    (149/192) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 1.315185761 seconds)
    (150/192) benchmarking ("map", identity, Complex{Float64}, false)...
    done (took 1.420794668 seconds)
    (151/192) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 2.214076308 seconds)
    (152/192) benchmarking ("broadcast", abs, Float32, false)...
    done (took 1.390032226 seconds)
    (153/192) benchmarking ("broadcast", identity, Complex{Float64}, false)...
    done (took 1.474988406 seconds)
    (154/192) benchmarking ("broadcast", abs, Int8, false)...
    done (took 1.33171397 seconds)
    (155/192) benchmarking ("perf_sum", BigFloat, true)...
    done (took 2.23535815 seconds)
    (156/192) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 1.355427181 seconds)
    (157/192) benchmarking ("perf_sum", Float64, true)...
    done (took 1.312211764 seconds)
    (158/192) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 1.260839831 seconds)
    (159/192) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 1.291551781 seconds)
    (160/192) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.209720378 seconds)
    (161/192) benchmarking ("map", abs, Float64, false)...
    done (took 1.314293453 seconds)
    (162/192) benchmarking ("perf_countnothing", Bool, true)...
    done (took 1.275988104 seconds)
    (163/192) benchmarking ("broadcast", identity, Int8, false)...
    done (took 1.326682279 seconds)
    (164/192) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.21132649 seconds)
    (165/192) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 1.296717828 seconds)
    (166/192) benchmarking ("perf_countequals", "Complex{Float64}")...
    done (took 1.345886755 seconds)
    (167/192) benchmarking ("map", abs, Complex{Float64}, false)...
    done (took 1.363532478 seconds)
    (168/192) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 1.348755538 seconds)
    (169/192) benchmarking ("map", abs, BigFloat, true)...
    done (took 2.227271485 seconds)
    (170/192) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 2.246284825 seconds)
    (171/192) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 1.356729424 seconds)
    (172/192) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 2.232858697 seconds)
    (173/192) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 2.209799821 seconds)
    (174/192) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 2.250432223 seconds)
    (175/192) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 1.352373669 seconds)
    (176/192) benchmarking ("broadcast", abs, Int8, true)...
    done (took 1.962843482 seconds)
    (177/192) benchmarking ("map", abs, Bool, true)...
    done (took 1.351998922 seconds)
    (178/192) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.214460755 seconds)
    (179/192) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 1.280938852 seconds)
    (180/192) benchmarking ("broadcast", *, Complex{Float64}, (false, true))...
    done (took 2.211831731 seconds)
    (181/192) benchmarking ("perf_sum", Float32, true)...
    done (took 1.317182084 seconds)
    (182/192) benchmarking ("perf_countequals", "BigFloat")...
    done (took 1.428648411 seconds)
    (183/192) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 1.933956788 seconds)
    (184/192) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 1.404998694 seconds)
    (185/192) benchmarking ("perf_simplecopy", Complex{Float64}, false)...
    done (took 1.420591784 seconds)
    (186/192) benchmarking ("broadcast", *, Complex{Float64}, (false, false))...
    done (took 1.504083554 seconds)
    (187/192) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 2.235568451 seconds)
    (188/192) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 1.423957347 seconds)
    (189/192) benchmarking ("broadcast", *, Complex{Float64}, (true, true))...
    done (took 2.216771009 seconds)
    (190/192) benchmarking ("broadcast", identity, Float64, false)...
    done (took 1.382832121 seconds)
    (191/192) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.087835303 seconds)
    (192/192) benchmarking ("map", abs, Float32, false)...
    done (took 1.305901158 seconds)
  done (took 319.805661421 seconds)
done (took 320.924523479 seconds)
(14/20) benchmarking "simd"...
  (1/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.262575556 seconds)
  (2/72) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.337777617 seconds)
  (3/72) benchmarking ("axpy!", "Float32", 4095)...
  done (took 1.24235383 seconds)
  (4/72) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.24238488 seconds)
  (5/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.242383359 seconds)
  (6/72) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.243403495 seconds)
  (7/72) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.262451726 seconds)
  (8/72) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 1.242221611 seconds)
  (9/72) benchmarking ("inner", "Float64", 4096)...
  done (took 1.256996915 seconds)
  (10/72) benchmarking ("inner", "Float64", 4095)...
  done (took 1.257021036 seconds)
  (11/72) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.243117869 seconds)
  (12/72) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.25043826 seconds)
  (13/72) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.258843248 seconds)
  (14/72) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.251923238 seconds)
  (15/72) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.276670213 seconds)
  (16/72) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 1.24260357 seconds)
  (17/72) benchmarking ("axpy!", "Float32", 4096)...
  done (took 1.243022944 seconds)
  (18/72) benchmarking ("inner", "Int32", 4096)...
  done (took 1.253068661 seconds)
  (19/72) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.257942411 seconds)
  (20/72) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.259476353 seconds)
  (21/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.243966584 seconds)
  (22/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.244304014 seconds)
  (23/72) benchmarking ("inner", "Int64", 4095)...
  done (took 1.269905588 seconds)
  (24/72) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.242176535 seconds)
  (25/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.251633 seconds)
  (26/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.25094162 seconds)
  (27/72) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.250199089 seconds)
  (28/72) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.235196073 seconds)
  (29/72) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.271561249 seconds)
  (30/72) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.259830127 seconds)
  (31/72) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.244934471 seconds)
  (32/72) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.253124302 seconds)
  (33/72) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.2619124 seconds)
  (34/72) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.256042979 seconds)
  (35/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.245180796 seconds)
  (36/72) benchmarking ("inner", "Int32", 4095)...
  done (took 1.2537139 seconds)
  (37/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.245928659 seconds)
  (38/72) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.343753285 seconds)
  (39/72) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.266566036 seconds)
  (40/72) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.254752661 seconds)
  (41/72) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.252628208 seconds)
  (42/72) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.260572541 seconds)
  (43/72) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.248226465 seconds)
  (44/72) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 1.248391724 seconds)
  (45/72) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.257375502 seconds)
  (46/72) benchmarking ("inner", "Int64", 4096)...
  done (took 1.271889511 seconds)
  (47/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.251146184 seconds)
  (48/72) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.259521434 seconds)
  (49/72) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.243448931 seconds)
  (50/72) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.242600725 seconds)
  (51/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.263919783 seconds)
  (52/72) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 1.256465973 seconds)
  (53/72) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.253125621 seconds)
  (54/72) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.237160406 seconds)
  (55/72) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.23827295 seconds)
  (56/72) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.260675931 seconds)
  (57/72) benchmarking ("inner", "Float32", 4095)...
  done (took 1.256516513 seconds)
  (58/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.264436932 seconds)
  (59/72) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.252504786 seconds)
  (60/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.246801586 seconds)
  (61/72) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.279272489 seconds)
  (62/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.264886883 seconds)
  (63/72) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 1.256664914 seconds)
  (64/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.252750618 seconds)
  (65/72) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.253474189 seconds)
  (66/72) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.259081421 seconds)
  (67/72) benchmarking ("inner", "Float32", 4096)...
  done (took 1.256020357 seconds)
  (68/72) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.260924396 seconds)
  (69/72) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.254463559 seconds)
  (70/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.245848421 seconds)
  (71/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.245704168 seconds)
  (72/72) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.254796929 seconds)
done (took 99.554947528 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.369055976 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 2.24216898 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.40513978 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.251547947 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.410732047 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.371678578 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.250535363 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.252161021 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.250400323 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.080750738 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.25076762 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 1.25162131 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 2.241104192 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.251025522 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.366188214 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.252792938 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.25157302 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.938442148 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.252029371 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.38506885 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.243307455 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.253585689 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.252990242 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.041446332 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 2.24321152 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.239961529 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.385241499 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.252063608 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.962056417 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.236402644 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.241008782 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.939347041 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.382992539 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 1.270724754 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 1.262645844 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.261756297 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.409851941 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 1.257404366 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.369515031 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.368457234 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.40271399 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 1.291461758 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.237208019 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.243280876 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.255064256 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.252789468 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.251856281 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.282200277 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 2.240040867 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 1.250331331 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.978696959 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 1.261603343 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 1.261589187 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.25234946 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.251709125 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 1.271404163 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.25238889 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.253192094 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.384111679 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.253961617 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.369959301 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.063095414 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.042582985 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.2529345 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.240200738 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.252235251 seconds)
  done (took 102.68147528 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.311772237 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.319613879 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.355348768 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 1.249010716 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.296494455 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.355622746 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 1.244323362 seconds)
  done (took 10.263707762 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 1.250642199 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.252496444 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.290237372 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.291305622 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.252534716 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.417662981 seconds)
    (7/97) benchmarking ("randn", "MersenneTwister", "Complex{Float32}")...
    done (took 1.251941144 seconds)
    (8/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.255102531 seconds)
    (9/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 1.252165918 seconds)
    (10/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.295780019 seconds)
    (11/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.255255998 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "Complex{Float16}")...
    done (took 1.254492567 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 1.26334451 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.243244807 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.291205196 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.257353928 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.363897702 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 1.247090372 seconds)
    (19/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.251833052 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.398496795 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 1.253645991 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 1.261875384 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.294467998 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.254365089 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.25467219 seconds)
    (26/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 1.251780562 seconds)
    (27/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float16}")...
    done (took 2.026199089 seconds)
    (28/97) benchmarking ("randn", "MersenneTwister", "Complex{Float64}")...
    done (took 1.252247242 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.252765699 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.251839486 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.250971032 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.308077222 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.252051899 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.24401258 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.252047088 seconds)
    (36/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float32}")...
    done (took 1.35695161 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.252113823 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.252484094 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.252762787 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.235458373 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.254692496 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.25152227 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.252385966 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.253338654 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.252083931 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.268897198 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.251177997 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.252751603 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.254293356 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.254071547 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.294923197 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.254828044 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.25269331 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 1.253064246 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.298056577 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 1.262184928 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.254512381 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.252690944 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.255822896 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.255522977 seconds)
    (61/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.396345951 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.294988734 seconds)
    (63/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.252606207 seconds)
    (64/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.292706537 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{Float32}")...
    done (took 1.254181289 seconds)
    (66/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.254373587 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.254412566 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.255693035 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float64}")...
    done (took 1.334249238 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.253753303 seconds)
    (71/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.291817932 seconds)
    (72/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.253605443 seconds)
    (73/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.427365328 seconds)
    (74/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.270413251 seconds)
    (75/97) benchmarking ("randn", "MersenneTwister", "Complex{Float16}")...
    done (took 1.25714167 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.249217348 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.250134626 seconds)
    (78/97) benchmarking ("rand", "MersenneTwister", "Complex{Float64}")...
    done (took 1.255896429 seconds)
    (79/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.243798478 seconds)
    (80/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.255036809 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.25520374 seconds)
    (82/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 1.247601333 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 1.25201906 seconds)
    (84/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 1.25419514 seconds)
    (85/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.256131732 seconds)
    (86/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float16}")...
    done (took 1.405835758 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float64}")...
    done (took 1.354482149 seconds)
    (88/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.255199513 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 1.262421523 seconds)
    (90/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 1.25367124 seconds)
    (91/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.254408361 seconds)
    (92/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.29980003 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.256048629 seconds)
    (94/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.254436144 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float32}")...
    done (took 1.29841402 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.366588027 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.300214375 seconds)
  done (took 129.387076548 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 1.258912308 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 1.260801779 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 1.252543924 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.277190298 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 1.249481624 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 1.248313069 seconds)
  done (took 8.685174443 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.250773198 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.257546736 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.256968628 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.255534532 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.257310952 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.259644794 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.256576244 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.251057221 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 1.257577465 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.257190674 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.258581013 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.260429297 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.259550021 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.258961599 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.258191152 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.257743155 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.259325567 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.25826872 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.258803258 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.258750959 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.245256042 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.259123994 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.259559213 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.250335625 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 1.260898196 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.261075406 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.272962511 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.259617835 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.260164875 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.255376097 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.26292352 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.261569298 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.252065748 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.253427249 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.259838658 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.252878135 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.261425302 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.263240152 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.257731625 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.261930763 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.264671279 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.259554566 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.261179687 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.263383533 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 1.254885386 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 1.254509226 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.264439408 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.274152349 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.260477537 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.262284821 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.26431143 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.260131935 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.264800139 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.263174679 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.255464353 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.255353798 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 1.26535418 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.26144764 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.261785622 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.253186577 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.265161415 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.265632429 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.25372264 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.263596248 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 1.261040957 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.264046052 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.253620456 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.263425181 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.263719842 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.26041326 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.264653382 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.259494 seconds)
  done (took 92.822807364 seconds)
done (took 344.972246396 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 2.486992633 seconds)
  done (took 3.627166497 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 2.253645524 seconds)
  done (took 3.394691782 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 21.39203673 seconds)
  done (took 22.53518864 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 2.294474658 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 2.281898676 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 2.274060809 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 2.259042806 seconds)
  done (took 10.247254589 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 3.919571674 seconds)
  done (took 5.057963912 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 2.262847803 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 2.268445804 seconds)
  done (took 5.670021821 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 2.387350705 seconds)
  done (took 3.524678447 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 2.58324778 seconds)
  done (took 3.722255054 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 2.278784395 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 2.260220085 seconds)
  done (took 5.685939604 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 2.242005888 seconds)
  done (took 3.379270047 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 19.747735335 seconds)
  done (took 20.886492157 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 2.25858674 seconds)
  done (took 3.399350908 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 2.291752619 seconds)
  done (took 3.428524857 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 4.711007523 seconds)
  done (took 5.849422026 seconds)
done (took 101.5494214 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 2.245077354 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 2.245926984 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 2.246100802 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 2.245506327 seconds)
  done (took 10.120055918 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Array{Float32,1} generator")...
    done (took 1.324060695 seconds)
    (2/24) benchmarking ("all", "Array{Float32,1}")...
    done (took 1.323349196 seconds)
    (3/24) benchmarking ("any", "Array{Float64,1} generator")...
    done (took 1.332827876 seconds)
    (4/24) benchmarking ("any", "Array{Int64,1}")...
    done (took 1.316983792 seconds)
    (5/24) benchmarking ("any", "Array{Int16,1} generator")...
    done (took 1.319119793 seconds)
    (6/24) benchmarking ("any", "Array{Float32,1}")...
    done (took 1.325922153 seconds)
    (7/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.288491006 seconds)
    (8/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.286623236 seconds)
    (9/24) benchmarking ("all", "Array{Int64,1}")...
    done (took 1.316078597 seconds)
    (10/24) benchmarking ("all", "Array{Int16,1}")...
    done (took 1.312962709 seconds)
    (11/24) benchmarking ("all", "Array{Float64,1}")...
    done (took 1.326657607 seconds)
    (12/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.316963601 seconds)
    (13/24) benchmarking ("any", "Array{Float32,1} generator")...
    done (took 1.325165692 seconds)
    (14/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.284160736 seconds)
    (15/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.311104288 seconds)
    (16/24) benchmarking ("all", "Array{Float64,1} generator")...
    done (took 1.32683522 seconds)
    (17/24) benchmarking ("all", "Array{Int64,1} generator")...
    done (took 1.315500187 seconds)
    (18/24) benchmarking ("any", "Array{Float64,1}")...
    done (took 1.332480069 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.298424151 seconds)
    (20/24) benchmarking ("any", "Array{Int16,1}")...
    done (took 1.318733908 seconds)
    (21/24) benchmarking ("any", "BitArray")...
    done (took 1.260627124 seconds)
    (22/24) benchmarking ("any", "Array{Int64,1} generator")...
    done (took 1.316831261 seconds)
    (23/24) benchmarking ("all", "Array{Int16,1} generator")...
    done (took 1.311335543 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.259880592 seconds)
  done (took 32.590194527 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.74625171 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.320659332 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.404783177 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.302738625 seconds)
  done (took 6.910959249 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.363971702 seconds)
    (2/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Int16,1}")...
    done (took 1.36687178 seconds)
    (3/24) benchmarking ("==", "Array{Float64,1}")...
    done (took 1.380977263 seconds)
    (4/24) benchmarking ("isequal", "Array{Float64,1}")...
    done (took 1.418538101 seconds)
    (5/24) benchmarking ("==", "Array{Int64,1} == Array{Float32,1}")...
    done (took 1.463502723 seconds)
    (6/24) benchmarking ("==", "Array{Float32,1}")...
    done (took 1.377226578 seconds)
    (7/24) benchmarking ("==", "Array{Int64,1}")...
    done (took 1.286106977 seconds)
    (8/24) benchmarking ("==", "Array{Int64,1} == Array{Int64,1}")...
    done (took 1.281253685 seconds)
    (9/24) benchmarking ("==", "Array{Int16,1}")...
    done (took 1.269201172 seconds)
    (10/24) benchmarking ("==", "Array{Int64,1} == Array{Int16,1}")...
    done (took 1.364784591 seconds)
    (11/24) benchmarking ("isequal", "BitArray")...
    done (took 1.441375775 seconds)
    (12/24) benchmarking ("==", "Array{Int64,1} == UnitRange{Int64}")...
    done (took 1.363950103 seconds)
    (13/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Float64,1}")...
    done (took 1.576813908 seconds)
    (14/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Int64,1}")...
    done (took 1.258906983 seconds)
    (15/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Float32,1}")...
    done (took 1.576609753 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.258143256 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.258630227 seconds)
    (18/24) benchmarking ("isequal", "Array{Int16,1}")...
    done (took 1.364727724 seconds)
    (19/24) benchmarking ("isequal", "Array{Float32,1}")...
    done (took 1.411247551 seconds)
    (20/24) benchmarking ("==", "Array{Int64,1} == Array{Float64,1}")...
    done (took 1.441770366 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.258498259 seconds)
    (22/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.362383724 seconds)
    (23/24) benchmarking ("isequal", "Array{Int64,1}")...
    done (took 1.365708997 seconds)
    (24/24) benchmarking ("isequal", "Array{Int64,1} isequal UnitRange{Int64}")...
    done (took 1.361985129 seconds)
  done (took 34.011031212 seconds)
  (5/13) benchmarking "reductions"...
    (1/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norminf", "Int64")...
    done (took 1.268293689 seconds)
    (2/22) benchmarking ("maxabs", "Float64")...
    done (took 1.277265817 seconds)
    (3/22) benchmarking ("sumabs", "Float64")...
    done (took 1.262197708 seconds)
    (4/22) benchmarking ("LinearAlgebra.norm", "Int64")...
    done (took 1.276748652 seconds)
    (5/22) benchmarking ("sumabs", "Int64")...
    done (took 1.261470217 seconds)
    (6/22) benchmarking ("sumabs2", "Float64")...
    done (took 1.260981415 seconds)
    (7/22) benchmarking ("sumabs2", "Int64")...
    done (took 1.26376173 seconds)
    (8/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_mapreduce", "Float64")...
    done (took 1.267891259 seconds)
    (9/22) benchmarking ("sum", "Int64")...
    done (took 1.259565979 seconds)
    (10/22) benchmarking ("mean", "Int64")...
    done (took 1.261443692 seconds)
    (11/22) benchmarking ("mean", "Float64")...
    done (took 1.261840016 seconds)
    (12/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norminf", "Float64")...
    done (took 1.276558664 seconds)
    (13/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_mapreduce", "Int64")...
    done (took 1.261770117 seconds)
    (14/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norm1", "Float64")...
    done (took 1.262074156 seconds)
    (15/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norm1", "Int64")...
    done (took 1.268776643 seconds)
    (16/22) benchmarking ("LinearAlgebra.norm", "Float64")...
    done (took 1.261815468 seconds)
    (17/22) benchmarking ("var", "Float64")...
    done (took 1.263816252 seconds)
    (18/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_reduce", "Float64")...
    done (took 1.268707613 seconds)
    (19/22) benchmarking ("var", "Int64")...
    done (took 1.270993343 seconds)
    (20/22) benchmarking ("sum", "Float64")...
    done (took 1.262823337 seconds)
    (21/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_reduce", "Int64")...
    done (took 1.262539139 seconds)
    (22/22) benchmarking ("maxabs", "Int64")...
    done (took 1.269622191 seconds)
  done (took 28.989093178 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 2.246865344 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 2.246822689 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.597630103 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.503753221 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 2.246335401 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 2.246727855 seconds)
  done (took 13.226290226 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 1.317354503 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 1.454469269 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.253932949 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 1.582323256 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.667881305 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 1.255379251 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 1.253436493 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 1.488599745 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 1.770237571 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 1.752308796 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 1.310923265 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 1.322478054 seconds)
  done (took 18.568858747 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 2.247771683 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 2.253314512 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 2.262330146 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.268336636 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.306850797 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.257784762 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 1.260587495 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 2.248302787 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 1.310656651 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.310748447 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.257455364 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.306430133 seconds)
  done (took 20.430713375 seconds)
  (9/13) benchmarking "index"...
    (1/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.339383521 seconds)
    (2/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.258670837 seconds)
    (3/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 2.256661583 seconds)
    (4/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.291292084 seconds)
    (5/481) benchmarking ("sumcartesian", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.260500749 seconds)
    (6/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.257332424 seconds)
    (7/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.315835845 seconds)
    (8/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.944756999 seconds)
    (9/481) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.262639417 seconds)
    (10/481) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.534643201 seconds)
    (11/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.265394235 seconds)
    (12/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.346037532 seconds)
    (13/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.504136623 seconds)
    (14/481) benchmarking ("sumcolon", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.257286081 seconds)
    (15/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.263117712 seconds)
    (16/481) benchmarking ("sumrange", "BitArray{2}")...
    done (took 2.205220768 seconds)
    (17/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.490475691 seconds)
    (18/481) benchmarking ("sumrange", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.732797486 seconds)
    (19/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.266268532 seconds)
    (20/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.261668926 seconds)
    (21/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.294610649 seconds)
    (22/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.27145191 seconds)
    (23/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.263005088 seconds)
    (24/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.459970118 seconds)
    (25/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.264852858 seconds)
    (26/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.259943938 seconds)
    (27/481) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.522053607 seconds)
    (28/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.257978864 seconds)
    (29/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.523213915 seconds)
    (30/481) benchmarking ("sumrange_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.500224449 seconds)
    (31/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.502200129 seconds)
    (32/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.263576032 seconds)
    (33/481) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.535998686 seconds)
    (34/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.899566677 seconds)
    (35/481) benchmarking ("sumelt", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.364576048 seconds)
    (36/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.455378006 seconds)
    (37/481) benchmarking ("mapr_access", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.259585433 seconds)
    (38/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.265199915 seconds)
    (39/481) benchmarking ("sumlinear_view", "BitArray{2}")...
    done (took 2.249833124 seconds)
    (40/481) benchmarking ("sumlogical", "Array{Float32,2}")...
    done (took 2.264883906 seconds)
    (41/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.28203422 seconds)
    (42/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.265930808 seconds)
    (43/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.494146045 seconds)
    (44/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.26765181 seconds)
    (45/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.260628886 seconds)
    (46/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.270942857 seconds)
    (47/481) benchmarking ("sumvector_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.955908667 seconds)
    (48/481) benchmarking ("sumvector", "100000:-1:1")...
    done (took 1.26709339 seconds)
    (49/481) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 2.259469831 seconds)
    (50/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.260622143 seconds)
    (51/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.493455551 seconds)
    (52/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.347625715 seconds)
    (53/481) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.265954038 seconds)
    (54/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.259823034 seconds)
    (55/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.253944241 seconds)
    (56/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.264727795 seconds)
    (57/481) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 1.266317363 seconds)
    (58/481) benchmarking ("mapr_access", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.385334187 seconds)
    (59/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.902948821 seconds)
    (60/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.273979958 seconds)
    (61/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.275732221 seconds)
    (62/481) benchmarking ("sumeach", "Array{Float32,2}")...
    done (took 2.264302216 seconds)
    (63/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.253606874 seconds)
    (64/481) benchmarking ("sumlogical", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.262947789 seconds)
    (65/481) benchmarking ("sumvector", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.884061098 seconds)
    (66/481) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.268993801 seconds)
    (67/481) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.266329067 seconds)
    (68/481) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.265254326 seconds)
    (69/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.260567291 seconds)
    (70/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.261004869 seconds)
    (71/481) benchmarking ("sumeach", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.281119995 seconds)
    (72/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.258738084 seconds)
    (73/481) benchmarking ("sum", "3dsubarray")...
    done (took 1.280268045 seconds)
    (74/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.259435258 seconds)
    (75/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.013563785 seconds)
    (76/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.262941481 seconds)
    (77/481) benchmarking ("sumeach_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.261916725 seconds)
    (78/481) benchmarking ("sumcolon", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.795199421 seconds)
    (79/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.264077031 seconds)
    (80/481) benchmarking ("sumlinear", "Array{Float32,2}")...
    done (took 2.265264534 seconds)
    (81/481) benchmarking ("sumeach_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.485801249 seconds)
    (82/481) benchmarking ("sumcartesian", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.261787677 seconds)
    (83/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.261935621 seconds)
    (84/481) benchmarking "5d"...
    done (took 2.261154959 seconds)
    (85/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.258943819 seconds)
    (86/481) benchmarking ("sumlogical", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.952822525 seconds)
    (87/481) benchmarking ("sumlinear", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.270007796 seconds)
    (88/481) benchmarking ("sumlogical", "BitArray{2}")...
    done (took 2.2301055 seconds)
    (89/481) benchmarking ("mapr_access", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.301040469 seconds)
    (90/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.941631241 seconds)
    (91/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.455103054 seconds)
    (92/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.281970632 seconds)
    (93/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.292189211 seconds)
    (94/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.482259511 seconds)
    (95/481) benchmarking ("sumelt", "BitArray{2}")...
    done (took 2.231800429 seconds)
    (96/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.263004278 seconds)
    (97/481) benchmarking ("sumlogical_view", "Array{Int32,2}")...
    done (took 2.27076274 seconds)
    (98/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.26494623 seconds)
    (99/481) benchmarking ("sumeach", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.283900935 seconds)
    (100/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.949465107 seconds)
    (101/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.262508912 seconds)
    (102/481) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.266633853 seconds)
    (103/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.506665008 seconds)
    (104/481) benchmarking ("sumlinear", "Array{Int32,2}")...
    done (took 1.473689865 seconds)
    (105/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.263337078 seconds)
    (106/481) benchmarking ("sumcolon", "BitArray{2}")...
    done (took 2.196317453 seconds)
    (107/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.706974313 seconds)
    (108/481) benchmarking ("sumrange", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.271960815 seconds)
    (109/481) benchmarking ("sumcartesian", "Array{Float64,3}")...
    done (took 1.290295817 seconds)
    (110/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.261596765 seconds)
    (111/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.458798958 seconds)
    (112/481) benchmarking ("sumvector", "Array{Float32,2}")...
    done (took 1.859778315 seconds)
    (113/481) benchmarking ("sumrange_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.504180025 seconds)
    (114/481) benchmarking ("sumlogical", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.26590874 seconds)
    (115/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.313816705 seconds)
    (116/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.262764982 seconds)
    (117/481) benchmarking ("sumlogical", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 2.015697895 seconds)
    (118/481) benchmarking ("sumrange", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.266264256 seconds)
    (119/481) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.271924113 seconds)
    (120/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.276899654 seconds)
    (121/481) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.526213305 seconds)
    (122/481) benchmarking ("sumvector", "BitArray{2}")...
    done (took 2.036511666 seconds)
    (123/481) benchmarking ("sumcartesian", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.26634908 seconds)
    (124/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.336285665 seconds)
    (125/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.27124788 seconds)
    (126/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.263773246 seconds)
    (127/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.261911886 seconds)
    (128/481) benchmarking ("sumelt", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.263858939 seconds)
    (129/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.26230627 seconds)
    (130/481) benchmarking ("sumcolon_view", "BitArray{2}")...
    done (took 1.430267876 seconds)
    (131/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.270036651 seconds)
    (132/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.499008448 seconds)
    (133/481) benchmarking "ind2sub"...
    done (took 2.266157802 seconds)
    (134/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.262166882 seconds)
    (135/481) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 2.263191311 seconds)
    (136/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.265276431 seconds)
    (137/481) benchmarking ("sumcartesian", "Array{Float32,2}")...
    done (took 2.266142619 seconds)
    (138/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.484185381 seconds)
    (139/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.263436755 seconds)
    (140/481) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.538739175 seconds)
    (141/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.262746363 seconds)
    (142/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.264438054 seconds)
    (143/481) benchmarking ("sumeach", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.26155945 seconds)
    (144/481) benchmarking ("sumcartesian_view", "Array{Int32,2}")...
    done (took 1.481016117 seconds)
    (145/481) benchmarking ("sumlinear_view", "Array{Float64,3}")...
    done (took 2.262393395 seconds)
    (146/481) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 1.269717037 seconds)
    (147/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.603223725 seconds)
    (148/481) benchmarking ("sumcolon", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.275209022 seconds)
    (149/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.27639834 seconds)
    (150/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.497948954 seconds)
    (151/481) benchmarking ("sumelt", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.295883039 seconds)
    (152/481) benchmarking ("sumelt", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.375143617 seconds)
    (153/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.29329848 seconds)
    (154/481) benchmarking ("sumrange", "Array{Int32,2}")...
    done (took 2.273182478 seconds)
    (155/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.513939675 seconds)
    (156/481) benchmarking ("sumelt", "1:100000")...
    done (took 1.269463269 seconds)
    (157/481) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.268233803 seconds)
    (158/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.26163914 seconds)
    (159/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.279008436 seconds)
    (160/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.263149224 seconds)
    (161/481) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 1.270212649 seconds)
    (162/481) benchmarking ("mapr_access", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.253415906 seconds)
    (163/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.850876359 seconds)
    (164/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.237183017 seconds)
    (165/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.269944783 seconds)
    (166/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.262892331 seconds)
    (167/481) benchmarking ("sumlinear", "Array{Float64,3}")...
    done (took 1.278244155 seconds)
    (168/481) benchmarking ("sumeach", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.335542097 seconds)
    (169/481) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 1.269936728 seconds)
    (170/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.449809717 seconds)
    (171/481) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.267261171 seconds)
    (172/481) benchmarking ("mapr_access", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.257720471 seconds)
    (173/481) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.270218536 seconds)
    (174/481) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 2.268785065 seconds)
    (175/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.487549141 seconds)
    (176/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.488519016 seconds)
    (177/481) benchmarking ("sumlogical", "Array{Int32,2}")...
    done (took 2.266485226 seconds)
    (178/481) benchmarking ("sumlinear", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.453780542 seconds)
    (179/481) benchmarking ("sumvector_view", "Array{Int32,2}")...
    done (took 1.698965331 seconds)
    (180/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.847947332 seconds)
    (181/481) benchmarking ("sumeach_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.277578324 seconds)
    (182/481) benchmarking ("sumelt_boundscheck", "Array{Float32,2}")...
    done (took 2.260938671 seconds)
    (183/481) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 2.262765178 seconds)
    (184/481) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 2.263385001 seconds)
    (185/481) benchmarking ("sumlinear", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.264648193 seconds)
    (186/481) benchmarking ("sumeach", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.260774175 seconds)
    (187/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.263380394 seconds)
    (188/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.449076555 seconds)
    (189/481) benchmarking ("sumrange_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.50057977 seconds)
    (190/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.27057595 seconds)
    (191/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.853615425 seconds)
    (192/481) benchmarking ("sumlinear", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.265958561 seconds)
    (193/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.267667998 seconds)
    (194/481) benchmarking ("sumeach", "1:100000")...
    done (took 1.270856971 seconds)
    (195/481) benchmarking ("sumrange_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.490089294 seconds)
    (196/481) benchmarking ("sumvector", "1:100000")...
    done (took 1.276177403 seconds)
    (197/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.262868075 seconds)
    (198/481) benchmarking ("sumlogical", "1:100000")...
    done (took 2.263218529 seconds)
    (199/481) benchmarking ("sumlogical", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.270651684 seconds)
    (200/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.273590263 seconds)
    (201/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.495100357 seconds)
    (202/481) benchmarking ("sumlinear", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.483997122 seconds)
    (203/481) benchmarking ("sumelt_boundscheck", "Array{Float64,3}")...
    done (took 1.278860623 seconds)
    (204/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.262696731 seconds)
    (205/481) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.824518358 seconds)
    (206/481) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.268900102 seconds)
    (207/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.264455446 seconds)
    (208/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.262297448 seconds)
    (209/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.2898696 seconds)
    (210/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.262264265 seconds)
    (211/481) benchmarking ("sumvector_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.073885519 seconds)
    (212/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.604015412 seconds)
    (213/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.274857469 seconds)
    (214/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.492970381 seconds)
    (215/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.281513615 seconds)
    (216/481) benchmarking ("sumelt", "Array{Float64,3}")...
    done (took 1.281317266 seconds)
    (217/481) benchmarking "4d"...
    done (took 2.264808077 seconds)
    (218/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.271389271 seconds)
    (219/481) benchmarking ("sumrange", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.277616282 seconds)
    (220/481) benchmarking ("sumeach_view", "Array{Int32,2}")...
    done (took 2.285072758 seconds)
    (221/481) benchmarking ("sumeach", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.276184901 seconds)
    (222/481) benchmarking ("sumcolon_view", "Array{Float32,2}")...
    done (took 1.448954905 seconds)
    (223/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.270556606 seconds)
    (224/481) benchmarking ("sumelt", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.268326137 seconds)
    (225/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.903500738 seconds)
    (226/481) benchmarking ("sumvector", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.006497413 seconds)
    (227/481) benchmarking ("sumvector", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.790360618 seconds)
    (228/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.268163788 seconds)
    (229/481) benchmarking ("sumrange", "Array{Float32,2}")...
    done (took 2.274697733 seconds)
    (230/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.266490097 seconds)
    (231/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.937963881 seconds)
    (232/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.263731991 seconds)
    (233/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.264419679 seconds)
    (234/481) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.49342494 seconds)
    (235/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.943270674 seconds)
    (236/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.262423233 seconds)
    (237/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.700046658 seconds)
    (238/481) benchmarking ("sumeach_view", "Array{Float64,3}")...
    done (took 2.270359496 seconds)
    (239/481) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.954362877 seconds)
    (240/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.492473116 seconds)
    (241/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.491786628 seconds)
    (242/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.263056045 seconds)
    (243/481) benchmarking ("sumlogical_view", "Array{Float32,2}")...
    done (took 2.280505239 seconds)
    (244/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.489936364 seconds)
    (245/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.479501222 seconds)
    (246/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.292065905 seconds)
    (247/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.269588518 seconds)
    (248/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.268188399 seconds)
    (249/481) benchmarking ("sumelt_boundscheck", "BitArray{2}")...
    done (took 2.234196817 seconds)
    (250/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.770122765 seconds)
    (251/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.274345932 seconds)
    (252/481) benchmarking ("sumelt_boundscheck", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.443090934 seconds)
    (253/481) benchmarking ("sumvector_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.938098273 seconds)
    (254/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.271108438 seconds)
    (255/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.267057651 seconds)
    (256/481) benchmarking ("mapr_access", "BitArray{2}")...
    done (took 2.335401107 seconds)
    (257/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 2.274567593 seconds)
    (258/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.625182454 seconds)
    (259/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.269007211 seconds)
    (260/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.264742791 seconds)
    (261/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.263194108 seconds)
    (262/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.285772641 seconds)
    (263/481) benchmarking ("sumvector_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.089742545 seconds)
    (264/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.270117474 seconds)
    (265/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.265849076 seconds)
    (266/481) benchmarking ("sumvector", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.872794334 seconds)
    (267/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.268580264 seconds)
    (268/481) benchmarking ("sumvector_view", "Array{Float32,2}")...
    done (took 1.703498543 seconds)
    (269/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.265201149 seconds)
    (270/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.448119574 seconds)
    (271/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.492894555 seconds)
    (272/481) benchmarking ("sumrange_view", "BitArray{2}")...
    done (took 1.469666073 seconds)
    (273/481) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.270805235 seconds)
    (274/481) benchmarking ("sumcolon", "1:100000")...
    done (took 2.272022693 seconds)
    (275/481) benchmarking ("sumcartesian_view", "Array{Float32,2}")...
    done (took 1.514188301 seconds)
    (276/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.491177641 seconds)
    (277/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.267214301 seconds)
    (278/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.276589551 seconds)
    (279/481) benchmarking ("sumvector", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.797360625 seconds)
    (280/481) benchmarking "3d"...
    done (took 2.123170406 seconds)
    (281/481) benchmarking ("sum", "3darray")...
    done (took 1.274831072 seconds)
    (282/481) benchmarking ("sumlinear", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.265990736 seconds)
    (283/481) benchmarking ("sumlogical", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.998521912 seconds)
    (284/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.274597479 seconds)
    (285/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.518859226 seconds)
    (286/481) benchmarking ("sumcolon", "Array{Int32,2}")...
    done (took 2.277600297 seconds)
    (287/481) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.269285201 seconds)
    (288/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.278750752 seconds)
    (289/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.266466614 seconds)
    (290/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.266881485 seconds)
    (291/481) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 2.26589454 seconds)
    (292/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.272026348 seconds)
    (293/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.240189047 seconds)
    (294/481) benchmarking ("sumcolon", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.708505274 seconds)
    (295/481) benchmarking ("mapr_access", "Array{Float32,2}")...
    done (took 2.266282405 seconds)
    (296/481) benchmarking ("mapr_access", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.268915032 seconds)
    (297/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.289610313 seconds)
    (298/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.270321051 seconds)
    (299/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.512954367 seconds)
    (300/481) benchmarking ("sumeach", "Array{Float64,3}")...
    done (took 1.281658511 seconds)
    (301/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.848925855 seconds)
    (302/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.495258578 seconds)
    (303/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.262171437 seconds)
    (304/481) benchmarking ("sumelt", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.299976997 seconds)
    (305/481) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.271826465 seconds)
    (306/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.275412246 seconds)
    (307/481) benchmarking ("sumcartesian_view", "BitArray{2}")...
    done (took 2.240411981 seconds)
    (308/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.26693985 seconds)
    (309/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.268243052 seconds)
    (310/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.3341887 seconds)
    (311/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.48784101 seconds)
    (312/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 2.271679926 seconds)
    (313/481) benchmarking ("sumeach", "BitArray{2}")...
    done (took 2.241311294 seconds)
    (314/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.308030203 seconds)
    (315/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.480814913 seconds)
    (316/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.266373635 seconds)
    (317/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.26742438 seconds)
    (318/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.481484264 seconds)
    (319/481) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 2.269445171 seconds)
    (320/481) benchmarking ("sumeach_view", "Array{Float32,2}")...
    done (took 2.270465471 seconds)
    (321/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.01129663 seconds)
    (322/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.298689385 seconds)
    (323/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.278507691 seconds)
    (324/481) benchmarking ("sumcartesian", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.269065743 seconds)
    (325/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.266189251 seconds)
    (326/481) benchmarking ("mapr_access", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.308711995 seconds)
    (327/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.340565331 seconds)
    (328/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.455258861 seconds)
    (329/481) benchmarking ("sumrange_view", "Array{Float32,2}")...
    done (took 1.494734024 seconds)
    (330/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.495348327 seconds)
    (331/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.626530365 seconds)
    (332/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.274526406 seconds)
    (333/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.270016137 seconds)
    (334/481) benchmarking ("sumcartesian_view", "Array{Float64,3}")...
    done (took 1.284391151 seconds)
    (335/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.351543991 seconds)
    (336/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.278247067 seconds)
    (337/481) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.272319908 seconds)
    (338/481) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.271406107 seconds)
    (339/481) benchmarking ("sumvector", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.844710465 seconds)
    (340/481) benchmarking ("sumvector", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.012752244 seconds)
    (341/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.857125145 seconds)
    (342/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.496804778 seconds)
    (343/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.269561765 seconds)
    (344/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.278888256 seconds)
    (345/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.268686236 seconds)
    (346/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.511677628 seconds)
    (347/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.270903518 seconds)
    (348/481) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.544967598 seconds)
    (349/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.267766784 seconds)
    (350/481) benchmarking ("mapr_access", "Array{Int32,2}")...
    done (took 2.264615596 seconds)
    (351/481) benchmarking ("sumlinear", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.290705483 seconds)
    (352/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.270136649 seconds)
    (353/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.275455655 seconds)
    (354/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.482792377 seconds)
    (355/481) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.544760401 seconds)
    (356/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.26940056 seconds)
    (357/481) benchmarking ("sumcolon", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.271821162 seconds)
    (358/481) benchmarking ("sumelt", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.273253944 seconds)
    (359/481) benchmarking ("sumcartesian", "Array{Int32,2}")...
    done (took 2.269626661 seconds)
    (360/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.499743838 seconds)
    (361/481) benchmarking ("sumeach", "Array{Int32,2}")...
    done (took 1.481489623 seconds)
    (362/481) benchmarking ("sumrange", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.708288036 seconds)
    (363/481) benchmarking ("sumcolon", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.75861227 seconds)
    (364/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.271260635 seconds)
    (365/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.271087198 seconds)
    (366/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.94703275 seconds)
    (367/481) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.547302829 seconds)
    (368/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.268013343 seconds)
    (369/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.269900037 seconds)
    (370/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.268344932 seconds)
    (371/481) benchmarking ("sumlinear_view", "Array{Float32,2}")...
    done (took 2.287114503 seconds)
    (372/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 2.270749803 seconds)
    (373/481) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.280178732 seconds)
    (374/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.268078952 seconds)
    (375/481) benchmarking ("sumlinear", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.492035002 seconds)
    (376/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.489373315 seconds)
    (377/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.884056752 seconds)
    (378/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.48946753 seconds)
    (379/481) benchmarking "sub2ind"...
    done (took 2.453653644 seconds)
    (380/481) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.268505053 seconds)
    (381/481) benchmarking ("sumlogical", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.269359027 seconds)
    (382/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.514717925 seconds)
    (383/481) benchmarking ("sumlinear_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.111944312 seconds)
    (384/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.452779885 seconds)
    (385/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.84928329 seconds)
    (386/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.941377781 seconds)
    (387/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.52231021 seconds)
    (388/481) benchmarking ("sumeach", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.346206148 seconds)
    (389/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.453591834 seconds)
    (390/481) benchmarking "6d"...
    done (took 2.27225244 seconds)
    (391/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.507935608 seconds)
    (392/481) benchmarking ("sumrange", "1:100000")...
    done (took 2.275707008 seconds)
    (393/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.272585303 seconds)
    (394/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.271735354 seconds)
    (395/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.270205559 seconds)
    (396/481) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 2.26919743 seconds)
    (397/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.489856454 seconds)
    (398/481) benchmarking ("sumvector", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.851098932 seconds)
    (399/481) benchmarking ("sumeach_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.522992154 seconds)
    (400/481) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 1.275993501 seconds)
    (401/481) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.272194118 seconds)
    (402/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.299550685 seconds)
    (403/481) benchmarking ("sumcolon_view", "Array{Int32,2}")...
    done (took 1.454779069 seconds)
    (404/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.491596977 seconds)
    (405/481) benchmarking ("sumlogical", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.937391318 seconds)
    (406/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.490744507 seconds)
    (407/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.496802284 seconds)
    (408/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.280114473 seconds)
    (409/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.271719906 seconds)
    (410/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.855124212 seconds)
    (411/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.494179261 seconds)
    (412/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.277653026 seconds)
    (413/481) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.278584936 seconds)
    (414/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.464860194 seconds)
    (415/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.277972698 seconds)
    (416/481) benchmarking ("sumelt", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.307918058 seconds)
    (417/481) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.148035612 seconds)
    (418/481) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 2.270854323 seconds)
    (419/481) benchmarking ("sumrange", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.773458588 seconds)
    (420/481) benchmarking ("sumelt_boundscheck", "Array{Int32,2}")...
    done (took 1.485602753 seconds)
    (421/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.292811939 seconds)
    (422/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.273256575 seconds)
    (423/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.947667971 seconds)
    (424/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.856466441 seconds)
    (425/481) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.284930174 seconds)
    (426/481) benchmarking ("sumcolon", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.704907153 seconds)
    (427/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.272576334 seconds)
    (428/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.282192672 seconds)
    (429/481) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.547775539 seconds)
    (430/481) benchmarking ("sumvector_view", "1:100000")...
    done (took 1.279242687 seconds)
    (431/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.273147195 seconds)
    (432/481) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.552597191 seconds)
    (433/481) benchmarking ("sumlinear", "1:100000")...
    done (took 1.277775892 seconds)
    (434/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.276014224 seconds)
    (435/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.462236402 seconds)
    (436/481) benchmarking ("sumvector", "Array{Int32,2}")...
    done (took 1.840778891 seconds)
    (437/481) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.955856283 seconds)
    (438/481) benchmarking ("sumlinear_view", "Array{Int32,2}")...
    done (took 2.286029745 seconds)
    (439/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.273013993 seconds)
    (440/481) benchmarking ("sumelt", "Array{Float32,2}")...
    done (took 2.27519077 seconds)
    (441/481) benchmarking ("sumeach", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.273945363 seconds)
    (442/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.304141114 seconds)
    (443/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.275887358 seconds)
    (444/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.281259168 seconds)
    (445/481) benchmarking ("sumvector_view", "BitArray{2}")...
    done (took 1.629106322 seconds)
    (446/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.272929271 seconds)
    (447/481) benchmarking ("sumeach_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.275149767 seconds)
    (448/481) benchmarking ("sumcartesian_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.286197995 seconds)
    (449/481) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.272875909 seconds)
    (450/481) benchmarking ("sumrange", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.275486899 seconds)
    (451/481) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 2.27736753 seconds)
    (452/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.272751503 seconds)
    (453/481) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 1.280521137 seconds)
    (454/481) benchmarking ("sumeach_view", "BitArray{2}")...
    done (took 2.245081473 seconds)
    (455/481) benchmarking ("sumlogical_view", "BitArray{2}")...
    done (took 2.252638009 seconds)
    (456/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.287898916 seconds)
    (457/481) benchmarking ("mapr_access", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.399066807 seconds)
    (458/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.779904052 seconds)
    (459/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.273895456 seconds)
    (460/481) benchmarking "2d"...
    done (took 1.890400009 seconds)
    (461/481) benchmarking "7d"...
    done (took 1.610106701 seconds)
    (462/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.521248258 seconds)
    (463/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.280169104 seconds)
    (464/481) benchmarking ("sumcartesian", "BitArray{2}")...
    done (took 2.248589621 seconds)
    (465/481) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.279506403 seconds)
    (466/481) benchmarking ("sumlinear", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.274238942 seconds)
    (467/481) benchmarking ("sumeach", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.274244835 seconds)
    (468/481) benchmarking ("sumelt", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.27422205 seconds)
    (469/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.285851108 seconds)
    (470/481) benchmarking ("sumrange", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.765986561 seconds)
    (471/481) benchmarking ("sumcolon", "Array{Float32,2}")...
    done (took 2.278298461 seconds)
    (472/481) benchmarking ("sumrange_view", "Array{Int32,2}")...
    done (took 1.496071079 seconds)
    (473/481) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.285612921 seconds)
    (474/481) benchmarking ("sumelt", "Array{Int32,2}")...
    done (took 1.484592231 seconds)
    (475/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.484736835 seconds)
    (476/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.273888817 seconds)
    (477/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.463803465 seconds)
    (478/481) benchmarking ("sumcolon", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.284353092 seconds)
    (479/481) benchmarking ("sumcartesian", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.298718007 seconds)
    (480/481) benchmarking ("sumlinear", "BitArray{2}")...
    done (took 2.245888647 seconds)
    (481/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.273315911 seconds)
  done (took 926.028869182 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("collect", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 2.30414574 seconds)
    (2/8) benchmarking ("collect", "Array{Float64,1}")...
    done (took 2.265661696 seconds)
    (3/8) benchmarking ("comprehension_collect", "Array{Float64,1}")...
    done (took 2.291938743 seconds)
    (4/8) benchmarking ("comprehension_iteration", "Array{Float64,1}")...
    done (took 2.292887606 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 2.269641691 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 2.364649171 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Array{Float64,1}")...
    done (took 2.321033676 seconds)
    (8/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 2.296878638 seconds)
  done (took 19.561614238 seconds)
  (11/13) benchmarking "cat"...
    (1/16) benchmarking ("hvcat", 500)...
    done (took 2.263939595 seconds)
    (2/16) benchmarking ("hcat_setind", 5)...
    done (took 1.27920882 seconds)
    (3/16) benchmarking ("hvcat_setind", 500)...
    done (took 2.275666451 seconds)
    (4/16) benchmarking ("hvcat", 5)...
    done (took 1.279191672 seconds)
    (5/16) benchmarking ("hcat", 500)...
    done (took 2.271322517 seconds)
    (6/16) benchmarking ("catnd_setind", 5)...
    done (took 1.693425029 seconds)
    (7/16) benchmarking ("vcat_setind", 500)...
    done (took 2.271395132 seconds)
    (8/16) benchmarking ("hvcat_setind", 5)...
    done (took 1.276335224 seconds)
    (9/16) benchmarking ("vcat", 5)...
    done (took 1.289329679 seconds)
    (10/16) benchmarking ("catnd_setind", 500)...
    done (took 2.271797964 seconds)
    (11/16) benchmarking ("vcat", 500)...
    done (took 2.277173925 seconds)
    (12/16) benchmarking ("catnd", 5)...
    done (took 1.845597827 seconds)
    (13/16) benchmarking ("vcat_setind", 5)...
    done (took 1.279536016 seconds)
    (14/16) benchmarking ("hcat_setind", 500)...
    done (took 2.272152252 seconds)
    (15/16) benchmarking ("catnd", 500)...
    done (took 2.273258044 seconds)
    (16/16) benchmarking ("hcat", 5)...
    done (took 1.283310961 seconds)
  done (took 30.558413488 seconds)
  (12/13) benchmarking "subarray"...
    (1/8) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.784098691 seconds)
    (2/8) benchmarking ("lucompletepivSub!", 500)...
    done (took 2.525120116 seconds)
    (3/8) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.399678705 seconds)
    (4/8) benchmarking ("lucompletepivCopy!", 250)...
    done (took 2.293858386 seconds)
    (5/8) benchmarking ("lucompletepivSub!", 250)...
    done (took 2.30599305 seconds)
    (6/8) benchmarking ("lucompletepivCopy!", 100)...
    done (took 2.282398082 seconds)
    (7/8) benchmarking ("lucompletepivCopy!", 500)...
    done (took 2.300922059 seconds)
    (8/8) benchmarking ("lucompletepivSub!", 100)...
    done (took 2.281705826 seconds)
  done (took 24.331981881 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 1.282487582 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 1.283794737 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.284567247 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 1.286770609 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 1.285928903 seconds)
  done (took 7.582237514 seconds)
done (took 1174.050516634 seconds)
(18/20) benchmarking "misc"...
  (1/6) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.285274176 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.285372302 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.283912609 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.284037698 seconds)
  done (took 6.298186467 seconds)
  (2/6) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 2.250699306 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 2.251140975 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 2.249874674 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 1.266288882 seconds)
  done (took 9.177019455 seconds)
  (3/6) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 1.871055508 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 1.737124536 seconds)
  done (took 4.767841435 seconds)
  (4/6) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.816347909 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.807607372 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.80814519 seconds)
  done (took 6.591507899 seconds)
  (5/6) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.552389058 seconds)
  done (took 2.712739798 seconds)
  (6/6) benchmarking "parse"...
    (1/3) benchmarking "Int"...
    done (took 2.266678027 seconds)
    (2/3) benchmarking "Float64"...
    done (took 2.271178682 seconds)
    (3/3) benchmarking "DateTime"...
    done (took 1.995020878 seconds)
  done (took 7.694207683 seconds)
done (took 38.400482487 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.271469599 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 3.036498146 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 2.428854661 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.278522511 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 2.449609545 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 2.428481248 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 2.521248504 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.271317714 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.274792262 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.279841876 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.279346706 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 2.43422108 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 2.510344535 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 3.03463347 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 2.509902435 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 3.036123855 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 2.436457937 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.27217111 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 2.293392421 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 2.285044371 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 2.518260312 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.284527409 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.272335103 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.280606653 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 2.439030104 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 2.419333848 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.278536421 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 3.034971949 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 2.283630983 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.271956 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 2.423254698 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 2.272780828 seconds)
  done (took 79.272687455 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.272916662 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 2.286722803 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 2.274015694 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.27308928 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 2.274175153 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 2.273639862 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 2.276765943 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.274334923 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.294438666 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.278259621 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.27446646 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 2.273961976 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 2.275173619 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 2.275601939 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 2.277985588 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 2.273765328 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 2.274901161 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.274573178 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 2.276735214 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 2.276385083 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 2.29049089 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.274753329 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.276149867 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.278072125 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 2.277244967 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 2.27554462 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.284323717 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 2.275970673 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 2.292738523 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.283739731 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 2.27548324 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 2.275581872 seconds)
  done (took 74.054624326 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.281273458 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 2.274975628 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 2.276876162 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.274331244 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 2.275657254 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 2.277928377 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 2.278389907 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.289324792 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.27559102 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.277310473 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.274882767 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 2.278142079 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 2.273300724 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 2.284978104 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 2.275106646 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 2.288305698 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 2.266268511 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.265871908 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 2.280057537 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 2.265839218 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 2.267482843 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.266198584 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.255649247 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.256488624 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 2.256450343 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 2.252376983 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.250864214 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 2.25338816 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 2.252086484 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.251016998 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 2.253295926 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 2.244455561 seconds)
  done (took 73.757817787 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.490297898 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.267257536 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 1.258044143 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.252780696 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 1.259009954 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.255782325 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.257003416 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.487658372 seconds)
  done (took 13.669568753 seconds)
done (took 241.915568781 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/33) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.250303747 seconds)
    (2/33) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.691139542 seconds)
    (3/33) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.278663397 seconds)
    (4/33) benchmarking ("Set", "Any", "loop")...
    done (took 2.249315242 seconds)
    (5/33) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.270884889 seconds)
    (6/33) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.27816863 seconds)
    (7/33) benchmarking ("Vector", "String", "loop")...
    done (took 1.458284306 seconds)
    (8/33) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.282056336 seconds)
    (9/33) benchmarking ("Vector", "Int", "loop")...
    done (took 1.457905799 seconds)
    (10/33) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.271466766 seconds)
    (11/33) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.271020382 seconds)
    (12/33) benchmarking ("Dict", "String", "loop")...
    done (took 2.250104491 seconds)
    (13/33) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.957448559 seconds)
    (14/33) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.401164309 seconds)
    (15/33) benchmarking ("Set", "String", "iterator")...
    done (took 2.026624963 seconds)
    (16/33) benchmarking ("Set", "String", "loop")...
    done (took 2.135058575 seconds)
    (17/33) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.025761201 seconds)
    (18/33) benchmarking ("Set", "Any", "iterator")...
    done (took 2.2423975 seconds)
    (19/33) benchmarking ("Set", "Int", "loop")...
    done (took 1.759581151 seconds)
    (20/33) benchmarking ("Vector", "Any", "loop")...
    done (took 1.513141291 seconds)
    (21/33) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.277901059 seconds)
    (22/33) benchmarking ("Dict", "String", "iterator")...
    done (took 2.238473552 seconds)
    (23/33) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.018186163 seconds)
    (24/33) benchmarking ("Dict", "Int", "loop")...
    done (took 2.032476026 seconds)
    (25/33) benchmarking ("Dict", "Any", "iterator")...
    done (took 2.21669096 seconds)
    (26/33) benchmarking ("Vector", "String", "iterator")...
    done (took 1.307261947 seconds)
    (27/33) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.331461187 seconds)
    (28/33) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.457545467 seconds)
    (29/33) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.394202456 seconds)
    (30/33) benchmarking ("Vector", "Int", "iterator")...
    done (took 1.31074098 seconds)
    (31/33) benchmarking ("Set", "Int", "iterator")...
    done (took 1.691255335 seconds)
    (32/33) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.241532428 seconds)
    (33/33) benchmarking ("Dict", "Any", "loop")...
    done (took 2.251378041 seconds)
  done (took 58.971934078 seconds)
  (2/6) benchmarking "iteration"...
    (1/30) benchmarking ("Set", "String", "next")...
    done (took 1.234812357 seconds)
    (2/30) benchmarking ("Set", "Any", "start")...
    done (took 1.244417927 seconds)
    (3/30) benchmarking ("Set", "Int", "done")...
    done (took 1.245931414 seconds)
    (4/30) benchmarking ("Dict", "Int", "done")...
    done (took 1.244697945 seconds)
    (5/30) benchmarking ("Dict", "String", "start")...
    done (took 1.244097255 seconds)
    (6/30) benchmarking ("BitSet", "Int", "done")...
    done (took 1.246974655 seconds)
    (7/30) benchmarking ("Dict", "String", "next")...
    done (took 1.235575933 seconds)
    (8/30) benchmarking ("Vector", "Int", "done")...
    done (took 1.24280474 seconds)
    (9/30) benchmarking ("Vector", "String", "done")...
    done (took 1.244320688 seconds)
    (10/30) benchmarking ("Vector", "Any", "done")...
    done (took 1.246917429 seconds)
    (11/30) benchmarking ("Dict", "String", "done")...
    done (took 1.24714108 seconds)
    (12/30) benchmarking ("Vector", "Int", "next")...
    done (took 1.24607676 seconds)
    (13/30) benchmarking ("Set", "Int", "next")...
    done (took 1.242825759 seconds)
    (14/30) benchmarking ("Vector", "Int", "start")...
    done (took 1.247085931 seconds)
    (15/30) benchmarking ("Dict", "Int", "start")...
    done (took 1.243730339 seconds)
    (16/30) benchmarking ("Vector", "Any", "next")...
    done (took 1.219902663 seconds)
    (17/30) benchmarking ("Dict", "Any", "next")...
    done (took 1.2348366 seconds)
    (18/30) benchmarking ("Set", "String", "start")...
    done (took 1.248125296 seconds)
    (19/30) benchmarking ("Vector", "String", "next")...
    done (took 1.239633106 seconds)
    (20/30) benchmarking ("Set", "Any", "next")...
    done (took 1.221276013 seconds)
    (21/30) benchmarking ("Vector", "String", "start")...
    done (took 1.24349223 seconds)
    (22/30) benchmarking ("Dict", "Any", "done")...
    done (took 1.24708683 seconds)
    (23/30) benchmarking ("Dict", "Int", "next")...
    done (took 1.246757012 seconds)
    (24/30) benchmarking ("Vector", "Any", "start")...
    done (took 1.246681216 seconds)
    (25/30) benchmarking ("Set", "String", "done")...
    done (took 1.243817852 seconds)
    (26/30) benchmarking ("Set", "Any", "done")...
    done (took 1.241506226 seconds)
    (27/30) benchmarking ("Set", "Int", "start")...
    done (took 1.245816218 seconds)
    (28/30) benchmarking ("BitSet", "Int", "next")...
    done (took 1.242071584 seconds)
    (29/30) benchmarking ("BitSet", "Int", "start")...
    done (took 1.242391111 seconds)
    (30/30) benchmarking ("Dict", "Any", "start")...
    done (took 1.240510486 seconds)
  done (took 38.386676829 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.24224906 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.746924044 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.897906961 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.241836689 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.229968431 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 1.235536914 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.476287819 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.247320527 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 1.235359511 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 1.230485269 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.645850976 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.246428065 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.2573901 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.911566312 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 1.244866904 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.243250779 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.242332299 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.235560458 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.746855725 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.249712144 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 1.481675518 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.24947449 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.478134942 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 1.248074254 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.236397541 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.235221475 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 1.239515179 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.023764263 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 1.25673787 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.652117656 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.872737995 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.477652147 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.950998837 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.952423959 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.877473774 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.249260776 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.242800317 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.651493703 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 1.24269983 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.235819772 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.476159946 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 1.240725919 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.90785738 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.898314326 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 1.249939124 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.243517113 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.043615917 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.663943719 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.445867971 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 1.245328926 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.94045075 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 1.244666438 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.246919988 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.237728744 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.441884902 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.242991954 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.235594537 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.020818409 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 1.245526834 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 1.479369178 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.251035649 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.236559409 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.743888573 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 1.243201092 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.741208642 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.243826656 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 1.242562989 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 1.238518572 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.912983285 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 1.245024381 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.910878518 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.251298868 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.24599036 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.649024867 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.745923801 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.083661364 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 1.239340172 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.746762692 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.975113243 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.492690877 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 1.245673306 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.986564075 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 1.496693303 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 1.246521726 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.248784643 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.250050496 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.246090157 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.309597308 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.480280392 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.831270142 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.908359294 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.017017612 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 1.484249869 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 1.245690733 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 1.238503746 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.019546487 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.247187778 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.247455296 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.905881938 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.930728863 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.25225477 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 1.245891097 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.901320517 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 1.255589513 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 1.485391491 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 1.243690589 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.955791026 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 1.243752725 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.312727729 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.248190086 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 1.247672093 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 1.242710225 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 1.484600915 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 1.242712944 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.248464065 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.902028848 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.675007675 seconds)
  done (took 173.751614354 seconds)
  (4/6) benchmarking "optimizations"...
    (1/20) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 2.2320546 seconds)
    (2/20) benchmarking ("Set", "abstract", "Int8")...
    done (took 2.233062028 seconds)
    (3/20) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 2.23774818 seconds)
    (4/20) benchmarking ("Dict", "concrete", "Bool")...
    done (took 2.233810177 seconds)
    (5/20) benchmarking ("Dict", "abstract", "Bool")...
    done (took 2.234057615 seconds)
    (6/20) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.241287878 seconds)
    (7/20) benchmarking ("Set", "abstract", "Bool")...
    done (took 2.235362 seconds)
    (8/20) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 2.233486679 seconds)
    (9/20) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.238548521 seconds)
    (10/20) benchmarking ("Set", "concrete", "Bool")...
    done (took 2.234514521 seconds)
    (11/20) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 2.23377199 seconds)
    (12/20) benchmarking ("Set", "concrete", "Nothing")...
    done (took 1.242722128 seconds)
    (13/20) benchmarking ("Set", "abstract", "Nothing")...
    done (took 1.240349395 seconds)
    (14/20) benchmarking ("BitSet", "Int8")...
    done (took 2.235347568 seconds)
    (15/20) benchmarking ("Set", "abstract", "UInt16")...
    done (took 2.234298512 seconds)
    (16/20) benchmarking ("Dict", "concrete", "Int8")...
    done (took 2.234111764 seconds)
    (17/20) benchmarking ("BitSet", "UInt16")...
    done (took 2.234323862 seconds)
    (18/20) benchmarking ("Set", "concrete", "UInt16")...
    done (took 2.240164997 seconds)
    (19/20) benchmarking ("Set", "concrete", "Int8")...
    done (took 2.235732653 seconds)
    (20/20) benchmarking ("Dict", "abstract", "Int8")...
    done (took 2.235352562 seconds)
  done (took 41.850360424 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/79) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.24956394 seconds)
    (2/79) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.720553333 seconds)
    (3/79) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.694819539 seconds)
    (4/79) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.247681954 seconds)
    (5/79) benchmarking ("BitSet", "Int", "last")...
    done (took 1.246140023 seconds)
    (6/79) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.238877437 seconds)
    (7/79) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.284540101 seconds)
    (8/79) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.252836539 seconds)
    (9/79) benchmarking ("BitSet", "Int", "first")...
    done (took 1.241870032 seconds)
    (10/79) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.494157651 seconds)
    (11/79) benchmarking ("Vector", "String", "push!")...
    done (took 1.38725609 seconds)
    (12/79) benchmarking ("Set", "String", "in", "false")...
    done (took 1.250607402 seconds)
    (13/79) benchmarking ("BitSet", "Int", "length")...
    done (took 1.244705901 seconds)
    (14/79) benchmarking ("Set", "Int", "first")...
    done (took 1.244140832 seconds)
    (15/79) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.688391843 seconds)
    (16/79) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.215747576 seconds)
    (17/79) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.489923818 seconds)
    (18/79) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.717232651 seconds)
    (19/79) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.240180626 seconds)
    (20/79) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.711085284 seconds)
    (21/79) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.210546132 seconds)
    (22/79) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.238476831 seconds)
    (23/79) benchmarking ("Dict", "String", "getindex")...
    done (took 1.227111977 seconds)
    (24/79) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.708172053 seconds)
    (25/79) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.498864608 seconds)
    (26/79) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.476907377 seconds)
    (27/79) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.280664121 seconds)
    (28/79) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.716947179 seconds)
    (29/79) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.240027441 seconds)
    (30/79) benchmarking ("Vector", "Int", "last")...
    done (took 1.239951874 seconds)
    (31/79) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.710767525 seconds)
    (32/79) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.241371395 seconds)
    (33/79) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.231779402 seconds)
    (34/79) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.692616874 seconds)
    (35/79) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.236345046 seconds)
    (36/79) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.253309847 seconds)
    (37/79) benchmarking ("Vector", "Int", "length")...
    done (took 1.239846241 seconds)
    (38/79) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.277074042 seconds)
    (39/79) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.28623668 seconds)
    (40/79) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.496002737 seconds)
    (41/79) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 1.71600363 seconds)
    (42/79) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.482049128 seconds)
    (43/79) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.251872064 seconds)
    (44/79) benchmarking ("Vector", "Any", "in", "true")...
    done (took 1.38785258 seconds)
    (45/79) benchmarking ("Dict", "Int", "first")...
    done (took 1.243398501 seconds)
    (46/79) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.212749609 seconds)
    (47/79) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.715841664 seconds)
    (48/79) benchmarking ("Vector", "Int", "in", "true")...
    done (took 1.240734059 seconds)
    (49/79) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.212957618 seconds)
    (50/79) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.23449105 seconds)
    (51/79) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.247040036 seconds)
    (52/79) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.698717194 seconds)
    (53/79) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.233682062 seconds)
    (54/79) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.698291401 seconds)
    (55/79) benchmarking ("Dict", "Int", "length")...
    done (took 1.24189959 seconds)
    (56/79) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.241768786 seconds)
    (57/79) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.712437173 seconds)
    (58/79) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.694746937 seconds)
    (59/79) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.685979522 seconds)
    (60/79) benchmarking ("Vector", "Int", "push!")...
    done (took 1.376991974 seconds)
    (61/79) benchmarking ("Vector", "String", "getindex")...
    done (took 1.236208526 seconds)
    (62/79) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.477666673 seconds)
    (63/79) benchmarking ("Vector", "Int", "first")...
    done (took 1.238011181 seconds)
    (64/79) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.721570392 seconds)
    (65/79) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.237639348 seconds)
    (66/79) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.241359723 seconds)
    (67/79) benchmarking ("Set", "String", "in", "true")...
    done (took 1.241689458 seconds)
    (68/79) benchmarking ("Vector", "Any", "push!")...
    done (took 1.377925224 seconds)
    (69/79) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.720502752 seconds)
    (70/79) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.478235009 seconds)
    (71/79) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.489256182 seconds)
    (72/79) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.487205315 seconds)
    (73/79) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.242265326 seconds)
    (74/79) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.290184261 seconds)
    (75/79) benchmarking ("Set", "Int", "length")...
    done (took 1.24708148 seconds)
    (76/79) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 1.490729709 seconds)
    (77/79) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.290706752 seconds)
    (78/79) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.617242688 seconds)
    (79/79) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.491083225 seconds)
  done (took 111.642704153 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("Dict", "Int", "filter")...
    done (took 1.475367143 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.337235753 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.575774089 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.760915125 seconds)
    (5/28) benchmarking ("Set", "Any", "pop!")...
    done (took 1.696933424 seconds)
    (6/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.367658429 seconds)
    (7/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.335047454 seconds)
    (8/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.461203209 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.24156822 seconds)
    (10/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.35959306 seconds)
    (11/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.795632131 seconds)
    (12/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 1.319886185 seconds)
    (13/28) benchmarking ("Dict", "Any", "filter")...
    done (took 1.952756415 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.288904443 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.338185539 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.355704893 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.588665184 seconds)
    (18/28) benchmarking ("Dict", "String", "filter")...
    done (took 2.141209542 seconds)
    (19/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.816832456 seconds)
    (20/28) benchmarking ("Dict", "Int", "filter!")...
    done (took 1.785707508 seconds)
    (21/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 2.252110499 seconds)
    (22/28) benchmarking ("Vector", "Int", "filter")...
    done (took 1.323005249 seconds)
    (23/28) benchmarking ("Set", "String", "filter")...
    done (took 1.745009046 seconds)
    (24/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.425046174 seconds)
    (25/28) benchmarking ("Dict", "String", "filter!")...
    done (took 2.236646754 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.762541084 seconds)
    (27/28) benchmarking ("Dict", "Any", "filter!")...
    done (took 2.073950361 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.712394262 seconds)
  done (took 47.644306994 seconds)
done (took 473.383422458 seconds)
SAVING RESULT...
DONE!

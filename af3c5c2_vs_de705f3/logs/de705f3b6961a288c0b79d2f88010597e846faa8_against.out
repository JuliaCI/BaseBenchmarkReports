cset: moving following pidspec: 8692
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 1.427136913 seconds)
loading group "string"... done (took 0.508122488 seconds)
loading group "linalg"... done (took 8.503327135 seconds)
loading group "parallel"... done (took 0.171903503 seconds)
loading group "find"... done (took 3.030676603 seconds)
loading group "tuple"... done (took 1.995375322 seconds)
loading group "dates"... done (took 1.461366649 seconds)
loading group "micro"... done (took 0.195533168 seconds)
loading group "io"... done (took 0.541325817 seconds)
loading group "scalar"... done (took 51.214302031 seconds)
loading group "sparse"... done (took 13.766019814 seconds)
loading group "broadcast"... done (took 1.271788779 seconds)
loading group "union"... done (took 9.792668496 seconds)
loading group "simd"... done (took 3.266201852 seconds)
loading group "random"... done (took 11.999837751 seconds)
loading group "problem"... done (took 2.173127252 seconds)
loading group "array"... done (took 24.891319106 seconds)
loading group "misc"... done (took 1.098982159 seconds)
loading group "sort"... done (took 3.678825916 seconds)
loading group "collection"... done (took 19.03192618 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.593423665 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.129932676 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.201600898 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.280109608 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.228684847 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.16600399 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.141909475 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.239171152 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.63123245 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.202492028 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.138981942 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.419602147 seconds)
done (took 6.092923595 seconds)
(2/20) benchmarking "string"...
  (1/4) benchmarking "join"...
  done (took 0.246442886 seconds)
  (2/4) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.241267619 seconds)
    (2/2) benchmarking "String"...
    done (took 0.16194929 seconds)
  done (took 1.065974803 seconds)
  (3/4) benchmarking "replace"...
  done (took 0.07506258 seconds)
  (4/4) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.155133041 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.105453203 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.093958971 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.091271056 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.10773061 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.091141481 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.107216694 seconds)
  done (took 1.418978979 seconds)
done (took 3.477572537 seconds)
(3/20) benchmarking "linalg"...
  (1/2) benchmarking "factorization"...
    (1/64) benchmarking ("eig", "LowerTriangular", 1024)...
    done (took 0.493401596 seconds)
    (2/64) benchmarking ("svdfact", "UpperTriangular", 1024)...
    done (took 0.855950325 seconds)
    (3/64) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.494509207 seconds)
    (4/64) benchmarking ("eigfact", "UpperTriangular", 256)...
    done (took 0.142285696 seconds)
    (5/64) benchmarking ("qr", "Matrix", 256)...
    done (took 0.30636188 seconds)
    (6/64) benchmarking ("lu", "Matrix", 256)...
    done (took 0.289345902 seconds)
    (7/64) benchmarking ("eig", "SymTridiagonal", 256)...
    done (took 0.267319996 seconds)
    (8/64) benchmarking ("qrfact", "Matrix", 1024)...
    done (took 0.197628155 seconds)
    (9/64) benchmarking ("eigfact", "Diagonal", 256)...
    done (took 0.092963735 seconds)
    (10/64) benchmarking ("eig", "LowerTriangular", 256)...
    done (took 0.088419731 seconds)
    (11/64) benchmarking ("lufact", "Tridiagonal", 1024)...
    done (took 0.171983076 seconds)
    (12/64) benchmarking ("schurfact", "Matrix", 1024)...
    done (took 1.421737893 seconds)
    (13/64) benchmarking ("eig", "Bidiagonal", 1024)...
    done (took 0.380328844 seconds)
    (14/64) benchmarking ("eigfact", "Matrix", 1024)...
    done (took 1.984618028 seconds)
    (15/64) benchmarking ("eig", "UpperTriangular", 256)...
    done (took 0.08606943 seconds)
    (16/64) benchmarking ("svdfact", "Matrix", 256)...
    done (took 0.091977076 seconds)
    (17/64) benchmarking ("lufact", "Matrix", 256)...
    done (took 0.127257923 seconds)
    (18/64) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.780987098 seconds)
    (19/64) benchmarking ("qrfact", "Matrix", 256)...
    done (took 0.080164642 seconds)
    (20/64) benchmarking ("eigfact", "Matrix", 256)...
    done (took 0.109780372 seconds)
    (21/64) benchmarking ("svd", "Diagonal", 256)...
    done (took 0.506229758 seconds)
    (22/64) benchmarking ("svdfact", "Diagonal", 256)...
    done (took 0.187032359 seconds)
    (23/64) benchmarking ("lufact", "Matrix", 1024)...
    done (took 0.099098157 seconds)
    (24/64) benchmarking ("schur", "Matrix", 256)...
    done (took 0.118753854 seconds)
    (25/64) benchmarking ("eigfact", "SymTridiagonal", 1024)...
    done (took 0.184495145 seconds)
    (26/64) benchmarking ("svd", "LowerTriangular", 256)...
    done (took 0.134158645 seconds)
    (27/64) benchmarking ("eig", "UpperTriangular", 1024)...
    done (took 0.159631124 seconds)
    (28/64) benchmarking ("eig", "Bidiagonal", 256)...
    done (took 0.103664262 seconds)
    (29/64) benchmarking ("svdfact", "LowerTriangular", 1024)...
    done (took 0.689420578 seconds)
    (30/64) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.131442107 seconds)
    (31/64) benchmarking ("eig", "Matrix", 256)...
    done (took 0.175715797 seconds)
    (32/64) benchmarking ("eigfact", "SymTridiagonal", 256)...
    done (took 0.094912774 seconds)
    (33/64) benchmarking ("eigfact", "UpperTriangular", 1024)...
    done (took 0.156667251 seconds)
    (34/64) benchmarking ("svdfact", "Bidiagonal", 256)...
    done (took 0.188976674 seconds)
    (35/64) benchmarking ("lu", "Tridiagonal", 256)...
    done (took 0.195018191 seconds)
    (36/64) benchmarking ("svd", "UpperTriangular", 256)...
    done (took 0.109195964 seconds)
    (37/64) benchmarking ("svd", "UpperTriangular", 1024)...
    done (took 0.701567233 seconds)
    (38/64) benchmarking ("eig", "SymTridiagonal", 1024)...
    done (took 0.200749436 seconds)
    (39/64) benchmarking ("svd", "Diagonal", 1024)...
    done (took 0.100796286 seconds)
    (40/64) benchmarking ("eigfact", "Diagonal", 1024)...
    done (took 0.101095173 seconds)
    (41/64) benchmarking ("svd", "LowerTriangular", 1024)...
    done (took 0.672450809 seconds)
    (42/64) benchmarking ("lu", "Tridiagonal", 1024)...
    done (took 0.117880989 seconds)
    (43/64) benchmarking ("cholfact", "Matrix", 256)...
    done (took 0.182251461 seconds)
    (44/64) benchmarking ("eig", "Diagonal", 1024)...
    done (took 0.101234025 seconds)
    (45/64) benchmarking ("eigfact", "LowerTriangular", 256)...
    done (took 0.087438365 seconds)
    (46/64) benchmarking ("eigfact", "LowerTriangular", 1024)...
    done (took 0.183919305 seconds)
    (47/64) benchmarking ("svdfact", "Diagonal", 1024)...
    done (took 0.102057791 seconds)
    (48/64) benchmarking ("lufact", "Tridiagonal", 256)...
    done (took 0.09394412 seconds)
    (49/64) benchmarking ("svd", "Bidiagonal", 256)...
    done (took 0.094856092 seconds)
    (50/64) benchmarking ("eig", "Diagonal", 256)...
    done (took 0.085862367 seconds)
    (51/64) benchmarking ("svd", "Bidiagonal", 1024)...
    done (took 0.166912784 seconds)
    (52/64) benchmarking ("eig", "Matrix", 1024)...
    done (took 1.474710876 seconds)
    (53/64) benchmarking ("svdfact", "UpperTriangular", 256)...
    done (took 0.102527308 seconds)
    (54/64) benchmarking ("chol", "Matrix", 1024)...
    done (took 0.16535269 seconds)
    (55/64) benchmarking ("svdfact", "LowerTriangular", 256)...
    done (took 0.091791591 seconds)
    (56/64) benchmarking ("svdfact", "Matrix", 1024)...
    done (took 0.708593864 seconds)
    (57/64) benchmarking ("svd", "Matrix", 256)...
    done (took 0.098133601 seconds)
    (58/64) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.274612739 seconds)
    (59/64) benchmarking ("schurfact", "Matrix", 256)...
    done (took 0.130188093 seconds)
    (60/64) benchmarking ("cholfact", "Matrix", 1024)...
    done (took 0.094971839 seconds)
    (61/64) benchmarking ("chol", "Matrix", 256)...
    done (took 0.08817258 seconds)
    (62/64) benchmarking ("eigfact", "Bidiagonal", 256)...
    done (took 0.085908033 seconds)
    (63/64) benchmarking ("svdfact", "Bidiagonal", 1024)...
    done (took 0.158774066 seconds)
    (64/64) benchmarking ("eigfact", "Bidiagonal", 1024)...
    done (took 0.094380491 seconds)
  done (took 19.957561284 seconds)
  (2/2) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.144672737 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.162035882 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.077202733 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.15606033 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.122772605 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.080742424 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.100315733 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.077075407 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.107158343 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.193251942 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.136890267 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.149230608 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.089864394 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.088712668 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.125753471 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.245992691 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.105947072 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.119935013 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.088115695 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.088771184 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.13691271 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.09587646 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.088950926 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.106206345 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.168549571 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.199789029 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.106583162 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.120756519 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.087297178 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.095002423 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.140149196 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.147411358 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.093295826 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.090163915 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.173773369 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.126260583 seconds)
  done (took 5.119913894 seconds)
done (took 25.740497788 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.426578108 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.079101808 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.078204858 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.096447026 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.079469216 seconds)
  done (took 1.471442833 seconds)
done (took 2.156801139 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/13) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 0.350803056 seconds)
    (2/13) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 0.184315633 seconds)
    (3/13) benchmarking ("BitArray{1}", "90-10")...
    done (took 0.098224641 seconds)
    (4/13) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 0.183727151 seconds)
    (5/13) benchmarking ("BitArray{1}", "50-50")...
    done (took 0.081294314 seconds)
    (6/13) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 0.187904927 seconds)
    (7/13) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 0.173956997 seconds)
    (8/13) benchmarking ("Array{Bool,1}", "10-90")...
    done (took 0.090460637 seconds)
    (9/13) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 0.198886006 seconds)
    (10/13) benchmarking ("Array{Bool,1}", "90-10")...
    done (took 0.079031074 seconds)
    (11/13) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 0.179890975 seconds)
    (12/13) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 0.079899682 seconds)
    (13/13) benchmarking ("BitArray{1}", "10-90")...
    done (took 0.099381246 seconds)
  done (took 2.701194553 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 0.099694691 seconds)
    (2/11) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 0.107794449 seconds)
    (3/11) benchmarking ("BitArray{1}", "90-10")...
    done (took 0.099798856 seconds)
    (4/11) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 0.118437377 seconds)
    (5/11) benchmarking ("BitArray{1}", "50-50")...
    done (took 0.084038179 seconds)
    (6/11) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 0.099123616 seconds)
    (7/11) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 0.114001391 seconds)
    (8/11) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 0.109026145 seconds)
    (9/11) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 0.099725759 seconds)
    (10/11) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 0.109243866 seconds)
    (11/11) benchmarking ("BitArray{1}", "10-90")...
    done (took 0.082016075 seconds)
  done (took 1.811210027 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 0.096296814 seconds)
    (2/11) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 0.10429553 seconds)
    (3/11) benchmarking ("BitArray{1}", "90-10")...
    done (took 0.095589658 seconds)
    (4/11) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 0.112195482 seconds)
    (5/11) benchmarking ("BitArray{1}", "50-50")...
    done (took 0.081233137 seconds)
    (6/11) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 0.097086056 seconds)
    (7/11) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 0.112358481 seconds)
    (8/11) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 0.104770904 seconds)
    (9/11) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 0.096357982 seconds)
    (10/11) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 0.108645778 seconds)
    (11/11) benchmarking ("BitArray{1}", "10-90")...
    done (took 0.082789054 seconds)
  done (took 1.785504803 seconds)
done (took 6.986037319 seconds)
(6/20) benchmarking "tuple"...
  (1/3) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.059089999 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 10.125678474 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.158262875 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.199927902 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.340488277 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.225789042 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.539016433 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.145527549 seconds)
  done (took 13.628386805 seconds)
  (2/3) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.11749447 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.14294613 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.08854265 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.089266004 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.092988962 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.107227349 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.091893286 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.088909307 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.106525517 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.091945433 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.092763603 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.107879063 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.092433826 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.089835642 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.093104492 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.10737098 seconds)
  done (took 2.352195186 seconds)
  (3/3) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.139016394 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.137587791 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.095025142 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.096841315 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.108813662 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.095277978 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.101021296 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.111930105 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.091483446 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.093093854 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.100644943 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.111153127 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.096182552 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.092072486 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.111960811 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.117362911 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.093783397 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.113575238 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.115394555 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.112305685 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.09865528 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.095387954 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.111334015 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.098722857 seconds)
  done (took 3.314448893 seconds)
done (took 19.988935532 seconds)
(7/20) benchmarking "dates"...
  (1/6) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.145147144 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.095728576 seconds)
  done (took 0.938842784 seconds)
  (2/6) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.133498756 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.147005338 seconds)
  done (took 0.982468766 seconds)
  (3/6) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.090996658 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.091742689 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.117813469 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.131003854 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.099581995 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.109332844 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.093618694 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.092008187 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.111633319 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.090382374 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.094206603 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.123416416 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.096681696 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.122257929 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.093747219 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.094484587 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.113425445 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.094715474 seconds)
  done (took 2.568303788 seconds)
  (4/6) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.086594635 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.090861545 seconds)
  done (took 0.885404737 seconds)
  (5/6) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.091132522 seconds)
    (2/7) benchmarking "second"...
    done (took 0.08791906 seconds)
    (3/7) benchmarking "month"...
    done (took 0.091721633 seconds)
    (4/7) benchmarking "year"...
    done (took 0.106864891 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.089711041 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.089424363 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.10550936 seconds)
  done (took 1.370794582 seconds)
  (6/6) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.479884438 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.25751585 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.354715938 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.110054889 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.14096401 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.344440027 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.140926488 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.099948881 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.101028267 seconds)
  done (took 2.771627318 seconds)
done (took 10.222796644 seconds)
(8/20) benchmarking "micro"...
  (1/7) benchmarking "quicksort"...
  done (took 0.088537973 seconds)
  (2/7) benchmarking "parseint"...
  done (took 0.213662332 seconds)
  (3/7) benchmarking "randmatstat"...
  done (took 0.611325199 seconds)
  (4/7) benchmarking "pisum"...
  done (took 0.11117348 seconds)
  (5/7) benchmarking "fib"...
  done (took 0.088011472 seconds)
  (6/7) benchmarking "randmatmul"...
  done (took 0.157294607 seconds)
  (7/7) benchmarking "mandel"...
  done (took 0.276094209 seconds)
done (took 2.26005615 seconds)
(9/20) benchmarking "io"...
  (1/2) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.333368477 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.136868034 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.080216884 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.091332049 seconds)
  done (took 1.347074786 seconds)
  (2/2) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.07864465 seconds)
    (2/2) benchmarking "read"...
    done (took 0.096748681 seconds)
  done (took 0.890013558 seconds)
done (took 2.951598542 seconds)
(10/20) benchmarking "scalar"...
  (1/23) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.086283793 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.118260715 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.100903549 seconds)
    (4/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.086064707 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.085028836 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.08731494 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.103158902 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.086502369 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.086903824 seconds)
    (10/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.087668431 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.104477069 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.08504965 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.087279765 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.100954224 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.085935594 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.08673228 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.085918347 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.102143485 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.087725112 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.087139669 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.101722868 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.088073019 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.087092119 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.08704738 seconds)
  done (took 2.952534281 seconds)
  (2/23) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.103297455 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.101127842 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.104424689 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.090363678 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.090817972 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.105686264 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.090694491 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.089411665 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.108467631 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.091080946 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.092119368 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.10987714 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.088913961 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.092484451 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.104725731 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.094159721 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.092019226 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.105158153 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.091342484 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.093186618 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.090864554 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.106746194 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.093462362 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.091028538 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.107245158 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.092699123 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.090381816 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.104413841 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.091884595 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.09039614 seconds)
  done (took 3.615524785 seconds)
  (3/23) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.095367094 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.08298834 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.085642784 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.109638837 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.083149362 seconds)
    (6/72) benchmarking ("isodd", "UInt64")...
    done (took 0.088568095 seconds)
    (7/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.102242541 seconds)
    (8/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.087010106 seconds)
    (9/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.089787005 seconds)
    (10/72) benchmarking ("isnan", "Float64")...
    done (took 0.087286994 seconds)
    (11/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.106952768 seconds)
    (12/72) benchmarking ("isequal", "Float64")...
    done (took 0.090048032 seconds)
    (13/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.086169295 seconds)
    (14/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.105046055 seconds)
    (15/72) benchmarking ("isnan", "Complex{Float32}")...
    done (took 0.089566018 seconds)
    (16/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.092229737 seconds)
    (17/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.097133887 seconds)
    (18/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.101987814 seconds)
    (19/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.085843115 seconds)
    (20/72) benchmarking ("isequal", "Complex{Float64}")...
    done (took 0.090334784 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.106248152 seconds)
    (22/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.086234073 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 0.087986655 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.088559326 seconds)
    (25/72) benchmarking ("isequal", "UInt64")...
    done (took 0.106414107 seconds)
    (26/72) benchmarking ("isinteger", "Int64")...
    done (took 0.087362515 seconds)
    (27/72) benchmarking ("isfinite", "Float64")...
    done (took 0.08900517 seconds)
    (28/72) benchmarking ("isequal", "Int64")...
    done (took 0.103802408 seconds)
    (29/72) benchmarking ("isinf", "Float64")...
    done (took 0.088835844 seconds)
    (30/72) benchmarking ("isless", "UInt64")...
    done (took 0.090018008 seconds)
    (31/72) benchmarking ("isequal", "BigInt")...
    done (took 0.091867839 seconds)
    (32/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.105556952 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 0.087749217 seconds)
    (34/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.098860937 seconds)
    (35/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.105631252 seconds)
    (36/72) benchmarking ("isless", "Float64")...
    done (took 0.086838226 seconds)
    (37/72) benchmarking ("iseven", "BigInt")...
    done (took 0.092307213 seconds)
    (38/72) benchmarking ("isnan", "BigInt")...
    done (took 0.098183155 seconds)
    (39/72) benchmarking ("isequal", "Complex{Float32}")...
    done (took 0.088209082 seconds)
    (40/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.083323409 seconds)
    (41/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.083471805 seconds)
    (42/72) benchmarking ("isnan", "Float32")...
    done (took 0.102170342 seconds)
    (43/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.084521074 seconds)
    (44/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.091204144 seconds)
    (45/72) benchmarking ("iseven", "Int64")...
    done (took 0.101330188 seconds)
    (46/72) benchmarking ("isinteger", "Float64")...
    done (took 0.08708655 seconds)
    (47/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.084473249 seconds)
    (48/72) benchmarking ("isfinite", "Complex{Float32}")...
    done (took 0.08786344 seconds)
    (49/72) benchmarking ("isnan", "Complex{Float64}")...
    done (took 0.101702252 seconds)
    (50/72) benchmarking ("isinteger", "Complex{Float32}")...
    done (took 0.089364058 seconds)
    (51/72) benchmarking ("isinf", "Int64")...
    done (took 0.082558206 seconds)
    (52/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.097773857 seconds)
    (53/72) benchmarking ("isinf", "Complex{Float32}")...
    done (took 0.088942613 seconds)
    (54/72) benchmarking ("isfinite", "Complex{Float64}")...
    done (took 0.088270656 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.089198262 seconds)
    (56/72) benchmarking ("isnan", "Int64")...
    done (took 0.09875493 seconds)
    (57/72) benchmarking ("isinteger", "Float32")...
    done (took 0.088395329 seconds)
    (58/72) benchmarking ("isnan", "UInt64")...
    done (took 0.083396589 seconds)
    (59/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.101663927 seconds)
    (60/72) benchmarking ("isless", "Int64")...
    done (took 0.086870911 seconds)
    (61/72) benchmarking ("isinf", "BigInt")...
    done (took 0.082950162 seconds)
    (62/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.08201657 seconds)
    (63/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.106054945 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.087056853 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.100332065 seconds)
    (66/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.106911141 seconds)
    (67/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.084330343 seconds)
    (68/72) benchmarking ("isinteger", "Complex{Float64}")...
    done (took 0.088349185 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.102151156 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.092657561 seconds)
    (71/72) benchmarking ("isinf", "Complex{Float64}")...
    done (took 0.088449295 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.110356924 seconds)
  done (took 7.400803271 seconds)
  (4/23) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.099866913 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.095751098 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.085951796 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.103868913 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.087808428 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.087079794 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.106527106 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.086830471 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.088110407 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.107245768 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.087013878 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.087586513 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.087148493 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.103015275 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.086609244 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.088112083 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.111125856 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.087528897 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.204449704 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.103713228 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.088432655 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.091736996 seconds)
  done (took 2.896237205 seconds)
  (5/23) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.231583797 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.09313035 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.13367372 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.11575328 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.104274784 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.114486555 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.092341933 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.092426977 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.107085867 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.096913117 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0967901 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.106585362 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.10615405 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.09389425 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.111920328 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.097733446 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.09155362 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.112734049 seconds)
  done (took 2.72592929 seconds)
  (6/23) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.100683082 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.089655999 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.123496295 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.088969733 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.088997299 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.088802268 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.109594878 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.108677059 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.089525132 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.106985528 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.095313946 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.08850109 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.104993772 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.089955656 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.088834879 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.104851941 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.093324832 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.08870571 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.111056851 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.093841433 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.093572291 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.112965696 seconds)
  done (took 2.887431614 seconds)
  (7/23) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.101756654 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.0893038 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.123393276 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.09220993 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.08792037 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.08667533 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.109370251 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.088819108 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.09400383 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.105359965 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.089759326 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.088693146 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.119107207 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.089941256 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.094386932 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.104974475 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.089201411 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.088559684 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.103992097 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.089027874 seconds)
  done (took 2.662807294 seconds)
  (8/23) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.160249402 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.119944655 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.104622027 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.110964598 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.120171529 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.104835056 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.111945016 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.120222066 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.104723231 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.131739595 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.105061806 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.105126579 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.127846743 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.11022812 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.104225431 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.128997694 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.112006257 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.128657138 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.105005267 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.103748828 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.133670513 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.104031687 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.128091193 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.105150741 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.108250895 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.121346855 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.106025767 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.109586942 seconds)
  done (took 3.966466608 seconds)
  (9/23) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.088219833 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.088043398 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.086681493 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.104487547 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.088683631 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.087555549 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.087227256 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.104018702 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.088688099 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.087859373 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.103802854 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.088748185 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.088734755 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.089319931 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.103240465 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.088369542 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.087792904 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.103580059 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.087529162 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.088275686 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.090722688 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.104943078 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.089227615 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.089259242 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.090234607 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.105606555 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.091304092 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.091344715 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.107057493 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.088443742 seconds)
  done (took 3.521830168 seconds)
  (10/23) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.100756034 seconds)
    (2/2) benchmarking "in"...
    done (took 0.097555342 seconds)
  done (took 0.931967571 seconds)
  (11/23) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.096760144 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.102503854 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.087036859 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.104394739 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.09540275 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.089022563 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.112276495 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.095599229 seconds)
  done (took 1.517675576 seconds)
  (12/23) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.134426711 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.095323072 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.104764917 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.088769014 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.106696946 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.107320921 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.089210572 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.089884893 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.106430475 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.099372285 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.088898671 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.103672214 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.103011949 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.1078097 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.121952038 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.098577803 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.103746901 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.091585877 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.089246857 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.089889241 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.11906323 seconds)
  done (took 2.87711513 seconds)
  (13/23) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.107517241 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.102586024 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.116705039 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.102997128 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.095935882 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.117423876 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.100934913 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.118170458 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.10396335 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.097295132 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.118509906 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.100219519 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.113278393 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.098273213 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.098786795 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.114360759 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.102734781 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.095477311 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.116898526 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.100778974 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.114406081 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.100606976 seconds)
  done (took 3.073549878 seconds)
  (14/23) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.118710337 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.14883056 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.117609841 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.144203464 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.102267649 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.097260962 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.110519874 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.128126232 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.092288459 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.111759653 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.103745723 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.121135239 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.093410774 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.095867006 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.111947963 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.094032452 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.094553332 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.109413444 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.098169987 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.092712148 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.113872428 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.095926875 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.102114787 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.118744857 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.09586519 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.0928958 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.110609156 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.096175073 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.117946791 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.098487453 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.097357121 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.112804648 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.103078509 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.092675398 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.110095738 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.095009795 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.105715521 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.11038812 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094241691 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.091980204 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.113901303 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.1007756 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.098884212 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.126344122 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.099009615 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.09957328 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.116713814 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.095980886 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.107247691 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.115588918 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.103899256 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.123603575 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.100458125 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.098510088 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.117420276 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.108818203 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.098442838 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.114959856 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.100219382 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.106376177 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.110346188 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.096259077 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.10324156 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.111280584 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.099262249 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.121183432 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.096879858 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.096355253 seconds)
  done (took 8.073771532 seconds)
  (15/23) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.124244131 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096655518 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.122053344 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.105573992 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.096513299 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.113665768 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.097653813 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.096934821 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.115215461 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.102315864 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.112872454 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.181970099 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.111828106 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.101676095 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.096783278 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.114036809 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.09830284 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.096164345 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.114912958 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.097956242 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.097108269 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.123321461 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.097849754 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.123023714 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.10936291 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.093918524 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.113232995 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.098100421 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.105079997 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.114329902 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.10877996 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.113005139 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.098112229 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.104252473 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.124762217 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.097366654 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.091623761 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.114312035 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.096857447 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.096768825 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.111673057 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.104874221 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.097460069 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.11132565 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.096418622 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.096620285 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.121846196 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.107991227 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.118239712 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.103419084 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.097981301 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.1228756 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.098141516 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.113615445 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.106209774 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.112027816 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.122845091 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.10800427 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.114037151 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.106841808 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.105130294 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.127256073 seconds)
  done (took 7.470867131 seconds)
  (16/23) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.091532713 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.090237345 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.090154065 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.106939555 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.0906428 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.089753751 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.089872848 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.108035889 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.089831419 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.091160536 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.107958598 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.091475567 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.090441812 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.092884428 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.108777302 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.091122639 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.089390438 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.107204872 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.093169636 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.090308211 seconds)
  done (took 2.648321213 seconds)
  (17/23) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.100598783 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.107111781 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.109802361 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.09935052 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.092607651 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.11448479 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.094431068 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.093197315 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.091806775 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.110168763 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.101438071 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.118213063 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.093932075 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.099968917 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.118383082 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.099295788 seconds)
  done (took 2.396168173 seconds)
  (18/23) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.112379872 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.10856124 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.167467058 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.094893136 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.111992314 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.10038571 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.093008091 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.096322053 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.113325341 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.100683932 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.101190654 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.116846799 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.094010548 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.093819376 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.111920467 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.098750828 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.095426815 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.117402949 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.097834002 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.151798277 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.116623148 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.095605498 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.093515737 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.114044792 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.096955132 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.097783939 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.11758035 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.093688927 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.094578654 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.112384237 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.096595998 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.101542128 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.1096425 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.098822949 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.094688976 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.111002408 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.094019303 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.094144467 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.112360587 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.09373167 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.094646532 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.094034292 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.111209109 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.097331011 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.092229008 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.111082857 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.092560261 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.098449415 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.111059915 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.095616564 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.093377593 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.116777765 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.09863398 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.101636388 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.116635966 seconds)
  done (took 6.496662887 seconds)
  (19/23) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.104668024 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.094759211 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.120812285 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.092758506 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.093211395 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.09368774 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.112622852 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.095359446 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.093495664 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.110884913 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.095101697 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.095208449 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.111385318 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.09553976 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.094908589 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.111790149 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.092471869 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.094252696 seconds)
  done (took 2.556849707 seconds)
  (20/23) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.098469768 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.092666321 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.096166992 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.110840529 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.093524384 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.094099862 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.111222774 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.095628528 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.096714172 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.096676013 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.117365233 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.097476861 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.095991139 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.116483432 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.098790976 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.09681436 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.109581491 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.0923495 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.093287793 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.091231004 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.110913425 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.094071126 seconds)
  done (took 2.961820956 seconds)
  (21/23) benchmarking "intfuncs"...
    (1/12) benchmarking ("nextpow2", "Int64", "+")...
    done (took 0.104441694 seconds)
    (2/12) benchmarking ("prevpow2", "UInt64", "-")...
    done (took 0.164963733 seconds)
    (3/12) benchmarking ("prevpow2", "Int64", "+")...
    done (took 0.099514992 seconds)
    (4/12) benchmarking ("nextpow2", "BigInt", "-")...
    done (took 0.174215145 seconds)
    (5/12) benchmarking ("prevpow2", "UInt64", "+")...
    done (took 0.089764766 seconds)
    (6/12) benchmarking ("prevpow2", "Int64", "-")...
    done (took 0.088348297 seconds)
    (7/12) benchmarking ("nextpow2", "UInt64", "-")...
    done (took 0.116595586 seconds)
    (8/12) benchmarking ("nextpow2", "UInt64", "+")...
    done (took 0.089096684 seconds)
    (9/12) benchmarking ("prevpow2", "BigInt", "+")...
    done (took 0.103799311 seconds)
    (10/12) benchmarking ("prevpow2", "BigInt", "-")...
    done (took 0.106195233 seconds)
    (11/12) benchmarking ("nextpow2", "BigInt", "+")...
    done (took 0.089186626 seconds)
    (12/12) benchmarking ("nextpow2", "Int64", "-")...
    done (took 0.087140733 seconds)
  done (took 2.076423698 seconds)
  (22/23) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.119888426 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.128923862 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.112441974 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.095408595 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.100539418 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.114610223 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.098529435 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.097007058 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.122812986 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.109986402 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.114063099 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.105012349 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104711688 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.122295168 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.100971394 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.118360818 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.099391602 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.09837265 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.094335572 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.130410013 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.097283523 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.125262072 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.096979498 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.097060523 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.115377824 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.105457133 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.123134988 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.109739666 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.097204135 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.122772081 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.101483033 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.096572035 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.122841398 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.109333062 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.111866515 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.106751616 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096959856 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.129901838 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.101616625 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.124498548 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.093140201 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.100947359 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.12378791 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.101957531 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104297937 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.115932491 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.102765751 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.114922712 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.097844431 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.117685461 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.120433075 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.106554393 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.119059189 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.105363932 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.105768153 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.136468953 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.106755659 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.123162048 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.101302872 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.128938395 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.105802792 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.101930793 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.125194895 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.109375486 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.121387829 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.107674257 seconds)
  done (took 8.042727959 seconds)
  (23/23) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.132528002 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.094804486 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.115989319 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.110565696 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.123906 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.09911406 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.097907863 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.117019304 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.100307086 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.094908052 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.159106198 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.098841572 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.106318511 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.126210483 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.099269815 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.117867536 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.099777725 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.106892769 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.113506864 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.119249865 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.116447736 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.106562554 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.105890627 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.123667714 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.109971347 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.120242 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.099030166 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.099553815 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.115346228 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.100457732 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.101970432 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.117666934 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.108583737 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.094781066 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.126258783 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.099466323 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.097785813 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.122086755 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.098507671 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.120854092 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.107061756 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.122104569 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.11707225 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.099257376 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.126054627 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.099126069 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.098452222 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.113874851 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.0996824 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.094403108 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.128125026 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.110189737 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.128045721 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.108545195 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.09708764 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.116803693 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.099788959 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.098747385 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.117269151 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.103995797 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.105751597 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.117958649 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.120162059 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.117527411 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.09988526 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.105938482 seconds)
  done (took 8.040329193 seconds)
done (took 92.509775572 seconds)
(11/20) benchmarking "sparse"...
  (1/4) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.133971583 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.175443088 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.128571023 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.164831423 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.085992255 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.119548066 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.116990825 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.15002526 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.083964396 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.103164379 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.085408205 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.08690297 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.171154351 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.086199295 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.083847981 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.086488657 seconds)
  done (took 2.625923696 seconds)
  (2/4) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.182406362 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.294012533 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.097961084 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.10820191 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.091122691 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.088748726 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.111160806 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.091032654 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.088188907 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.115620415 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.090601468 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.084853423 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.115304116 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.086250344 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.0891485 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107202049 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.097934192 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.0891478 seconds)
  done (took 2.801047534 seconds)
  (3/4) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.119551995 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.197720152 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.327629963 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.135797175 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.131102991 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.108059442 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.158864657 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.103722643 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.194461331 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.104213547 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.102438256 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.106757186 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.116019161 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.094203133 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.124834941 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.088433201 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.116927764 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.123054897 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.104755605 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.091398942 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.132046792 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.093135208 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.113715623 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.103501216 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.168540509 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.123483409 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.092982811 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.111482526 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.092587775 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.10397223 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.115031248 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.105950821 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.121537444 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.147686383 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.111108102 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.143159782 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.114967198 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.091066702 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.102995851 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.110176878 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.094850513 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.092328825 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.123796141 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.088619894 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.094400979 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.116499922 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.093814829 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.11265238 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.099541604 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.097737542 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.115963989 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.097753151 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.160308251 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.096324708 seconds)
  done (took 7.246267285 seconds)
  (4/4) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.839219237 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.133309413 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.090436981 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 1.067549446 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.139493744 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.104192901 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.853719051 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.115021241 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.241962332 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.865282149 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.107513257 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.122710904 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.223622931 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.267359279 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 1.251570871 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.343543531 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.726526758 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.103823966 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.139838748 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.130571811 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.118389971 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.116317592 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.109446908 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.502506954 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.091301614 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.111395186 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.098795758 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.12208575 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.145314718 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.110729471 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.094795927 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.184880247 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.277024013 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.193100046 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.092199706 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.090908982 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.108646985 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.153544407 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.253918107 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.201668431 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.181695833 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.088400563 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.109526592 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.101231409 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.109281343 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.106981561 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.165800515 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.158542696 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.178818384 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.095662014 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.124202822 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100946463 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.117398314 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.146593264 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.109022021 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.341801868 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.347007832 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.090044036 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.119168617 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.107077013 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.252412637 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.111448324 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.223799204 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.11977202 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.200342492 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.110886515 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.820167366 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.153434661 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.109951125 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.098344776 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.098259551 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.117599933 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.100789825 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.177242391 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.465689641 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.123970796 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.094796744 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.108965924 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.199760004 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.11087674 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.091314666 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.16859708 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.09282113 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.118344242 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.10662953 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.103604678 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.176228585 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.256191402 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.103627853 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.119750795 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.096393277 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.121520787 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.09203142 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.218782353 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.213341493 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.14349635 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.219130925 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.118177938 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.149965338 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.17113479 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.118900869 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.156601404 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.117813817 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.107741745 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.11719325 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.207848171 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.125163474 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.111558357 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.098123558 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.099604167 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.146125732 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.095088223 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.119192059 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.154577485 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.545434788 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.170853387 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.089740403 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.115826377 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101786609 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.165288472 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.09933275 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.248843687 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101010471 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.17392798 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.118080631 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.089712849 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.099917296 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.168487136 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.101769226 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.119689141 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.098957543 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.120658202 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.246599723 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.206855404 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.12421473 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.237473561 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.165962813 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.121009395 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.18022496 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.102531755 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.17686615 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.102209268 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.117839072 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.09408868 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.80495234 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.105748505 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.119702031 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.098107055 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.195215967 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.092221688 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.094441886 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.112471925 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.09017016 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.802224103 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.094594472 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.108698567 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.096205396 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.100172224 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.117816421 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.100784497 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.096780788 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.166965186 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.229551735 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.124112986 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.099501062 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.091285686 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.164968969 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.092149784 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.112806945 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.092933039 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.091932039 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.119602781 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.097292198 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.093584819 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.179055798 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.164056634 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.215318852 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.627363249 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.091070864 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.112181931 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.226898596 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.091978865 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.309590115 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.1206372 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.220791817 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.172997607 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.089255787 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.346694929 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.174527066 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.193503157 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.096084774 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.18026954 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.089988612 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.100214791 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.167566515 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.091083667 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.119690354 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.143832819 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.127947243 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.104680464 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 1.260836184 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.112735798 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.23801239 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.09007221 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.17424764 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.094545582 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.099496834 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.308561685 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.112477886 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.110392491 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.166466873 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.096427527 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.113455464 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 3.619793162 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.094029719 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.103901148 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.119262197 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.220527558 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.170055354 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.102636711 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.101539757 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.126104128 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.169123928 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.198256354 seconds)
  done (took 45.15907765 seconds)
done (took 58.605458981 seconds)
(12/20) benchmarking "broadcast"...
  (1/5) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.25866359 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.165902992 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.270243367 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.162946293 seconds)
  done (took 1.726884009 seconds)
  (2/5) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.223715481 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.142982285 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.183421484 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.108478944 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.189288748 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.107954702 seconds)
  done (took 1.757626646 seconds)
  (3/5) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.16346058 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.155027409 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.134869436 seconds)
  done (took 1.252877289 seconds)
  (4/5) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.189292359 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.199956014 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.309300391 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.220572706 seconds)
  done (took 1.804155124 seconds)
  (5/5) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.218992761 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.127128495 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.11419863 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.185204449 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.197365595 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.164504103 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.132962369 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.136246093 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.13928295 seconds)
  done (took 2.262016302 seconds)
done (took 9.606165379 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/192) benchmarking ("perf_sum", Int8, true)...
    done (took 0.200976802 seconds)
    (2/192) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.244598179 seconds)
    (3/192) benchmarking ("map", identity, Int64, false)...
    done (took 0.235114994 seconds)
    (4/192) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.171396756 seconds)
    (5/192) benchmarking ("perf_sum", Complex{Float64}, true)...
    done (took 0.148834013 seconds)
    (6/192) benchmarking ("map", abs, Float32, false)...
    done (took 0.286399164 seconds)
    (7/192) benchmarking ("map", abs, Int64, true)...
    done (took 0.150727097 seconds)
    (8/192) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.173617284 seconds)
    (9/192) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.155086468 seconds)
    (10/192) benchmarking ("broadcast", identity, Complex{Float64}, false)...
    done (took 0.314819373 seconds)
    (11/192) benchmarking ("map", identity, Bool, false)...
    done (took 0.250259669 seconds)
    (12/192) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.100830925 seconds)
    (13/192) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.174507279 seconds)
    (14/192) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.222716649 seconds)
    (15/192) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.270383425 seconds)
    (16/192) benchmarking ("map", *, Complex{Float64}, (false, true))...
    done (took 0.289805401 seconds)
    (17/192) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.098924168 seconds)
    (18/192) benchmarking ("map", abs, Float64, false)...
    done (took 0.183909422 seconds)
    (19/192) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.114239356 seconds)
    (20/192) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.099381479 seconds)
    (21/192) benchmarking ("perf_sum", Float32, true)...
    done (took 0.116826895 seconds)
    (22/192) benchmarking ("perf_sum", Bool, true)...
    done (took 0.141196018 seconds)
    (23/192) benchmarking ("perf_sum", Complex{Float64}, false)...
    done (took 0.343513805 seconds)
    (24/192) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.234694147 seconds)
    (25/192) benchmarking ("map", abs, BigInt, true)...
    done (took 0.13826497 seconds)
    (26/192) benchmarking ("map", abs, Int8, false)...
    done (took 0.252469206 seconds)
    (27/192) benchmarking ("broadcast", abs, Complex{Float64}, true)...
    done (took 0.246604905 seconds)
    (28/192) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.241352345 seconds)
    (29/192) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.300556292 seconds)
    (30/192) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.275374184 seconds)
    (31/192) benchmarking ("map", identity, Float32, false)...
    done (took 0.125536304 seconds)
    (32/192) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.180709311 seconds)
    (33/192) benchmarking ("perf_countequals", "Int8")...
    done (took 0.120983076 seconds)
    (34/192) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.185415954 seconds)
    (35/192) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.182583256 seconds)
    (36/192) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.192699271 seconds)
    (37/192) benchmarking ("broadcast", *, Complex{Float64}, (false, true))...
    done (took 0.178589913 seconds)
    (38/192) benchmarking ("perf_sum", Bool, false)...
    done (took 0.099242132 seconds)
    (39/192) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.149523129 seconds)
    (40/192) benchmarking ("map", abs, Bool, true)...
    done (took 0.130955475 seconds)
    (41/192) benchmarking ("broadcast", *, Complex{Float64}, (true, true))...
    done (took 0.074417871 seconds)
    (42/192) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.131863937 seconds)
    (43/192) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.074076009 seconds)
    (44/192) benchmarking ("map", identity, Int8, false)...
    done (took 0.125150698 seconds)
    (45/192) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.094454195 seconds)
    (46/192) benchmarking ("map", identity, Int64, true)...
    done (took 0.094665361 seconds)
    (47/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (false, false))...
    done (took 0.10974906 seconds)
    (48/192) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.236209888 seconds)
    (49/192) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.120865103 seconds)
    (50/192) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.24558056 seconds)
    (51/192) benchmarking ("map", identity, BigInt, true)...
    done (took 0.130038654 seconds)
    (52/192) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.069802408 seconds)
    (53/192) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.109489212 seconds)
    (54/192) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.097114606 seconds)
    (55/192) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.156257889 seconds)
    (56/192) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.136026191 seconds)
    (57/192) benchmarking ("map", abs, Bool, false)...
    done (took 0.069629205 seconds)
    (58/192) benchmarking ("map", abs, Complex{Float64}, true)...
    done (took 0.16048423 seconds)
    (59/192) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.16653237 seconds)
    (60/192) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.076458567 seconds)
    (61/192) benchmarking ("broadcast", identity, Complex{Float64}, true)...
    done (took 0.071375815 seconds)
    (62/192) benchmarking ("map", identity, BigInt, false)...
    done (took 0.067906496 seconds)
    (63/192) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.210834947 seconds)
    (64/192) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.092703324 seconds)
    (65/192) benchmarking ("perf_simplecopy", Complex{Float64}, true)...
    done (took 0.093592059 seconds)
    (66/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (true, true))...
    done (took 0.113376186 seconds)
    (67/192) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.075666301 seconds)
    (68/192) benchmarking ("perf_countequals", "Float32")...
    done (took 0.112550849 seconds)
    (69/192) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.070609392 seconds)
    (70/192) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.118952127 seconds)
    (71/192) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.218401397 seconds)
    (72/192) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.111282581 seconds)
    (73/192) benchmarking ("map", identity, Complex{Float64}, true)...
    done (took 0.134195003 seconds)
    (74/192) benchmarking ("map", identity, Float32, true)...
    done (took 0.09535038 seconds)
    (75/192) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.12315883 seconds)
    (76/192) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.076274858 seconds)
    (77/192) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.114537569 seconds)
    (78/192) benchmarking ("perf_sum", Int8, false)...
    done (took 0.100912671 seconds)
    (79/192) benchmarking ("map", abs, Int8, true)...
    done (took 0.095630945 seconds)
    (80/192) benchmarking ("perf_countequals", "Int64")...
    done (took 0.112392204 seconds)
    (81/192) benchmarking ("perf_sum", Float64, true)...
    done (took 0.117632494 seconds)
    (82/192) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.070938526 seconds)
    (83/192) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.118143198 seconds)
    (84/192) benchmarking ("perf_countequals", "Bool")...
    done (took 0.119196313 seconds)
    (85/192) benchmarking ("map", abs, Float32, true)...
    done (took 0.073822394 seconds)
    (86/192) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.110006632 seconds)
    (87/192) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.109197523 seconds)
    (88/192) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.106059915 seconds)
    (89/192) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.095086403 seconds)
    (90/192) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.097590407 seconds)
    (91/192) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.175402857 seconds)
    (92/192) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.117262292 seconds)
    (93/192) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.096184215 seconds)
    (94/192) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.10084884 seconds)
    (95/192) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.070239459 seconds)
    (96/192) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.181761928 seconds)
    (97/192) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.069917274 seconds)
    (98/192) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.08928411 seconds)
    (99/192) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.121795578 seconds)
    (100/192) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.159009112 seconds)
    (101/192) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.095342071 seconds)
    (102/192) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.093568217 seconds)
    (103/192) benchmarking ("perf_sum", Int64, true)...
    done (took 0.116968802 seconds)
    (104/192) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.06801037 seconds)
    (105/192) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.141956049 seconds)
    (106/192) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.093036235 seconds)
    (107/192) benchmarking ("broadcast", abs, Complex{Float64}, false)...
    done (took 0.071831607 seconds)
    (108/192) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.180243958 seconds)
    (109/192) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.093751711 seconds)
    (110/192) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.093524764 seconds)
    (111/192) benchmarking ("map", abs, Complex{Float64}, false)...
    done (took 0.069454532 seconds)
    (112/192) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.097485636 seconds)
    (113/192) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.122329043 seconds)
    (114/192) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.176647899 seconds)
    (115/192) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.093919081 seconds)
    (116/192) benchmarking ("broadcast", *, Complex{Float64}, (false, false))...
    done (took 0.07653795 seconds)
    (117/192) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.158769707 seconds)
    (118/192) benchmarking ("map", identity, Bool, true)...
    done (took 0.074979281 seconds)
    (119/192) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.115116281 seconds)
    (120/192) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.076920571 seconds)
    (121/192) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.071367399 seconds)
    (122/192) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.120948643 seconds)
    (123/192) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.186397506 seconds)
    (124/192) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.09936026 seconds)
    (125/192) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.12244076 seconds)
    (126/192) benchmarking ("perf_countnothing", Complex{Float64}, true)...
    done (took 0.101825608 seconds)
    (127/192) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.069086647 seconds)
    (128/192) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.07565638 seconds)
    (129/192) benchmarking ("map", identity, Complex{Float64}, false)...
    done (took 0.090564384 seconds)
    (130/192) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.118455672 seconds)
    (131/192) benchmarking ("map", abs, Float64, true)...
    done (took 0.074991836 seconds)
    (132/192) benchmarking ("map", *, Complex{Float64}, (true, true))...
    done (took 0.068938873 seconds)
    (133/192) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.113558412 seconds)
    (134/192) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.094577131 seconds)
    (135/192) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.06880284 seconds)
    (136/192) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.089900024 seconds)
    (137/192) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.090143278 seconds)
    (138/192) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.072705381 seconds)
    (139/192) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.114268173 seconds)
    (140/192) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.069344578 seconds)
    (141/192) benchmarking ("perf_countequals", "Float64")...
    done (took 0.13441119 seconds)
    (142/192) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.10256772 seconds)
    (143/192) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.072897555 seconds)
    (144/192) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.089961763 seconds)
    (145/192) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.095295468 seconds)
    (146/192) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.076913002 seconds)
    (147/192) benchmarking ("map", abs, Int64, false)...
    done (took 0.069984138 seconds)
    (148/192) benchmarking ("perf_sum", Int64, false)...
    done (took 0.10104527 seconds)
    (149/192) benchmarking ("perf_countnothing", Complex{Float64}, false)...
    done (took 0.120312923 seconds)
    (150/192) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.069919474 seconds)
    (151/192) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.068571588 seconds)
    (152/192) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.100054546 seconds)
    (153/192) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.182822119 seconds)
    (154/192) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.069416665 seconds)
    (155/192) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.096900306 seconds)
    (156/192) benchmarking ("map", identity, Float64, true)...
    done (took 0.130052998 seconds)
    (157/192) benchmarking ("map", *, Complex{Float64}, (false, false))...
    done (took 0.09081501 seconds)
    (158/192) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.073158443 seconds)
    (159/192) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.093683758 seconds)
    (160/192) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.075813867 seconds)
    (161/192) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.093425978 seconds)
    (162/192) benchmarking ("perf_simplecopy", Complex{Float64}, false)...
    done (took 0.092291941 seconds)
    (163/192) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.099898939 seconds)
    (164/192) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.069918234 seconds)
    (165/192) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.093636289 seconds)
    (166/192) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.092625642 seconds)
    (167/192) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.099530001 seconds)
    (168/192) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.093171281 seconds)
    (169/192) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.092992711 seconds)
    (170/192) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.100326327 seconds)
    (171/192) benchmarking ("map", abs, BigInt, false)...
    done (took 0.070347497 seconds)
    (172/192) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.091858209 seconds)
    (173/192) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.097061944 seconds)
    (174/192) benchmarking ("perf_countequals", "Complex{Float64}")...
    done (took 0.116039196 seconds)
    (175/192) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.09397538 seconds)
    (176/192) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.068583681 seconds)
    (177/192) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.097706013 seconds)
    (178/192) benchmarking ("map", identity, Float64, false)...
    done (took 0.071248658 seconds)
    (179/192) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.091205982 seconds)
    (180/192) benchmarking ("perf_sum", Float32, false)...
    done (took 0.10257958 seconds)
    (181/192) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.093200426 seconds)
    (182/192) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.113423962 seconds)
    (183/192) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.076651802 seconds)
    (184/192) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.069674992 seconds)
    (185/192) benchmarking ("map", identity, Int8, true)...
    done (took 0.096142612 seconds)
    (186/192) benchmarking ("perf_sum", Float64, false)...
    done (took 0.104617491 seconds)
    (187/192) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.093206711 seconds)
    (188/192) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.099292127 seconds)
    (189/192) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.098317246 seconds)
    (190/192) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.073350008 seconds)
    (191/192) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.094363759 seconds)
    (192/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (false, true))...
    done (took 0.114768069 seconds)
  done (took 24.538325862 seconds)
done (took 25.344687643 seconds)
(14/20) benchmarking "simd"...
  (1/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.189334861 seconds)
  (2/72) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.116361765 seconds)
  (3/72) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.101941376 seconds)
  (4/72) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.153575983 seconds)
  (5/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.183809025 seconds)
  (6/72) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.107228973 seconds)
  (7/72) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.138385959 seconds)
  (8/72) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.104356013 seconds)
  (9/72) benchmarking ("inner", "Float64", 4096)...
  done (took 0.109555638 seconds)
  (10/72) benchmarking ("inner", "Float64", 4095)...
  done (took 0.122997689 seconds)
  (11/72) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.091993145 seconds)
  (12/72) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.112978767 seconds)
  (13/72) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.122834947 seconds)
  (14/72) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.164214125 seconds)
  (15/72) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.124495639 seconds)
  (16/72) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.094177512 seconds)
  (17/72) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.093253576 seconds)
  (18/72) benchmarking ("inner", "Int32", 4096)...
  done (took 0.133046121 seconds)
  (19/72) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.117890231 seconds)
  (20/72) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.117719661 seconds)
  (21/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.183750794 seconds)
  (22/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.093028041 seconds)
  (23/72) benchmarking ("inner", "Int64", 4095)...
  done (took 0.131700665 seconds)
  (24/72) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.094813744 seconds)
  (25/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.160193117 seconds)
  (26/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.117132377 seconds)
  (27/72) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.10132621 seconds)
  (28/72) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.100690105 seconds)
  (29/72) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.135892518 seconds)
  (30/72) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.102691634 seconds)
  (31/72) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.101512737 seconds)
  (32/72) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.115714685 seconds)
  (33/72) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.116751576 seconds)
  (34/72) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.116363661 seconds)
  (35/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.113987374 seconds)
  (36/72) benchmarking ("inner", "Int32", 4095)...
  done (took 0.102856974 seconds)
  (37/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.092088389 seconds)
  (38/72) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.075639505 seconds)
  (39/72) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.124109314 seconds)
  (40/72) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.102413131 seconds)
  (41/72) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.113573097 seconds)
  (42/72) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.124535738 seconds)
  (43/72) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.102023388 seconds)
  (44/72) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.093763167 seconds)
  (45/72) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.123729496 seconds)
  (46/72) benchmarking ("inner", "Int64", 4096)...
  done (took 0.101210524 seconds)
  (47/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.091440141 seconds)
  (48/72) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.126388595 seconds)
  (49/72) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.091379457 seconds)
  (50/72) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.102331068 seconds)
  (51/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.114730953 seconds)
  (52/72) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.118605917 seconds)
  (53/72) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.100939839 seconds)
  (54/72) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.110771608 seconds)
  (55/72) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.09205824 seconds)
  (56/72) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.094554584 seconds)
  (57/72) benchmarking ("inner", "Float32", 4095)...
  done (took 0.110234728 seconds)
  (58/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.114578942 seconds)
  (59/72) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.114408695 seconds)
  (60/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.091617099 seconds)
  (61/72) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.115570108 seconds)
  (62/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.093400285 seconds)
  (63/72) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.103625066 seconds)
  (64/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.113978486 seconds)
  (65/72) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.102578051 seconds)
  (66/72) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.092581811 seconds)
  (67/72) benchmarking ("inner", "Float32", 4096)...
  done (took 0.122212753 seconds)
  (68/72) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.10593872 seconds)
  (69/72) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.10131635 seconds)
  (70/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.094005384 seconds)
  (71/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.114259528 seconds)
  (72/72) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.102687586 seconds)
done (took 9.014900516 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.098495639 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.136469169 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.182514398 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.19060359 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.119796008 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.106581098 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.129526098 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.115938302 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.104451781 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.133766664 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.129859479 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.145644248 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.166682465 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.129040487 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.108757409 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.103839772 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.126543473 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.102722631 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.188694112 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.116889186 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.115919508 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.131122297 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.120095059 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.129742207 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.097548084 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.128302829 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.120959078 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.106069173 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.096367089 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.126447219 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.117820559 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.096442662 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.12079262 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.116939414 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.113297699 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.128191489 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.107939113 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.104408032 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.11865899 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.097541975 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.104764758 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.133832026 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.097658525 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.106654991 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.126840532 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.111718399 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.103265732 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.130822006 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.098489194 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.103872322 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.119526805 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.123366663 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.107697633 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.136613497 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.109268167 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.109242984 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.131894473 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.110326876 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.098862077 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.13187426 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.097703673 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.095639116 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.119641714 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.11905511 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.099145748 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.131755825 seconds)
  done (took 8.728365175 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.116202322 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.125484342 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.129120604 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.107930264 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.100602905 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.114141618 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.091085557 seconds)
  done (took 1.637353459 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.093837764 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.168689794 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.192940871 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.190768164 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.16435488 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.202119285 seconds)
    (7/97) benchmarking ("randn", "MersenneTwister", "Complex{Float32}")...
    done (took 0.195782672 seconds)
    (8/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.091152664 seconds)
    (9/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.124961623 seconds)
    (10/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.126090319 seconds)
    (11/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.190242234 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "Complex{Float16}")...
    done (took 0.19774884 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.124343011 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.108468648 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.193692896 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.092625597 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.196396161 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.093092156 seconds)
    (19/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.186742877 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.171223096 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.132245687 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.124718839 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.104471703 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.115531551 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.165876991 seconds)
    (26/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.116039741 seconds)
    (27/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float16}")...
    done (took 0.220982934 seconds)
    (28/97) benchmarking ("randn", "MersenneTwister", "Complex{Float64}")...
    done (took 0.133943849 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.102116215 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.105602977 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.129269234 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.17062809 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.189808003 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.106377989 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.121976231 seconds)
    (36/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float32}")...
    done (took 0.168657016 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.189346262 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.106133641 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.202091028 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.095893211 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.189186985 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.105658363 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.128499253 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.108238577 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.107388649 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.178416187 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.111273975 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.128462328 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.10656349 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.172778949 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.126329518 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.166783307 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.128093207 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.107182602 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.102276157 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.131420955 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.176509951 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.129744542 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.17356861 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.133815049 seconds)
    (61/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.168206264 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.192533112 seconds)
    (63/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.190234814 seconds)
    (64/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.170048729 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{Float32}")...
    done (took 0.139925138 seconds)
    (66/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.16965672 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.186496482 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.104692512 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float64}")...
    done (took 0.124513438 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.166087832 seconds)
    (71/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.193824052 seconds)
    (72/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.104139107 seconds)
    (73/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.127648618 seconds)
    (74/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.158869804 seconds)
    (75/97) benchmarking ("randn", "MersenneTwister", "Complex{Float16}")...
    done (took 0.132278062 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.17273389 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.194474499 seconds)
    (78/97) benchmarking ("rand", "MersenneTwister", "Complex{Float64}")...
    done (took 0.103882404 seconds)
    (79/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.128236828 seconds)
    (80/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.09677123 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.105476674 seconds)
    (82/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.115980935 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.162108496 seconds)
    (84/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.105708341 seconds)
    (85/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.130206993 seconds)
    (86/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float16}")...
    done (took 0.111784315 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float64}")...
    done (took 0.128291192 seconds)
    (88/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.108691263 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.097497059 seconds)
    (90/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.138296971 seconds)
    (91/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.107621703 seconds)
    (92/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.105553403 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.133725632 seconds)
    (94/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.107640182 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float32}")...
    done (took 0.108544742 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.197211333 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.10199873 seconds)
  done (took 14.569682204 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.095969442 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.095387122 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.098400305 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.117605546 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.094699481 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.094138184 seconds)
  done (took 1.469771695 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.131882477 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.108057246 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.138957151 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.109451675 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.150853322 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.197889778 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.201736691 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.103464879 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.146904698 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.117882797 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.19711072 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.178400431 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.19967542 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.110596301 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.203742701 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.109380642 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.204057651 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.105891801 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.137938181 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.106524011 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.108423911 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.133018867 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.104909507 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.188923419 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.109876488 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.109667921 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.124187539 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.11706171 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.114983655 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.126122931 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.111240836 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.107644279 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.123025879 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.104111452 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.204365966 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.10102152 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.104010328 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.135468331 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.111205301 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.130913817 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.181455174 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.128000177 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.116983067 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.110991723 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.12441416 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.101674221 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.110839835 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.12565321 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.181156103 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.133875295 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.111947381 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.109508372 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.132458988 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.112484094 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.100023007 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.126643485 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.110748129 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.20656284 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.111677534 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.100241724 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.132084071 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.10990504 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.12477008 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.114328699 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.109051672 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.131976273 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.102422419 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.109220052 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.12779459 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.111184065 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.11072447 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.131345962 seconds)
  done (took 10.258836516 seconds)
done (took 37.508832111 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 1.678822788 seconds)
  done (took 2.545866532 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.018425231 seconds)
  done (took 1.887287698 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 16.632598534 seconds)
  done (took 17.534449394 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.412708232 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.44225694 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.119202666 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.136926429 seconds)
  done (took 2.984425463 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.789783373 seconds)
  done (took 1.681034861 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.273878044 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.251598727 seconds)
  done (took 1.401724642 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.665476941 seconds)
  done (took 1.551574836 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.467981746 seconds)
  done (took 2.344360313 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.271504065 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.227669305 seconds)
  done (took 1.39357974 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.594585467 seconds)
  done (took 1.485079572 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 19.063191445 seconds)
  done (took 19.958189903 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.247061808 seconds)
  done (took 1.138580791 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.276509216 seconds)
  done (took 1.168874256 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 3.349748288 seconds)
  done (took 4.24230178 seconds)
done (took 62.192694021 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.104843896 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.107006636 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.107272884 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.129249537 seconds)
  done (took 1.331528489 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Array{Float32,1} generator")...
    done (took 0.114093852 seconds)
    (2/24) benchmarking ("all", "Array{Float32,1}")...
    done (took 0.108504773 seconds)
    (3/24) benchmarking ("any", "Array{Float64,1} generator")...
    done (took 0.110943714 seconds)
    (4/24) benchmarking ("any", "Array{Int64,1}")...
    done (took 0.130701759 seconds)
    (5/24) benchmarking ("any", "Array{Int16,1} generator")...
    done (took 0.113915258 seconds)
    (6/24) benchmarking ("any", "Array{Float32,1}")...
    done (took 0.106698987 seconds)
    (7/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.129970702 seconds)
    (8/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.109776525 seconds)
    (9/24) benchmarking ("all", "Array{Int64,1}")...
    done (took 0.10698005 seconds)
    (10/24) benchmarking ("all", "Array{Int16,1}")...
    done (took 0.132878276 seconds)
    (11/24) benchmarking ("all", "Array{Float64,1}")...
    done (took 0.108057295 seconds)
    (12/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.106633464 seconds)
    (13/24) benchmarking ("any", "Array{Float32,1} generator")...
    done (took 0.133060212 seconds)
    (14/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.106853192 seconds)
    (15/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.105070249 seconds)
    (16/24) benchmarking ("all", "Array{Float64,1} generator")...
    done (took 0.132413191 seconds)
    (17/24) benchmarking ("all", "Array{Int64,1} generator")...
    done (took 0.110988672 seconds)
    (18/24) benchmarking ("any", "Array{Float64,1}")...
    done (took 0.108331439 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.129972873 seconds)
    (20/24) benchmarking ("any", "Array{Int16,1}")...
    done (took 0.109923398 seconds)
    (21/24) benchmarking ("any", "BitArray")...
    done (took 0.108987219 seconds)
    (22/24) benchmarking ("any", "Array{Int64,1} generator")...
    done (took 0.131618962 seconds)
    (23/24) benchmarking ("all", "Array{Int16,1} generator")...
    done (took 0.111568268 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.111055954 seconds)
  done (took 3.674849474 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.105176992 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.098996602 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.099482109 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.120196292 seconds)
  done (took 1.322631706 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.116793911 seconds)
    (2/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Int16,1}")...
    done (took 0.118948592 seconds)
    (3/24) benchmarking ("==", "Array{Float64,1}")...
    done (took 0.139576002 seconds)
    (4/24) benchmarking ("isequal", "Array{Float64,1}")...
    done (took 0.116421625 seconds)
    (5/24) benchmarking ("==", "Array{Int64,1} == Array{Float32,1}")...
    done (took 0.118433923 seconds)
    (6/24) benchmarking ("==", "Array{Float32,1}")...
    done (took 0.140505749 seconds)
    (7/24) benchmarking ("==", "Array{Int64,1}")...
    done (took 0.107792223 seconds)
    (8/24) benchmarking ("==", "Array{Int64,1} == Array{Int64,1}")...
    done (took 0.105869328 seconds)
    (9/24) benchmarking ("==", "Array{Int16,1}")...
    done (took 0.129524745 seconds)
    (10/24) benchmarking ("==", "Array{Int64,1} == Array{Int16,1}")...
    done (took 0.116040199 seconds)
    (11/24) benchmarking ("isequal", "BitArray")...
    done (took 0.12272684 seconds)
    (12/24) benchmarking ("==", "Array{Int64,1} == UnitRange{Int64}")...
    done (took 0.143740704 seconds)
    (13/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Float64,1}")...
    done (took 0.119137294 seconds)
    (14/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Int64,1}")...
    done (took 0.109200157 seconds)
    (15/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Float32,1}")...
    done (took 0.142439996 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.10325095 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.108107414 seconds)
    (18/24) benchmarking ("isequal", "Array{Int16,1}")...
    done (took 0.142297009 seconds)
    (19/24) benchmarking ("isequal", "Array{Float32,1}")...
    done (took 0.114142823 seconds)
    (20/24) benchmarking ("==", "Array{Int64,1} == Array{Float64,1}")...
    done (took 0.11562688 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.13281779 seconds)
    (22/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.11555685 seconds)
    (23/24) benchmarking ("isequal", "Array{Int64,1}")...
    done (took 0.113214725 seconds)
    (24/24) benchmarking ("isequal", "Array{Int64,1} isequal UnitRange{Int64}")...
    done (took 0.140073871 seconds)
  done (took 3.827642154 seconds)
  (5/13) benchmarking "reductions"...
    (1/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norminf", "Int64")...
    done (took 0.184272765 seconds)
    (2/22) benchmarking ("maxabs", "Float64")...
    done (took 0.120304911 seconds)
    (3/22) benchmarking ("sumabs", "Float64")...
    done (took 0.162015158 seconds)
    (4/22) benchmarking ("LinearAlgebra.norm", "Int64")...
    done (took 0.152498829 seconds)
    (5/22) benchmarking ("sumabs", "Int64")...
    done (took 0.163221472 seconds)
    (6/22) benchmarking ("sumabs2", "Float64")...
    done (took 0.106433053 seconds)
    (7/22) benchmarking ("sumabs2", "Int64")...
    done (took 0.134570834 seconds)
    (8/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_mapreduce", "Float64")...
    done (took 0.137327364 seconds)
    (9/22) benchmarking ("sum", "Int64")...
    done (took 0.116845522 seconds)
    (10/22) benchmarking ("mean", "Int64")...
    done (took 0.109762195 seconds)
    (11/22) benchmarking ("mean", "Float64")...
    done (took 0.134193602 seconds)
    (12/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norminf", "Float64")...
    done (took 0.151675923 seconds)
    (13/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_mapreduce", "Int64")...
    done (took 0.137195961 seconds)
    (14/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norm1", "Float64")...
    done (took 0.111454534 seconds)
    (15/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norm1", "Int64")...
    done (took 0.108057816 seconds)
    (16/22) benchmarking ("LinearAlgebra.norm", "Float64")...
    done (took 0.136849122 seconds)
    (17/22) benchmarking ("var", "Float64")...
    done (took 0.121142833 seconds)
    (18/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_reduce", "Float64")...
    done (took 0.113171491 seconds)
    (19/22) benchmarking ("var", "Int64")...
    done (took 0.177668443 seconds)
    (20/22) benchmarking ("sum", "Float64")...
    done (took 0.112919577 seconds)
    (21/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_reduce", "Int64")...
    done (took 0.138127426 seconds)
    (22/22) benchmarking ("maxabs", "Int64")...
    done (took 0.120584204 seconds)
  done (took 3.848163465 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.112051823 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.099088213 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.093891518 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.125331184 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.111079634 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.100667531 seconds)
  done (took 1.544572996 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.097954987 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.093890608 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.092787189 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.115111946 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.096456623 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.09335771 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.091300546 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.116471394 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.092949062 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.092360208 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.115061833 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.092792696 seconds)
  done (took 2.091976174 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.317453228 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.098632132 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.12379216 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.101880579 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.103403927 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.095279642 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.133231623 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.097147143 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.247349467 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.093883368 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.132474959 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.184521328 seconds)
  done (took 2.631735571 seconds)
  (9/13) benchmarking "index"...
    (1/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.192032036 seconds)
    (2/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.132182508 seconds)
    (3/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.238718906 seconds)
    (4/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.349644319 seconds)
    (5/481) benchmarking ("sumcartesian", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.171602408 seconds)
    (6/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.155350185 seconds)
    (7/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.270601027 seconds)
    (8/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.175263667 seconds)
    (9/481) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.167134287 seconds)
    (10/481) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.150652952 seconds)
    (11/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.170512617 seconds)
    (12/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.173413018 seconds)
    (13/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.140986656 seconds)
    (14/481) benchmarking ("sumcolon", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.196711672 seconds)
    (15/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.126702749 seconds)
    (16/481) benchmarking ("sumrange", "BitArray{2}")...
    done (took 0.17231746 seconds)
    (17/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.150518002 seconds)
    (18/481) benchmarking ("sumrange", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.216157343 seconds)
    (19/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.152489656 seconds)
    (20/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.197784061 seconds)
    (21/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.168955876 seconds)
    (22/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.162482571 seconds)
    (23/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.204198328 seconds)
    (24/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.161326925 seconds)
    (25/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.12812277 seconds)
    (26/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.171680645 seconds)
    (27/481) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.109738314 seconds)
    (28/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.11588731 seconds)
    (29/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.17870931 seconds)
    (30/481) benchmarking ("sumrange_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.150382341 seconds)
    (31/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.182534525 seconds)
    (32/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.162194897 seconds)
    (33/481) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.130336819 seconds)
    (34/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.19962086 seconds)
    (35/481) benchmarking ("sumelt", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.216229715 seconds)
    (36/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.186845815 seconds)
    (37/481) benchmarking ("mapr_access", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.256728425 seconds)
    (38/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.144076731 seconds)
    (39/481) benchmarking ("sumlinear_view", "BitArray{2}")...
    done (took 0.156538302 seconds)
    (40/481) benchmarking ("sumlogical", "Array{Float32,2}")...
    done (took 0.19909697 seconds)
    (41/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.241562106 seconds)
    (42/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.128845158 seconds)
    (43/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.198319065 seconds)
    (44/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.138423174 seconds)
    (45/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.141197257 seconds)
    (46/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.1696609 seconds)
    (47/481) benchmarking ("sumvector_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.163333573 seconds)
    (48/481) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.193557607 seconds)
    (49/481) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.12392605 seconds)
    (50/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.131969982 seconds)
    (51/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.191728965 seconds)
    (52/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.187549934 seconds)
    (53/481) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.161834214 seconds)
    (54/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.147917172 seconds)
    (55/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.284068438 seconds)
    (56/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.123259894 seconds)
    (57/481) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.12979341 seconds)
    (58/481) benchmarking ("mapr_access", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.177264914 seconds)
    (59/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.198815557 seconds)
    (60/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.186906028 seconds)
    (61/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.189716203 seconds)
    (62/481) benchmarking ("sumeach", "Array{Float32,2}")...
    done (took 0.112794693 seconds)
    (63/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.188096103 seconds)
    (64/481) benchmarking ("sumlogical", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.201107356 seconds)
    (65/481) benchmarking ("sumvector", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.197716286 seconds)
    (66/481) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.153962076 seconds)
    (67/481) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.150422679 seconds)
    (68/481) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.138899492 seconds)
    (69/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.15062974 seconds)
    (70/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.215978546 seconds)
    (71/481) benchmarking ("sumeach", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.190965164 seconds)
    (72/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.147800566 seconds)
    (73/481) benchmarking ("sum", "3dsubarray")...
    done (took 0.212368865 seconds)
    (74/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.144055709 seconds)
    (75/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.159461032 seconds)
    (76/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.179944851 seconds)
    (77/481) benchmarking ("sumeach_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.142412734 seconds)
    (78/481) benchmarking ("sumcolon", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.213444474 seconds)
    (79/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.178655855 seconds)
    (80/481) benchmarking ("sumlinear", "Array{Float32,2}")...
    done (took 0.111170123 seconds)
    (81/481) benchmarking ("sumeach_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.137833298 seconds)
    (82/481) benchmarking ("sumcartesian", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.147647231 seconds)
    (83/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.116453411 seconds)
    (84/481) benchmarking "5d"...
    done (took 0.200589198 seconds)
    (85/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.112111601 seconds)
    (86/481) benchmarking ("sumlogical", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.226676731 seconds)
    (87/481) benchmarking ("sumlinear", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.12104942 seconds)
    (88/481) benchmarking ("sumlogical", "BitArray{2}")...
    done (took 0.324895284 seconds)
    (89/481) benchmarking ("mapr_access", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.19218723 seconds)
    (90/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.145827766 seconds)
    (91/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.171823758 seconds)
    (92/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.14679239 seconds)
    (93/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.175174883 seconds)
    (94/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.134413932 seconds)
    (95/481) benchmarking ("sumelt", "BitArray{2}")...
    done (took 0.092376167 seconds)
    (96/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.155541035 seconds)
    (97/481) benchmarking ("sumlogical_view", "Array{Int32,2}")...
    done (took 0.148750167 seconds)
    (98/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.168645146 seconds)
    (99/481) benchmarking ("sumeach", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.116675145 seconds)
    (100/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.168051632 seconds)
    (101/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.129307485 seconds)
    (102/481) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.137945247 seconds)
    (103/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.1417425 seconds)
    (104/481) benchmarking ("sumlinear", "Array{Int32,2}")...
    done (took 0.111485067 seconds)
    (105/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.179946915 seconds)
    (106/481) benchmarking ("sumcolon", "BitArray{2}")...
    done (took 0.1223451 seconds)
    (107/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.173854891 seconds)
    (108/481) benchmarking ("sumrange", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.157781663 seconds)
    (109/481) benchmarking ("sumcartesian", "Array{Float64,3}")...
    done (took 0.146039513 seconds)
    (110/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.164830987 seconds)
    (111/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.160475964 seconds)
    (112/481) benchmarking ("sumvector", "Array{Float32,2}")...
    done (took 0.14827513 seconds)
    (113/481) benchmarking ("sumrange_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.18143561 seconds)
    (114/481) benchmarking ("sumlogical", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.203749925 seconds)
    (115/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.119075019 seconds)
    (116/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.119942123 seconds)
    (117/481) benchmarking ("sumlogical", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.226542285 seconds)
    (118/481) benchmarking ("sumrange", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.181148067 seconds)
    (119/481) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.12707831 seconds)
    (120/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.184606236 seconds)
    (121/481) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.181829154 seconds)
    (122/481) benchmarking ("sumvector", "BitArray{2}")...
    done (took 0.16395473 seconds)
    (123/481) benchmarking ("sumcartesian", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.122208893 seconds)
    (124/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.175411769 seconds)
    (125/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.177135702 seconds)
    (126/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.15664835 seconds)
    (127/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.208371317 seconds)
    (128/481) benchmarking ("sumelt", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.127040858 seconds)
    (129/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.1216983 seconds)
    (130/481) benchmarking ("sumcolon_view", "BitArray{2}")...
    done (took 0.151457304 seconds)
    (131/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.158328314 seconds)
    (132/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.169975158 seconds)
    (133/481) benchmarking "ind2sub"...
    done (took 0.14111704 seconds)
    (134/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.140802282 seconds)
    (135/481) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.152869058 seconds)
    (136/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.201165438 seconds)
    (137/481) benchmarking ("sumcartesian", "Array{Float32,2}")...
    done (took 0.115032999 seconds)
    (138/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.152772552 seconds)
    (139/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.166325908 seconds)
    (140/481) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.146171396 seconds)
    (141/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.113489406 seconds)
    (142/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.147622699 seconds)
    (143/481) benchmarking ("sumeach", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.125334463 seconds)
    (144/481) benchmarking ("sumcartesian_view", "Array{Int32,2}")...
    done (took 0.130450407 seconds)
    (145/481) benchmarking ("sumlinear_view", "Array{Float64,3}")...
    done (took 0.161831217 seconds)
    (146/481) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.12721568 seconds)
    (147/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.164828759 seconds)
    (148/481) benchmarking ("sumcolon", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.155251615 seconds)
    (149/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.176662048 seconds)
    (150/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.143296591 seconds)
    (151/481) benchmarking ("sumelt", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.146556853 seconds)
    (152/481) benchmarking ("sumelt", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.158460336 seconds)
    (153/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.144741227 seconds)
    (154/481) benchmarking ("sumrange", "Array{Int32,2}")...
    done (took 0.157075327 seconds)
    (155/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.161219682 seconds)
    (156/481) benchmarking ("sumelt", "1:100000")...
    done (took 0.108933199 seconds)
    (157/481) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.183497881 seconds)
    (158/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.183666624 seconds)
    (159/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.141978291 seconds)
    (160/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.168938108 seconds)
    (161/481) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.175610804 seconds)
    (162/481) benchmarking ("mapr_access", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.195110574 seconds)
    (163/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.159603509 seconds)
    (164/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.141598322 seconds)
    (165/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.170215598 seconds)
    (166/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.115232898 seconds)
    (167/481) benchmarking ("sumlinear", "Array{Float64,3}")...
    done (took 0.135309647 seconds)
    (168/481) benchmarking ("sumeach", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.147143604 seconds)
    (169/481) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.181089007 seconds)
    (170/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.147887436 seconds)
    (171/481) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.200713115 seconds)
    (172/481) benchmarking ("mapr_access", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.193143394 seconds)
    (173/481) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.176555091 seconds)
    (174/481) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.149546684 seconds)
    (175/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.160929955 seconds)
    (176/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.154768076 seconds)
    (177/481) benchmarking ("sumlogical", "Array{Int32,2}")...
    done (took 0.197182605 seconds)
    (178/481) benchmarking ("sumlinear", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.142849271 seconds)
    (179/481) benchmarking ("sumvector_view", "Array{Int32,2}")...
    done (took 0.15708317 seconds)
    (180/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.158605614 seconds)
    (181/481) benchmarking ("sumeach_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.179634872 seconds)
    (182/481) benchmarking ("sumelt_boundscheck", "Array{Float32,2}")...
    done (took 0.109557894 seconds)
    (183/481) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.136949307 seconds)
    (184/481) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.118373959 seconds)
    (185/481) benchmarking ("sumlinear", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.125657697 seconds)
    (186/481) benchmarking ("sumeach", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.144599345 seconds)
    (187/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.126809743 seconds)
    (188/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.188668302 seconds)
    (189/481) benchmarking ("sumrange_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.151147249 seconds)
    (190/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.192246814 seconds)
    (191/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.177977754 seconds)
    (192/481) benchmarking ("sumlinear", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.126794506 seconds)
    (193/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.206150338 seconds)
    (194/481) benchmarking ("sumeach", "1:100000")...
    done (took 0.114335833 seconds)
    (195/481) benchmarking ("sumrange_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.172108002 seconds)
    (196/481) benchmarking ("sumvector", "1:100000")...
    done (took 0.162744779 seconds)
    (197/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.150592237 seconds)
    (198/481) benchmarking ("sumlogical", "1:100000")...
    done (took 0.177075097 seconds)
    (199/481) benchmarking ("sumlogical", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.202535659 seconds)
    (200/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.163897382 seconds)
    (201/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.153743825 seconds)
    (202/481) benchmarking ("sumlinear", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.147564473 seconds)
    (203/481) benchmarking ("sumelt_boundscheck", "Array{Float64,3}")...
    done (took 0.134141919 seconds)
    (204/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.114803694 seconds)
    (205/481) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.122062576 seconds)
    (206/481) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.175942088 seconds)
    (207/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.124361046 seconds)
    (208/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.148002957 seconds)
    (209/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.129257378 seconds)
    (210/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.203767405 seconds)
    (211/481) benchmarking ("sumvector_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.182676033 seconds)
    (212/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.138162992 seconds)
    (213/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.203572763 seconds)
    (214/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.15241408 seconds)
    (215/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.210296984 seconds)
    (216/481) benchmarking ("sumelt", "Array{Float64,3}")...
    done (took 0.108953519 seconds)
    (217/481) benchmarking "4d"...
    done (took 0.174461942 seconds)
    (218/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.154461042 seconds)
    (219/481) benchmarking ("sumrange", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.180534544 seconds)
    (220/481) benchmarking ("sumeach_view", "Array{Int32,2}")...
    done (took 0.167670759 seconds)
    (221/481) benchmarking ("sumeach", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.144787312 seconds)
    (222/481) benchmarking ("sumcolon_view", "Array{Float32,2}")...
    done (took 0.147176527 seconds)
    (223/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.203741318 seconds)
    (224/481) benchmarking ("sumelt", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.129238333 seconds)
    (225/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.203644115 seconds)
    (226/481) benchmarking ("sumvector", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.155019049 seconds)
    (227/481) benchmarking ("sumvector", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.19032934 seconds)
    (228/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.206378837 seconds)
    (229/481) benchmarking ("sumrange", "Array{Float32,2}")...
    done (took 0.152463467 seconds)
    (230/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.145492785 seconds)
    (231/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.136940116 seconds)
    (232/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.173011877 seconds)
    (233/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.125995929 seconds)
    (234/481) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.174847229 seconds)
    (235/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.134901082 seconds)
    (236/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.118717133 seconds)
    (237/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.165561876 seconds)
    (238/481) benchmarking ("sumeach_view", "Array{Float64,3}")...
    done (took 0.125927726 seconds)
    (239/481) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.153850095 seconds)
    (240/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.169587064 seconds)
    (241/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.156846344 seconds)
    (242/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.188120767 seconds)
    (243/481) benchmarking ("sumlogical_view", "Array{Float32,2}")...
    done (took 0.147995709 seconds)
    (244/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.182384627 seconds)
    (245/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.114741315 seconds)
    (246/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.127951834 seconds)
    (247/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.187588002 seconds)
    (248/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.133796683 seconds)
    (249/481) benchmarking ("sumelt_boundscheck", "BitArray{2}")...
    done (took 0.124222405 seconds)
    (250/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.156604249 seconds)
    (251/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.206821236 seconds)
    (252/481) benchmarking ("sumelt_boundscheck", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.137186493 seconds)
    (253/481) benchmarking ("sumvector_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.170214035 seconds)
    (254/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.182165274 seconds)
    (255/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.11997121 seconds)
    (256/481) benchmarking ("mapr_access", "BitArray{2}")...
    done (took 0.300904761 seconds)
    (257/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.196841403 seconds)
    (258/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.187225457 seconds)
    (259/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.123749322 seconds)
    (260/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.150514339 seconds)
    (261/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.159282243 seconds)
    (262/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.171310261 seconds)
    (263/481) benchmarking ("sumvector_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.149333354 seconds)
    (264/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.197344433 seconds)
    (265/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.129085793 seconds)
    (266/481) benchmarking ("sumvector", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.217504798 seconds)
    (267/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.153993997 seconds)
    (268/481) benchmarking ("sumvector_view", "Array{Float32,2}")...
    done (took 0.157019546 seconds)
    (269/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.119176785 seconds)
    (270/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.160331197 seconds)
    (271/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.13873968 seconds)
    (272/481) benchmarking ("sumrange_view", "BitArray{2}")...
    done (took 0.150905642 seconds)
    (273/481) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.139508421 seconds)
    (274/481) benchmarking ("sumcolon", "1:100000")...
    done (took 0.174531664 seconds)
    (275/481) benchmarking ("sumcartesian_view", "Array{Float32,2}")...
    done (took 0.131341437 seconds)
    (276/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.195575039 seconds)
    (277/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.124831638 seconds)
    (278/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.184393914 seconds)
    (279/481) benchmarking ("sumvector", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.163735268 seconds)
    (280/481) benchmarking "3d"...
    done (took 0.160220345 seconds)
    (281/481) benchmarking ("sum", "3darray")...
    done (took 0.137065086 seconds)
    (282/481) benchmarking ("sumlinear", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.125859431 seconds)
    (283/481) benchmarking ("sumlogical", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.232936155 seconds)
    (284/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.181070759 seconds)
    (285/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.157018413 seconds)
    (286/481) benchmarking ("sumcolon", "Array{Int32,2}")...
    done (took 0.176376496 seconds)
    (287/481) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.175972471 seconds)
    (288/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.170969562 seconds)
    (289/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.110856704 seconds)
    (290/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.140244841 seconds)
    (291/481) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.119593871 seconds)
    (292/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.196210168 seconds)
    (293/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.117968122 seconds)
    (294/481) benchmarking ("sumcolon", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.187323398 seconds)
    (295/481) benchmarking ("mapr_access", "Array{Float32,2}")...
    done (took 0.156467224 seconds)
    (296/481) benchmarking ("mapr_access", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.195984105 seconds)
    (297/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.185952841 seconds)
    (298/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.147869343 seconds)
    (299/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.153902901 seconds)
    (300/481) benchmarking ("sumeach", "Array{Float64,3}")...
    done (took 0.114555761 seconds)
    (301/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.178339841 seconds)
    (302/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.136337425 seconds)
    (303/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.198331085 seconds)
    (304/481) benchmarking ("sumelt", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.123158177 seconds)
    (305/481) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.149724687 seconds)
    (306/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.17307994 seconds)
    (307/481) benchmarking ("sumcartesian_view", "BitArray{2}")...
    done (took 0.142031357 seconds)
    (308/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.118303026 seconds)
    (309/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.172487938 seconds)
    (310/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.255677434 seconds)
    (311/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.159951157 seconds)
    (312/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.157066684 seconds)
    (313/481) benchmarking ("sumeach", "BitArray{2}")...
    done (took 0.121462248 seconds)
    (314/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.251933339 seconds)
    (315/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.142046998 seconds)
    (316/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.121680662 seconds)
    (317/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.147805943 seconds)
    (318/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.180985996 seconds)
    (319/481) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.119964962 seconds)
    (320/481) benchmarking ("sumeach_view", "Array{Float32,2}")...
    done (took 0.191012373 seconds)
    (321/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.163119555 seconds)
    (322/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.154668457 seconds)
    (323/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.150731035 seconds)
    (324/481) benchmarking ("sumcartesian", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.148471151 seconds)
    (325/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.169751291 seconds)
    (326/481) benchmarking ("mapr_access", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.198488963 seconds)
    (327/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.176095626 seconds)
    (328/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.158718519 seconds)
    (329/481) benchmarking ("sumrange_view", "Array{Float32,2}")...
    done (took 0.159144884 seconds)
    (330/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.147825838 seconds)
    (331/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.172931314 seconds)
    (332/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.158733177 seconds)
    (333/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.160346809 seconds)
    (334/481) benchmarking ("sumcartesian_view", "Array{Float64,3}")...
    done (took 0.134460536 seconds)
    (335/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.171672478 seconds)
    (336/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.180028973 seconds)
    (337/481) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.191253516 seconds)
    (338/481) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.118346676 seconds)
    (339/481) benchmarking ("sumvector", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.182434382 seconds)
    (340/481) benchmarking ("sumvector", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.156899773 seconds)
    (341/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.184247884 seconds)
    (342/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.18267145 seconds)
    (343/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.128166826 seconds)
    (344/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.170354229 seconds)
    (345/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.142293348 seconds)
    (346/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.151231754 seconds)
    (347/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.150897704 seconds)
    (348/481) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112421304 seconds)
    (349/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.170075941 seconds)
    (350/481) benchmarking ("mapr_access", "Array{Int32,2}")...
    done (took 0.157175835 seconds)
    (351/481) benchmarking ("sumlinear", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.14453662 seconds)
    (352/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.161685265 seconds)
    (353/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.183730421 seconds)
    (354/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.119916267 seconds)
    (355/481) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.141499797 seconds)
    (356/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.13333267 seconds)
    (357/481) benchmarking ("sumcolon", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.177936565 seconds)
    (358/481) benchmarking ("sumelt", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.128599831 seconds)
    (359/481) benchmarking ("sumcartesian", "Array{Int32,2}")...
    done (took 0.117358389 seconds)
    (360/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.193551014 seconds)
    (361/481) benchmarking ("sumeach", "Array{Int32,2}")...
    done (took 0.116957609 seconds)
    (362/481) benchmarking ("sumrange", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.193562326 seconds)
    (363/481) benchmarking ("sumcolon", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.219480657 seconds)
    (364/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.118632789 seconds)
    (365/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.178401298 seconds)
    (366/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.135503519 seconds)
    (367/481) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.118609685 seconds)
    (368/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.152781584 seconds)
    (369/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.132360175 seconds)
    (370/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.144204455 seconds)
    (371/481) benchmarking ("sumlinear_view", "Array{Float32,2}")...
    done (took 0.159734471 seconds)
    (372/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.166915833 seconds)
    (373/481) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.145764401 seconds)
    (374/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.163862304 seconds)
    (375/481) benchmarking ("sumlinear", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.175541603 seconds)
    (376/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.174236359 seconds)
    (377/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.145763246 seconds)
    (378/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.13217221 seconds)
    (379/481) benchmarking "sub2ind"...
    done (took 1.34777364 seconds)
    (380/481) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.116956082 seconds)
    (381/481) benchmarking ("sumlogical", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.207972468 seconds)
    (382/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.137484614 seconds)
    (383/481) benchmarking ("sumlinear_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.209179256 seconds)
    (384/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.136347832 seconds)
    (385/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.187957037 seconds)
    (386/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.182773796 seconds)
    (387/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.138897815 seconds)
    (388/481) benchmarking ("sumeach", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.174661234 seconds)
    (389/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.135251078 seconds)
    (390/481) benchmarking "6d"...
    done (took 0.233367797 seconds)
    (391/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.151799425 seconds)
    (392/481) benchmarking ("sumrange", "1:100000")...
    done (took 0.181484514 seconds)
    (393/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.120412859 seconds)
    (394/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.1304171 seconds)
    (395/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.153538217 seconds)
    (396/481) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.122369471 seconds)
    (397/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.16651989 seconds)
    (398/481) benchmarking ("sumvector", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.156256671 seconds)
    (399/481) benchmarking ("sumeach_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.153966723 seconds)
    (400/481) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.12577031 seconds)
    (401/481) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.179532191 seconds)
    (402/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.136765648 seconds)
    (403/481) benchmarking ("sumcolon_view", "Array{Int32,2}")...
    done (took 0.133821638 seconds)
    (404/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.156283563 seconds)
    (405/481) benchmarking ("sumlogical", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.187593136 seconds)
    (406/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.164595597 seconds)
    (407/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.195685326 seconds)
    (408/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.174205642 seconds)
    (409/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.150283032 seconds)
    (410/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.163253818 seconds)
    (411/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.187094256 seconds)
    (412/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.116767286 seconds)
    (413/481) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.177444231 seconds)
    (414/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.157597392 seconds)
    (415/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.158430566 seconds)
    (416/481) benchmarking ("sumelt", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.137905193 seconds)
    (417/481) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.14824792 seconds)
    (418/481) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.127807117 seconds)
    (419/481) benchmarking ("sumrange", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.224231954 seconds)
    (420/481) benchmarking ("sumelt_boundscheck", "Array{Int32,2}")...
    done (took 0.115278419 seconds)
    (421/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.146177868 seconds)
    (422/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.186792414 seconds)
    (423/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.156553988 seconds)
    (424/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.184660495 seconds)
    (425/481) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.123306868 seconds)
    (426/481) benchmarking ("sumcolon", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.189112966 seconds)
    (427/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.129369908 seconds)
    (428/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.189201992 seconds)
    (429/481) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.117392921 seconds)
    (430/481) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.167515717 seconds)
    (431/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.159233685 seconds)
    (432/481) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.149155621 seconds)
    (433/481) benchmarking ("sumlinear", "1:100000")...
    done (took 0.116238728 seconds)
    (434/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 0.184656441 seconds)
    (435/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.147332718 seconds)
    (436/481) benchmarking ("sumvector", "Array{Int32,2}")...
    done (took 0.177842775 seconds)
    (437/481) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.13097473 seconds)
    (438/481) benchmarking ("sumlinear_view", "Array{Int32,2}")...
    done (took 0.162903774 seconds)
    (439/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.206109268 seconds)
    (440/481) benchmarking ("sumelt", "Array{Float32,2}")...
    done (took 0.11278246 seconds)
    (441/481) benchmarking ("sumeach", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.146735264 seconds)
    (442/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.255095941 seconds)
    (443/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.173365926 seconds)
    (444/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.182811867 seconds)
    (445/481) benchmarking ("sumvector_view", "BitArray{2}")...
    done (took 0.151590696 seconds)
    (446/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.125989395 seconds)
    (447/481) benchmarking ("sumeach_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.158720893 seconds)
    (448/481) benchmarking ("sumcartesian_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.145332664 seconds)
    (449/481) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.17752201 seconds)
    (450/481) benchmarking ("sumrange", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.158521239 seconds)
    (451/481) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.144285641 seconds)
    (452/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.119875034 seconds)
    (453/481) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.134596547 seconds)
    (454/481) benchmarking ("sumeach_view", "BitArray{2}")...
    done (took 0.17185476 seconds)
    (455/481) benchmarking ("sumlogical_view", "BitArray{2}")...
    done (took 0.131370316 seconds)
    (456/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 0.182304131 seconds)
    (457/481) benchmarking ("mapr_access", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 0.158084702 seconds)
    (458/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.174953095 seconds)
    (459/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.170712224 seconds)
    (460/481) benchmarking "2d"...
    done (took 0.150735297 seconds)
    (461/481) benchmarking "7d"...
    done (took 0.240644151 seconds)
    (462/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 0.156888198 seconds)
    (463/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 0.161593294 seconds)
    (464/481) benchmarking ("sumcartesian", "BitArray{2}")...
    done (took 0.130857264 seconds)
    (465/481) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.119131708 seconds)
    (466/481) benchmarking ("sumlinear", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.127883956 seconds)
    (467/481) benchmarking ("sumeach", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.149013476 seconds)
    (468/481) benchmarking ("sumelt", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.12963905 seconds)
    (469/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 0.19668078 seconds)
    (470/481) benchmarking ("sumrange", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 0.22644149 seconds)
    (471/481) benchmarking ("sumcolon", "Array{Float32,2}")...
    done (took 0.151773564 seconds)
    (472/481) benchmarking ("sumrange_view", "Array{Int32,2}")...
    done (took 0.16031102 seconds)
    (473/481) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.124630056 seconds)
    (474/481) benchmarking ("sumelt", "Array{Int32,2}")...
    done (took 0.116294448 seconds)
    (475/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.145534719 seconds)
    (476/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 0.151934984 seconds)
    (477/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.165522919 seconds)
    (478/481) benchmarking ("sumcolon", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 0.156788381 seconds)
    (479/481) benchmarking ("sumcartesian", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 0.160192487 seconds)
    (480/481) benchmarking ("sumlinear", "BitArray{2}")...
    done (took 0.094346646 seconds)
    (481/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 0.127736948 seconds)
  done (took 79.328679272 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("collect", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 0.148992013 seconds)
    (2/8) benchmarking ("collect", "Array{Float64,1}")...
    done (took 0.138409638 seconds)
    (3/8) benchmarking ("comprehension_collect", "Array{Float64,1}")...
    done (took 0.15331568 seconds)
    (4/8) benchmarking ("comprehension_iteration", "Array{Float64,1}")...
    done (took 0.207760379 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 0.180795993 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 0.273209784 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Array{Float64,1}")...
    done (took 0.215217029 seconds)
    (8/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 0.231023893 seconds)
  done (took 2.537430217 seconds)
  (11/13) benchmarking "cat"...
    (1/16) benchmarking ("hvcat", 500)...
    done (took 0.108108629 seconds)
    (2/16) benchmarking ("hcat_setind", 5)...
    done (took 0.145285209 seconds)
    (3/16) benchmarking ("hvcat_setind", 500)...
    done (took 0.129992635 seconds)
    (4/16) benchmarking ("hvcat", 5)...
    done (took 0.131336358 seconds)
    (5/16) benchmarking ("hcat", 500)...
    done (took 0.099210152 seconds)
    (6/16) benchmarking ("catnd_setind", 5)...
    done (took 0.418928176 seconds)
    (7/16) benchmarking ("vcat_setind", 500)...
    done (took 0.173345111 seconds)
    (8/16) benchmarking ("hvcat_setind", 5)...
    done (took 0.110119097 seconds)
    (9/16) benchmarking ("vcat", 5)...
    done (took 0.149538236 seconds)
    (10/16) benchmarking ("catnd_setind", 500)...
    done (took 0.137314215 seconds)
    (11/16) benchmarking ("vcat", 500)...
    done (took 0.122135928 seconds)
    (12/16) benchmarking ("catnd", 5)...
    done (took 0.50899016 seconds)
    (13/16) benchmarking ("vcat_setind", 5)...
    done (took 0.105895879 seconds)
    (14/16) benchmarking ("hcat_setind", 500)...
    done (took 0.129936107 seconds)
    (15/16) benchmarking ("catnd", 500)...
    done (took 0.110668987 seconds)
    (16/16) benchmarking ("hcat", 5)...
    done (took 0.120485192 seconds)
  done (took 3.682205887 seconds)
  (12/13) benchmarking "subarray"...
    (1/8) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.456207638 seconds)
    (2/8) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.507769248 seconds)
    (3/8) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.611356559 seconds)
    (4/8) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.269031753 seconds)
    (5/8) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.238297361 seconds)
    (6/8) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.189459485 seconds)
    (7/8) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.690370496 seconds)
    (8/8) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.180971224 seconds)
  done (took 11.128834039 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.145012471 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.136279857 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.389963144 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.233041131 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.189656408 seconds)
  done (took 2.086618274 seconds)
done (took 119.922314127 seconds)
(18/20) benchmarking "misc"...
  (1/6) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.112788689 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.113135523 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.111330546 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.138967156 seconds)
  done (took 1.45713787 seconds)
  (2/6) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.162757524 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.081055235 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.08369044 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.105176044 seconds)
  done (took 1.421037077 seconds)
  (3/6) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.424587549 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.080683399 seconds)
  done (took 1.520552769 seconds)
  (4/6) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.136268927 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.125356703 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.155073782 seconds)
  done (took 1.417615102 seconds)
  (5/6) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.129541191 seconds)
  done (took 1.122483759 seconds)
  (6/6) benchmarking "parse"...
    (1/3) benchmarking "Int"...
    done (took 0.112003328 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.104104774 seconds)
    (3/3) benchmarking "DateTime"...
    done (took 0.217286701 seconds)
  done (took 1.428136549 seconds)
done (took 9.361789111 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.108910434 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.916355891 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.418599585 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.121843831 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.721646657 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.412999415 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.406690555 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.160013228 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.163176419 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.123283961 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.121700557 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.680526835 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.42147442 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.868324504 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 1.378200049 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.888999349 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.682812522 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.101695998 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.131587554 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.101364997 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 1.39228844 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.122695638 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.101721828 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.101780731 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.705886204 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.409089069 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.09870214 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.901060082 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.099296886 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.102341818 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.411884812 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.101263307 seconds)
  done (took 20.464763752 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.10771853 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.154367178 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.132983264 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.102733787 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.102741374 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.12603358 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.111135126 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.112040824 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.1895557 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.100143413 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.1456789 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.119341445 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105308473 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.125278556 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.125592983 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.100058389 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.126112432 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.103016387 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.107663042 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.125179431 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.12239776 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.098769511 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.124515896 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.103587579 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.099730246 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.144887053 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.102287526 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.111201403 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.123210017 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.10436489 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.10578757 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.100441911 seconds)
  done (took 4.766804536 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.148181354 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.165347796 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.134086219 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.136811699 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.174813831 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.102642796 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.210006414 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.138211929 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.189503833 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.100382747 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.120376019 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.144305528 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.139941435 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.100837484 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.149750878 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.100210728 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.101854203 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.12731304 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.107858978 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.101562874 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.145529319 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.099178069 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.101641554 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.12770574 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.100598765 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.121703093 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.12481999 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.112375022 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.098793288 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.129544814 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.106277176 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.100391977 seconds)
  done (took 5.068066262 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.115092742 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.114919807 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.1203731 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.148517607 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.109147326 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.112784089 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.139265796 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.110677997 seconds)
  done (took 1.980065436 seconds)
done (took 33.277627167 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/33) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.124983622 seconds)
    (2/33) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.119178979 seconds)
    (3/33) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.120365016 seconds)
    (4/33) benchmarking ("Set", "Any", "loop")...
    done (took 0.141996968 seconds)
    (5/33) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.171863914 seconds)
    (6/33) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.134026309 seconds)
    (7/33) benchmarking ("Vector", "String", "loop")...
    done (took 0.117926073 seconds)
    (8/33) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.106408805 seconds)
    (9/33) benchmarking ("Vector", "Int", "loop")...
    done (took 0.138764024 seconds)
    (10/33) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.121718638 seconds)
    (11/33) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.100072917 seconds)
    (12/33) benchmarking ("Dict", "String", "loop")...
    done (took 0.107807371 seconds)
    (13/33) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.147131727 seconds)
    (14/33) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.111342802 seconds)
    (15/33) benchmarking ("Set", "String", "iterator")...
    done (took 0.200584222 seconds)
    (16/33) benchmarking ("Set", "String", "loop")...
    done (took 0.115212234 seconds)
    (17/33) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.205908473 seconds)
    (18/33) benchmarking ("Set", "Any", "iterator")...
    done (took 0.174653065 seconds)
    (19/33) benchmarking ("Set", "Int", "loop")...
    done (took 0.133246866 seconds)
    (20/33) benchmarking ("Vector", "Any", "loop")...
    done (took 0.115880578 seconds)
    (21/33) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.10870239 seconds)
    (22/33) benchmarking ("Dict", "String", "iterator")...
    done (took 0.20657873 seconds)
    (23/33) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.112035407 seconds)
    (24/33) benchmarking ("Dict", "Int", "loop")...
    done (took 0.106698731 seconds)
    (25/33) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.203155955 seconds)
    (26/33) benchmarking ("Vector", "String", "iterator")...
    done (took 0.102604535 seconds)
    (27/33) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.195668873 seconds)
    (28/33) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.110493466 seconds)
    (29/33) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.109678877 seconds)
    (30/33) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.128137143 seconds)
    (31/33) benchmarking ("Set", "Int", "iterator")...
    done (took 0.174768031 seconds)
    (32/33) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.139194818 seconds)
    (33/33) benchmarking ("Dict", "Any", "loop")...
    done (took 0.111795716 seconds)
  done (took 5.517001437 seconds)
  (2/6) benchmarking "iteration"...
    (1/30) benchmarking ("Set", "String", "next")...
    done (took 0.190836293 seconds)
    (2/30) benchmarking ("Set", "Any", "start")...
    done (took 0.111455142 seconds)
    (3/30) benchmarking ("Set", "Int", "done")...
    done (took 0.137340424 seconds)
    (4/30) benchmarking ("Dict", "Int", "done")...
    done (took 0.109824562 seconds)
    (5/30) benchmarking ("Dict", "String", "start")...
    done (took 0.109492011 seconds)
    (6/30) benchmarking ("BitSet", "Int", "done")...
    done (took 0.132818806 seconds)
    (7/30) benchmarking ("Dict", "String", "next")...
    done (took 0.193640034 seconds)
    (8/30) benchmarking ("Vector", "Int", "done")...
    done (took 0.134713074 seconds)
    (9/30) benchmarking ("Vector", "String", "done")...
    done (took 0.109466894 seconds)
    (10/30) benchmarking ("Vector", "Any", "done")...
    done (took 0.108300784 seconds)
    (11/30) benchmarking ("Dict", "String", "done")...
    done (took 0.107602216 seconds)
    (12/30) benchmarking ("Vector", "Int", "next")...
    done (took 0.204624094 seconds)
    (13/30) benchmarking ("Set", "Int", "next")...
    done (took 0.113483515 seconds)
    (14/30) benchmarking ("Vector", "Int", "start")...
    done (took 0.132836181 seconds)
    (15/30) benchmarking ("Dict", "Int", "start")...
    done (took 0.111824293 seconds)
    (16/30) benchmarking ("Vector", "Any", "next")...
    done (took 0.100347124 seconds)
    (17/30) benchmarking ("Dict", "Any", "next")...
    done (took 0.221235294 seconds)
    (18/30) benchmarking ("Set", "String", "start")...
    done (took 0.110786212 seconds)
    (19/30) benchmarking ("Vector", "String", "next")...
    done (took 0.099719645 seconds)
    (20/30) benchmarking ("Set", "Any", "next")...
    done (took 0.110884605 seconds)
    (21/30) benchmarking ("Vector", "String", "start")...
    done (took 0.106070378 seconds)
    (22/30) benchmarking ("Dict", "Any", "done")...
    done (took 0.108157341 seconds)
    (23/30) benchmarking ("Dict", "Int", "next")...
    done (took 0.231008642 seconds)
    (24/30) benchmarking ("Vector", "Any", "start")...
    done (took 0.104572521 seconds)
    (25/30) benchmarking ("Set", "String", "done")...
    done (took 0.108662706 seconds)
    (26/30) benchmarking ("Set", "Any", "done")...
    done (took 0.135392107 seconds)
    (27/30) benchmarking ("Set", "Int", "start")...
    done (took 0.112833844 seconds)
    (28/30) benchmarking ("BitSet", "Int", "next")...
    done (took 0.113820516 seconds)
    (29/30) benchmarking ("BitSet", "Int", "start")...
    done (took 0.13607507 seconds)
    (30/30) benchmarking ("Dict", "Any", "start")...
    done (took 0.111227587 seconds)
  done (took 4.931972362 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.11429326 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.121599356 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.125796051 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.201909842 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.137106755 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.147474981 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.127867038 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.123744685 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.156202143 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.103421206 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.117357225 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.164978857 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.118613031 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.112000371 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.132864762 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.121433708 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.124105967 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.130064761 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.112126377 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.119620539 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.149956218 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.120958162 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.125494187 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.1368541 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.101806503 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.110017562 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.138383728 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.118645348 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.110217334 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.116729856 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.131920476 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.106675933 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.104414891 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.163640149 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.104603512 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.11575942 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.156036068 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.114674108 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.115319218 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.162014468 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.107521787 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.1033425 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.15530884 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.156480095 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.102991735 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.14277018 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.115011602 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.115776119 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.12759005 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.121380297 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.14414933 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.12907153 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.124035409 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.100346924 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.127992631 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.112369014 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.103939907 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.132139994 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.117786207 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.105791488 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.152601927 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.11034226 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.113136688 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.129117792 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.115334665 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.103010576 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.101678092 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.133738188 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.129244641 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.109798823 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.164621277 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.103278425 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.114261957 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.141697803 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.11520272 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.114488244 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.127872105 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.115675506 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.114970364 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.108206988 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.140486466 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.105750735 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.105994174 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.147534738 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.123391418 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.117067075 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.142092351 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.116886185 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.105397078 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.131481376 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.120522701 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.105750311 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.134447862 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.117088752 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.102762899 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.131469203 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.117354004 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.115558695 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.100167033 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.155521721 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.106959864 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.102327194 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.154278546 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.107544134 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.108048742 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.13982008 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.145338118 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.103050719 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.140915169 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.117866777 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.102776232 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.136819326 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.107761648 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.102565292 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.120291384 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.145024462 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.111591251 seconds)
  done (took 15.492842406 seconds)
  (4/6) benchmarking "optimizations"...
    (1/20) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.297353309 seconds)
    (2/20) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.257106734 seconds)
    (3/20) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.197791419 seconds)
    (4/20) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.286843285 seconds)
    (5/20) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.11622734 seconds)
    (6/20) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.218910297 seconds)
    (7/20) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.281219155 seconds)
    (8/20) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.285479251 seconds)
    (9/20) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.102567771 seconds)
    (10/20) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.166588084 seconds)
    (11/20) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.154415246 seconds)
    (12/20) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.252756866 seconds)
    (13/20) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.131265019 seconds)
    (14/20) benchmarking ("BitSet", "Int8")...
    done (took 0.13327315 seconds)
    (15/20) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.28726238 seconds)
    (16/20) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.339580266 seconds)
    (17/20) benchmarking ("BitSet", "UInt16")...
    done (took 0.131520588 seconds)
    (18/20) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.169007871 seconds)
    (19/20) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.165628544 seconds)
    (20/20) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.118862301 seconds)
  done (took 5.125396341 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/79) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.12507138 seconds)
    (2/79) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.136961567 seconds)
    (3/79) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.152371042 seconds)
    (4/79) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.131927946 seconds)
    (5/79) benchmarking ("BitSet", "Int", "last")...
    done (took 0.113773491 seconds)
    (6/79) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.145841716 seconds)
    (7/79) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.103520897 seconds)
    (8/79) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.125975925 seconds)
    (9/79) benchmarking ("BitSet", "Int", "first")...
    done (took 0.142435023 seconds)
    (10/79) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.113194148 seconds)
    (11/79) benchmarking ("Vector", "String", "push!")...
    done (took 0.105236193 seconds)
    (12/79) benchmarking ("Set", "String", "in", "false")...
    done (took 0.145767828 seconds)
    (13/79) benchmarking ("BitSet", "Int", "length")...
    done (took 0.117459532 seconds)
    (14/79) benchmarking ("Set", "Int", "first")...
    done (took 0.119462251 seconds)
    (15/79) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.143923152 seconds)
    (16/79) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.136980055 seconds)
    (17/79) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.110961423 seconds)
    (18/79) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.134595976 seconds)
    (19/79) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.126580795 seconds)
    (20/79) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.107640552 seconds)
    (21/79) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.119763398 seconds)
    (22/79) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.131143649 seconds)
    (23/79) benchmarking ("Dict", "String", "getindex")...
    done (took 0.112052083 seconds)
    (24/79) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.151266622 seconds)
    (25/79) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.123215393 seconds)
    (26/79) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.114050363 seconds)
    (27/79) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.129215254 seconds)
    (28/79) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.108995011 seconds)
    (29/79) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.109904702 seconds)
    (30/79) benchmarking ("Vector", "Int", "last")...
    done (took 0.1383131 seconds)
    (31/79) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.109531842 seconds)
    (32/79) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.122409006 seconds)
    (33/79) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.136930599 seconds)
    (34/79) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.095600265 seconds)
    (35/79) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.115850641 seconds)
    (36/79) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.118254259 seconds)
    (37/79) benchmarking ("Vector", "Int", "length")...
    done (took 0.136591775 seconds)
    (38/79) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.106792684 seconds)
    (39/79) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.10753804 seconds)
    (40/79) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.13178953 seconds)
    (41/79) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.120023874 seconds)
    (42/79) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.11667061 seconds)
    (43/79) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.137555822 seconds)
    (44/79) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.089335129 seconds)
    (45/79) benchmarking ("Dict", "Int", "first")...
    done (took 0.122654432 seconds)
    (46/79) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.100746833 seconds)
    (47/79) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.141428684 seconds)
    (48/79) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.11714027 seconds)
    (49/79) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.09775931 seconds)
    (50/79) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.123506428 seconds)
    (51/79) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.142266946 seconds)
    (52/79) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.117909972 seconds)
    (53/79) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.109959911 seconds)
    (54/79) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.151845208 seconds)
    (55/79) benchmarking ("Dict", "Int", "length")...
    done (took 0.110876274 seconds)
    (56/79) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.119064224 seconds)
    (57/79) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.141093931 seconds)
    (58/79) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.119165625 seconds)
    (59/79) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.107843401 seconds)
    (60/79) benchmarking ("Vector", "Int", "push!")...
    done (took 0.12734774 seconds)
    (61/79) benchmarking ("Vector", "String", "getindex")...
    done (took 0.10333461 seconds)
    (62/79) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.107724853 seconds)
    (63/79) benchmarking ("Vector", "Int", "first")...
    done (took 0.112679461 seconds)
    (64/79) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.145092539 seconds)
    (65/79) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.115785892 seconds)
    (66/79) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.150585824 seconds)
    (67/79) benchmarking ("Set", "String", "in", "true")...
    done (took 0.121814349 seconds)
    (68/79) benchmarking ("Vector", "Any", "push!")...
    done (took 0.103109692 seconds)
    (69/79) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.107799128 seconds)
    (70/79) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.135509367 seconds)
    (71/79) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.107873945 seconds)
    (72/79) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.117593458 seconds)
    (73/79) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.152078796 seconds)
    (74/79) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.113676589 seconds)
    (75/79) benchmarking ("Set", "Int", "length")...
    done (took 0.110258948 seconds)
    (76/79) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.142789171 seconds)
    (77/79) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.113743447 seconds)
    (78/79) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.08480906 seconds)
    (79/79) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.112171672 seconds)
  done (took 10.675664118 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("Dict", "Int", "filter")...
    done (took 0.129051529 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.114401771 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.148171405 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.140661394 seconds)
    (5/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.117093545 seconds)
    (6/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.136216168 seconds)
    (7/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.115400852 seconds)
    (8/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.123170638 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.118439854 seconds)
    (10/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.14995153 seconds)
    (11/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.118894542 seconds)
    (12/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.116593015 seconds)
    (13/28) benchmarking ("Dict", "Any", "filter")...
    done (took 0.153307847 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.114546129 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.113202001 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.147527545 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.118037105 seconds)
    (18/28) benchmarking ("Dict", "String", "filter")...
    done (took 0.141147711 seconds)
    (19/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.148715457 seconds)
    (20/28) benchmarking ("Dict", "Int", "filter!")...
    done (took 0.131450717 seconds)
    (21/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.145916383 seconds)
    (22/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.110054378 seconds)
    (23/28) benchmarking ("Set", "String", "filter")...
    done (took 0.116462436 seconds)
    (24/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.114951572 seconds)
    (25/28) benchmarking ("Dict", "String", "filter!")...
    done (took 0.160414961 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.116400366 seconds)
    (27/28) benchmarking ("Dict", "Any", "filter!")...
    done (took 0.156684472 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.119610251 seconds)
  done (took 4.678693159 seconds)
done (took 47.431796277 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 2.183313804 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.341548073 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 2.128695282 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.127577559 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 2.160636162 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 2.135068977 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.12889372 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 2.132123477 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 3.506971049 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 2.100485534 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.128117228 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 2.12771172 seconds)
done (took 27.243502361 seconds)
(2/20) benchmarking "string"...
  (1/4) benchmarking "join"...
  done (took 2.125538491 seconds)
  (2/4) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.675647132 seconds)
    (2/2) benchmarking "String"...
    done (took 1.443315064 seconds)
  done (took 4.149039585 seconds)
  (3/4) benchmarking "replace"...
  done (took 2.136163205 seconds)
  (4/4) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 2.12094212 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.368796077 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 2.118351551 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 2.133797384 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.121132621 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.120206197 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.125482221 seconds)
  done (took 15.139753697 seconds)
done (took 24.581738305 seconds)
(3/20) benchmarking "linalg"...
  (1/2) benchmarking "factorization"...
    (1/64) benchmarking ("eig", "LowerTriangular", 1024)...
    done (took 2.160779014 seconds)
    (2/64) benchmarking ("svdfact", "UpperTriangular", 1024)...
    done (took 2.305329394 seconds)
    (3/64) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.351309039 seconds)
    (4/64) benchmarking ("eigfact", "UpperTriangular", 256)...
    done (took 2.120552131 seconds)
    (5/64) benchmarking ("qr", "Matrix", 256)...
    done (took 2.12052734 seconds)
    (6/64) benchmarking ("lu", "Matrix", 256)...
    done (took 2.133236479 seconds)
    (7/64) benchmarking ("eig", "SymTridiagonal", 256)...
    done (took 2.124890832 seconds)
    (8/64) benchmarking ("qrfact", "Matrix", 1024)...
    done (took 2.135617972 seconds)
    (9/64) benchmarking ("eigfact", "Diagonal", 256)...
    done (took 2.135841794 seconds)
    (10/64) benchmarking ("eig", "LowerTriangular", 256)...
    done (took 2.120829561 seconds)
    (11/64) benchmarking ("lufact", "Tridiagonal", 1024)...
    done (took 1.516204735 seconds)
    (12/64) benchmarking ("schurfact", "Matrix", 1024)...
    done (took 2.381426921 seconds)
    (13/64) benchmarking ("eig", "Bidiagonal", 1024)...
    done (took 2.12358079 seconds)
    (14/64) benchmarking ("eigfact", "Matrix", 1024)...
    done (took 2.492534822 seconds)
    (15/64) benchmarking ("eig", "UpperTriangular", 256)...
    done (took 2.121877881 seconds)
    (16/64) benchmarking ("svdfact", "Matrix", 256)...
    done (took 2.143898834 seconds)
    (17/64) benchmarking ("lufact", "Matrix", 256)...
    done (took 2.125223956 seconds)
    (18/64) benchmarking ("svd", "Matrix", 1024)...
    done (took 2.34058936 seconds)
    (19/64) benchmarking ("qrfact", "Matrix", 256)...
    done (took 2.130913771 seconds)
    (20/64) benchmarking ("eigfact", "Matrix", 256)...
    done (took 2.149924726 seconds)
    (21/64) benchmarking ("svd", "Diagonal", 256)...
    done (took 2.100367246 seconds)
    (22/64) benchmarking ("svdfact", "Diagonal", 256)...
    done (took 2.116531003 seconds)
    (23/64) benchmarking ("lufact", "Matrix", 1024)...
    done (took 2.148291149 seconds)
    (24/64) benchmarking ("schur", "Matrix", 256)...
    done (took 2.119522268 seconds)
    (25/64) benchmarking ("eigfact", "SymTridiagonal", 1024)...
    done (took 2.12199119 seconds)
    (26/64) benchmarking ("svd", "LowerTriangular", 256)...
    done (took 2.126395326 seconds)
    (27/64) benchmarking ("eig", "UpperTriangular", 1024)...
    done (took 2.164479156 seconds)
    (28/64) benchmarking ("eig", "Bidiagonal", 256)...
    done (took 2.125518675 seconds)
    (29/64) benchmarking ("svdfact", "LowerTriangular", 1024)...
    done (took 2.31382219 seconds)
    (30/64) benchmarking ("lu", "Matrix", 1024)...
    done (took 2.151461701 seconds)
    (31/64) benchmarking ("eig", "Matrix", 256)...
    done (took 2.150503716 seconds)
    (32/64) benchmarking ("eigfact", "SymTridiagonal", 256)...
    done (took 2.12479045 seconds)
    (33/64) benchmarking ("eigfact", "UpperTriangular", 1024)...
    done (took 2.165358633 seconds)
    (34/64) benchmarking ("svdfact", "Bidiagonal", 256)...
    done (took 2.127100393 seconds)
    (35/64) benchmarking ("lu", "Tridiagonal", 256)...
    done (took 2.122220542 seconds)
    (36/64) benchmarking ("svd", "UpperTriangular", 256)...
    done (took 2.134869813 seconds)
    (37/64) benchmarking ("svd", "UpperTriangular", 1024)...
    done (took 2.29468532 seconds)
    (38/64) benchmarking ("eig", "SymTridiagonal", 1024)...
    done (took 2.124101182 seconds)
    (39/64) benchmarking ("svd", "Diagonal", 1024)...
    done (took 2.107825902 seconds)
    (40/64) benchmarking ("eigfact", "Diagonal", 1024)...
    done (took 2.143574378 seconds)
    (41/64) benchmarking ("svd", "LowerTriangular", 1024)...
    done (took 2.29413121 seconds)
    (42/64) benchmarking ("lu", "Tridiagonal", 1024)...
    done (took 2.141102839 seconds)
    (43/64) benchmarking ("cholfact", "Matrix", 256)...
    done (took 2.128031076 seconds)
    (44/64) benchmarking ("eig", "Diagonal", 1024)...
    done (took 2.125079876 seconds)
    (45/64) benchmarking ("eigfact", "LowerTriangular", 256)...
    done (took 2.12362179 seconds)
    (46/64) benchmarking ("eigfact", "LowerTriangular", 1024)...
    done (took 2.163800794 seconds)
    (47/64) benchmarking ("svdfact", "Diagonal", 1024)...
    done (took 2.112353011 seconds)
    (48/64) benchmarking ("lufact", "Tridiagonal", 256)...
    done (took 1.229092138 seconds)
    (49/64) benchmarking ("svd", "Bidiagonal", 256)...
    done (took 2.141259784 seconds)
    (50/64) benchmarking ("eig", "Diagonal", 256)...
    done (took 2.138116124 seconds)
    (51/64) benchmarking ("svd", "Bidiagonal", 1024)...
    done (took 2.17450379 seconds)
    (52/64) benchmarking ("eig", "Matrix", 1024)...
    done (took 2.484491838 seconds)
    (53/64) benchmarking ("svdfact", "UpperTriangular", 256)...
    done (took 2.133770238 seconds)
    (54/64) benchmarking ("chol", "Matrix", 1024)...
    done (took 2.14080979 seconds)
    (55/64) benchmarking ("svdfact", "LowerTriangular", 256)...
    done (took 2.129688331 seconds)
    (56/64) benchmarking ("svdfact", "Matrix", 1024)...
    done (took 2.339863075 seconds)
    (57/64) benchmarking ("svd", "Matrix", 256)...
    done (took 2.127254516 seconds)
    (58/64) benchmarking ("qr", "Matrix", 1024)...
    done (took 2.162968023 seconds)
    (59/64) benchmarking ("schurfact", "Matrix", 256)...
    done (took 2.149223021 seconds)
    (60/64) benchmarking ("cholfact", "Matrix", 1024)...
    done (took 2.143363498 seconds)
    (61/64) benchmarking ("chol", "Matrix", 256)...
    done (took 2.129710202 seconds)
    (62/64) benchmarking ("eigfact", "Bidiagonal", 256)...
    done (took 2.132844908 seconds)
    (63/64) benchmarking ("svdfact", "Bidiagonal", 1024)...
    done (took 2.175074787 seconds)
    (64/64) benchmarking ("eigfact", "Bidiagonal", 1024)...
    done (took 2.126388906 seconds)
  done (took 138.398785851 seconds)
  (2/2) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 2.124227863 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 2.127975806 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 2.127405453 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 2.131928002 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 2.129519833 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.129587128 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.124663745 seconds)
    (8/36) benchmarking "gemv"...
    done (took 2.123146476 seconds)
    (9/36) benchmarking "syr!"...
    done (took 2.129392686 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 2.132968111 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 2.131446714 seconds)
    (12/36) benchmarking "her!"...
    done (took 2.129894059 seconds)
    (13/36) benchmarking "trsv"...
    done (took 2.129149908 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.151987889 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.133380536 seconds)
    (16/36) benchmarking "herk!"...
    done (took 2.138638737 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.130500019 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.124230587 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.154690187 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.125480691 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 2.130952435 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 2.129170015 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 2.129526301 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.129310747 seconds)
    (25/36) benchmarking "symm"...
    done (took 2.168213905 seconds)
    (26/36) benchmarking "herk"...
    done (took 2.189640974 seconds)
    (27/36) benchmarking "syrk"...
    done (took 2.146240556 seconds)
    (28/36) benchmarking "trsm"...
    done (took 2.145795138 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.139280261 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.124010091 seconds)
    (31/36) benchmarking "gemm"...
    done (took 2.157050791 seconds)
    (32/36) benchmarking "symm!"...
    done (took 2.137378201 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.705934291 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 1.992920831 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 2.137749065 seconds)
    (36/36) benchmarking "trmm"...
    done (took 2.135421027 seconds)
  done (took 77.365074512 seconds)
done (took 216.795438859 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 1.989749903 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 1.942579087 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.093082277 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 1.958984492 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 1.939501338 seconds)
  done (took 10.96044971 seconds)
done (took 11.996608814 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/13) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 1.306594363 seconds)
    (2/13) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 1.305751791 seconds)
    (3/13) benchmarking ("BitArray{1}", "90-10")...
    done (took 1.182130308 seconds)
    (4/13) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 1.310370235 seconds)
    (5/13) benchmarking ("BitArray{1}", "50-50")...
    done (took 1.157088094 seconds)
    (6/13) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 1.324535869 seconds)
    (7/13) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 1.29784267 seconds)
    (8/13) benchmarking ("Array{Bool,1}", "10-90")...
    done (took 1.142420022 seconds)
    (9/13) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 1.231116769 seconds)
    (10/13) benchmarking ("Array{Bool,1}", "90-10")...
    done (took 1.20145586 seconds)
    (11/13) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 1.231951999 seconds)
    (12/13) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 1.174881738 seconds)
    (13/13) benchmarking ("BitArray{1}", "10-90")...
    done (took 1.157241542 seconds)
  done (took 17.060327918 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 1.394969798 seconds)
    (2/11) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 2.137077711 seconds)
    (3/11) benchmarking ("BitArray{1}", "90-10")...
    done (took 1.192384376 seconds)
    (4/11) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 1.375157906 seconds)
    (5/11) benchmarking ("BitArray{1}", "50-50")...
    done (took 1.170148262 seconds)
    (6/11) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 1.393953279 seconds)
    (7/11) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 1.421929413 seconds)
    (8/11) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 2.136817547 seconds)
    (9/11) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 1.272695352 seconds)
    (10/11) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 1.171385892 seconds)
    (11/11) benchmarking ("BitArray{1}", "10-90")...
    done (took 1.148575172 seconds)
  done (took 16.853716775 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Array{Float32,1}")...
    done (took 1.396835757 seconds)
    (2/11) benchmarking ("ispos", "Array{UInt8,1}")...
    done (took 2.138360015 seconds)
    (3/11) benchmarking ("BitArray{1}", "90-10")...
    done (took 1.194298047 seconds)
    (4/11) benchmarking ("ispos", "Array{Float64,1}")...
    done (took 1.380049115 seconds)
    (5/11) benchmarking ("BitArray{1}", "50-50")...
    done (took 1.175268724 seconds)
    (6/11) benchmarking ("ispos", "Array{UInt64,1}")...
    done (took 1.404161199 seconds)
    (7/11) benchmarking ("ispos", "Array{Int64,1}")...
    done (took 1.437505255 seconds)
    (8/11) benchmarking ("ispos", "Array{Int8,1}")...
    done (took 2.137361963 seconds)
    (9/11) benchmarking ("ispos", "Array{Bool,1}")...
    done (took 1.282250159 seconds)
    (10/11) benchmarking ("Array{Bool,1}", "50-50")...
    done (took 1.151159855 seconds)
    (11/11) benchmarking ("BitArray{1}", "10-90")...
    done (took 1.150358843 seconds)
  done (took 16.886198169 seconds)
done (took 51.837130061 seconds)
(6/20) benchmarking "tuple"...
  (1/3) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.164771151 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 1.221864595 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.165177198 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.148304838 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.145475721 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.145471315 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.150533748 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.146123471 seconds)
  done (took 10.326963879 seconds)
  (2/3) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.144807904 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.144560182 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.144595801 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.144528319 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.144106264 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.145466183 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.145708482 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.14591076 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.145504448 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.145319621 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.145823164 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.14547024 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.144892911 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.14607129 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.144367943 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.145485289 seconds)
  done (took 19.362459266 seconds)
  (3/3) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.148675013 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 1.146456573 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 1.144779566 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 1.146202611 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.145786183 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.146848996 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 1.145470589 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 1.147155412 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 1.147191979 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 1.145786678 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 1.146706327 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 1.146330335 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 1.146800043 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 1.145828626 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.147679658 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 1.148700629 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.146439698 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 1.146893954 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 1.152313515 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 1.147573505 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 1.147365448 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 1.146692131 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 1.146605903 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 1.147767959 seconds)
  done (took 28.570124695 seconds)
done (took 59.297439255 seconds)
(7/20) benchmarking "dates"...
  (1/6) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.142678001 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.136476616 seconds)
  done (took 5.320847362 seconds)
  (2/6) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.204304378 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.203465744 seconds)
  done (took 3.449408074 seconds)
  (3/6) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.146784044 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.146306042 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.147767038 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.146789777 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.147134558 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.147472555 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.148386752 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.148128707 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.148582486 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.148719457 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.146150931 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.146675638 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.147005382 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.148459896 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.147733043 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.147632261 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.14779418 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.148088899 seconds)
  done (took 21.698007753 seconds)
  (4/6) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.161257571 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.167622338 seconds)
  done (took 3.370072431 seconds)
  (5/6) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.275388917 seconds)
    (2/7) benchmarking "second"...
    done (took 1.190533594 seconds)
    (3/7) benchmarking "month"...
    done (took 1.26050912 seconds)
    (4/7) benchmarking "year"...
    done (took 1.243251611 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.189934908 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.168360031 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.190375602 seconds)
  done (took 9.561028738 seconds)
  (6/6) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.148964468 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.34620058 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.471145109 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.718187832 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.150344229 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.151848526 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.084254986 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.153295103 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.152795518 seconds)
  done (took 13.420332781 seconds)
done (took 57.860529004 seconds)
(8/20) benchmarking "micro"...
  (1/7) benchmarking "quicksort"...
  done (took 2.134255565 seconds)
  (2/7) benchmarking "parseint"...
  done (took 2.192407794 seconds)
  (3/7) benchmarking "randmatstat"...
  done (took 2.167356851 seconds)
  (4/7) benchmarking "pisum"...
  done (took 2.151300207 seconds)
  (5/7) benchmarking "fib"...
  done (took 1.489207944 seconds)
  (6/7) benchmarking "randmatmul"...
  done (took 2.18515246 seconds)
  (7/7) benchmarking "mandel"...
  done (took 2.141176263 seconds)
done (took 15.50432789 seconds)
(9/20) benchmarking "io"...
  (1/2) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 2.12318552 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.118614762 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 2.129641646 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 2.153022987 seconds)
  done (took 9.568135304 seconds)
  (2/2) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.140441831 seconds)
    (2/2) benchmarking "read"...
    done (took 1.464748596 seconds)
  done (took 4.649726516 seconds)
done (took 15.262120442 seconds)
(10/20) benchmarking "scalar"...
  (1/23) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.150134819 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.150251397 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.151293889 seconds)
    (4/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.150066503 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 1.151181409 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.151182966 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.150719136 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.149910864 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.14976922 seconds)
    (10/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.151703542 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.150292701 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.149360051 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.152307644 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.151364077 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.150738993 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.151094414 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.152645186 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.150394149 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.151285056 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.150097415 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.150676905 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.151127351 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.151515972 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.150372831 seconds)
  done (took 28.665147584 seconds)
  (2/23) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.15314585 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.150200534 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.150990301 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.150713938 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.151580911 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.151552416 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.152167425 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.150876953 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.153439461 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.15398647 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.15235392 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.151970205 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.153272952 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.154212158 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.15295606 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.152361692 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.152695435 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.151766474 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.152085048 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.154571184 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.152564101 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.153189696 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.153269219 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.152372064 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.152009462 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.152360361 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.151364465 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.153876731 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.151494876 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.154469226 seconds)
  done (took 35.619691416 seconds)
  (3/23) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.156582048 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.154520748 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.15396827 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.15365567 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.154483824 seconds)
    (6/72) benchmarking ("isodd", "UInt64")...
    done (took 1.154192777 seconds)
    (7/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.154778221 seconds)
    (8/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.154025539 seconds)
    (9/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.154160575 seconds)
    (10/72) benchmarking ("isnan", "Float64")...
    done (took 1.152373807 seconds)
    (11/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.154084039 seconds)
    (12/72) benchmarking ("isequal", "Float64")...
    done (took 1.153175246 seconds)
    (13/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.154281368 seconds)
    (14/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.153934692 seconds)
    (15/72) benchmarking ("isnan", "Complex{Float32}")...
    done (took 1.153473808 seconds)
    (16/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.154797977 seconds)
    (17/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.153523221 seconds)
    (18/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.152145207 seconds)
    (19/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.153954481 seconds)
    (20/72) benchmarking ("isequal", "Complex{Float64}")...
    done (took 1.154378713 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.153988011 seconds)
    (22/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.153210627 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 1.156863313 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.15291905 seconds)
    (25/72) benchmarking ("isequal", "UInt64")...
    done (took 1.154853985 seconds)
    (26/72) benchmarking ("isinteger", "Int64")...
    done (took 1.153586867 seconds)
    (27/72) benchmarking ("isfinite", "Float64")...
    done (took 1.155834105 seconds)
    (28/72) benchmarking ("isequal", "Int64")...
    done (took 1.15488236 seconds)
    (29/72) benchmarking ("isinf", "Float64")...
    done (took 1.155670908 seconds)
    (30/72) benchmarking ("isless", "UInt64")...
    done (took 1.15493769 seconds)
    (31/72) benchmarking ("isequal", "BigInt")...
    done (took 1.15482453 seconds)
    (32/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.155786624 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 1.154373648 seconds)
    (34/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.156442649 seconds)
    (35/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.154892841 seconds)
    (36/72) benchmarking ("isless", "Float64")...
    done (took 1.155004621 seconds)
    (37/72) benchmarking ("iseven", "BigInt")...
    done (took 1.15734533 seconds)
    (38/72) benchmarking ("isnan", "BigInt")...
    done (took 1.155815678 seconds)
    (39/72) benchmarking ("isequal", "Complex{Float32}")...
    done (took 1.155765154 seconds)
    (40/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.155639415 seconds)
    (41/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.154564543 seconds)
    (42/72) benchmarking ("isnan", "Float32")...
    done (took 1.156283364 seconds)
    (43/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.155262328 seconds)
    (44/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.157032419 seconds)
    (45/72) benchmarking ("iseven", "Int64")...
    done (took 1.155916116 seconds)
    (46/72) benchmarking ("isinteger", "Float64")...
    done (took 1.157722989 seconds)
    (47/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.155980856 seconds)
    (48/72) benchmarking ("isfinite", "Complex{Float32}")...
    done (took 1.157259 seconds)
    (49/72) benchmarking ("isnan", "Complex{Float64}")...
    done (took 1.156346642 seconds)
    (50/72) benchmarking ("isinteger", "Complex{Float32}")...
    done (took 1.156084059 seconds)
    (51/72) benchmarking ("isinf", "Int64")...
    done (took 1.155836039 seconds)
    (52/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.155765551 seconds)
    (53/72) benchmarking ("isinf", "Complex{Float32}")...
    done (took 1.155082803 seconds)
    (54/72) benchmarking ("isfinite", "Complex{Float64}")...
    done (took 1.155812066 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.157115922 seconds)
    (56/72) benchmarking ("isnan", "Int64")...
    done (took 1.15698948 seconds)
    (57/72) benchmarking ("isinteger", "Float32")...
    done (took 1.155847112 seconds)
    (58/72) benchmarking ("isnan", "UInt64")...
    done (took 1.156080278 seconds)
    (59/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.156391899 seconds)
    (60/72) benchmarking ("isless", "Int64")...
    done (took 1.155698986 seconds)
    (61/72) benchmarking ("isinf", "BigInt")...
    done (took 1.156795769 seconds)
    (62/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.156162973 seconds)
    (63/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.157172558 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.154766285 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.157935533 seconds)
    (66/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.156063428 seconds)
    (67/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.155655014 seconds)
    (68/72) benchmarking ("isinteger", "Complex{Float64}")...
    done (took 1.159085545 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.155833983 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.157266233 seconds)
    (71/72) benchmarking ("isinf", "Complex{Float64}")...
    done (took 1.156393243 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.157253957 seconds)
  done (took 84.236588312 seconds)
  (4/23) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.157093686 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.157635556 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.155751702 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.156641006 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.157036235 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.15826881 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.15808378 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.15692642 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.157680912 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.157167596 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.157915201 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.159053246 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.156391976 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.159177964 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.158277309 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.158203273 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.15943971 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.158940567 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.158077333 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.158384 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.159208201 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.158322485 seconds)
  done (took 26.525695991 seconds)
  (5/23) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.159218353 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.162271178 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.156943036 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.159587562 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.161336354 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.159466293 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.160187641 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.160749536 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.159158376 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.157091086 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.160532285 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.158166392 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.161821771 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.159298717 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.160670282 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.163122321 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.159488941 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.161859162 seconds)
  done (took 21.932616802 seconds)
  (6/23) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.161197135 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.159077336 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.16076792 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.159490003 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.159974532 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.159870378 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.160463406 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.159900589 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.160241566 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.159938746 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.16073248 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.159696713 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.160447335 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.159774747 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.159306544 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.159762737 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.160531376 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.160502811 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.161084783 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.160700797 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.160420787 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.161771751 seconds)
  done (took 26.579410176 seconds)
  (7/23) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.161279812 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.160839405 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.160411503 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.159908145 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.160839096 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.160643493 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.16033594 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.16123134 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.163119913 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.161336792 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.159998103 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.161307887 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.163728436 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.162525146 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.159884455 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.16032665 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.160134685 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.161170303 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.162338029 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.161538586 seconds)
  done (took 24.278075063 seconds)
  (8/23) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.163097653 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.162275629 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.160918528 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.162176105 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.162926731 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.162506194 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.162911857 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.161764415 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.164888349 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.162906161 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.162879829 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.162407529 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.163387762 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.162179043 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.162572272 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.164266934 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.161904248 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.164479154 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.163199389 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.163255006 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.164566891 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.163303437 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.16407036 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.16396487 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.163027646 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.165158501 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.165171018 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.16470788 seconds)
  done (took 33.626181763 seconds)
  (9/23) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.164349258 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.16450972 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.1649813 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.163864192 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.163746596 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.165025278 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.164461062 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.163788695 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.163294668 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.162802756 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.165967336 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.164686524 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.164182724 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.164407739 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.165185907 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.164185845 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.164335999 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.165907152 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.163829794 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.164688662 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.164222626 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.165363178 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.164414249 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.164723833 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.165261737 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.166159664 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.167359967 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.166545298 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.167179818 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.164532689 seconds)
  done (took 36.001710797 seconds)
  (10/23) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.183206739 seconds)
    (2/2) benchmarking "in"...
    done (took 1.183777651 seconds)
  done (took 3.42455476 seconds)
  (11/23) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.165572019 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.165381458 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.165477854 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.166302453 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.16513475 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.165288602 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.166840957 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.165145842 seconds)
  done (took 10.383301867 seconds)
  (12/23) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.166910797 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.165658898 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.165783533 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.165371948 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.166874165 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.166848883 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.16699852 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.66633239 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.166444833 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.166154961 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.165647776 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.166282642 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.165894198 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.167142542 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.167252817 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.166543352 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.166209121 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.167878758 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.166876224 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.167037854 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.167675366 seconds)
  done (took 26.056998532 seconds)
  (13/23) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.167118028 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.168011649 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.167853677 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.1677323 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.167623232 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.168945425 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.168201281 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.168011374 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.166344963 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.167430242 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.169133897 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.169073707 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.16848578 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.168349991 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.168596183 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.168124855 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.166347245 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.166878793 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.167674796 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.167770326 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.167279155 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.169433563 seconds)
  done (took 26.754250664 seconds)
  (14/23) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.169091901 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.167953962 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.16791331 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.168698011 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.167867827 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.16859362 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.169723342 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.167814108 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.170035113 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.168815961 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.170633852 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.170305623 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.169199733 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.170772921 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.170321699 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.170245756 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.16871552 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.169620388 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.170049852 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.17062673 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.169140025 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.170464856 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.169839072 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.170115276 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.169853372 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.169979402 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.170259878 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.170050807 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.169946691 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.169222612 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.170273141 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.17100816 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.172282869 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.16886596 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.171189427 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.171483988 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.170579738 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.17100351 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.170013082 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.171206309 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.172094779 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.171101095 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.171501361 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.171077045 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.170744603 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.171652186 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.171059482 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.171654965 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.170108819 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.174230028 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.170745102 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.169674581 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.171532483 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.173062351 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.173205499 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.171037576 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.1715633 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.170854677 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.17385858 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.172626404 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.172360529 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.172817158 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.171564951 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.171954318 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.172092737 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.17179865 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.171854826 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.17352432 seconds)
  done (took 80.66767627 seconds)
  (15/23) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.172603137 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.1745608 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.172500367 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.173913208 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.174075115 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.174563882 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.173430629 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.174109216 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.173930588 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.173046538 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.174339601 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.173486885 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.174926069 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.17462738 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.172713647 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.174407108 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.174664724 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.175399895 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.173772889 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.172900376 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.174294411 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.175801496 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.174656191 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.174942004 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.174107581 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.174250945 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.174870129 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.173737994 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.175415725 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.174448337 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.176261813 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.175959299 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.17488571 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.174078587 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.175125445 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.174516403 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.174143639 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.173633903 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.174866178 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.175444523 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.174443606 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.174506092 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.176761319 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.175399643 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.176131552 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.1753093 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.176029923 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.175903876 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.175798005 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.176413241 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.177230626 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.174978422 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.176824852 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.176820788 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.176139158 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.175182012 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.176362324 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.177401473 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.175505488 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.175983608 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.176493534 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.175733554 seconds)
  done (took 73.911242836 seconds)
  (16/23) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.176013316 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.176705276 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.177451615 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.176873678 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.176195292 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.178078976 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.175842481 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.176901016 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.176107154 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.177769012 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.177624831 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.176211676 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.178202619 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.178757951 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.177641015 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.178035804 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.177837116 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.176683814 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.177616522 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.176934574 seconds)
  done (took 24.611943858 seconds)
  (17/23) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.177439419 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.177886954 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.176697156 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.178959432 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.176872754 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.179373916 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.177522403 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.178031828 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.177075795 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.17891103 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.178535663 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.178531067 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.178532872 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.178732755 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.179030355 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.178555623 seconds)
  done (took 19.918870418 seconds)
  (18/23) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.178694996 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.179697245 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.18019851 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.179361723 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.177394941 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.180104497 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.178646331 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.177736019 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.178867997 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.178396229 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.178672972 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.179438384 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.178071504 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.181270344 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.178574071 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.180421724 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.178470548 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.180234054 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.178419608 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.179005135 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.179142351 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.179138816 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.178981384 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.179165005 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.180274993 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.180344414 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.179425108 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.178798946 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.179551466 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.179410223 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.178536302 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.179407294 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.179163065 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.179854859 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.179248784 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.179998578 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.179520752 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.179088876 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.178609135 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.180298789 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.179158046 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.178965919 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.179246405 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.181016792 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.178707082 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.17838704 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.179187458 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.179336941 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.178665202 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.17981191 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.179077167 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.179401831 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.180491904 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.179977391 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.178621024 seconds)
  done (took 65.931667885 seconds)
  (19/23) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.17983291 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.17894376 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.179509514 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.179199114 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.180079375 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.178564601 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.180233506 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.181111081 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.178690994 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.17959843 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.179776913 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.180620222 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.178517468 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.179461226 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.180740019 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.181720541 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.17879084 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.18002311 seconds)
  done (took 22.305122452 seconds)
  (20/23) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.180759976 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.179905738 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.18109916 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.179067714 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.178480478 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.179145557 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.180581151 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.178763934 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.180943106 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.180526546 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.179701246 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.179568331 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.180111984 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.179996427 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.180055305 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.179346964 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.180690095 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.17901259 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.180467032 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.180276729 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.178602974 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.178996536 seconds)
  done (took 27.027164207 seconds)
  (21/23) benchmarking "intfuncs"...
    (1/12) benchmarking ("nextpow2", "Int64", "+")...
    done (took 1.170147654 seconds)
    (2/12) benchmarking ("prevpow2", "UInt64", "-")...
    done (took 1.171074777 seconds)
    (3/12) benchmarking ("prevpow2", "Int64", "+")...
    done (took 1.169275748 seconds)
    (4/12) benchmarking ("nextpow2", "BigInt", "-")...
    done (took 1.178991232 seconds)
    (5/12) benchmarking ("prevpow2", "UInt64", "+")...
    done (took 1.172805249 seconds)
    (6/12) benchmarking ("prevpow2", "Int64", "-")...
    done (took 1.170033293 seconds)
    (7/12) benchmarking ("nextpow2", "UInt64", "-")...
    done (took 1.170511605 seconds)
    (8/12) benchmarking ("nextpow2", "UInt64", "+")...
    done (took 1.169099819 seconds)
    (9/12) benchmarking ("prevpow2", "BigInt", "+")...
    done (took 1.180580746 seconds)
    (10/12) benchmarking ("prevpow2", "BigInt", "-")...
    done (took 1.184657129 seconds)
    (11/12) benchmarking ("nextpow2", "BigInt", "+")...
    done (took 1.182573798 seconds)
    (12/12) benchmarking ("nextpow2", "Int64", "-")...
    done (took 1.172358103 seconds)
  done (took 15.162256559 seconds)
  (22/23) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.179710831 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.179380301 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.179249134 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.179667758 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.178293019 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.179383994 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.179198748 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.179588808 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.179616599 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.180744096 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.178948404 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.180222602 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.178403647 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.178774834 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.179001342 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.180402628 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.180047818 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.181232822 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.178987485 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.179365345 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.179380307 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.179831361 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.179546894 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.177838119 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.17900833 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.178777568 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.179314224 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.179766322 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.179869513 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.179640374 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.178827142 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.178861693 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.180889497 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.178722177 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.180600345 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.179037081 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.179218466 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.179018329 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.179832172 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.180292729 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.179233792 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.181260991 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.179983754 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.180592019 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.181594977 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.180373875 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.179444708 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.180816178 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.180098591 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.182166334 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.180575317 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.180851651 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.180307852 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.180472059 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.182030514 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.18212871 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.18307936 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.180604467 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.182526487 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.183142955 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.182586049 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.181829152 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.180954074 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.182651839 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.182723292 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.181002748 seconds)
  done (took 78.963914362 seconds)
  (23/23) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.181458839 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.182998379 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.181886239 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.18240028 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.182483049 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.181954924 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.182374758 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.181232994 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.183527701 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.182778583 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.182662812 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.182438686 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.181702644 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.184285929 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.182061215 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.182494522 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.183489277 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.183544311 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.183613526 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.182844585 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.18357698 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.184909376 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.184387151 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.184266759 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.184718414 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.184117974 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.182460356 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.18447099 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.183798612 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.183489367 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.183153005 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.183704482 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.183740948 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.183962205 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.183517979 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.183867148 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.184071742 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.184439506 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.184240177 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.184931543 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.183877469 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.183819862 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.183626157 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.185466321 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.184958377 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.186119843 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.184185055 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.184649273 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.184925222 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.184436097 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.186167852 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.186249547 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.186200119 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.185109619 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.183325306 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.184627601 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.186183162 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.184837541 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.18583848 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.18581509 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.186727841 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.186474144 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.186807001 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.185163329 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.186174864 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.187100632 seconds)
  done (took 79.225530072 seconds)
done (took 872.854057636 seconds)
(11/20) benchmarking "sparse"...
  (1/4) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 1.341873595 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 1.296102591 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.176683406 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 2.183397558 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.176611366 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 2.178104382 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 2.187086892 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.176690754 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 1.177010729 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 1.176559457 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.176837437 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 1.365688057 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 2.210470299 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.177517414 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.176503311 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 1.273324449 seconds)
  done (took 24.526313321 seconds)
  (2/4) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.20453191 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.188115261 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.289883222 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.186690706 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.205266681 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.361788429 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 1.241011862 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 1.185498621 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 1.339801466 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 1.204716398 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.183446131 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.206994341 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 1.184528694 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.184402967 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 1.203317307 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.359233037 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 1.431449638 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.188513271 seconds)
  done (took 26.425453022 seconds)
  (3/4) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.201708712 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.182218775 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.184256004 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.181302787 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 2.180345234 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 2.174188539 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.181998796 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 2.185387282 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.177079204 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 1.302397376 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 1.189870053 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.196902179 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.182986092 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.184342216 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.191329395 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.228261256 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.359926327 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.193029753 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.192075679 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.189984537 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.182943157 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.271990152 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.224628614 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.197495928 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.299793138 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.187162844 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.186007069 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.190646555 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.298141876 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.192974301 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.183139324 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.183513079 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.186086066 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.107961049 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.711597214 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 2.17885993 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.20917025 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.194276005 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.192074349 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.334591645 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.186759541 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.192282615 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 2.177543841 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.711003251 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.285048894 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.301830893 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.179827889 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.185724661 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.185640638 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.246961397 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.18694286 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.187358717 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 1.243000813 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.950563211 seconds)
  done (took 77.071406305 seconds)
  (4/4) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 2.180126251 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.177911106 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.359304947 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 2.203274897 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.178324675 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.177629186 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 2.179300759 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.438819364 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 2.184633636 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.178497873 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.483267 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.76924744 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 2.183503084 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 2.242280954 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 2.21363167 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 2.228521159 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.179308554 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.176668186 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 2.178692314 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 2.179008531 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.729263924 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.180529452 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.17771887 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 2.253394052 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.21808687 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.690096582 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.179016238 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.17748112 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.179153534 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 2.178444182 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.74219346 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 2.181784964 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 2.226954509 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 2.181770441 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.454378401 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.541248683 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.503385779 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 2.17829549 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 2.204455095 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 2.184286101 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.206866992 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.680949539 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.524487706 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.179928512 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.180800091 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.678623458 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.179200681 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 2.186209813 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.187536292 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.446597783 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.180283941 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.181289636 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.177733676 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 2.179825512 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 2.179705636 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 2.224110333 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 2.241283869 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.689964151 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.179954006 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.179524223 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 2.223774773 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 2.180317619 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 2.186054238 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.185871797 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 2.178052717 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.527456805 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 2.422294509 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 2.188494359 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.518781963 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.728203147 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.188127417 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.805107901 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.17816108 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.186511054 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 2.207019256 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.1794937 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.17737772 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.683141642 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 2.210217814 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 2.177925467 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.497253594 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.183021864 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.466978149 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.194383997 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.180744196 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.735253415 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.189759329 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 2.224804387 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.179343116 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.179593753 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.180219155 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.18002638 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.457247283 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.232851085 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 2.179543197 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 2.178628943 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 2.204751218 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.179739122 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 2.196548544 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.180078666 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.802828969 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.18982471 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.178556245 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.198371665 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.178885286 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 2.193245045 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.182674696 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 2.183688761 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.458694586 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.180138576 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 2.198652785 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 2.184714501 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.179981418 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.190937749 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 2.25673002 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 2.183023846 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.460269407 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 2.183446232 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.181327699 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 2.180539642 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.181310264 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 2.201133539 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.181526124 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 2.200662449 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.141147396 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.481161435 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.197604464 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 2.194791937 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.181677978 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.18893813 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.183309223 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.18393039 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 2.235490259 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 2.183824846 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.930129576 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 2.189811881 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 2.195894531 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.181948028 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 2.185749475 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.187348023 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 2.185245078 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.183859754 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.474595179 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.45857573 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 2.409838634 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.186062816 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.183584308 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.956013172 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 2.219601615 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.365050683 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 2.197592668 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.182561793 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.461801904 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 2.415807671 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 2.185044421 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 2.182244174 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 2.184053989 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.458867137 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.182718917 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.498286811 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.756830695 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.182254535 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 2.188071314 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.924206009 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.988113061 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.1832572 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 2.184686081 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.467317043 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 2.197005135 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 2.183762127 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 2.182833109 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.182648107 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.184135632 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 2.189085881 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 2.18444768 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.184727997 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 2.183496771 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 2.478310631 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.374361197 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 2.198882571 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 2.193704728 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.686194678 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 2.206703513 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.183882375 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 2.192654539 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.186403906 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.183786035 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 2.244430804 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 2.187557054 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 2.216221008 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 2.184086808 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 2.189384124 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.708999182 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.183538664 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.18524173 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.376153627 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.880383199 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.184577007 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.18527752 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.183227531 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 2.237890664 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.716658592 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 2.214901586 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.458371942 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 2.196434927 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.222831132 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.184465501 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 2.192595048 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.713927329 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.194273228 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.184099158 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.891776144 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 2.183751707 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 4.610531231 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 2.184339202 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.185806414 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.801952364 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 2.183760012 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 2.184739924 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.184675066 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.183927884 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.497511381 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 2.186713361 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.192561536 seconds)
  done (took 463.596257662 seconds)
done (took 592.694061882 seconds)
(12/20) benchmarking "broadcast"...
  (1/5) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 2.182848881 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 2.183262828 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 2.189536584 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 2.190474795 seconds)
  done (took 9.830528665 seconds)
  (2/5) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 1.201807331 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 1.191117924 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 1.199574949 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 1.189406062 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 1.198677885 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 1.189756376 seconds)
  done (took 8.253578933 seconds)
  (3/5) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 2.185639737 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 2.183672167 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 2.191182587 seconds)
  done (took 7.645675503 seconds)
  (4/5) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 1.379399742 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.201166282 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 1.507763904 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.18784687 seconds)
  done (took 8.359723836 seconds)
  (5/5) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.199543588 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 1.199678329 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 1.200262768 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 1.201180367 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 1.20171312 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.202788358 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 1.200570649 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.200262557 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 1.201791606 seconds)
  done (took 11.88919325 seconds)
done (took 47.0615536 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/192) benchmarking ("perf_sum", Int8, true)...
    done (took 1.26194913 seconds)
    (2/192) benchmarking ("map", *, BigInt, (false, false))...
    done (took 2.181812154 seconds)
    (3/192) benchmarking ("map", identity, Int64, false)...
    done (took 1.257516831 seconds)
    (4/192) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 1.330855307 seconds)
    (5/192) benchmarking ("perf_sum", Complex{Float64}, true)...
    done (took 1.330972916 seconds)
    (6/192) benchmarking ("map", abs, Float32, false)...
    done (took 1.246769798 seconds)
    (7/192) benchmarking ("map", abs, Int64, true)...
    done (took 1.381034692 seconds)
    (8/192) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 1.257470223 seconds)
    (9/192) benchmarking ("map", *, BigInt, (false, true))...
    done (took 2.1772121 seconds)
    (10/192) benchmarking ("broadcast", identity, Complex{Float64}, false)...
    done (took 1.394284131 seconds)
    (11/192) benchmarking ("map", identity, Bool, false)...
    done (took 1.213956585 seconds)
    (12/192) benchmarking ("perf_countnothing", Int64, false)...
    done (took 1.219203778 seconds)
    (13/192) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 1.284628359 seconds)
    (14/192) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 2.121327631 seconds)
    (15/192) benchmarking ("map", abs, BigFloat, false)...
    done (took 2.192253567 seconds)
    (16/192) benchmarking ("map", *, Complex{Float64}, (false, true))...
    done (took 2.172742854 seconds)
    (17/192) benchmarking ("perf_countnothing", Float32, false)...
    done (took 1.217908013 seconds)
    (18/192) benchmarking ("map", abs, Float64, false)...
    done (took 1.258020903 seconds)
    (19/192) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 1.334331478 seconds)
    (20/192) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 1.219068093 seconds)
    (21/192) benchmarking ("perf_sum", Float32, true)...
    done (took 1.263904165 seconds)
    (22/192) benchmarking ("perf_sum", Bool, true)...
    done (took 1.266236515 seconds)
    (23/192) benchmarking ("perf_sum", Complex{Float64}, false)...
    done (took 1.337865888 seconds)
    (24/192) benchmarking ("broadcast", identity, Int64, false)...
    done (took 1.331957943 seconds)
    (25/192) benchmarking ("map", abs, BigInt, true)...
    done (took 2.136437085 seconds)
    (26/192) benchmarking ("map", abs, Int8, false)...
    done (took 1.225262124 seconds)
    (27/192) benchmarking ("broadcast", abs, Complex{Float64}, true)...
    done (took 1.448506339 seconds)
    (28/192) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.169118199 seconds)
    (29/192) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 1.341275338 seconds)
    (30/192) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 2.164685236 seconds)
    (31/192) benchmarking ("map", identity, Float32, false)...
    done (took 1.249022241 seconds)
    (32/192) benchmarking ("broadcast", abs, Bool, true)...
    done (took 1.276697862 seconds)
    (33/192) benchmarking ("perf_countequals", "Int8")...
    done (took 1.271880492 seconds)
    (34/192) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 1.296389562 seconds)
    (35/192) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 2.163745985 seconds)
    (36/192) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 1.47228968 seconds)
    (37/192) benchmarking ("broadcast", *, Complex{Float64}, (false, true))...
    done (took 1.578634856 seconds)
    (38/192) benchmarking ("perf_sum", Bool, false)...
    done (took 1.260743071 seconds)
    (39/192) benchmarking ("map", identity, BigFloat, false)...
    done (took 1.272801662 seconds)
    (40/192) benchmarking ("map", abs, Bool, true)...
    done (took 1.305014808 seconds)
    (41/192) benchmarking ("broadcast", *, Complex{Float64}, (true, true))...
    done (took 1.57494893 seconds)
    (42/192) benchmarking ("broadcast", abs, Int64, false)...
    done (took 1.341581457 seconds)
    (43/192) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 1.470257392 seconds)
    (44/192) benchmarking ("map", identity, Int8, false)...
    done (took 1.216460357 seconds)
    (45/192) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 1.246674573 seconds)
    (46/192) benchmarking ("map", identity, Int64, true)...
    done (took 1.379834745 seconds)
    (47/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (false, false))...
    done (took 1.426477449 seconds)
    (48/192) benchmarking ("broadcast", abs, Int8, true)...
    done (took 1.313827021 seconds)
    (49/192) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 1.341478859 seconds)
    (50/192) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 1.397238054 seconds)
    (51/192) benchmarking ("map", identity, BigInt, true)...
    done (took 1.418251776 seconds)
    (52/192) benchmarking ("broadcast", abs, Int64, true)...
    done (took 1.40449622 seconds)
    (53/192) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 2.189998544 seconds)
    (54/192) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 1.478366267 seconds)
    (55/192) benchmarking ("broadcast", abs, Float64, false)...
    done (took 1.339321333 seconds)
    (56/192) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 2.189553519 seconds)
    (57/192) benchmarking ("map", abs, Bool, false)...
    done (took 1.22421936 seconds)
    (58/192) benchmarking ("map", abs, Complex{Float64}, true)...
    done (took 1.428836264 seconds)
    (59/192) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 2.169854165 seconds)
    (60/192) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 2.170190917 seconds)
    (61/192) benchmarking ("broadcast", identity, Complex{Float64}, true)...
    done (took 1.513505335 seconds)
    (62/192) benchmarking ("map", identity, BigInt, false)...
    done (took 1.277196701 seconds)
    (63/192) benchmarking ("broadcast", identity, Bool, false)...
    done (took 1.253951902 seconds)
    (64/192) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 2.207493128 seconds)
    (65/192) benchmarking ("perf_simplecopy", Complex{Float64}, true)...
    done (took 1.352153089 seconds)
    (66/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (true, true))...
    done (took 1.418927761 seconds)
    (67/192) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 2.178740231 seconds)
    (68/192) benchmarking ("perf_countequals", "Float32")...
    done (took 1.276360957 seconds)
    (69/192) benchmarking ("broadcast", abs, Float64, true)...
    done (took 1.410907884 seconds)
    (70/192) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 1.222660902 seconds)
    (71/192) benchmarking ("broadcast", abs, Float32, false)...
    done (took 1.288265969 seconds)
    (72/192) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 1.256022717 seconds)
    (73/192) benchmarking ("map", identity, Complex{Float64}, true)...
    done (took 1.502426323 seconds)
    (74/192) benchmarking ("map", identity, Float32, true)...
    done (took 1.354379553 seconds)
    (75/192) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 1.287661518 seconds)
    (76/192) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 2.16975888 seconds)
    (77/192) benchmarking ("broadcast", identity, Int8, true)...
    done (took 1.31067652 seconds)
    (78/192) benchmarking ("perf_sum", Int8, false)...
    done (took 1.254255731 seconds)
    (79/192) benchmarking ("map", abs, Int8, true)...
    done (took 1.302770738 seconds)
    (80/192) benchmarking ("perf_countequals", "Int64")...
    done (took 1.270385364 seconds)
    (81/192) benchmarking ("perf_sum", Float64, true)...
    done (took 1.260637507 seconds)
    (82/192) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 2.126560602 seconds)
    (83/192) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 1.298874762 seconds)
    (84/192) benchmarking ("perf_countequals", "Bool")...
    done (took 1.27088813 seconds)
    (85/192) benchmarking ("map", abs, Float32, true)...
    done (took 1.349408371 seconds)
    (86/192) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 1.296069972 seconds)
    (87/192) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 1.321704099 seconds)
    (88/192) benchmarking ("perf_sum", BigInt, true)...
    done (took 2.191315555 seconds)
    (89/192) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 1.407442072 seconds)
    (90/192) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 1.30010668 seconds)
    (91/192) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 1.404062859 seconds)
    (92/192) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 1.274935666 seconds)
    (93/192) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 1.289015393 seconds)
    (94/192) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 1.218560818 seconds)
    (95/192) benchmarking ("broadcast", identity, Int8, false)...
    done (took 1.269854418 seconds)
    (96/192) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.168469803 seconds)
    (97/192) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 2.167191294 seconds)
    (98/192) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 1.304482316 seconds)
    (99/192) benchmarking ("perf_countnothing", Bool, false)...
    done (took 1.220731447 seconds)
    (100/192) benchmarking ("perf_sum", BigFloat, false)...
    done (took 2.190985276 seconds)
    (101/192) benchmarking ("map", identity, BigFloat, true)...
    done (took 1.422683035 seconds)
    (102/192) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 1.297056538 seconds)
    (103/192) benchmarking ("perf_sum", Int64, true)...
    done (took 1.264212514 seconds)
    (104/192) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.166182322 seconds)
    (105/192) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 1.409797462 seconds)
    (106/192) benchmarking ("perf_sum", BigFloat, true)...
    done (took 2.20335981 seconds)
    (107/192) benchmarking ("broadcast", abs, Complex{Float64}, false)...
    done (took 1.391169272 seconds)
    (108/192) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.178498685 seconds)
    (109/192) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 2.19409811 seconds)
    (110/192) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 2.214244176 seconds)
    (111/192) benchmarking ("map", abs, Complex{Float64}, false)...
    done (took 1.319081694 seconds)
    (112/192) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 1.344122369 seconds)
    (113/192) benchmarking ("broadcast", identity, Float64, true)...
    done (took 1.40710072 seconds)
    (114/192) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 1.341015454 seconds)
    (115/192) benchmarking ("broadcast", abs, Int8, false)...
    done (took 1.271343122 seconds)
    (116/192) benchmarking ("broadcast", *, Complex{Float64}, (false, false))...
    done (took 1.466504717 seconds)
    (117/192) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.172282825 seconds)
    (118/192) benchmarking ("map", identity, Bool, true)...
    done (took 1.305913811 seconds)
    (119/192) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 1.330201902 seconds)
    (120/192) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 1.414970306 seconds)
    (121/192) benchmarking ("broadcast", abs, Bool, false)...
    done (took 1.254942919 seconds)
    (122/192) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 1.281538364 seconds)
    (123/192) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 2.167277269 seconds)
    (124/192) benchmarking ("perf_countnothing", Int8, true)...
    done (took 1.249984685 seconds)
    (125/192) benchmarking ("perf_countnothing", Int64, true)...
    done (took 1.229539681 seconds)
    (126/192) benchmarking ("perf_countnothing", Complex{Float64}, true)...
    done (took 1.228143395 seconds)
    (127/192) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.179628307 seconds)
    (128/192) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 2.173728801 seconds)
    (129/192) benchmarking ("map", identity, Complex{Float64}, false)...
    done (took 1.360122248 seconds)
    (130/192) benchmarking ("broadcast", identity, Float32, false)...
    done (took 1.29900835 seconds)
    (131/192) benchmarking ("map", abs, Float64, true)...
    done (took 1.385055936 seconds)
    (132/192) benchmarking ("map", *, Complex{Float64}, (true, true))...
    done (took 2.181311349 seconds)
    (133/192) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 1.295814741 seconds)
    (134/192) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 1.298686162 seconds)
    (135/192) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.167155671 seconds)
    (136/192) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 1.313532085 seconds)
    (137/192) benchmarking ("map", *, BigInt, (true, true))...
    done (took 2.171642766 seconds)
    (138/192) benchmarking ("broadcast", identity, Int64, true)...
    done (took 1.416246738 seconds)
    (139/192) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.325177309 seconds)
    (140/192) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.168888756 seconds)
    (141/192) benchmarking ("perf_countequals", "Float64")...
    done (took 1.279736144 seconds)
    (142/192) benchmarking ("perf_countnothing", Float64, true)...
    done (took 1.226742173 seconds)
    (143/192) benchmarking ("broadcast", identity, Float32, true)...
    done (took 1.340749099 seconds)
    (144/192) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 1.268175386 seconds)
    (145/192) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 1.312888348 seconds)
    (146/192) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 1.35821042 seconds)
    (147/192) benchmarking ("map", abs, Int64, false)...
    done (took 1.257724896 seconds)
    (148/192) benchmarking ("perf_sum", Int64, false)...
    done (took 1.257317579 seconds)
    (149/192) benchmarking ("perf_countnothing", Complex{Float64}, false)...
    done (took 1.225642285 seconds)
    (150/192) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.168062068 seconds)
    (151/192) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.170778261 seconds)
    (152/192) benchmarking ("perf_countnothing", Int8, false)...
    done (took 1.238827928 seconds)
    (153/192) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.167835773 seconds)
    (154/192) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.175448534 seconds)
    (155/192) benchmarking ("perf_sum", BigInt, false)...
    done (took 2.200260448 seconds)
    (156/192) benchmarking ("map", identity, Float64, true)...
    done (took 1.385619755 seconds)
    (157/192) benchmarking ("map", *, Complex{Float64}, (false, false))...
    done (took 2.174347448 seconds)
    (158/192) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 1.339304241 seconds)
    (159/192) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 2.19599324 seconds)
    (160/192) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 1.394006874 seconds)
    (161/192) benchmarking ("broadcast", identity, Bool, true)...
    done (took 1.282518346 seconds)
    (162/192) benchmarking ("perf_simplecopy", Complex{Float64}, false)...
    done (took 1.359790998 seconds)
    (163/192) benchmarking ("perf_countnothing", Float64, false)...
    done (took 1.230836098 seconds)
    (164/192) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.169616574 seconds)
    (165/192) benchmarking ("broadcast", identity, Float64, false)...
    done (took 1.340909034 seconds)
    (166/192) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 1.252585866 seconds)
    (167/192) benchmarking ("perf_countnothing", Float32, true)...
    done (took 1.230181202 seconds)
    (168/192) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 1.308640918 seconds)
    (169/192) benchmarking ("broadcast", abs, Float32, true)...
    done (took 1.34735895 seconds)
    (170/192) benchmarking ("perf_countnothing", Bool, true)...
    done (took 1.239968081 seconds)
    (171/192) benchmarking ("map", abs, BigInt, false)...
    done (took 2.060033185 seconds)
    (172/192) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 1.293486328 seconds)
    (173/192) benchmarking ("map", abs, BigFloat, true)...
    done (took 2.170314466 seconds)
    (174/192) benchmarking ("perf_countequals", "Complex{Float64}")...
    done (took 1.302776879 seconds)
    (175/192) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 1.309904752 seconds)
    (176/192) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.17040947 seconds)
    (177/192) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 1.374620309 seconds)
    (178/192) benchmarking ("map", identity, Float64, false)...
    done (took 1.257798605 seconds)
    (179/192) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 1.295450953 seconds)
    (180/192) benchmarking ("perf_sum", Float32, false)...
    done (took 1.267766142 seconds)
    (181/192) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 1.414545507 seconds)
    (182/192) benchmarking ("perf_countequals", "BigFloat")...
    done (took 1.403639587 seconds)
    (183/192) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 1.472888822 seconds)
    (184/192) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.176597622 seconds)
    (185/192) benchmarking ("map", identity, Int8, true)...
    done (took 1.308949207 seconds)
    (186/192) benchmarking ("perf_sum", Float64, false)...
    done (took 1.261906262 seconds)
    (187/192) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 1.330420172 seconds)
    (188/192) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 1.223087688 seconds)
    (189/192) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 2.171529651 seconds)
    (190/192) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 2.192848885 seconds)
    (191/192) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 1.333789837 seconds)
    (192/192) benchmarking ("perf_binaryop", *, Complex{Float64}, (false, true))...
    done (took 1.419930444 seconds)
  done (took 295.518819236 seconds)
done (took 296.60170354 seconds)
(14/20) benchmarking "simd"...
  (1/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.220478481 seconds)
  (2/72) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.285128586 seconds)
  (3/72) benchmarking ("axpy!", "Float32", 4095)...
  done (took 1.199370034 seconds)
  (4/72) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.201249192 seconds)
  (5/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.201292143 seconds)
  (6/72) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.113850322 seconds)
  (7/72) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.222762406 seconds)
  (8/72) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 1.201927438 seconds)
  (9/72) benchmarking ("inner", "Float64", 4096)...
  done (took 1.214827799 seconds)
  (10/72) benchmarking ("inner", "Float64", 4095)...
  done (took 1.215515801 seconds)
  (11/72) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.115766434 seconds)
  (12/72) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.211627928 seconds)
  (13/72) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.216911334 seconds)
  (14/72) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.212850372 seconds)
  (15/72) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.235312203 seconds)
  (16/72) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 1.202925977 seconds)
  (17/72) benchmarking ("axpy!", "Float32", 4096)...
  done (took 1.201795966 seconds)
  (18/72) benchmarking ("inner", "Int32", 4096)...
  done (took 1.210858738 seconds)
  (19/72) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.216491109 seconds)
  (20/72) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.218185476 seconds)
  (21/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.203036561 seconds)
  (22/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.203587367 seconds)
  (23/72) benchmarking ("inner", "Int64", 4095)...
  done (took 1.230631374 seconds)
  (24/72) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.201755069 seconds)
  (25/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.210436683 seconds)
  (26/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.210625284 seconds)
  (27/72) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.208708087 seconds)
  (28/72) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.193987045 seconds)
  (29/72) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.209057199 seconds)
  (30/72) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.217835546 seconds)
  (31/72) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.194148732 seconds)
  (32/72) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.209693229 seconds)
  (33/72) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.219765949 seconds)
  (34/72) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.216140703 seconds)
  (35/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.20399936 seconds)
  (36/72) benchmarking ("inner", "Int32", 4095)...
  done (took 1.212807451 seconds)
  (37/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.203088501 seconds)
  (38/72) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.289580094 seconds)
  (39/72) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.223577852 seconds)
  (40/72) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.214023438 seconds)
  (41/72) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.211905206 seconds)
  (42/72) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.220056312 seconds)
  (43/72) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.208056086 seconds)
  (44/72) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 1.209237975 seconds)
  (45/72) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.215861884 seconds)
  (46/72) benchmarking ("inner", "Int64", 4096)...
  done (took 1.230529339 seconds)
  (47/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.210240364 seconds)
  (48/72) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.218751103 seconds)
  (49/72) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.194559169 seconds)
  (50/72) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.108651338 seconds)
  (51/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.224039383 seconds)
  (52/72) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 1.218029977 seconds)
  (53/72) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.212395489 seconds)
  (54/72) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.107265077 seconds)
  (55/72) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.205552299 seconds)
  (56/72) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.219602022 seconds)
  (57/72) benchmarking ("inner", "Float32", 4095)...
  done (took 1.215720679 seconds)
  (58/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.223851492 seconds)
  (59/72) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.21248312 seconds)
  (60/72) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.206693858 seconds)
  (61/72) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.236888884 seconds)
  (62/72) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.223538448 seconds)
  (63/72) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 1.216046838 seconds)
  (64/72) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.212780369 seconds)
  (65/72) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.21528271 seconds)
  (66/72) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.218014784 seconds)
  (67/72) benchmarking ("inner", "Float32", 4096)...
  done (took 1.214647068 seconds)
  (68/72) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.220236082 seconds)
  (69/72) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.211873503 seconds)
  (70/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.206508943 seconds)
  (71/72) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.205865775 seconds)
  (72/72) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.213872819 seconds)
done (took 96.156387001 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.327207762 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 2.200663538 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.359356678 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.211542305 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.366024219 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.325324192 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.212842958 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.211773536 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.210591252 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.003573611 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.212115506 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 1.210835334 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 2.201085405 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.213647375 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.321069792 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.210339659 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.211720387 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.904288126 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.211810756 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.339541278 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.205190627 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.211163656 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.212433918 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.00937866 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 2.200817276 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.198220137 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.339697803 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.211073077 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.905589886 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.197182617 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.199064177 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.908557201 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.337714217 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 1.229354405 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 1.221155518 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.219391656 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.362546793 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 1.213835036 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.326877781 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.328932871 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.360282883 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 1.250970724 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.200268481 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.201568151 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.21359584 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.216005582 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.212296633 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.239760951 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 2.201211158 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 1.211037598 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.905104898 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 1.220686958 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 1.223268857 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.212639829 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.212529262 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 1.232230971 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.213203468 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.213392543 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.340051158 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.21377014 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.330714596 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.007896537 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.007939713 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.212926678 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.201120222 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.213818469 seconds)
  done (took 99.868369692 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.273722862 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.280314728 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.30550348 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 1.206071204 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.25461114 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.30921553 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 1.20581328 seconds)
  done (took 9.930099858 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 1.2121181 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.21213784 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.253673239 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.252693449 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.214812858 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.377138913 seconds)
    (7/97) benchmarking ("randn", "MersenneTwister", "Complex{Float32}")...
    done (took 1.213415051 seconds)
    (8/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.217578049 seconds)
    (9/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 1.213824961 seconds)
    (10/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.25579424 seconds)
    (11/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.216001006 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "Complex{Float16}")...
    done (took 1.214496205 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 1.222986124 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.205156382 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.252724579 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.217892484 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.323248365 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 1.206828287 seconds)
    (19/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.215427812 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.357448103 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 1.214465595 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 1.223752986 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.257871317 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.216981223 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.215890914 seconds)
    (26/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 1.213131695 seconds)
    (27/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float16}")...
    done (took 1.992916404 seconds)
    (28/97) benchmarking ("randn", "MersenneTwister", "Complex{Float64}")...
    done (took 1.214621457 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.213583174 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.215783761 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.214001048 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.27215999 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.216182939 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.205283446 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.215014254 seconds)
    (36/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float32}")...
    done (took 1.319389142 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.216658608 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.215707462 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.215233603 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.208354006 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.215849769 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.214949761 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.215898676 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.216264163 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.215549358 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.230984338 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.216625417 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.215636512 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.21551447 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.216412955 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.25648732 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.216896998 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.215316563 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 1.216116344 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.261237425 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 1.226564482 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.216583928 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.216062114 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.216649551 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.216319819 seconds)
    (61/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.358761436 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.255049836 seconds)
    (63/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.218437721 seconds)
    (64/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.25556488 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{Float32}")...
    done (took 1.217934653 seconds)
    (66/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.216272336 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.217949251 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.216271833 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float64}")...
    done (took 1.297806765 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.216877157 seconds)
    (71/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.254773425 seconds)
    (72/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.217241012 seconds)
    (73/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.390638839 seconds)
    (74/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.233552842 seconds)
    (75/97) benchmarking ("randn", "MersenneTwister", "Complex{Float16}")...
    done (took 1.219888311 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.213967908 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.212727341 seconds)
    (78/97) benchmarking ("rand", "MersenneTwister", "Complex{Float64}")...
    done (took 1.218119025 seconds)
    (79/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.207822832 seconds)
    (80/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.216214961 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.217085884 seconds)
    (82/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 1.210869519 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 1.216035728 seconds)
    (84/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 1.216414904 seconds)
    (85/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.216861527 seconds)
    (86/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float16}")...
    done (took 1.36780206 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "Complex{Float64}")...
    done (took 1.317403922 seconds)
    (88/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.218568287 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 1.225997617 seconds)
    (90/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 1.218461234 seconds)
    (91/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.219429774 seconds)
    (92/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.262905485 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.217749347 seconds)
    (94/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.218878423 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Float32}")...
    done (took 1.26215317 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.32918725 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.261416996 seconds)
  done (took 125.716931161 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 1.223770993 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 1.223687343 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 1.214295138 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.237500547 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 1.211243125 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 1.210625588 seconds)
  done (took 8.421403141 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.21223752 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.22019155 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.22013215 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.219687602 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.220679542 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.223642329 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.21997984 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.211752456 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 1.220603049 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.22062609 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.223874492 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.222927669 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.221651206 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.220784558 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.221055073 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.221482937 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.222068052 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.220422369 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.221301942 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.2212052 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.210844085 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.223845442 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.221369119 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.213733127 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 1.224608632 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.221707787 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.236199602 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.22139495 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.221241825 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.220695575 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.224053812 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.224968044 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.213727083 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.215543192 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.222120156 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.214474418 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.223096616 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.224558349 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.221288425 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.223125177 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.224315079 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.223520122 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.222879458 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.224783329 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 1.215249035 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 1.215982664 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.226273795 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.23986113 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.223467759 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.225219886 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.224995025 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.222128228 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.22513479 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.226756193 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.216361676 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.217689328 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 1.226559981 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.223121346 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.225185652 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.215786791 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.224288378 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.225650337 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.216531917 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.225391105 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 1.223710441 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.227317192 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.216122079 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.225353464 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.224955107 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.224354831 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.226621421 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.224169933 seconds)
  done (took 90.081719828 seconds)
done (took 335.110502388 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 2.415360422 seconds)
  done (took 3.519720529 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 2.23768894 seconds)
  done (took 3.344239891 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 18.844639328 seconds)
  done (took 19.951548281 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 2.244084058 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 2.29131391 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 2.233422221 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 2.22110146 seconds)
  done (took 10.092909765 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 2.438548973 seconds)
  done (took 3.543362 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 2.218977315 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 2.219149715 seconds)
  done (took 5.544134552 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 2.302802661 seconds)
  done (took 3.408590779 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 2.537932409 seconds)
  done (took 3.643759167 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 2.226531136 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 2.225533067 seconds)
  done (took 5.564973677 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 2.18879218 seconds)
  done (took 3.292769865 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 18.642677171 seconds)
  done (took 19.747897671 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 2.228526225 seconds)
  done (took 3.335424726 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 2.244138557 seconds)
  done (took 3.348552733 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 4.274710912 seconds)
  done (took 5.379360841 seconds)
done (took 94.822400188 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 2.211364055 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 2.218521647 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 2.213630676 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 2.214738949 seconds)
  done (took 9.963954143 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Array{Float32,1} generator")...
    done (took 1.290196855 seconds)
    (2/24) benchmarking ("all", "Array{Float32,1}")...
    done (took 1.291055769 seconds)
    (3/24) benchmarking ("any", "Array{Float64,1} generator")...
    done (took 1.298498427 seconds)
    (4/24) benchmarking ("any", "Array{Int64,1}")...
    done (took 1.286049698 seconds)
    (5/24) benchmarking ("any", "Array{Int16,1} generator")...
    done (took 1.284034068 seconds)
    (6/24) benchmarking ("any", "Array{Float32,1}")...
    done (took 1.291249497 seconds)
    (7/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.251481968 seconds)
    (8/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.265171413 seconds)
    (9/24) benchmarking ("all", "Array{Int64,1}")...
    done (took 1.282430474 seconds)
    (10/24) benchmarking ("all", "Array{Int16,1}")...
    done (took 1.277368134 seconds)
    (11/24) benchmarking ("all", "Array{Float64,1}")...
    done (took 1.292672507 seconds)
    (12/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.282882045 seconds)
    (13/24) benchmarking ("any", "Array{Float32,1} generator")...
    done (took 1.291478251 seconds)
    (14/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.249280027 seconds)
    (15/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.276658436 seconds)
    (16/24) benchmarking ("all", "Array{Float64,1} generator")...
    done (took 1.287671941 seconds)
    (17/24) benchmarking ("all", "Array{Int64,1} generator")...
    done (took 1.272800363 seconds)
    (18/24) benchmarking ("any", "Array{Float64,1}")...
    done (took 1.289222368 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.242889227 seconds)
    (20/24) benchmarking ("any", "Array{Int16,1}")...
    done (took 1.275283703 seconds)
    (21/24) benchmarking ("any", "BitArray")...
    done (took 1.217412485 seconds)
    (22/24) benchmarking ("any", "Array{Int64,1} generator")...
    done (took 1.273568369 seconds)
    (23/24) benchmarking ("all", "Array{Int16,1} generator")...
    done (took 1.269938447 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.215191717 seconds)
  done (took 31.660439999 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.695595887 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.271784546 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.353503369 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.251216344 seconds)
  done (took 6.662984806 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.315805522 seconds)
    (2/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Int16,1}")...
    done (took 1.308168797 seconds)
    (3/24) benchmarking ("==", "Array{Float64,1}")...
    done (took 1.327011461 seconds)
    (4/24) benchmarking ("isequal", "Array{Float64,1}")...
    done (took 1.360737136 seconds)
    (5/24) benchmarking ("==", "Array{Int64,1} == Array{Float32,1}")...
    done (took 1.408619454 seconds)
    (6/24) benchmarking ("==", "Array{Float32,1}")...
    done (took 1.334394214 seconds)
    (7/24) benchmarking ("==", "Array{Int64,1}")...
    done (took 1.230936695 seconds)
    (8/24) benchmarking ("==", "Array{Int64,1} == Array{Int64,1}")...
    done (took 1.226752306 seconds)
    (9/24) benchmarking ("==", "Array{Int16,1}")...
    done (took 1.211941945 seconds)
    (10/24) benchmarking ("==", "Array{Int64,1} == Array{Int16,1}")...
    done (took 1.306884934 seconds)
    (11/24) benchmarking ("isequal", "BitArray")...
    done (took 1.391890003 seconds)
    (12/24) benchmarking ("==", "Array{Int64,1} == UnitRange{Int64}")...
    done (took 1.305644414 seconds)
    (13/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Float64,1}")...
    done (took 1.52223817 seconds)
    (14/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Int64,1}")...
    done (took 1.202844889 seconds)
    (15/24) benchmarking ("isequal", "Array{Int64,1} isequal Array{Float32,1}")...
    done (took 1.520549489 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.204036586 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.199075905 seconds)
    (18/24) benchmarking ("isequal", "Array{Int16,1}")...
    done (took 1.303573652 seconds)
    (19/24) benchmarking ("isequal", "Array{Float32,1}")...
    done (took 1.352496398 seconds)
    (20/24) benchmarking ("==", "Array{Int64,1} == Array{Float64,1}")...
    done (took 1.381666014 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.200149508 seconds)
    (22/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.30229432 seconds)
    (23/24) benchmarking ("isequal", "Array{Int64,1}")...
    done (took 1.307234783 seconds)
    (24/24) benchmarking ("isequal", "Array{Int64,1} isequal UnitRange{Int64}")...
    done (took 1.302696923 seconds)
  done (took 32.619398056 seconds)
  (5/13) benchmarking "reductions"...
    (1/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norminf", "Int64")...
    done (took 1.202820137 seconds)
    (2/22) benchmarking ("maxabs", "Float64")...
    done (took 1.212109364 seconds)
    (3/22) benchmarking ("sumabs", "Float64")...
    done (took 1.197834575 seconds)
    (4/22) benchmarking ("LinearAlgebra.norm", "Int64")...
    done (took 1.212123426 seconds)
    (5/22) benchmarking ("sumabs", "Int64")...
    done (took 1.197814165 seconds)
    (6/22) benchmarking ("sumabs2", "Float64")...
    done (took 1.199319987 seconds)
    (7/22) benchmarking ("sumabs2", "Int64")...
    done (took 1.199173651 seconds)
    (8/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_mapreduce", "Float64")...
    done (took 1.201134475 seconds)
    (9/22) benchmarking ("sum", "Int64")...
    done (took 1.191626647 seconds)
    (10/22) benchmarking ("mean", "Int64")...
    done (took 1.193754334 seconds)
    (11/22) benchmarking ("mean", "Float64")...
    done (took 1.194183495 seconds)
    (12/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norminf", "Float64")...
    done (took 1.208204216 seconds)
    (13/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_mapreduce", "Int64")...
    done (took 1.192948916 seconds)
    (14/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norm1", "Float64")...
    done (took 1.193318768 seconds)
    (15/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.norm1", "Int64")...
    done (took 1.201733149 seconds)
    (16/22) benchmarking ("LinearAlgebra.norm", "Float64")...
    done (took 1.194867417 seconds)
    (17/22) benchmarking ("var", "Float64")...
    done (took 1.194671221 seconds)
    (18/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_reduce", "Float64")...
    done (took 1.197528336 seconds)
    (19/22) benchmarking ("var", "Int64")...
    done (took 1.20057827 seconds)
    (20/22) benchmarking ("sum", "Float64")...
    done (took 1.192264757 seconds)
    (21/22) benchmarking ("BaseBenchmarks.ArrayBenchmarks.perf_reduce", "Int64")...
    done (took 1.192749658 seconds)
    (22/22) benchmarking ("maxabs", "Int64")...
    done (took 1.197880089 seconds)
  done (took 27.450177585 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 2.177846431 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 2.175212523 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.527457236 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.431015721 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 2.175384833 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 2.181444287 seconds)
  done (took 12.744787167 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 1.235341049 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 1.364305314 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.184792806 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 1.474253733 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.556329177 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 1.181773812 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 1.182242362 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 1.392344838 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 1.636438901 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 1.619303931 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 1.231738192 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 1.243850677 seconds)
  done (took 17.376705948 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 2.182176432 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 2.174363593 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 2.187335481 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.191322628 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.224070092 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.18460237 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 1.184442145 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 2.171409131 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 1.230045602 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.229477522 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.184717665 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.222928394 seconds)
  done (took 19.442516243 seconds)
  (9/13) benchmarking "index"...
    (1/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.262154651 seconds)
    (2/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.182104945 seconds)
    (3/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 2.183701357 seconds)
    (4/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.236484335 seconds)
    (5/481) benchmarking ("sumcartesian", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.183139295 seconds)
    (6/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.183820835 seconds)
    (7/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.232459502 seconds)
    (8/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.821113933 seconds)
    (9/481) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.187681123 seconds)
    (10/481) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.456213017 seconds)
    (11/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.19187804 seconds)
    (12/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.265389791 seconds)
    (13/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.426889147 seconds)
    (14/481) benchmarking ("sumcolon", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.189225391 seconds)
    (15/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.185173605 seconds)
    (16/481) benchmarking ("sumrange", "BitArray{2}")...
    done (took 2.068014184 seconds)
    (17/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.407698253 seconds)
    (18/481) benchmarking ("sumrange", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.607988965 seconds)
    (19/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.178880201 seconds)
    (20/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.186297711 seconds)
    (21/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.209871069 seconds)
    (22/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.178231221 seconds)
    (23/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.187327886 seconds)
    (24/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.351261093 seconds)
    (25/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.1775269 seconds)
    (26/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.17753829 seconds)
    (27/481) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.440371376 seconds)
    (28/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.177374738 seconds)
    (29/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.418795085 seconds)
    (30/481) benchmarking ("sumrange_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.391922188 seconds)
    (31/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.391566078 seconds)
    (32/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.176458664 seconds)
    (33/481) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.451143538 seconds)
    (34/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.769758544 seconds)
    (35/481) benchmarking ("sumelt", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.285664681 seconds)
    (36/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.350208124 seconds)
    (37/481) benchmarking ("mapr_access", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.178620079 seconds)
    (38/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.177262887 seconds)
    (39/481) benchmarking ("sumlinear_view", "BitArray{2}")...
    done (took 2.146823036 seconds)
    (40/481) benchmarking ("sumlogical", "Array{Float32,2}")...
    done (took 2.199405473 seconds)
    (41/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.187696442 seconds)
    (42/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.178358681 seconds)
    (43/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.388617479 seconds)
    (44/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.178699173 seconds)
    (45/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.174827727 seconds)
    (46/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.183095091 seconds)
    (47/481) benchmarking ("sumvector_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.82917679 seconds)
    (48/481) benchmarking ("sumvector", "100000:-1:1")...
    done (took 1.183162229 seconds)
    (49/481) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 2.176699603 seconds)
    (50/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.177552278 seconds)
    (51/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.390762662 seconds)
    (52/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.28049356 seconds)
    (53/481) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.181235405 seconds)
    (54/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.176859839 seconds)
    (55/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.202027974 seconds)
    (56/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.17618811 seconds)
    (57/481) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 1.180648474 seconds)
    (58/481) benchmarking ("mapr_access", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.296639311 seconds)
    (59/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.813986908 seconds)
    (60/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.175724952 seconds)
    (61/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.178293197 seconds)
    (62/481) benchmarking ("sumeach", "Array{Float32,2}")...
    done (took 2.182478129 seconds)
    (63/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.184568546 seconds)
    (64/481) benchmarking ("sumlogical", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.180185563 seconds)
    (65/481) benchmarking ("sumvector", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.754250973 seconds)
    (66/481) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.185518281 seconds)
    (67/481) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.183888651 seconds)
    (68/481) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.182499279 seconds)
    (69/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.177233664 seconds)
    (70/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.179823061 seconds)
    (71/481) benchmarking ("sumeach", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.199033423 seconds)
    (72/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.178803912 seconds)
    (73/481) benchmarking ("sum", "3dsubarray")...
    done (took 1.199544951 seconds)
    (74/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.177679358 seconds)
    (75/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.882987746 seconds)
    (76/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.180770397 seconds)
    (77/481) benchmarking ("sumeach_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.179238949 seconds)
    (78/481) benchmarking ("sumcolon", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.656489575 seconds)
    (79/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.188421861 seconds)
    (80/481) benchmarking ("sumlinear", "Array{Float32,2}")...
    done (took 2.183358845 seconds)
    (81/481) benchmarking ("sumeach_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.403571369 seconds)
    (82/481) benchmarking ("sumcartesian", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.17898052 seconds)
    (83/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.178225128 seconds)
    (84/481) benchmarking "5d"...
    done (took 2.17876404 seconds)
    (85/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.176790428 seconds)
    (86/481) benchmarking ("sumlogical", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.820020354 seconds)
    (87/481) benchmarking ("sumlinear", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.188694133 seconds)
    (88/481) benchmarking ("sumlogical", "BitArray{2}")...
    done (took 2.147999193 seconds)
    (89/481) benchmarking ("mapr_access", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.223126728 seconds)
    (90/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.820040136 seconds)
    (91/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.356505428 seconds)
    (92/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.197666286 seconds)
    (93/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.207219772 seconds)
    (94/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.398245945 seconds)
    (95/481) benchmarking ("sumelt", "BitArray{2}")...
    done (took 2.147452111 seconds)
    (96/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.179673173 seconds)
    (97/481) benchmarking ("sumlogical_view", "Array{Int32,2}")...
    done (took 2.190206775 seconds)
    (98/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.180768088 seconds)
    (99/481) benchmarking ("sumeach", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.200112418 seconds)
    (100/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.826769315 seconds)
    (101/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.180963105 seconds)
    (102/481) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.185063091 seconds)
    (103/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.424782717 seconds)
    (104/481) benchmarking ("sumlinear", "Array{Int32,2}")...
    done (took 1.39002871 seconds)
    (105/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.182037577 seconds)
    (106/481) benchmarking ("sumcolon", "BitArray{2}")...
    done (took 2.043252874 seconds)
    (107/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.606193317 seconds)
    (108/481) benchmarking ("sumrange", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.188969299 seconds)
    (109/481) benchmarking ("sumcartesian", "Array{Float64,3}")...
    done (took 1.206590405 seconds)
    (110/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.17984464 seconds)
    (111/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.363090512 seconds)
    (112/481) benchmarking ("sumvector", "Array{Float32,2}")...
    done (took 1.732039525 seconds)
    (113/481) benchmarking ("sumrange_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.401450669 seconds)
    (114/481) benchmarking ("sumlogical", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.191406688 seconds)
    (115/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.214272851 seconds)
    (116/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.180269917 seconds)
    (117/481) benchmarking ("sumlogical", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.884377512 seconds)
    (118/481) benchmarking ("sumrange", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.18803879 seconds)
    (119/481) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.191770801 seconds)
    (120/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.179452064 seconds)
    (121/481) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.431985157 seconds)
    (122/481) benchmarking ("sumvector", "BitArray{2}")...
    done (took 1.904405207 seconds)
    (123/481) benchmarking ("sumcartesian", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.186198401 seconds)
    (124/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.253604578 seconds)
    (125/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.182305537 seconds)
    (126/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.180305474 seconds)
    (127/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.180516791 seconds)
    (128/481) benchmarking ("sumelt", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.195304976 seconds)
    (129/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.182827444 seconds)
    (130/481) benchmarking ("sumcolon_view", "BitArray{2}")...
    done (took 1.335766978 seconds)
    (131/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.183714946 seconds)
    (132/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.40028541 seconds)
    (133/481) benchmarking "ind2sub"...
    done (took 2.185289513 seconds)
    (134/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.181944814 seconds)
    (135/481) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 2.182379012 seconds)
    (136/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.183700146 seconds)
    (137/481) benchmarking ("sumcartesian", "Array{Float32,2}")...
    done (took 2.180633419 seconds)
    (138/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.401221009 seconds)
    (139/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.177945018 seconds)
    (140/481) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.454280151 seconds)
    (141/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.176631763 seconds)
    (142/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.175490199 seconds)
    (143/481) benchmarking ("sumeach", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.17901407 seconds)
    (144/481) benchmarking ("sumcartesian_view", "Array{Int32,2}")...
    done (took 1.389437624 seconds)
    (145/481) benchmarking ("sumlinear_view", "Array{Float64,3}")...
    done (took 2.177859108 seconds)
    (146/481) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 1.179433227 seconds)
    (147/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.512111935 seconds)
    (148/481) benchmarking ("sumcolon", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.173616358 seconds)
    (149/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.18082051 seconds)
    (150/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.38994991 seconds)
    (151/481) benchmarking ("sumelt", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.204762266 seconds)
    (152/481) benchmarking ("sumelt", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.282968391 seconds)
    (153/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.20316126 seconds)
    (154/481) benchmarking ("sumrange", "Array{Int32,2}")...
    done (took 2.181201236 seconds)
    (155/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.425318494 seconds)
    (156/481) benchmarking ("sumelt", "1:100000")...
    done (took 1.178617761 seconds)
    (157/481) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.177161273 seconds)
    (158/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.17041899 seconds)
    (159/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.174003603 seconds)
    (160/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.176298584 seconds)
    (161/481) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 1.17960017 seconds)
    (162/481) benchmarking ("mapr_access", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.183794014 seconds)
    (163/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.725864872 seconds)
    (164/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.150147588 seconds)
    (165/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.17629948 seconds)
    (166/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.17298987 seconds)
    (167/481) benchmarking ("sumlinear", "Array{Float64,3}")...
    done (took 1.186159845 seconds)
    (168/481) benchmarking ("sumeach", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.246314587 seconds)
    (169/481) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 1.179478938 seconds)
    (170/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.346930452 seconds)
    (171/481) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.174222612 seconds)
    (172/481) benchmarking ("mapr_access", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.17114947 seconds)
    (173/481) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.178949339 seconds)
    (174/481) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 2.178208159 seconds)
    (175/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.392109696 seconds)
    (176/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.388035398 seconds)
    (177/481) benchmarking ("sumlogical", "Array{Int32,2}")...
    done (took 2.183491339 seconds)
    (178/481) benchmarking ("sumlinear", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.350744985 seconds)
    (179/481) benchmarking ("sumvector_view", "Array{Int32,2}")...
    done (took 1.591714288 seconds)
    (180/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.729845491 seconds)
    (181/481) benchmarking ("sumeach_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.187000055 seconds)
    (182/481) benchmarking ("sumelt_boundscheck", "Array{Float32,2}")...
    done (took 2.17259357 seconds)
    (183/481) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 2.171474006 seconds)
    (184/481) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 2.172656791 seconds)
    (185/481) benchmarking ("sumlinear", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.174278826 seconds)
    (186/481) benchmarking ("sumeach", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.171453738 seconds)
    (187/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.173488248 seconds)
    (188/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.34869127 seconds)
    (189/481) benchmarking ("sumrange_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.395195515 seconds)
    (190/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.173040784 seconds)
    (191/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.731890261 seconds)
    (192/481) benchmarking ("sumlinear", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.1741543 seconds)
    (193/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.171749054 seconds)
    (194/481) benchmarking ("sumeach", "1:100000")...
    done (took 1.180911427 seconds)
    (195/481) benchmarking ("sumrange_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.387822733 seconds)
    (196/481) benchmarking ("sumvector", "1:100000")...
    done (took 1.181967512 seconds)
    (197/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.173115557 seconds)
    (198/481) benchmarking ("sumlogical", "1:100000")...
    done (took 2.173478266 seconds)
    (199/481) benchmarking ("sumlogical", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.177244837 seconds)
    (200/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.194918032 seconds)
    (201/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.392864636 seconds)
    (202/481) benchmarking ("sumlinear", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.393687383 seconds)
    (203/481) benchmarking ("sumelt_boundscheck", "Array{Float64,3}")...
    done (took 1.187327 seconds)
    (204/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.172383125 seconds)
    (205/481) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.69206563 seconds)
    (206/481) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.180770671 seconds)
    (207/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.175209355 seconds)
    (208/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.172705063 seconds)
    (209/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.19781279 seconds)
    (210/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.171658348 seconds)
    (211/481) benchmarking ("sumvector_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.954347545 seconds)
    (212/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.511930114 seconds)
    (213/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.183081019 seconds)
    (214/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.390590596 seconds)
    (215/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.187069527 seconds)
    (216/481) benchmarking ("sumelt", "Array{Float64,3}")...
    done (took 1.19277864 seconds)
    (217/481) benchmarking "4d"...
    done (took 2.174221183 seconds)
    (218/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.183872228 seconds)
    (219/481) benchmarking ("sumrange", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.179074902 seconds)
    (220/481) benchmarking ("sumeach_view", "Array{Int32,2}")...
    done (took 2.184356244 seconds)
    (221/481) benchmarking ("sumeach", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.183456514 seconds)
    (222/481) benchmarking ("sumcolon_view", "Array{Float32,2}")...
    done (took 1.352587608 seconds)
    (223/481) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.18420294 seconds)
    (224/481) benchmarking ("sumelt", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.176986526 seconds)
    (225/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.811799879 seconds)
    (226/481) benchmarking ("sumvector", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.890511347 seconds)
    (227/481) benchmarking ("sumvector", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.672963567 seconds)
    (228/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.177695626 seconds)
    (229/481) benchmarking ("sumrange", "Array{Float32,2}")...
    done (took 2.178662599 seconds)
    (230/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.180864927 seconds)
    (231/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.845817151 seconds)
    (232/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.179259344 seconds)
    (233/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.176246823 seconds)
    (234/481) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.39540792 seconds)
    (235/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.826488835 seconds)
    (236/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.174814074 seconds)
    (237/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.597048118 seconds)
    (238/481) benchmarking ("sumeach_view", "Array{Float64,3}")...
    done (took 2.186861215 seconds)
    (239/481) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.845628202 seconds)
    (240/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.393430879 seconds)
    (241/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.401660432 seconds)
    (242/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.180396715 seconds)
    (243/481) benchmarking ("sumlogical_view", "Array{Float32,2}")...
    done (took 2.184726823 seconds)
    (244/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.400315317 seconds)
    (245/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.388667104 seconds)
    (246/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.202880333 seconds)
    (247/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.183076525 seconds)
    (248/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.179966762 seconds)
    (249/481) benchmarking ("sumelt_boundscheck", "BitArray{2}")...
    done (took 2.145773147 seconds)
    (250/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.666991099 seconds)
    (251/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.180003632 seconds)
    (252/481) benchmarking ("sumelt_boundscheck", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.360347436 seconds)
    (253/481) benchmarking ("sumvector_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.851503303 seconds)
    (254/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.18093782 seconds)
    (255/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.18285424 seconds)
    (256/481) benchmarking ("mapr_access", "BitArray{2}")...
    done (took 2.207526434 seconds)
    (257/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 2.17654211 seconds)
    (258/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.520213095 seconds)
    (259/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.18275739 seconds)
    (260/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.177045079 seconds)
    (261/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.187869447 seconds)
    (262/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.192101756 seconds)
    (263/481) benchmarking ("sumvector_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.964444512 seconds)
    (264/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.183341249 seconds)
    (265/481) benchmarking ("sumcartesian", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.179082727 seconds)
    (266/481) benchmarking ("sumvector", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.761754857 seconds)
    (267/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.190310216 seconds)
    (268/481) benchmarking ("sumvector_view", "Array{Float32,2}")...
    done (took 1.609774086 seconds)
    (269/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.182863954 seconds)
    (270/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.356211128 seconds)
    (271/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.397748324 seconds)
    (272/481) benchmarking ("sumrange_view", "BitArray{2}")...
    done (took 1.373431769 seconds)
    (273/481) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.1812985 seconds)
    (274/481) benchmarking ("sumcolon", "1:100000")...
    done (took 2.198163612 seconds)
    (275/481) benchmarking ("sumcartesian_view", "Array{Float32,2}")...
    done (took 1.421276678 seconds)
    (276/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.393003417 seconds)
    (277/481) benchmarking ("sumeach_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.185089935 seconds)
    (278/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.177717711 seconds)
    (279/481) benchmarking ("sumvector", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.682522708 seconds)
    (280/481) benchmarking "3d"...
    done (took 2.033586247 seconds)
    (281/481) benchmarking ("sum", "3darray")...
    done (took 1.185966131 seconds)
    (282/481) benchmarking ("sumlinear", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.178001744 seconds)
    (283/481) benchmarking ("sumlogical", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.880673976 seconds)
    (284/481) benchmarking ("sumcolon", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.184627393 seconds)
    (285/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.424762038 seconds)
    (286/481) benchmarking ("sumcolon", "Array{Int32,2}")...
    done (took 2.191227126 seconds)
    (287/481) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.18419557 seconds)
    (288/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.183622041 seconds)
    (289/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.180874875 seconds)
    (290/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.180035042 seconds)
    (291/481) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 2.179415538 seconds)
    (292/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.186456315 seconds)
    (293/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.153934382 seconds)
    (294/481) benchmarking ("sumcolon", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.607208479 seconds)
    (295/481) benchmarking ("mapr_access", "Array{Float32,2}")...
    done (took 2.179867743 seconds)
    (296/481) benchmarking ("mapr_access", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.173874881 seconds)
    (297/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.187104945 seconds)
    (298/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.184952253 seconds)
    (299/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.425580715 seconds)
    (300/481) benchmarking ("sumeach", "Array{Float64,3}")...
    done (took 1.194397388 seconds)
    (301/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.736284533 seconds)
    (302/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.408128544 seconds)
    (303/481) benchmarking ("mapr_access", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.174141313 seconds)
    (304/481) benchmarking ("sumelt", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.213560186 seconds)
    (305/481) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.18559185 seconds)
    (306/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.178772678 seconds)
    (307/481) benchmarking ("sumcartesian_view", "BitArray{2}")...
    done (took 2.156401133 seconds)
    (308/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.180178231 seconds)
    (309/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.17973989 seconds)
    (310/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.251870311 seconds)
    (311/481) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.39921028 seconds)
    (312/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 2.183025131 seconds)
    (313/481) benchmarking ("sumeach", "BitArray{2}")...
    done (took 2.156455342 seconds)
    (314/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.25345737 seconds)
    (315/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.392255593 seconds)
    (316/481) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.179075046 seconds)
    (317/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 2.191444512 seconds)
    (318/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.373963765 seconds)
    (319/481) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 2.186375215 seconds)
    (320/481) benchmarking ("sumeach_view", "Array{Float32,2}")...
    done (took 2.196768846 seconds)
    (321/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.900878552 seconds)
    (322/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.213616978 seconds)
    (323/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.181263242 seconds)
    (324/481) benchmarking ("sumcartesian", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.188768262 seconds)
    (325/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.177031056 seconds)
    (326/481) benchmarking ("mapr_access", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.219017766 seconds)
    (327/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.25500879 seconds)
    (328/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.359993457 seconds)
    (329/481) benchmarking ("sumrange_view", "Array{Float32,2}")...
    done (took 1.403395334 seconds)
    (330/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.399235183 seconds)
    (331/481) benchmarking ("sumvector_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.527733412 seconds)
    (332/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.188161949 seconds)
    (333/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.18817176 seconds)
    (334/481) benchmarking ("sumcartesian_view", "Array{Float64,3}")...
    done (took 1.198226576 seconds)
    (335/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.268151761 seconds)
    (336/481) benchmarking ("sumlogical", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.182442629 seconds)
    (337/481) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.188516746 seconds)
    (338/481) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.186593665 seconds)
    (339/481) benchmarking ("sumvector", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.739467643 seconds)
    (340/481) benchmarking ("sumvector", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.903282881 seconds)
    (341/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.749536267 seconds)
    (342/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.403523936 seconds)
    (343/481) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.185139497 seconds)
    (344/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.193523497 seconds)
    (345/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.181909093 seconds)
    (346/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.424015665 seconds)
    (347/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.182688423 seconds)
    (348/481) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.458984892 seconds)
    (349/481) benchmarking ("sumcartesian_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.183780145 seconds)
    (350/481) benchmarking ("mapr_access", "Array{Int32,2}")...
    done (took 2.176589341 seconds)
    (351/481) benchmarking ("sumlinear", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.205590688 seconds)
    (352/481) benchmarking ("sumlogical_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.183671949 seconds)
    (353/481) benchmarking ("sumcolon", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.198777469 seconds)
    (354/481) benchmarking ("sumeach", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.3990068 seconds)
    (355/481) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.457081895 seconds)
    (356/481) benchmarking ("sumelt", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.182517824 seconds)
    (357/481) benchmarking ("sumcolon", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.187030124 seconds)
    (358/481) benchmarking ("sumelt", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.187146248 seconds)
    (359/481) benchmarking ("sumcartesian", "Array{Int32,2}")...
    done (took 2.183814951 seconds)
    (360/481) benchmarking ("sumrange_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.403855432 seconds)
    (361/481) benchmarking ("sumeach", "Array{Int32,2}")...
    done (took 1.400283677 seconds)
    (362/481) benchmarking ("sumrange", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.618326886 seconds)
    (363/481) benchmarking ("sumcolon", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.676238271 seconds)
    (364/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.190606991 seconds)
    (365/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.184183902 seconds)
    (366/481) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 1.872972733 seconds)
    (367/481) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.464284821 seconds)
    (368/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.184009142 seconds)
    (369/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.186071881 seconds)
    (370/481) benchmarking ("sumelt", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.184454253 seconds)
    (371/481) benchmarking ("sumlinear_view", "Array{Float32,2}")...
    done (took 2.186293707 seconds)
    (372/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 2.195269428 seconds)
    (373/481) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.196955771 seconds)
    (374/481) benchmarking ("sumlogical_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.191336038 seconds)
    (375/481) benchmarking ("sumlinear", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.415214283 seconds)
    (376/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.398268102 seconds)
    (377/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.789404671 seconds)
    (378/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.403033323 seconds)
    (379/481) benchmarking "sub2ind"...
    done (took 2.374043745 seconds)
    (380/481) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.18474295 seconds)
    (381/481) benchmarking ("sumlogical", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.184800976 seconds)
    (382/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 1.451677443 seconds)
    (383/481) benchmarking ("sumlinear_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.017018826 seconds)
    (384/481) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.362329174 seconds)
    (385/481) benchmarking ("sumvector", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.756501112 seconds)
    (386/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.843608732 seconds)
    (387/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.437621628 seconds)
    (388/481) benchmarking ("sumeach", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.261181642 seconds)
    (389/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.364333486 seconds)
    (390/481) benchmarking "6d"...
    done (took 2.19065529 seconds)
    (391/481) benchmarking ("sumelt_boundscheck", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.423494027 seconds)
    (392/481) benchmarking ("sumrange", "1:100000")...
    done (took 2.19322557 seconds)
    (393/481) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.190994327 seconds)
    (394/481) benchmarking ("sumlinear", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.19019142 seconds)
    (395/481) benchmarking ("sumeach_view", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.187006746 seconds)
    (396/481) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 2.186365486 seconds)
    (397/481) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 1.403476213 seconds)
    (398/481) benchmarking ("sumvector", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.750150276 seconds)
    (399/481) benchmarking ("sumeach_view", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.439529318 seconds)
    (400/481) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 1.192224806 seconds)
    (401/481) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.185409153 seconds)
    (402/481) benchmarking ("sumlinear_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.21509279 seconds)
    (403/481) benchmarking ("sumcolon_view", "Array{Int32,2}")...
    done (took 1.364497764 seconds)
    (404/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 1.413696424 seconds)
    (405/481) benchmarking ("sumlogical", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.836151515 seconds)
    (406/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 1.408780911 seconds)
    (407/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.409975604 seconds)
    (408/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.194181832 seconds)
    (409/481) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.185434387 seconds)
    (410/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.754995408 seconds)
    (411/481) benchmarking ("sumrange_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.405949471 seconds)
    (412/481) benchmarking ("sumeach", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.194002887 seconds)
    (413/481) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.193565311 seconds)
    (414/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.375331656 seconds)
    (415/481) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.19317925 seconds)
    (416/481) benchmarking ("sumelt", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.222991328 seconds)
    (417/481) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.056981319 seconds)
    (418/481) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 2.187194985 seconds)
    (419/481) benchmarking ("sumrange", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.677935083 seconds)
    (420/481) benchmarking ("sumelt_boundscheck", "Array{Int32,2}")...
    done (took 1.404213774 seconds)
    (421/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.208389473 seconds)
    (422/481) benchmarking ("sumrange", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.196769169 seconds)
    (423/481) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.850967955 seconds)
    (424/481) benchmarking ("sumvector", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.753904644 seconds)
    (425/481) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.190268207 seconds)
    (426/481) benchmarking ("sumcolon", "SubArray{Float32,2,Base.ReshapedArray{Float32,2,SubArray{Float32,3,Array{Float32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.624537938 seconds)
    (427/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.194194244 seconds)
    (428/481) benchmarking ("sumrange", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.199579363 seconds)
    (429/481) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.47082134 seconds)
    (430/481) benchmarking ("sumvector_view", "1:100000")...
    done (took 1.196231586 seconds)
    (431/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.193629519 seconds)
    (432/481) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.474342326 seconds)
    (433/481) benchmarking ("sumlinear", "1:100000")...
    done (took 1.194253645 seconds)
    (434/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32,2}")...
    done (took 2.190912635 seconds)
    (435/481) benchmarking ("sumcolon_view", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.373061234 seconds)
    (436/481) benchmarking ("sumvector", "Array{Int32,2}")...
    done (took 1.75087751 seconds)
    (437/481) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.862662638 seconds)
    (438/481) benchmarking ("sumlinear_view", "Array{Int32,2}")...
    done (took 2.199935046 seconds)
    (439/481) benchmarking ("sumlogical", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.189611298 seconds)
    (440/481) benchmarking ("sumelt", "Array{Float32,2}")...
    done (took 2.191331117 seconds)
    (441/481) benchmarking ("sumeach", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.190376434 seconds)
    (442/481) benchmarking ("mapr_access", "SubArray{Float32,2,Array{Float32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.264204288 seconds)
    (443/481) benchmarking ("sumcartesian_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.18991583 seconds)
    (444/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,Array{Int32,2},Tuple{UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 2.191543089 seconds)
    (445/481) benchmarking ("sumvector_view", "BitArray{2}")...
    done (took 1.534513179 seconds)
    (446/481) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.194046308 seconds)
    (447/481) benchmarking ("sumeach_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.189361138 seconds)
    (448/481) benchmarking ("sumcartesian_view", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.203773899 seconds)
    (449/481) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.195250174 seconds)
    (450/481) benchmarking ("sumrange", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.194924394 seconds)
    (451/481) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 2.195470619 seconds)
    (452/481) benchmarking ("sumelt_boundscheck", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.190728893 seconds)
    (453/481) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 1.19985703 seconds)
    (454/481) benchmarking ("sumeach_view", "BitArray{2}")...
    done (took 2.180628416 seconds)
    (455/481) benchmarking ("sumlogical_view", "BitArray{2}")...
    done (took 2.166896315 seconds)
    (456/481) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,2}")...
    done (took 2.200878723 seconds)
    (457/481) benchmarking ("mapr_access", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,Array{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true},Tuple{}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true}")...
    done (took 1.313182236 seconds)
    (458/481) benchmarking ("sumvector_view", "SubArray{Float32,2,Array{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.687834256 seconds)
    (459/481) benchmarking ("sumlinear_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.193917782 seconds)
    (460/481) benchmarking "2d"...
    done (took 1.805442565 seconds)
    (461/481) benchmarking "7d"...
    done (took 1.525251587 seconds)
    (462/481) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32,2}")...
    done (took 1.436274095 seconds)
    (463/481) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32,2}")...
    done (took 2.191068459 seconds)
    (464/481) benchmarking ("sumcartesian", "BitArray{2}")...
    done (took 2.166491437 seconds)
    (465/481) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.196488806 seconds)
    (466/481) benchmarking ("sumlinear", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.191967235 seconds)
    (467/481) benchmarking ("sumeach", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.191076855 seconds)
    (468/481) benchmarking ("sumelt", "SubArray{Float32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.192193105 seconds)
    (469/481) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2}")...
    done (took 2.189367742 seconds)
    (470/481) benchmarking ("sumrange", "SubArray{Int32,2,Base.ReshapedArray{Int32,2,SubArray{Int32,3,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},false}")...
    done (took 1.678262333 seconds)
    (471/481) benchmarking ("sumcolon", "Array{Float32,2}")...
    done (took 2.196508824 seconds)
    (472/481) benchmarking ("sumrange_view", "Array{Int32,2}")...
    done (took 1.414319571 seconds)
    (473/481) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.199276674 seconds)
    (474/481) benchmarking ("sumelt", "Array{Int32,2}")...
    done (took 1.402094117 seconds)
    (475/481) benchmarking ("sumlinear", "SubArray{Int32,2,Array{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 1.403001418 seconds)
    (476/481) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32,2}")...
    done (took 2.195760617 seconds)
    (477/481) benchmarking ("sumcolon_view", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 1.374372697 seconds)
    (478/481) benchmarking ("sumcolon", "SubArray{Int32,2,BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32,2},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},false}")...
    done (took 2.196473041 seconds)
    (479/481) benchmarking ("sumcartesian", "SubArray{Float64,3,Array{Float64,3},Tuple{UnitRange{Int64},UnitRange{Int64},UnitRange{Int64}},false}")...
    done (took 1.230513906 seconds)
    (480/481) benchmarking ("sumlinear", "BitArray{2}")...
    done (took 2.162183822 seconds)
    (481/481) benchmarking ("sumcartesian", "SubArray{Int32,2,Array{Int32,3},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}}},true}")...
    done (took 2.192656303 seconds)
  done (took 882.926581525 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("collect", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 2.211231821 seconds)
    (2/8) benchmarking ("collect", "Array{Float64,1}")...
    done (took 2.188138589 seconds)
    (3/8) benchmarking ("comprehension_collect", "Array{Float64,1}")...
    done (took 2.20668413 seconds)
    (4/8) benchmarking ("comprehension_iteration", "Array{Float64,1}")...
    done (took 2.193262678 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 2.208771437 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 2.264211915 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Array{Float64,1}")...
    done (took 2.222000702 seconds)
    (8/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}")...
    done (took 2.197421824 seconds)
  done (took 18.778229296 seconds)
  (11/13) benchmarking "cat"...
    (1/16) benchmarking ("hvcat", 500)...
    done (took 2.190188259 seconds)
    (2/16) benchmarking ("hcat_setind", 5)...
    done (took 1.191410475 seconds)
    (3/16) benchmarking ("hvcat_setind", 500)...
    done (took 2.18882044 seconds)
    (4/16) benchmarking ("hvcat", 5)...
    done (took 1.192671173 seconds)
    (5/16) benchmarking ("hcat", 500)...
    done (took 2.195652614 seconds)
    (6/16) benchmarking ("catnd_setind", 5)...
    done (took 1.683201369 seconds)
    (7/16) benchmarking ("vcat_setind", 500)...
    done (took 2.188142826 seconds)
    (8/16) benchmarking ("hvcat_setind", 5)...
    done (took 1.193279219 seconds)
    (9/16) benchmarking ("vcat", 5)...
    done (took 1.206695337 seconds)
    (10/16) benchmarking ("catnd_setind", 500)...
    done (took 2.194762327 seconds)
    (11/16) benchmarking ("vcat", 500)...
    done (took 2.185268427 seconds)
    (12/16) benchmarking ("catnd", 5)...
    done (took 1.803248775 seconds)
    (13/16) benchmarking ("vcat_setind", 5)...
    done (took 1.199317926 seconds)
    (14/16) benchmarking ("hcat_setind", 500)...
    done (took 2.195846633 seconds)
    (15/16) benchmarking ("catnd", 500)...
    done (took 2.190057003 seconds)
    (16/16) benchmarking ("hcat", 5)...
    done (took 1.199268097 seconds)
  done (took 29.2824151 seconds)
  (12/13) benchmarking "subarray"...
    (1/8) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.651125918 seconds)
    (2/8) benchmarking ("lucompletepivSub!", 500)...
    done (took 2.417078698 seconds)
    (3/8) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.26465269 seconds)
    (4/8) benchmarking ("lucompletepivCopy!", 250)...
    done (took 2.249888539 seconds)
    (5/8) benchmarking ("lucompletepivSub!", 250)...
    done (took 2.207949211 seconds)
    (6/8) benchmarking ("lucompletepivCopy!", 100)...
    done (took 2.184537126 seconds)
    (7/8) benchmarking ("lucompletepivCopy!", 500)...
    done (took 2.225597211 seconds)
    (8/8) benchmarking ("lucompletepivSub!", 100)...
    done (took 2.186529184 seconds)
  done (took 23.472835965 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 1.200789299 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 1.199817223 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.199021174 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 1.199615561 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 1.199652371 seconds)
  done (took 7.08492147 seconds)
done (took 1120.572232505 seconds)
(18/20) benchmarking "misc"...
  (1/6) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.200675162 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.199142472 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.200478753 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.199052694 seconds)
  done (took 5.884110044 seconds)
  (2/6) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 2.166331864 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 2.168496707 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 2.171404902 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 1.182704413 seconds)
  done (took 8.774601382 seconds)
  (3/6) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 1.783423836 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 1.648331751 seconds)
  done (took 4.518211195 seconds)
  (4/6) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.719368453 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.71684795 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.715085137 seconds)
  done (took 6.237627042 seconds)
  (5/6) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.464823562 seconds)
  done (took 2.552196612 seconds)
  (6/6) benchmarking "parse"...
    (1/3) benchmarking "Int"...
    done (took 2.153477589 seconds)
    (2/3) benchmarking "Float64"...
    done (took 2.192162417 seconds)
    (3/3) benchmarking "DateTime"...
    done (took 1.910556512 seconds)
  done (took 7.344460366 seconds)
done (took 36.396481687 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.187666795 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 2.947937828 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 2.34371797 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.192148688 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 2.350276632 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 2.343648504 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 2.437450026 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.186419658 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.188887246 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.186889525 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.193192422 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 2.347693622 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 2.425529525 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 2.94942574 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 2.426393628 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 2.951939263 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 2.348698652 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.19889814 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 2.193209726 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 2.197648482 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 2.438211839 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.196286639 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.18665395 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.21185084 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 2.356753032 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 2.332746917 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.190229488 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 2.952732388 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 2.196038928 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.191125375 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 2.334194139 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 2.197846898 seconds)
  done (took 76.46990979 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.189371642 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 2.202789746 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 2.191875993 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.188455502 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 2.189214034 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 2.20147508 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 2.189521622 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.188554185 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.189436741 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.200375003 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.190202122 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 2.190069348 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 2.191178908 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 2.190048069 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 2.192576808 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 2.18901329 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 2.190441114 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.204511697 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 2.190839206 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 2.198562571 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 2.193569895 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.189789278 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.191454113 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.189601461 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 2.195475341 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 2.189745614 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.196710356 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 2.190244228 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 2.204691992 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.199638352 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 2.191484904 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 2.191133356 seconds)
  done (took 71.27226966 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.190940518 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 2.190915357 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 2.193011381 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.191532928 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 2.191150938 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 2.192175912 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 2.193742038 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.206267173 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.195052037 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.197736556 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.191337545 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 2.190856954 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 2.194557164 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 2.191786357 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 2.191739842 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 2.192141275 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 2.190945103 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.191300738 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 2.192073441 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 2.192008105 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 2.191870616 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.205529504 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.206509424 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.202770253 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 2.191032593 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 2.193769472 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.195372082 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 2.191407264 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 2.205707294 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.200299813 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 2.194525733 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 2.193225579 seconds)
  done (took 71.324839733 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.432576768 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.207861593 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 1.20966249 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.201436089 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 1.211076671 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.207243025 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.202043868 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.439560874 seconds)
  done (took 13.204203489 seconds)
done (took 233.359916472 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/33) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.20191952 seconds)
    (2/33) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.634256557 seconds)
    (3/33) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.232777341 seconds)
    (4/33) benchmarking ("Set", "Any", "loop")...
    done (took 2.203498893 seconds)
    (5/33) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.220185925 seconds)
    (6/33) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.230167258 seconds)
    (7/33) benchmarking ("Vector", "String", "loop")...
    done (took 1.402931623 seconds)
    (8/33) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.230911721 seconds)
    (9/33) benchmarking ("Vector", "Int", "loop")...
    done (took 1.404414756 seconds)
    (10/33) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.230731441 seconds)
    (11/33) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.218620316 seconds)
    (12/33) benchmarking ("Dict", "String", "loop")...
    done (took 2.20821685 seconds)
    (13/33) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.897164701 seconds)
    (14/33) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.349562902 seconds)
    (15/33) benchmarking ("Set", "String", "iterator")...
    done (took 1.958799738 seconds)
    (16/33) benchmarking ("Set", "String", "loop")...
    done (took 2.069703541 seconds)
    (17/33) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.970381601 seconds)
    (18/33) benchmarking ("Set", "Any", "iterator")...
    done (took 2.194308297 seconds)
    (19/33) benchmarking ("Set", "Int", "loop")...
    done (took 1.69914422 seconds)
    (20/33) benchmarking ("Vector", "Any", "loop")...
    done (took 1.460340089 seconds)
    (21/33) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.235409725 seconds)
    (22/33) benchmarking ("Dict", "String", "iterator")...
    done (took 2.198840319 seconds)
    (23/33) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.956068703 seconds)
    (24/33) benchmarking ("Dict", "Int", "loop")...
    done (took 1.982291806 seconds)
    (25/33) benchmarking ("Dict", "Any", "iterator")...
    done (took 2.1747495 seconds)
    (26/33) benchmarking ("Vector", "String", "iterator")...
    done (took 1.272623926 seconds)
    (27/33) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.290116686 seconds)
    (28/33) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.417005564 seconds)
    (29/33) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.356407473 seconds)
    (30/33) benchmarking ("Vector", "Int", "iterator")...
    done (took 1.271828647 seconds)
    (31/33) benchmarking ("Set", "Int", "iterator")...
    done (took 1.649162469 seconds)
    (32/33) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.216692665 seconds)
    (33/33) benchmarking ("Dict", "Any", "loop")...
    done (took 2.204367555 seconds)
  done (took 57.337155418 seconds)
  (2/6) benchmarking "iteration"...
    (1/30) benchmarking ("Set", "String", "next")...
    done (took 1.202407284 seconds)
    (2/30) benchmarking ("Set", "Any", "start")...
    done (took 1.209981384 seconds)
    (3/30) benchmarking ("Set", "Int", "done")...
    done (took 1.213934299 seconds)
    (4/30) benchmarking ("Dict", "Int", "done")...
    done (took 1.211735231 seconds)
    (5/30) benchmarking ("Dict", "String", "start")...
    done (took 1.210620102 seconds)
    (6/30) benchmarking ("BitSet", "Int", "done")...
    done (took 1.210303145 seconds)
    (7/30) benchmarking ("Dict", "String", "next")...
    done (took 1.201987696 seconds)
    (8/30) benchmarking ("Vector", "Int", "done")...
    done (took 1.212616884 seconds)
    (9/30) benchmarking ("Vector", "String", "done")...
    done (took 1.212908915 seconds)
    (10/30) benchmarking ("Vector", "Any", "done")...
    done (took 1.211770909 seconds)
    (11/30) benchmarking ("Dict", "String", "done")...
    done (took 1.211015659 seconds)
    (12/30) benchmarking ("Vector", "Int", "next")...
    done (took 1.212365867 seconds)
    (13/30) benchmarking ("Set", "Int", "next")...
    done (took 1.212274575 seconds)
    (14/30) benchmarking ("Vector", "Int", "start")...
    done (took 1.210636697 seconds)
    (15/30) benchmarking ("Dict", "Int", "start")...
    done (took 1.211992957 seconds)
    (16/30) benchmarking ("Vector", "Any", "next")...
    done (took 1.184739655 seconds)
    (17/30) benchmarking ("Dict", "Any", "next")...
    done (took 1.202142811 seconds)
    (18/30) benchmarking ("Set", "String", "start")...
    done (took 1.211657687 seconds)
    (19/30) benchmarking ("Vector", "String", "next")...
    done (took 1.202172024 seconds)
    (20/30) benchmarking ("Set", "Any", "next")...
    done (took 1.186244488 seconds)
    (21/30) benchmarking ("Vector", "String", "start")...
    done (took 1.210738325 seconds)
    (22/30) benchmarking ("Dict", "Any", "done")...
    done (took 1.212436069 seconds)
    (23/30) benchmarking ("Dict", "Int", "next")...
    done (took 1.21305563 seconds)
    (24/30) benchmarking ("Vector", "Any", "start")...
    done (took 1.21303408 seconds)
    (25/30) benchmarking ("Set", "String", "done")...
    done (took 1.213277806 seconds)
    (26/30) benchmarking ("Set", "Any", "done")...
    done (took 1.212872373 seconds)
    (27/30) benchmarking ("Set", "Int", "start")...
    done (took 1.21496126 seconds)
    (28/30) benchmarking ("BitSet", "Int", "next")...
    done (took 1.212629598 seconds)
    (29/30) benchmarking ("BitSet", "Int", "start")...
    done (took 1.213433367 seconds)
    (30/30) benchmarking ("Dict", "Any", "start")...
    done (took 1.213808771 seconds)
  done (took 37.370880535 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.213267993 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.721404992 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.863932846 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.211476369 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.204018524 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 1.208876761 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.451206009 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.215179555 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 1.208021205 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 1.208253843 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.631200169 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.217393453 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.236735626 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.872245694 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 1.207660186 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.214852964 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.214492171 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.205714085 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.734677076 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.214936886 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 1.449788898 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.215461075 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.450836527 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 1.215066665 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.209330187 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.207897431 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 1.211539146 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.960185985 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 1.223714428 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.635387846 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.831158573 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.45183872 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.886429664 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.921897261 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.85009849 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.223049115 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.21608557 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.637763988 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 1.20962625 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.207532318 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.44991623 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 1.206996455 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.883568407 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.865637904 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 1.222536009 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.217583116 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.983788611 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.636506676 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.411753619 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 1.214295094 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.916365644 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 1.211963441 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.217993713 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.209802446 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.414627061 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.210472422 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.207652773 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.990715459 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 1.212978631 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 1.451568182 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.217948915 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.210766499 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.73530856 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 1.209137193 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.727242956 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.210691787 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 1.21827829 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 1.210893708 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.88115655 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 1.214097794 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.894828352 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.222789742 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.218808164 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.634107939 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.727207043 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.025297309 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 1.212147918 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.740064641 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.921290716 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.465409366 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 1.214715122 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.931025791 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 1.467988437 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 1.212758681 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.222408184 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.220964123 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.220127975 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.282492293 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.451723288 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.810356931 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.876049059 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.987738304 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 1.457100225 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 1.218924028 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 1.210117365 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.989574525 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.219515891 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.220493132 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.881663947 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.883348747 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.226636164 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 1.219151177 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.871611304 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 1.228133533 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 1.456790491 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 1.216512308 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.926940303 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 1.213493931 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.282295648 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.221637551 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 1.217601997 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 1.215712711 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 1.456008627 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 1.214992454 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.219268982 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.866918875 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.660801695 seconds)
  done (took 170.298634513 seconds)
  (4/6) benchmarking "optimizations"...
    (1/20) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 2.204981714 seconds)
    (2/20) benchmarking ("Set", "abstract", "Int8")...
    done (took 2.206060374 seconds)
    (3/20) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 2.207693483 seconds)
    (4/20) benchmarking ("Dict", "concrete", "Bool")...
    done (took 2.207362403 seconds)
    (5/20) benchmarking ("Dict", "abstract", "Bool")...
    done (took 2.207180524 seconds)
    (6/20) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.216046499 seconds)
    (7/20) benchmarking ("Set", "abstract", "Bool")...
    done (took 2.207006474 seconds)
    (8/20) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 2.207636087 seconds)
    (9/20) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.211946257 seconds)
    (10/20) benchmarking ("Set", "concrete", "Bool")...
    done (took 2.205732241 seconds)
    (11/20) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 2.207219302 seconds)
    (12/20) benchmarking ("Set", "concrete", "Nothing")...
    done (took 1.215479042 seconds)
    (13/20) benchmarking ("Set", "abstract", "Nothing")...
    done (took 1.213632912 seconds)
    (14/20) benchmarking ("BitSet", "Int8")...
    done (took 2.20570105 seconds)
    (15/20) benchmarking ("Set", "abstract", "UInt16")...
    done (took 2.207288318 seconds)
    (16/20) benchmarking ("Dict", "concrete", "Int8")...
    done (took 2.207506313 seconds)
    (17/20) benchmarking ("BitSet", "UInt16")...
    done (took 2.207041701 seconds)
    (18/20) benchmarking ("Set", "concrete", "UInt16")...
    done (took 2.208390428 seconds)
    (19/20) benchmarking ("Set", "concrete", "Int8")...
    done (took 2.207678469 seconds)
    (20/20) benchmarking ("Dict", "abstract", "Int8")...
    done (took 2.20756124 seconds)
  done (took 41.274415044 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/79) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.222791612 seconds)
    (2/79) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.689330318 seconds)
    (3/79) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.664331775 seconds)
    (4/79) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.223298882 seconds)
    (5/79) benchmarking ("BitSet", "Int", "last")...
    done (took 1.221774384 seconds)
    (6/79) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.214031928 seconds)
    (7/79) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.261374644 seconds)
    (8/79) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.223117763 seconds)
    (9/79) benchmarking ("BitSet", "Int", "first")...
    done (took 1.223260393 seconds)
    (10/79) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.468093714 seconds)
    (11/79) benchmarking ("Vector", "String", "push!")...
    done (took 1.35966273 seconds)
    (12/79) benchmarking ("Set", "String", "in", "false")...
    done (took 1.228408057 seconds)
    (13/79) benchmarking ("BitSet", "Int", "length")...
    done (took 1.221927034 seconds)
    (14/79) benchmarking ("Set", "Int", "first")...
    done (took 1.223316113 seconds)
    (15/79) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.666701913 seconds)
    (16/79) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.196552359 seconds)
    (17/79) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.468453471 seconds)
    (18/79) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.691863486 seconds)
    (19/79) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.224491474 seconds)
    (20/79) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.691833582 seconds)
    (21/79) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.197280213 seconds)
    (22/79) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.224543682 seconds)
    (23/79) benchmarking ("Dict", "String", "getindex")...
    done (took 1.214866107 seconds)
    (24/79) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.693291847 seconds)
    (25/79) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.479097303 seconds)
    (26/79) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.457943411 seconds)
    (27/79) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.265361912 seconds)
    (28/79) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.695122856 seconds)
    (29/79) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.22463693 seconds)
    (30/79) benchmarking ("Vector", "Int", "last")...
    done (took 1.223791563 seconds)
    (31/79) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.69230712 seconds)
    (32/79) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.225218315 seconds)
    (33/79) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.215783081 seconds)
    (34/79) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.679643236 seconds)
    (35/79) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.226397847 seconds)
    (36/79) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.238765063 seconds)
    (37/79) benchmarking ("Vector", "Int", "length")...
    done (took 1.225245268 seconds)
    (38/79) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.26670799 seconds)
    (39/79) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.268029393 seconds)
    (40/79) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.475556683 seconds)
    (41/79) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 1.699954898 seconds)
    (42/79) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.46839738 seconds)
    (43/79) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.23545595 seconds)
    (44/79) benchmarking ("Vector", "Any", "in", "true")...
    done (took 1.374615265 seconds)
    (45/79) benchmarking ("Dict", "Int", "first")...
    done (took 1.227249124 seconds)
    (46/79) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.197332438 seconds)
    (47/79) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.703312201 seconds)
    (48/79) benchmarking ("Vector", "Int", "in", "true")...
    done (took 1.226885764 seconds)
    (49/79) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.197651273 seconds)
    (50/79) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.227256462 seconds)
    (51/79) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.230919474 seconds)
    (52/79) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.678911056 seconds)
    (53/79) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.219943171 seconds)
    (54/79) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.681433579 seconds)
    (55/79) benchmarking ("Dict", "Int", "length")...
    done (took 1.226931563 seconds)
    (56/79) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.227526764 seconds)
    (57/79) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.694777857 seconds)
    (58/79) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.681263727 seconds)
    (59/79) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.670973208 seconds)
    (60/79) benchmarking ("Vector", "Int", "push!")...
    done (took 1.362798517 seconds)
    (61/79) benchmarking ("Vector", "String", "getindex")...
    done (took 1.217565197 seconds)
    (62/79) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.460160864 seconds)
    (63/79) benchmarking ("Vector", "Int", "first")...
    done (took 1.226089173 seconds)
    (64/79) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.705169048 seconds)
    (65/79) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.228520754 seconds)
    (66/79) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.226934116 seconds)
    (67/79) benchmarking ("Set", "String", "in", "true")...
    done (took 1.226942123 seconds)
    (68/79) benchmarking ("Vector", "Any", "push!")...
    done (took 1.366001084 seconds)
    (69/79) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.697505842 seconds)
    (70/79) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.461974791 seconds)
    (71/79) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.473409026 seconds)
    (72/79) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.47377122 seconds)
    (73/79) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.226243862 seconds)
    (74/79) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.276932212 seconds)
    (75/79) benchmarking ("Set", "Int", "length")...
    done (took 1.230682362 seconds)
    (76/79) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 1.474124053 seconds)
    (77/79) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.275945592 seconds)
    (78/79) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.592099911 seconds)
    (79/79) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.476950303 seconds)
  done (took 110.232416469 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("Dict", "Int", "filter")...
    done (took 1.453635572 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.320473141 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.554229425 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.747514631 seconds)
    (5/28) benchmarking ("Set", "Any", "pop!")...
    done (took 1.671092218 seconds)
    (6/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.348024529 seconds)
    (7/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.324450686 seconds)
    (8/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.445570085 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.234185592 seconds)
    (10/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.332871799 seconds)
    (11/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.783647914 seconds)
    (12/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 1.303291663 seconds)
    (13/28) benchmarking ("Dict", "Any", "filter")...
    done (took 1.920247345 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.276843457 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.318913415 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.334097505 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.57221965 seconds)
    (18/28) benchmarking ("Dict", "String", "filter")...
    done (took 2.109835137 seconds)
    (19/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.817512643 seconds)
    (20/28) benchmarking ("Dict", "Int", "filter!")...
    done (took 1.768250859 seconds)
    (21/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 2.228051966 seconds)
    (22/28) benchmarking ("Vector", "Int", "filter")...
    done (took 1.314443612 seconds)
    (23/28) benchmarking ("Set", "String", "filter")...
    done (took 1.716098368 seconds)
    (24/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.399717363 seconds)
    (25/28) benchmarking ("Dict", "String", "filter!")...
    done (took 2.221674856 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.745960016 seconds)
    (27/28) benchmarking ("Dict", "Any", "filter!")...
    done (took 2.065593799 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.68894021 seconds)
  done (took 47.128423343 seconds)
done (took 464.735677885 seconds)
SAVING RESULT...
DONE!

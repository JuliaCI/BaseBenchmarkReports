cset: moving following pidspec: 10223
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.867025479 seconds)
loading group "shootout"... done (took 1.093105932 seconds)
loading group "string"... done (took 0.662799519 seconds)
loading group "linalg"... done (took 8.815159974 seconds)
loading group "parallel"... done (took 0.170427431 seconds)
loading group "find"... done (took 2.921550269 seconds)
loading group "tuple"... done (took 2.263206923 seconds)
loading group "union"... done (took 15.036558018 seconds)
loading group "dates"... done (took 1.483246235 seconds)
loading group "micro"... done (took 0.22246693 seconds)
loading group "simd"... done (took 4.826908878 seconds)
loading group "io"... done (took 1.072822803 seconds)
loading group "random"... done (took 9.563830953 seconds)
loading group "problem"... done (took 1.517627749 seconds)
loading group "array"... done (took 25.384979402 seconds)
loading group "misc"... done (took 1.919375996 seconds)
loading group "scalar"... done (took 43.900679562 seconds)
loading group "sort"... done (took 3.347328706 seconds)
loading group "sparse"... done (took 12.855453261 seconds)
loading group "collection"... done (took 18.782711115 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.528859213 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124669424 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129526164 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.122403463 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.188759162 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121371972 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130782267 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085983596 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.837358769 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.139353344 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116736973 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.441059283 seconds)
done (took 5.363981561 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.167337522 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.09341113 seconds)
    (2/2) benchmarking "String"...
    done (took 0.084057137 seconds)
  done (took 1.367716397 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072139372 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061627043 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067839123 seconds)
  done (took 1.387758152 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065926739 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135603549 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067343225 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067232445 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067384262 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066872579 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.06754945 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.067948126 seconds)
  done (took 1.729703286 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072820528 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068368158 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066003619 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069045782 seconds)
  done (took 1.46629766 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.068321302 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122990595 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065580324 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065975945 seconds)
  done (took 1.509175321 seconds)
done (took 8.900481213 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.244726444 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.102882119 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.291736698 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.452937172 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.620773585 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.094421059 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075421855 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.07134713 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.130422008 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.334043386 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.108431169 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.187160808 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.094137148 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.176591643 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.012893542 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.122325421 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.086914553 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.124926318 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096204637 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.132640381 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.399921032 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.079118297 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074392676 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.071426295 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069142817 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.650077747 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.672306989 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.126561834 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086336013 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.162829681 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.117036343 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.651943164 seconds)
  done (took 10.944963173 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.094041078 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.094010613 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.0692103 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124678329 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094098323 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070681197 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07595038 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068659902 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089715509 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.123914726 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090752378 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099452247 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066968525 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069840116 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.075057947 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.202945468 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.08079731 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081463729 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068196859 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081322697 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.105966467 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078529595 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078446303 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078875933 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.129977865 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169937316 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.09706323 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.09813559 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066626769 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079546212 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115333415 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128662166 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067563427 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066445976 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120369646 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096170994 seconds)
  done (took 4.638080272 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.898250202 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.096399015 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.103374888 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.651007281 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.067183814 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.153613482 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.246336647 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075546179 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.364049739 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.156783227 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.143181209 seconds)
    (11/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.149654339 seconds)
    (12/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.118616581 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069941445 seconds)
    (14/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 1.157636611 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.119005971 seconds)
    (16/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.544339718 seconds)
    (17/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068647491 seconds)
    (18/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067565256 seconds)
    (19/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.0673078 seconds)
    (20/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.069863469 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069168243 seconds)
    (22/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064930486 seconds)
    (23/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.09479316 seconds)
    (24/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.071251287 seconds)
    (25/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.095636861 seconds)
    (26/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088665676 seconds)
    (27/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.1670594 seconds)
    (28/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.988292613 seconds)
    (29/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.307473796 seconds)
    (30/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068177747 seconds)
    (31/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.160240317 seconds)
    (32/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.090231582 seconds)
    (33/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.369466621 seconds)
    (34/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070200745 seconds)
    (35/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083487596 seconds)
    (36/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.47752907 seconds)
    (37/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.124784895 seconds)
    (38/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.068972004 seconds)
    (39/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.165464313 seconds)
    (40/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.118022244 seconds)
    (41/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065460523 seconds)
    (42/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.121791444 seconds)
    (43/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079521294 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069702473 seconds)
    (45/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070275112 seconds)
    (46/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.494087217 seconds)
    (47/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.07016741 seconds)
    (48/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072783796 seconds)
    (49/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.080305106 seconds)
    (50/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101647195 seconds)
    (51/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068707871 seconds)
    (52/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066137724 seconds)
    (53/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.172792156 seconds)
    (54/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.065718766 seconds)
    (55/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065256059 seconds)
    (56/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067099457 seconds)
    (57/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.064587766 seconds)
    (58/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.068124955 seconds)
    (59/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.08478893 seconds)
    (60/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.151520534 seconds)
    (61/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.067921978 seconds)
    (62/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.066376469 seconds)
    (63/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.144940293 seconds)
    (64/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.064882963 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069712439 seconds)
    (66/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.103004982 seconds)
    (67/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069451301 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.087811139 seconds)
    (69/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.096277542 seconds)
    (70/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.333729604 seconds)
    (71/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.033253972 seconds)
    (72/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069710819 seconds)
    (73/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.029833504 seconds)
    (74/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.080642916 seconds)
    (75/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.069699608 seconds)
    (76/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.072293857 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068751115 seconds)
    (78/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.070186405 seconds)
    (79/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069354137 seconds)
    (80/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072602868 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070912988 seconds)
    (82/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069077179 seconds)
    (83/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109128485 seconds)
    (84/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.06766667 seconds)
    (85/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.065266356 seconds)
    (86/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070753972 seconds)
    (87/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066988396 seconds)
    (88/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.072825585 seconds)
    (89/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096932368 seconds)
    (90/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.067550328 seconds)
    (91/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.558102622 seconds)
    (92/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096925567 seconds)
    (93/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.182326195 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.077245739 seconds)
    (95/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106364752 seconds)
    (96/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068213477 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.07220334 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068680863 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067844817 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068191386 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069274517 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07181544 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.098931345 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070771766 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.11372357 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.051961889 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.07050479 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06726487 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.073307776 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070259141 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070500512 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0669222 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072958167 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069791204 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065862584 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110009807 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.123206711 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067596173 seconds)
  done (took 23.037764673 seconds)
done (took 40.710725565 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.308719681 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.081460085 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.08195015 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.082172358 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.082048953 seconds)
  done (took 1.877318483 seconds)
done (took 3.153527673 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.132839767 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.082528341 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065044168 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.10237578 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.069293824 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.102222202 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108853011 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.10431188 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.069038405 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068789373 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.068858343 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.102376239 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105035352 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.070288163 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.100202846 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.105998372 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.070605397 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.066152846 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.07100018 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.071161304 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.070656355 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066534647 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070994931 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070593294 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101205811 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.071080894 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.069431967 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.101416166 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069202179 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099865814 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069178267 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069423947 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.068991018 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100188826 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069281355 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099978946 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064620427 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069414622 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069120249 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.068777666 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.069184624 seconds)
  done (took 4.632436807 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071772607 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082126377 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083977251 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062704348 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072178951 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082502521 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062410784 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082361658 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090009795 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084650465 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084318597 seconds)
  done (took 2.144076745 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070945562 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084198474 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085191591 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062553085 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073990638 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083770766 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063737217 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085436381 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088785892 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.086442973 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085999123 seconds)
  done (took 2.136944308 seconds)
done (took 10.170585588 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096778994 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.069586224 seconds)
  done (took 1.41665746 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.534237067 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.451893249 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.068108262 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086597151 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.195036256 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.095359535 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.205453472 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.071643206 seconds)
  done (took 8.147396832 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.099561275 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.072639109 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.070366776 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069701093 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071945104 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.069803754 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.071009992 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071798114 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.06938846 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.071421874 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071618762 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.070329287 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069730093 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069960797 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.070159633 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070322625 seconds)
  done (took 2.518450943 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.100929378 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.10124632 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074109434 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.074936281 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073304327 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.073007731 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.075731599 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.074488555 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.071166434 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.073397014 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.074157475 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.072502904 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.072375009 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.063124942 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073994187 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.0742476 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.071364713 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.074023158 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.074804205 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.076174436 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.075882999 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.064452496 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.073170846 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.074351299 seconds)
  done (took 3.190385406 seconds)
done (took 16.539021307 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175788269 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074752126 seconds)
  done (took 1.51219847 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068748752 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069409422 seconds)
  done (took 1.415570502 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.074593449 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061631899 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.079362224 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072032146 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063311078 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061713783 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079126795 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061885178 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061813148 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062110206 seconds)
  done (took 1.954058814 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063653243 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.070469701 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.06783982 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065487897 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067645864 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.06299168 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065794252 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063181489 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069919788 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062820378 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.06845952 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.085259207 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.067566625 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.085927888 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067139671 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068159395 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.070458088 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.067232005 seconds)
  done (took 2.521089447 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062021963 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062337708 seconds)
  done (took 1.410337106 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065291496 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062231675 seconds)
    (3/7) benchmarking "month"...
    done (took 0.06531324 seconds)
    (4/7) benchmarking "year"...
    done (took 0.065633829 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063885453 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062706446 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.064115123 seconds)
  done (took 1.728021852 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.423362092 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.124758268 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.349480314 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.074295796 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.078603051 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.258184201 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.0655356 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070545824 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070839476 seconds)
  done (took 2.841764734 seconds)
done (took 14.672392489 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082824447 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182407976 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.091370073 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.40675864 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091763559 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067591223 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113213456 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.1733722 seconds)
done (took 2.510607117 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.217463876 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.426734394 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.787253585 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.066889644 seconds)
  done (took 3.569758385 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336692295 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.079946432 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.080085763 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.070088109 seconds)
  done (took 1.870651613 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066815736 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072315915 seconds)
  done (took 1.437070366 seconds)
done (took 8.393680264 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064711837 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064227557 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.094543074 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.065973576 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065014011 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.065883951 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.066164509 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.065689967 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.065561775 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.07627071 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.065418966 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064417302 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064661112 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066018772 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065391032 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065254231 seconds)
    (17/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.06583609 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06574487 seconds)
    (19/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.065302312 seconds)
    (20/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.06562256 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065527289 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066165506 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.066056038 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.06555214 seconds)
  done (took 2.936526214 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080353632 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065986181 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067236914 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.06786817 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.069192769 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.06827219 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068413362 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067092434 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.069086723 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067640573 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067821674 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069309681 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065709001 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067724426 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065632925 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067741288 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067440939 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06614391 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065744007 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067755403 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.06763322 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066411249 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067715678 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067513158 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067636857 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067799186 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066351846 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.06624706 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068806058 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.068279134 seconds)
  done (took 3.344693379 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066893416 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060382552 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061998954 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.072271314 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061856403 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062469421 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062387721 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.062092385 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062213638 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063684625 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.06256003 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061592274 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.063680818 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.062569013 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061948448 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062502432 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066545476 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081586045 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061719109 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.06226091 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.06643351 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.062148079 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062445623 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062024056 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.062420075 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.061928112 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061410397 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062181957 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.062003113 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.063093745 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061916689 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066155631 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067087411 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061760423 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071955284 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066929516 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062207655 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066398078 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063062572 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.06203149 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061618153 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061680791 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061907868 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061691312 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072522392 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061987003 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063162541 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062647514 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062430468 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061673123 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062242441 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.064011081 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067227562 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063327421 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061655148 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062864386 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061719421 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062424971 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062305481 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061855956 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061998551 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.068253992 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063673013 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062769601 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081922034 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063477362 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072584453 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061858038 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.063080627 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065762666 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062816854 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.080447923 seconds)
  done (took 5.935639547 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.082945509 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.086646293 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.066704325 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.06725853 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062522692 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062661582 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.07091971 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063053763 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06768358 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.082978075 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062752867 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066687866 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067452967 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06671783 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062672476 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067107317 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.070704078 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062700003 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.062750909 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066728094 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063051783 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.070212823 seconds)
  done (took 2.828174787 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136125616 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067315937 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.107711321 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.077315126 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070602061 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.077119064 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067962721 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068565856 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068263463 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068594117 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06935761 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068102652 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070995099 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069018127 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068921425 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068231827 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068132924 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068505522 seconds)
  done (took 2.675789616 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077284492 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066459569 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.088082913 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067562233 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.068219992 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067678298 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.072039684 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072592054 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067772068 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.068089398 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.071939176 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067940401 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067499482 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068179729 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067563406 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.068332177 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067535297 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067844098 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072288827 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.07186193 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071471204 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.072484788 seconds)
  done (took 2.867311766 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077295095 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065225611 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080809082 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068067015 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062863651 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062881188 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.067798235 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067402964 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067825266 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066481261 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067432677 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062341604 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068437579 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066975884 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068549914 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067651082 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066801734 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067331137 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066573002 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062503437 seconds)
  done (took 2.668900485 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086837475 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064310022 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064641864 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084491252 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06512447 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.065242608 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.085154306 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065411056 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065130249 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.087757217 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065057858 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065045649 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.08556382 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.084525143 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065379473 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.084595214 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.084256186 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.085080981 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06544606 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065548958 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.08715885 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.064973084 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.085552789 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065569566 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065069629 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065232857 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06541896 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.084649507 seconds)
  done (took 3.387997596 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.06485901 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063952669 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064471877 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065045966 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.06553479 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.06565905 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065867334 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066394133 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065375726 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066646594 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066133479 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065434799 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065457273 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065307594 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065659049 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065385776 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065980072 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.066281118 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066274696 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065748167 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.06610142 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065712758 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065581212 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066282994 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066133766 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065903858 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066362393 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066108703 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065263148 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065942911 seconds)
  done (took 3.293012078 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073840092 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072095846 seconds)
  done (took 1.470785366 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.063483428 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.078489217 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060429171 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.07427495 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070955897 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068724122 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071653644 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070739884 seconds)
  done (took 1.876833044 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067562762 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091149416 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062699538 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064058874 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.067375298 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.134211194 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.076690538 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075420815 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077981391 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066488804 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.06469821 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076568239 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063790473 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.07761645 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065679463 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072691329 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071555373 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.082062489 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.07706959 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062257365 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076503425 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065023864 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062995947 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064942072 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.064234135 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070684517 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079402653 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076097565 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072692405 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.062042667 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.083012446 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062686023 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.064085715 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072794413 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.068111733 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.063158296 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100849404 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063913201 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068639482 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062815068 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075321284 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083934944 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077492339 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081371462 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.065029305 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.064847113 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062487233 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.065091925 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066864489 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.072620862 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062892586 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070268275 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062086665 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064547544 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073396601 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063090622 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068349306 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072686345 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076568381 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073230875 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071998902 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.079029831 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071993174 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.071235598 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.064104055 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082771913 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064752843 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.07681357 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078217563 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064454309 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07650735 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062439868 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.062311827 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.06246547 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.097207625 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.065027345 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.064890914 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.063570597 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.063155135 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064797038 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072902352 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.069028538 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070681124 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067160507 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079423511 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072249116 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062506229 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069463186 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.081290465 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.066139175 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.063041696 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.07956307 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065950586 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.062224591 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080566944 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072063892 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064227981 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063171807 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065352489 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075844493 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063143047 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.06023232 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070550996 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063888378 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.064831669 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.067268369 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070539246 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.062347997 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.072802965 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.067608518 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063887639 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.061044786 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066288153 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062751533 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060629121 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071455349 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061260837 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075667289 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.06796755 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076756664 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.077125825 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.073291832 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077734309 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.062092426 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060205194 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.080015778 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.070216246 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.198288073 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.080927198 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062569502 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.07350548 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.062587909 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.064991419 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.072927361 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062556237 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065845546 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.063417603 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068825277 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064192781 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064939796 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.06876642 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071930038 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075813368 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064642351 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.072139056 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.063901702 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.079130156 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073671069 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067524044 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067042325 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.064042692 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075343177 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069783079 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072669463 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.063120689 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.064475005 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.066480333 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.074073832 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072907348 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.065043284 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070763148 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.067417484 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.063868341 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063705846 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064267626 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066510591 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.067357782 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.064085829 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071406108 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.072229236 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.077458092 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.07146971 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.072028653 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061837199 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.06235984 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.064658855 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.063432563 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.067396992 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.072490593 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078810831 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.075158451 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084642447 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063246283 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.07276479 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064863811 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.080011636 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.07669252 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064299489 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068460804 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.062049521 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065229864 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.073043967 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074750222 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.076837081 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078330434 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067995734 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067446153 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062500455 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078490145 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.062763632 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071415661 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072713645 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.068203858 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063228717 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.06469558 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.071854067 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.068014155 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.063006465 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.079163458 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.06964749 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062893594 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077230899 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063569178 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.074324315 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.063009666 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066204487 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.068239444 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.06469146 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072259239 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078405934 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.061893029 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063602559 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078837765 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.06503124 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064781531 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.070949882 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.078187791 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067684011 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.071050591 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073833131 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072349183 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067137062 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072506235 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063652856 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072184752 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065907004 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.074273418 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062495806 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080258895 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061419744 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077431985 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062889448 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.073911592 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063653531 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071475042 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062787897 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.078940611 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063945635 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062762186 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073843767 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060388188 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071033069 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061594533 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066967673 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068321661 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.07114803 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.06363981 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071657259 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.205628307 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.073133994 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.069067355 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.072868034 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.073628109 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.0684742 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.062897547 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.071665164 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.075319743 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071806886 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.06490559 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.064719541 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063494718 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.073188857 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064906699 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064694432 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071263887 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.067579977 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068926128 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064410086 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.065042238 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.065041831 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072177656 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073163866 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08104458 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071874117 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070507388 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072523493 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062445963 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079318415 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.0634689 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.070608276 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061930655 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069867637 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.073848557 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.063350715 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083106738 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.06458302 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071066288 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075880616 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072408571 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066833653 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081698741 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066421616 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.071255893 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.070989254 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067348008 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069267482 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.065000145 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071263983 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072543115 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073659205 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064422694 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070404237 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071673334 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064617018 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071361711 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.068153808 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.0718243 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064967164 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.06233157 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067638726 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074794854 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067681552 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068332825 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063611382 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.062313124 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063596975 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070740562 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067679995 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072107406 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079719921 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062220403 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.063787343 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062916825 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066839373 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081591493 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073468716 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071487324 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067803263 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062862507 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.065337324 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.065672944 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.063860912 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.067316693 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062383912 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.063300355 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073751774 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.065127313 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067819016 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063737567 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064321901 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.073237361 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068835751 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.063777602 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069491676 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.06290749 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068023572 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.062966816 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.06486272 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067588214 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062517121 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066567674 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.073832093 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.079964242 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069529417 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.072006191 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063972061 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.071155695 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078207297 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070225752 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064318093 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.072178795 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061740088 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081071459 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071905347 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071386422 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072489617 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063435778 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.079176856 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066258423 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.072303423 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077297248 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063405187 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068397509 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061200209 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077496769 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066613711 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061555175 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069863106 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069663702 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.06743117 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073375551 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.208891907 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070736098 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068344672 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066175142 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.066180174 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.066244696 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072558836 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.080189278 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064373011 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067902338 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071636317 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.072587526 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067717397 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07595071 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.07137351 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064807687 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.065191038 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066496651 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063868128 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075554611 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063751464 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067563703 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.067568968 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.063101731 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069938295 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080339696 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072367967 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073460528 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062740322 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061968054 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.081435635 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066530447 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066678613 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.071487344 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.073168232 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076012136 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072966753 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.080001241 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.064225387 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.069024672 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075509769 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064735797 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063385575 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066886922 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.065220149 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072394241 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073289202 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070356123 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065244034 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.070015171 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.07723277 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.065101878 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.068125729 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068371769 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.064281158 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073813189 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.071097107 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071826968 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.065145718 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062954651 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066081663 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072807425 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070938107 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072250407 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064959573 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.070899305 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.077784108 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.071312906 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066652869 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.06263592 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06716337 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072238929 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.068392994 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.063037871 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067453275 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.06663413 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070785805 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.073227102 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067950481 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062911995 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080669905 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071867823 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072776914 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.068214965 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065447693 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063794087 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062910514 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074719843 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.063195048 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064863217 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067750723 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.065168083 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080982055 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.072078309 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079385133 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064761981 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067681185 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062541438 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072846501 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067799276 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063290749 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073224274 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.06102808 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077955916 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073660539 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068017556 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060978714 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.088520888 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.071148172 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.078252329 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072967808 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070126944 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.065270702 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070994488 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063044875 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.07280146 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062002737 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060234951 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071945802 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069472789 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073258994 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060710971 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071144089 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062623669 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068612375 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068094413 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062247497 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062942067 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.064072643 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071563982 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066455599 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071774529 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.211502468 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.080446288 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.06466652 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07439999 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.072046904 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.075095772 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.077824464 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076106463 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071802734 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.064386897 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071654897 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.070458805 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063470855 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.067276656 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065317721 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083291491 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.064074851 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063941806 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075870166 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068649215 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061900212 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068846589 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066956606 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072443944 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063685198 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072828939 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.066174191 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.063519855 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067262544 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067669973 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061958064 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061964509 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062060961 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071882634 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066345083 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062125255 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081466072 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063282688 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070547416 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073310733 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068236726 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.064077215 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060890361 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063892566 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075371529 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078100898 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066507975 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071964089 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064798575 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070817452 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060518399 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070658006 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069897192 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070011562 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061643104 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061828338 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076809438 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07750454 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.06654438 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070776144 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070864264 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063373656 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083223719 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071082056 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063288099 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.07350658 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064508598 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061341945 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.061071299 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064534009 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.075310274 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.063160096 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.066034376 seconds)
  done (took 43.219747733 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.100340733 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062591368 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062020919 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.06209043 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07432328 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06452687 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063264105 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064284045 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.064230569 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065447389 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.063041073 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063447281 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074017381 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.077136547 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074291462 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.067240078 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063384849 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064100201 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06306258 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06443294 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073541384 seconds)
  done (took 2.872657895 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.068506293 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.077367877 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.073601216 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.078090753 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070328028 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.065902367 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.072713356 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065868709 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.073800803 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071755447 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.073561777 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066122019 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.071160136 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.071200435 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071153855 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066129679 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.075801577 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070419166 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.066283745 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.072969251 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066176983 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.072868768 seconds)
  done (took 2.981409081 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063922782 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062409847 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071784159 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062729928 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062356572 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066591613 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.063242621 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.067265522 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066718466 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.066848954 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071912185 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063524351 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062307069 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068290866 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062479151 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063786161 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.106811822 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.064090681 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063924597 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062636742 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065841782 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.072224255 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.06293808 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062671009 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066768216 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.066331204 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.063055216 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065599011 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063343073 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.067332684 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063683983 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.06287556 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.072021388 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.071380804 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.06728472 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066758066 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064302209 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.064221923 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062647095 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062702411 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.071488846 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.064636817 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.063253919 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.064410164 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.072023227 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.063010882 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.063055225 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.07200522 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062539755 seconds)
  done (took 4.675994595 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072543203 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.114219613 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067630812 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095481002 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.076580826 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.068106303 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068152743 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.097213115 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.064062608 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.065183912 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.077429378 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.077589276 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066650962 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.067471927 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.069374943 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065715704 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065552115 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064162815 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.069246488 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06537728 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.069454564 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.070210221 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.076692208 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.076915461 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065613243 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064101128 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066084432 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.067610509 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.077115954 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.070731008 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.067541432 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.068107165 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.077213354 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.070767963 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065496464 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065747327 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.07787806 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.067360228 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.066131288 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.064409133 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065860904 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067506919 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.070140382 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077736657 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.06675358 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.070871912 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065962186 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.064198145 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.077105634 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.066006367 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.070074014 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.076338096 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065214632 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064636842 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067584411 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074769256 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064227421 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.063358114 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.06432694 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074453457 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062434085 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065407636 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.075449894 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063582963 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067455348 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075409073 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.069311825 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06549056 seconds)
  done (took 6.336472961 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071511423 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096674653 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073184824 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073002326 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073846802 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.072979241 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.073004111 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.072518343 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072777092 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073616267 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073754353 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.114832651 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.06855247 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.077266218 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072431671 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.072229692 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.072108029 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071607591 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071926837 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072527128 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.073059754 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07451774 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073549789 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072612468 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074644225 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068139596 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072091688 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07226478 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072582745 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072193143 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074445783 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071942357 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071971129 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073449687 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074877904 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073737668 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067326271 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07428668 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.074300303 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.074298152 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.070239673 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072847151 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073162293 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068600352 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072184044 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072891218 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07257885 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076561407 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.080760289 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072715774 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072381179 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072715552 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071952016 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.07234568 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072919124 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079345687 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072920464 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072938451 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072632573 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073055243 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072943104 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079486931 seconds)
  done (took 6.053409958 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075556974 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06860664 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.08163166 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.06250627 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063276035 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.073191872 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.063602625 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.063372206 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070530302 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.070990511 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072854696 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.073356126 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.075159592 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072446754 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.07270613 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.075078338 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072716119 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072550963 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070918266 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.073586644 seconds)
  done (took 2.880802898 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076757354 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.081287503 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.068172736 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.072852341 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.069248283 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.073165639 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.06800826 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.0692695 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069873345 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069177119 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.074473812 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.075048603 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070104776 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.073748961 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.074430218 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.072878865 seconds)
  done (took 2.603163793 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.068665424 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.070184595 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.070960955 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.064989536 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.068384638 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.064021901 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.064537704 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062834119 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.06339016 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.078744433 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.064487086 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.076738778 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064686004 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.063523877 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063858618 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.070202572 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063976695 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.063956514 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.064260506 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.069157527 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.071260963 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.065457315 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.06827466 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.064100411 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.069953584 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.071505662 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.065837613 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.068256301 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.064770078 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064696999 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.070369705 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.071447426 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064755371 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.065385536 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06366174 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.064778853 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064351089 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064904502 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.070754089 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064815995 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.063109125 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.069442296 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064280164 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.065722243 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06377671 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.06487361 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063626106 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070046388 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.064426638 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.069919462 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.06468505 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.066562543 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.065257975 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071569894 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.067106182 seconds)
  done (took 5.120839706 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079364976 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067554588 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061632764 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062542245 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06846672 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.069149178 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068992278 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069208971 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069025291 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063049368 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069711055 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068285928 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069155732 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068844627 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069431135 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069437511 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.063010929 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068824635 seconds)
  done (took 2.683644461 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.073498296 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067067859 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.071890182 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.067242864 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.06696508 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066818914 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063022909 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.06353605 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063314315 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068110539 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068366092 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.067859118 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063666584 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.067925515 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068217151 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068145432 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.067626006 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063240132 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067992839 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06297711 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067756586 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063001418 seconds)
  done (took 2.91730375 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089075617 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.088689828 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.12816757 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.08069809 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.090759871 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072774499 seconds)
  done (took 1.999645114 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094855756 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.105155499 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066853924 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067095602 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075425222 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070131787 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069765337 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07008427 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075561484 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074048711 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070352796 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07667273 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077459666 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073177415 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077634714 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079845406 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07116935 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070994969 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068223479 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079934847 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071706082 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076797488 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071345343 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069748958 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070630711 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071602276 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078165241 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073706055 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07006291 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076005207 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078476213 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070257928 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07549795 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07360376 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066817325 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075131284 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069870416 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078340866 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075152873 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071454836 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06691435 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075326386 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075781392 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071898421 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077937129 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070376466 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071390405 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070197129 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070198254 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080016536 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075513156 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071666999 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075373294 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07828778 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078207687 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080264066 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07383976 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071893654 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075454955 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074006517 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071674975 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076187118 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071955832 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073977402 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078303467 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071809593 seconds)
  done (took 6.361910466 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101453395 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067309946 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070401386 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074255331 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072805617 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070542618 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070985481 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070241688 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070433825 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068114913 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105538711 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070143665 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073405467 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074041122 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072254223 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071959938 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070429689 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072924521 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067767098 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.082203546 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071890422 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073528523 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071646212 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072064783 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073789002 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077691426 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070156157 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070198916 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069849564 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070082123 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071712904 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070305234 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071779322 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067319453 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071681671 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069985478 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069886303 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071481484 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069814474 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075631182 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071690538 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078213381 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069792385 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06995982 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073792901 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070015847 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069952758 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066968729 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070181949 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067576099 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075124481 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074406535 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073848028 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071592699 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069991247 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070319942 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069933619 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07035393 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070243912 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077891705 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071657903 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070362878 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080059459 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069791124 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070041739 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071713192 seconds)
  done (took 6.270261695 seconds)
done (took 131.561771722 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.219072967 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.189734677 seconds)
  done (took 1.848509439 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075734182 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.099522733 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.076511638 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139784404 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.073208309 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109074577 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.109497532 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.076869433 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.072882286 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072774762 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072860674 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075151413 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.143671584 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073259354 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.072629405 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.07548763 seconds)
  done (took 2.878993014 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.108322352 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.186289169 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.114642639 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070844596 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.110891813 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077369132 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.070732321 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.081946454 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.07422398 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.083246489 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.078306869 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.07616335 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.073016581 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076177432 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.074573592 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.077594579 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.072964845 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077992567 seconds)
  done (took 3.04820428 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.0985317 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086898817 seconds)
  done (took 1.644528052 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.156470191 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105980439 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145678177 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.330898276 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.130982357 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.127528593 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.130450838 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.125807038 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111067629 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122035715 seconds)
  done (took 2.947636989 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.106753608 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.178281231 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.31554565 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.123147195 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077018415 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.10021132 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124718108 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08342345 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080702538 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.081004596 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080639627 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.078358322 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.10272028 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.076623896 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075619668 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077663348 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.105508053 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074706051 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075618424 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076911683 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106913141 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.072262287 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.077728831 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.076395159 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.081400661 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.081172024 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.074348299 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.073316401 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.077979108 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.07584475 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078710804 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.097747651 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.080171128 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.100594728 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075706631 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.101010578 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.075999055 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074701213 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075684972 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.07589372 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.07918512 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077611899 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.080775987 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.07812779 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.07335822 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.077489211 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.075473623 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.07354402 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.082166783 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.074216394 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.082389147 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.081302783 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.102855738 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.073875797 seconds)
  done (took 6.319208392 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108982872 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106723925 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071695875 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.117202892 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109372182 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072954347 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.108468349 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103457577 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.112354342 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072058533 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071909445 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072601238 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07989339 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.08331234 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.117294646 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108685757 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072078385 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070968317 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.108412187 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.108036989 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069319263 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102895696 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.101829103 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106666055 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069136655 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070269456 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068668201 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069538507 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074872737 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.07587865 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069500201 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076382271 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081823651 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076262971 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069245697 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069061465 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069230018 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076567034 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076878609 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076836919 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075652368 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068719555 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069293789 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069783789 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070299054 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068791384 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075253474 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076555011 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075088495 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069345453 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069981353 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069079894 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069871235 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076303441 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07513034 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.077513138 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076727278 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069502891 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069710412 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.072344447 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078472636 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.07781817 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077362252 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070204352 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077727467 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069437445 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078356047 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.082283047 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069678096 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069984628 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069721393 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069829001 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070260553 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.076925895 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.07567258 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070233386 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.072996976 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069133132 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077654761 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075316077 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069378775 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075008239 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069193501 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069779722 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069651044 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070160855 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074988004 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076367786 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069939195 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069685152 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069587053 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06997273 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069529011 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.07653297 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076948291 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075997462 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075097803 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06955429 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075428347 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07535872 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069998574 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.076055485 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070320937 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068832148 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068300382 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07398748 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.073077535 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075493491 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067821613 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067698381 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073836295 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.214862427 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071035569 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076932708 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078702231 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.077234409 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069861591 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.07909929 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070423042 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078280162 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069922704 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078464712 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069749021 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076627119 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069814164 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069671942 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069741933 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075926594 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070120783 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069385467 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070575708 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069545898 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076452118 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079631025 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070148329 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076449725 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.07662307 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070754819 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076341484 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070003343 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077323711 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069998341 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.301674338 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068517646 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078454316 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069128428 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069511517 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069820961 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077720654 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069397134 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078609945 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075608631 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068582567 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078983906 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078291091 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075496012 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078657029 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070646568 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070066869 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06953452 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069839303 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075423215 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076280698 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070263143 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069802143 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075329669 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.078097693 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069496179 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075158798 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075271123 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075418383 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070062118 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069269787 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078776194 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077805341 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075675758 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.07545438 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076000077 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069560361 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075729654 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07524384 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069346867 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081164223 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069447659 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079434261 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.0763273 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074837481 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076021065 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077275172 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077965723 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.078081838 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080073383 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069367946 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069374296 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075796559 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069300659 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069916607 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.07520153 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070169579 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070164895 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080195041 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070124075 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078041219 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068989627 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076113315 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068656353 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069822807 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080311166 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069849515 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069492273 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.0751651 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069067914 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075124713 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077426285 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.074976509 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068830201 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068837344 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074985112 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074916085 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06832199 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068466866 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068846739 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073222994 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.07368142 seconds)
  done (took 18.759510603 seconds)
done (took 38.925093235 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.210587547 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.169697865 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.19737383 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.117044035 seconds)
  done (took 2.272857537 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.09370029 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.100491786 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.07736957 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.06570679 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.084557275 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.065918008 seconds)
  done (took 2.002859313 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.253096244 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.190515078 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.174598402 seconds)
  done (took 2.127998757 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.219377608 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.200584992 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.509386576 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.313395721 seconds)
  done (took 2.856115486 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.131570773 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.078882523 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.065159303 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.076797037 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.108801277 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.137851705 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.089851633 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111372147 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.076719077 seconds)
  done (took 2.450655465 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.131946448 seconds)
done (took 13.383983296 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.231792669 seconds)
    (2/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.216332025 seconds)
    (3/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.110161084 seconds)
    (4/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.127680399 seconds)
    (5/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.079290415 seconds)
    (6/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.179772699 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.095466385 seconds)
    (8/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.084638312 seconds)
    (9/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.074852449 seconds)
    (10/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.077542064 seconds)
    (11/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.12431715 seconds)
    (12/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.172279803 seconds)
    (13/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.079829853 seconds)
    (14/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.077326768 seconds)
    (15/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.200843144 seconds)
    (16/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.108339436 seconds)
    (17/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.184088656 seconds)
    (18/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.089597712 seconds)
    (19/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.077266002 seconds)
    (20/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.09202398 seconds)
    (21/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.165267799 seconds)
    (22/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.155564529 seconds)
    (23/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.142854395 seconds)
    (24/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.067078024 seconds)
    (25/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.092309715 seconds)
    (26/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.210068666 seconds)
    (27/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075916371 seconds)
    (28/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.188212103 seconds)
    (29/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.091167053 seconds)
    (30/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.070175362 seconds)
    (31/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.075097578 seconds)
    (32/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.092859464 seconds)
    (33/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.168206239 seconds)
    (34/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.075052145 seconds)
    (35/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.157504198 seconds)
    (36/341) benchmarking ("sort", BigInt, false)...
    done (took 0.267885858 seconds)
    (37/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.191522831 seconds)
    (38/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.075293828 seconds)
    (39/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.156219775 seconds)
    (40/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.078248229 seconds)
    (41/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.100294024 seconds)
    (42/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.172800715 seconds)
    (43/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.072844923 seconds)
    (44/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.130825678 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.158431359 seconds)
    (46/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.23809431 seconds)
    (47/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.118404185 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.077315967 seconds)
    (49/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.185570552 seconds)
    (50/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.093265782 seconds)
    (51/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.161010631 seconds)
    (52/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075918604 seconds)
    (53/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.075392098 seconds)
    (54/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.065392599 seconds)
    (55/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.145464847 seconds)
    (56/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.20661229 seconds)
    (57/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.07469349 seconds)
    (58/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.073933401 seconds)
    (59/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.065288503 seconds)
    (60/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.077018656 seconds)
    (61/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.066133487 seconds)
    (62/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.177530201 seconds)
    (63/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.180390588 seconds)
    (64/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066151896 seconds)
    (65/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073110247 seconds)
    (66/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.166853886 seconds)
    (67/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.078738803 seconds)
    (68/341) benchmarking ("sort", Bool, false)...
    done (took 0.146181215 seconds)
    (69/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.175205562 seconds)
    (70/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.204488999 seconds)
    (71/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.151719288 seconds)
    (72/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.125165818 seconds)
    (73/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.131902116 seconds)
    (74/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.06422852 seconds)
    (75/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.175461922 seconds)
    (76/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.074051262 seconds)
    (77/341) benchmarking ("sort", Int64, false)...
    done (took 0.066784065 seconds)
    (78/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.113597633 seconds)
    (79/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.067336143 seconds)
    (80/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.191749125 seconds)
    (81/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.081721928 seconds)
    (82/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.219125553 seconds)
    (83/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.067730494 seconds)
    (84/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075655984 seconds)
    (85/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.0680506 seconds)
    (86/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.078135364 seconds)
    (87/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.218679358 seconds)
    (88/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.124926641 seconds)
    (89/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.200875824 seconds)
    (90/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074764282 seconds)
    (91/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065598101 seconds)
    (92/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.078324591 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.091415581 seconds)
    (94/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.08860001 seconds)
    (95/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.081290618 seconds)
    (96/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.239876601 seconds)
    (97/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.07727232 seconds)
    (98/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.196169497 seconds)
    (99/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071266249 seconds)
    (100/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066661245 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066427564 seconds)
    (102/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078308138 seconds)
    (103/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073768342 seconds)
    (104/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.096944238 seconds)
    (105/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.192923761 seconds)
    (106/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.140548823 seconds)
    (107/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.090248964 seconds)
    (108/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.146820803 seconds)
    (109/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066853172 seconds)
    (110/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.095303345 seconds)
    (111/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.13588524 seconds)
    (112/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.074179204 seconds)
    (113/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.174599838 seconds)
    (114/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.067284045 seconds)
    (115/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.067385289 seconds)
    (116/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.144251284 seconds)
    (117/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068392097 seconds)
    (118/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068793926 seconds)
    (119/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.066385365 seconds)
    (120/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.224045554 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.08548203 seconds)
    (122/341) benchmarking ("sort", Float32, false)...
    done (took 0.138108179 seconds)
    (123/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.065694058 seconds)
    (124/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.06596931 seconds)
    (125/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.079072678 seconds)
    (126/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.07956767 seconds)
    (127/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.076495433 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133580385 seconds)
    (129/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069995672 seconds)
    (130/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.068344869 seconds)
    (131/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073911913 seconds)
    (132/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067351819 seconds)
    (133/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.065488729 seconds)
    (134/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.16157633 seconds)
    (135/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.066867536 seconds)
    (136/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.068335381 seconds)
    (137/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.153952513 seconds)
    (138/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.201214309 seconds)
    (139/341) benchmarking ("sort", Float64, false)...
    done (took 0.137669975 seconds)
    (140/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.198245742 seconds)
    (141/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.179587697 seconds)
    (142/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087542525 seconds)
    (143/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.148594075 seconds)
    (144/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.146782958 seconds)
    (145/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.161522794 seconds)
    (146/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.085460712 seconds)
    (147/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.210087786 seconds)
    (148/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.140298835 seconds)
    (149/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.065647022 seconds)
    (150/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.077046688 seconds)
    (151/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.091296524 seconds)
    (152/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075573345 seconds)
    (153/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.07028554 seconds)
    (154/341) benchmarking ("sort", Int8, false)...
    done (took 0.152492506 seconds)
    (155/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.073476015 seconds)
    (156/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.223105762 seconds)
    (157/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067276793 seconds)
    (158/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.19393787 seconds)
    (159/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.138035236 seconds)
    (160/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069856954 seconds)
    (161/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.081842436 seconds)
    (162/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.065980018 seconds)
    (163/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.158553794 seconds)
    (164/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.066531408 seconds)
    (165/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075502056 seconds)
    (166/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.136818018 seconds)
    (167/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.065211217 seconds)
    (168/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.065368988 seconds)
    (169/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076038095 seconds)
    (170/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074421016 seconds)
    (171/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.083045956 seconds)
    (172/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.230933509 seconds)
    (173/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.067067433 seconds)
    (174/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076771524 seconds)
    (175/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.077496507 seconds)
    (176/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.066714541 seconds)
    (177/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.080243849 seconds)
    (178/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.066480975 seconds)
    (179/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.151703637 seconds)
    (180/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.078152136 seconds)
    (181/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.073921981 seconds)
    (182/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.121444798 seconds)
    (183/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.244183271 seconds)
    (184/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.068661818 seconds)
    (185/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.075970752 seconds)
    (186/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.128695461 seconds)
    (187/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.066750076 seconds)
    (188/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.068243679 seconds)
    (189/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.069284054 seconds)
    (190/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.066930032 seconds)
    (191/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.083382622 seconds)
    (192/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.071972966 seconds)
    (193/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.071620917 seconds)
    (194/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.071685795 seconds)
    (195/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.069561342 seconds)
    (196/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.069192706 seconds)
    (197/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.068624744 seconds)
    (198/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.068224627 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.128688872 seconds)
    (200/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.067503046 seconds)
    (201/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.078090052 seconds)
    (202/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.155790541 seconds)
    (203/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.070009075 seconds)
    (204/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.075912063 seconds)
    (205/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.194692307 seconds)
    (206/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.229011698 seconds)
    (207/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.166896466 seconds)
    (208/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.078573079 seconds)
    (209/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.067211841 seconds)
    (210/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067669932 seconds)
    (211/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.175121707 seconds)
    (212/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.165961192 seconds)
    (213/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.084859944 seconds)
    (214/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.147935015 seconds)
    (215/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.069337085 seconds)
    (216/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.068694037 seconds)
    (217/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.088346671 seconds)
    (218/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.069470255 seconds)
    (219/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.071667026 seconds)
    (220/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.075232903 seconds)
    (221/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.065803091 seconds)
    (222/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071340356 seconds)
    (223/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066374798 seconds)
    (224/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091029999 seconds)
    (225/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.067241463 seconds)
    (226/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.078387513 seconds)
    (227/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.06574942 seconds)
    (228/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066135616 seconds)
    (229/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.226776541 seconds)
    (230/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.078897621 seconds)
    (231/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073699198 seconds)
    (232/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.067493004 seconds)
    (233/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.144037275 seconds)
    (234/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.069069499 seconds)
    (235/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.067644376 seconds)
    (236/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.069301216 seconds)
    (237/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078281022 seconds)
    (238/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076848284 seconds)
    (239/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.067425012 seconds)
    (240/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.141708196 seconds)
    (241/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147237923 seconds)
    (242/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.067182892 seconds)
    (243/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.160258191 seconds)
    (244/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084405389 seconds)
    (245/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.065557218 seconds)
    (246/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.06561706 seconds)
    (247/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066157529 seconds)
    (248/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.067046951 seconds)
    (249/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074895254 seconds)
    (250/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.074284798 seconds)
    (251/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.065734114 seconds)
    (252/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.073657808 seconds)
    (253/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068974494 seconds)
    (254/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.089284636 seconds)
    (255/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.084671024 seconds)
    (256/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.067186281 seconds)
    (257/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.069835271 seconds)
    (258/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.067474433 seconds)
    (259/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.066681917 seconds)
    (260/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.0654014 seconds)
    (261/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.0669329 seconds)
    (262/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071701577 seconds)
    (263/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.066622992 seconds)
    (264/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.067320174 seconds)
    (265/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.067305997 seconds)
    (266/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.074678035 seconds)
    (267/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071080938 seconds)
    (268/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.068464451 seconds)
    (269/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.158975386 seconds)
    (270/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.074007685 seconds)
    (271/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.084021416 seconds)
    (272/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.068504292 seconds)
    (273/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.065132135 seconds)
    (274/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.066615092 seconds)
    (275/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.070035026 seconds)
    (276/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.06863674 seconds)
    (277/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.067227372 seconds)
    (278/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.068064045 seconds)
    (279/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.066782164 seconds)
    (280/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.085826138 seconds)
    (281/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.067714307 seconds)
    (282/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.06797498 seconds)
    (283/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.068324217 seconds)
    (284/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.067211511 seconds)
    (285/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.068827604 seconds)
    (286/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.077491137 seconds)
    (287/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.068064194 seconds)
    (288/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.073713414 seconds)
    (289/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.069232268 seconds)
    (290/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.06642775 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.154659726 seconds)
    (292/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.081529287 seconds)
    (293/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.077158527 seconds)
    (294/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.074269863 seconds)
    (295/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.066771511 seconds)
    (296/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.072898457 seconds)
    (297/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.069888721 seconds)
    (298/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.065279086 seconds)
    (299/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.078189344 seconds)
    (300/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.065372551 seconds)
    (301/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069368415 seconds)
    (302/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.130908106 seconds)
    (303/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.083577316 seconds)
    (304/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.065066344 seconds)
    (305/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.072859908 seconds)
    (306/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.151393581 seconds)
    (307/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.082822495 seconds)
    (308/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.068969087 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.0855236 seconds)
    (310/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.229615709 seconds)
    (311/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.083394578 seconds)
    (312/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.333299234 seconds)
    (313/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.078726628 seconds)
    (314/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.071962562 seconds)
    (315/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.068602736 seconds)
    (316/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.097000113 seconds)
    (317/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.06904151 seconds)
    (318/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.070218004 seconds)
    (319/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.094759205 seconds)
    (320/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.070089454 seconds)
    (321/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.069985495 seconds)
    (322/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.067628315 seconds)
    (323/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.09323419 seconds)
    (324/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.067934479 seconds)
    (325/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.163327343 seconds)
    (326/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.087522449 seconds)
    (327/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070781466 seconds)
    (328/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.065870066 seconds)
    (329/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.079335332 seconds)
    (330/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.069546101 seconds)
    (331/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.067115444 seconds)
    (332/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067902901 seconds)
    (333/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.149444824 seconds)
    (334/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.070571289 seconds)
    (335/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.065974791 seconds)
    (336/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.067639262 seconds)
    (337/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.066807003 seconds)
    (338/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074407859 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.093048875 seconds)
    (340/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.066997055 seconds)
    (341/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.066999685 seconds)
  done (took 36.936526046 seconds)
done (took 38.464849875 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.085167175 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.091533231 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.074654919 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.085953252 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.082304385 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.100791225 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.074572979 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079264776 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.081856105 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.081532724 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.0797142 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073043762 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.076339531 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.076082157 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.073682502 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089580763 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082274902 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075340747 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075167987 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.066116235 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075693714 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.06704079 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.066377453 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073803145 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.07854816 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.073822106 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.075769879 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.076044895 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066865125 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.06696988 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.072300238 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075843272 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066822745 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.07815403 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.074984758 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.075124265 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.076998427 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.080664955 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065895846 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.067439197 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.078291393 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.06698956 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.075921832 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.073243819 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.071713296 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.07433304 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075550434 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078825263 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.09071408 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071929031 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078202801 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.077795351 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.077839019 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072404461 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.072250726 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075413376 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073610822 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.08970077 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075772139 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071746527 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077543089 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.076479766 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074228425 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075546078 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075005006 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078573616 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077841552 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074124361 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.079193829 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.07653722 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068146303 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.076922849 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.072999997 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.066978147 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.078474 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.080802232 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065419309 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071264574 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074860674 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.074819739 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066008951 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071262606 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066052689 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071892357 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073619413 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.07452592 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.073900394 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.076736291 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.068112536 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.07764975 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.076816626 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.076993489 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.0677777 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.081093949 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.068632443 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.075328496 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.067085654 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.067013645 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.066049554 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072696633 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066234627 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.072049166 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.074730859 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064886804 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071314435 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.07990537 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.069465787 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.073882003 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.065372627 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.065946865 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077485651 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.077636559 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066460242 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071412514 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065681185 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072340666 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.066268438 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.066226205 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066108868 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066473774 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071871376 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.067257335 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071710768 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072404061 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078119567 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.066350677 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071685764 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070819551 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.066305626 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.073593642 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066595583 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.066471773 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.065334063 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.078752069 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07065528 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.065925406 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.071796176 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070604644 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073942683 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.064033422 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.074303587 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.072029046 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.07051794 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.220330621 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.066411074 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.078376427 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07246184 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.072522851 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065772161 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066729295 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.065465445 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.068263052 seconds)
done (took 12.953472585 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067662919 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106588045 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.074403693 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.083481993 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.081433539 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.07011124 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.073427461 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.086122552 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.072888827 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089321136 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.098114929 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.090916985 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.095153266 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066278668 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067359813 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068283918 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065270045 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075080612 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081879865 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090185609 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095515433 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066655352 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.069274291 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083164654 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077238437 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083577381 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068419088 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.06786388 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.112574149 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.08656114 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092432626 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066922367 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068204279 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080724945 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081076604 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073945274 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068013351 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071042941 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.068064312 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.06705704 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068847257 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.080958747 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.07129779 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071366213 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068739253 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068256252 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067939867 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070059656 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080137198 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070486351 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.07475811 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.078988227 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068933418 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067439898 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.06553988 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070959852 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067335142 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067890463 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067131616 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067088227 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067638574 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069481346 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.067799419 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067649332 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070449925 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069553 seconds)
  done (took 6.576754624 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.081651243 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.095933339 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.07970591 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.079848709 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066890541 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067993936 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067538984 seconds)
  done (took 2.183873231 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068393722 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.08073142 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.083617421 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.083683636 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.077144424 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.079961252 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067638492 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099351367 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.067149282 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.081776487 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.086167584 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.084946415 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.071223141 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079569322 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.06798924 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.074561391 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067928147 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.078144983 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075555048 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.085824169 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072290523 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.098160437 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.08254234 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068490136 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.086202002 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.071805372 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.066767199 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.06780614 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069953974 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.070501456 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.071179282 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.09380471 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073583021 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.08200386 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067813894 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.068169307 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.073933174 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.071416495 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.073552995 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.079120683 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.072792764 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.069239498 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.069734604 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.071213347 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.072491496 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.073818872 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.072807235 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.071672982 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.07086921 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.082299463 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.069023883 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073949263 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.074788498 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.075112242 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.076199845 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073143635 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.078008238 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.070004222 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.080070782 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.076463428 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068964855 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076107719 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075199213 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.07311887 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074900787 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.070401151 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.071085962 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.072960313 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.069144285 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.069616054 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.069922882 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.0749201 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.067068301 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069986556 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.071688174 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.07462743 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071396315 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.085008971 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.084973975 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.08053215 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069629305 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.069286669 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071521869 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.084728571 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072371711 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069338232 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.071886272 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067230193 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072517269 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.069641519 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.074475117 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.069584703 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.077176497 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070761558 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.072615572 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075404641 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067471523 seconds)
  done (took 8.871789587 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.070421911 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.068721275 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069646796 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068583506 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068472956 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.06905365 seconds)
  done (took 2.094604828 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090218775 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068356312 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.084620662 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068625133 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.106634015 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074685999 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.075039353 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.076220926 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.075175135 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.082333216 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.07494692 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077179548 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074871454 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.072617824 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074348035 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069096368 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.074102626 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071241063 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.0816697 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072838817 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.080569039 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.072591545 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072446797 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.0800795 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.0709534 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.06917089 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068648436 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.081573633 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.081847773 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.075635733 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.071989172 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070881979 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076725403 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.075156688 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074880558 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075929913 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068033127 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073432731 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070548815 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070569268 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.075889221 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072672804 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070513055 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073622431 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.076077013 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076423418 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073847825 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071956719 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.074245624 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073086575 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073411997 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068630871 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.075265876 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073762924 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076450639 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.075829988 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073389483 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.074423237 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.072423755 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076546918 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068644353 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.072427378 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.0762949 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.0726571 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.073857027 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.074477489 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076535086 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072089848 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072341418 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067851532 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073479736 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067762394 seconds)
  done (took 7.015422232 seconds)
done (took 28.372194704 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.549563309 seconds)
  done (took 2.173441417 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.586787259 seconds)
  done (took 2.250374508 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 9.764484786 seconds)
  done (took 11.427296472 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.309624145 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.334829641 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.737440884 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.134197768 seconds)
  done (took 3.222043749 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.750861723 seconds)
  done (took 2.423386888 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.230085748 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.223842326 seconds)
  done (took 2.135430107 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.34746423 seconds)
  done (took 2.015353302 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.145090306 seconds)
  done (took 2.809348244 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.228682851 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160164953 seconds)
  done (took 2.062127693 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.508509636 seconds)
  done (took 2.176965587 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.323783436 seconds)
  done (took 5.99564993 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.237275371 seconds)
  done (took 1.945712212 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.234986263 seconds)
  done (took 1.911060385 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.181187703 seconds)
  done (took 3.849553768 seconds)
done (took 48.066806513 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084938245 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.09006169 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087219765 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082691466 seconds)
  done (took 1.992120572 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075362571 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071731942 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074939142 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.075097661 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072992782 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073914082 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.075736034 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.072125801 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.075255996 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.073762513 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.071705285 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.072962287 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.075603592 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.073303312 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.076465112 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.076806454 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.073034213 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.072149717 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073418153 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071330939 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.074026283 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071289995 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.06944863 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.071221835 seconds)
  done (took 3.430965863 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.080158848 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.0734481 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076351233 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.07294857 seconds)
  done (took 1.978402804 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078003671 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.078378519 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087351874 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091999839 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.078223361 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.07835348 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.085550082 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.086323291 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066732888 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.088715131 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069727692 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.06808175 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068279113 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.087252932 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084571244 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063662355 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064965936 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.07833059 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.078844453 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.08071208 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069820246 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066585423 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078103503 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078116849 seconds)
  done (took 3.532324568 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080600406 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067041122 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079955258 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.09244839 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093862923 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.067068147 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080773191 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.094040925 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128366703 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.067048334 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073157033 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066947297 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105483954 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.067000287 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081571415 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109994501 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112919592 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070250541 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099649936 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066502272 seconds)
  done (took 3.388334065 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.077281455 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070693779 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071799707 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.067173423 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078227501 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.074013391 seconds)
  done (took 2.126673701 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069696447 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.069469752 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067758903 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.067832041 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.073197834 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.068500801 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067339404 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.068823799 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.070867425 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.07042161 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.070289944 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.069299347 seconds)
  done (took 2.513908912 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.157441982 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070567033 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071502725 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067511965 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072450968 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068519286 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082761797 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.070963033 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085491078 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067706452 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067833109 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070645714 seconds)
  done (took 2.636117403 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10181064 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102197559 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.150964776 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119877553 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116025636 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098288834 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121082397 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.09479212 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.16170921 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137937309 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117965604 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123741398 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088064964 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.071012633 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100725298 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102741502 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136460037 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074105776 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115962818 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.196302229 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115702551 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.113098473 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123387774 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117799123 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082331878 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123885556 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095355646 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104031505 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.154102794 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110895067 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121467732 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098719868 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073242393 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072173987 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150980179 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.103001743 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.136902156 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.09378137 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102079601 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089795347 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108836893 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070516109 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087506644 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107944609 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086251811 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118661267 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088822554 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105563398 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082283378 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.13226633 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107300421 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099852304 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088801915 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105297898 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131258515 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096297954 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111911664 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107441074 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082464903 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.117566797 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100017539 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.254672388 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096319119 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082476029 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.165037849 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091281875 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.114213143 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115637578 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.084251206 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091746028 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104413166 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13294728 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108915083 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108635679 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116276132 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125099377 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111513981 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093402078 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.130059221 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094600028 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074049264 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.106685042 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129845077 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087025122 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101461087 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132719018 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094058208 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107248182 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093275928 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119473986 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082004156 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097607125 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070829235 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.099574686 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108674475 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098617425 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114014014 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108125105 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079142592 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125268749 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110276738 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073351241 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118277199 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100042595 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154836472 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097784875 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077342408 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101175697 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094808311 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.14953114 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085914964 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080943938 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099959547 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143314448 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095455535 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.171019825 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097320926 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129502878 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098189217 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088417567 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076455466 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090291939 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102138277 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107880119 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102448501 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088882276 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077658166 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087086621 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095796641 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.252685578 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083973024 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117144977 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.106129467 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.079548129 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093781288 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.079401808 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12729931 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079700096 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110246022 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126770724 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079994571 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106696442 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128365538 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138502645 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.099094877 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108429063 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142919875 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.11711389 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080793515 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.085830881 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109810627 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143801718 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.116413903 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087229628 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077866011 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101156092 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112268829 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098512685 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.137137305 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126887402 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110808041 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098883184 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141925839 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118938575 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091978232 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096126925 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097765038 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.125178218 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106864846 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156712033 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09587853 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119344226 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114837371 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142126183 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115209184 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090956081 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086343328 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09680466 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.10602527 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107017799 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144863202 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097650723 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073483212 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094715068 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133519655 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077938259 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101090962 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091671035 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094860599 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119017494 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084507016 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082055134 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068841878 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102737063 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135035268 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070520901 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11146315 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.275743851 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105436168 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.106902719 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071216987 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101788177 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145991706 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10716977 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142729497 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11815474 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102888543 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120966716 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.100487107 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106338392 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080834165 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.129641252 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.13509261 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097951268 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091708885 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13728637 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118912943 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.136222302 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097720942 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11644583 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.106757926 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101027993 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105341798 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102237932 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145664038 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122009059 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.126081405 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115624 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107480233 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109062564 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138280979 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084232978 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118042998 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076893632 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113417717 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.079069162 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108973466 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080476151 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112190288 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080633724 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101122914 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.071078916 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075834069 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142682832 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113474781 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090205442 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087619719 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137619743 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131789417 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.082043951 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102967367 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.134068219 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102084152 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101730469 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108725542 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085499783 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095152938 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.300601253 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081180023 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083915146 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.101086669 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096775016 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109191587 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086059151 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076024633 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13857701 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106323063 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097687308 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108191911 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09658812 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.123026101 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090949291 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088796216 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106870412 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105537396 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142171943 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.09111075 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.099212389 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.118919538 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081781823 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093732315 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070854789 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085988859 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.076990665 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.111352057 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077456037 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110154261 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070280547 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131727901 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088216002 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093822946 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103972697 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099183858 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129173088 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093225757 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12968476 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092175197 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102991753 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109703903 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095797523 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110955807 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104845586 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09672944 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110428855 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097642703 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106902207 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1114608 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095896887 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142336163 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091011307 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122177198 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107034845 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107539281 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105397002 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117980608 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13836418 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114071802 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142284769 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076942405 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084579272 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106614145 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101258204 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146352276 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102695214 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072831058 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115936425 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091110656 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095754022 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.265869163 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084982007 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145924513 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089236763 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.08953916 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11539816 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091968906 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099664013 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077871814 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097398133 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.103006874 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095922089 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096243604 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133816431 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118732175 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115632604 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.134257504 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100769042 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.09486643 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.121199565 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112080977 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11293852 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087452781 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088243138 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125478975 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102399276 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129946284 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101784109 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096103447 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101558072 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09199318 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101771102 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098088185 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.111100987 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082124777 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077873743 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.06948491 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073537919 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119219033 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110090841 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102832046 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099483616 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073487665 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105224241 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099438868 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073184691 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08922144 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095729853 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.127404753 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.085274945 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094062555 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115560146 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092165359 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104512605 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130517771 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130423944 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101797801 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090972135 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145563766 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129652814 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089757133 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094905491 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073065616 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080233744 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10300259 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146948502 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118491984 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077983323 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084165791 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.077591469 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.249123764 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.074048842 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.08992859 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091927893 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106360349 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119533547 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113848236 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105738994 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077391628 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104781986 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099087471 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093359335 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097848366 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10361436 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107098559 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.125350724 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102355057 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098564138 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078070139 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.082285976 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077274897 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081325877 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105283715 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.081813094 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080839152 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135178958 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.095831495 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108803036 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110610565 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085997756 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077002307 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134821209 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070469084 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135659393 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.073704403 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083430444 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082533566 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080298069 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095657064 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106562946 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096163635 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115084539 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107043179 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105980271 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112092357 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156826544 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072732288 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.151557421 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077648787 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076925574 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07773347 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113611578 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091431822 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105298965 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142823506 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0911964 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094078544 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079006636 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130363958 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099303461 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105822165 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084308008 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079935552 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129651649 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081060552 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072271968 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087951844 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.113472054 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073869823 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133868702 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114223547 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080340649 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.276626436 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.633877631 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093440672 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.079607143 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093864231 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.153307194 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132411315 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08948518 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110601692 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.121733448 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091363609 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114720958 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111065525 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.186321805 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07583946 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097160046 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105588669 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09996885 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094342723 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.09388507 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088749975 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093669326 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.08735258 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081012009 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109480304 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08939631 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0930443 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123956941 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08463786 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081923666 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131829745 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.106021291 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083301163 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090751659 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102329619 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089528424 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093421563 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070993981 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144392069 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122139783 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10368116 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092289087 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109168283 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119482546 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090145667 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113820613 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089989578 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110970456 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086396523 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079843302 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104477178 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.080232656 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079568956 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118890512 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085796162 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.09720163 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10606591 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096783903 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1158716 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120164621 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114452996 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099080813 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080271777 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087590174 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.088689077 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076641882 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079240407 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075135978 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077300839 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107565577 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.249243504 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114598996 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115572598 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0837476 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10550044 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.102965544 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.111234364 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08522981 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103280904 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111196613 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092358683 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104938432 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102287024 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129463678 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147241829 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101747998 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125605751 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134916723 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.07837922 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.077634245 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070204096 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.146827434 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081421415 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082265195 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111308107 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134424842 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.08349274 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096570352 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.233625828 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082682402 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083261856 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09816474 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071414805 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085172944 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110183492 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08610355 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082153941 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10000298 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113741238 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119993626 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114684387 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09429704 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085016419 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08239523 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095267388 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.106218198 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.130452349 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091323499 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076920195 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107751699 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105799707 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12508309 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074434244 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082681792 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130834888 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094061728 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104642277 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081590307 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121920054 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133266622 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091625839 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13552812 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072150809 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084539555 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090561276 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.127389287 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075837793 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09003132 seconds)
  done (took 66.574882401 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.151199787 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.145347332 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.08392596 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.099702359 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.189412886 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198807866 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.121071817 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097238554 seconds)
  done (took 2.956671677 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 0.069500646 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084744422 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 0.102353196 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.084523648 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 0.067847544 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 0.069144438 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.207131293 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.083398196 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.067994363 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.108533248 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.077325549 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.069902843 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.363436932 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.067527784 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.06816596 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.075645544 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 0.068491342 seconds)
  done (took 3.559656102 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.369190401 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.627408848 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.327564055 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.076111027 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.807055819 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.090485848 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.141734137 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138114788 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.08418816 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.532764495 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.3756842 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.131650083 seconds)
  done (took 18.539676863 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.077366354 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.076738813 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.079744622 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.079678574 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.076055628 seconds)
  done (took 2.220144759 seconds)
done (took 117.144161903 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085123444 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.173804844 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.068856201 seconds)
  done (took 2.108285208 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083867219 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082590069 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.083105497 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.080041664 seconds)
  done (took 2.16852468 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076221831 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077846458 seconds)
  done (took 1.986428172 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.226001035 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.177246809 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091706713 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.08378226 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081070021 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.082013997 seconds)
  done (took 2.089513422 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073922782 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073161031 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073134054 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.074070203 seconds)
  done (took 2.124220429 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.071793605 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067765207 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070138554 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.07248238 seconds)
  done (took 2.114366856 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087003062 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.08484723 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.11361111 seconds)
  done (took 2.117506377 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084619898 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.085300365 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079500697 seconds)
  done (took 2.085767941 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110794488 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098526193 seconds)
  done (took 2.040761476 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.08213954 seconds)
  done (took 1.918553609 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091704278 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.100688002 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.143726477 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108914147 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.143806377 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.128219361 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.07870352 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079920504 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.074890966 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074272733 seconds)
  done (took 2.856944051 seconds)
done (took 26.016027821 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.08056684 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.375590469 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.36213967 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088813272 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.675017011 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.358044756 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.006044176 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092043271 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.10057104 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069491641 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086524674 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650862756 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.000542499 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.332394108 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.984318939 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.325613616 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.653401714 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070155781 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069211476 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069507503 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.991321896 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069069857 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069751799 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.07015246 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652321142 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375486344 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070019617 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.32611882 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069491284 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072430594 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.35850143 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071788773 seconds)
  done (took 16.45635798 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071782679 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.125113293 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073775693 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086157456 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071954012 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071163263 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072587915 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070618875 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112416368 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069642823 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086744539 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069595765 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073440037 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070877534 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089533428 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070126615 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071610121 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071468249 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070027243 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07138376 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.0892373 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071016166 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070651304 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071550679 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.07046014 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083626636 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071769442 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070638021 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071018157 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072863681 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073749009 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071728671 seconds)
  done (took 4.310523493 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.123425351 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128504994 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074886983 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.111090917 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.120513465 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071467046 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152818696 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092991796 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115874957 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069703577 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087582242 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069528832 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104819683 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070818206 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089988472 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069668412 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071919986 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071121841 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069893584 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071046433 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089234089 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070332982 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071219604 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071177441 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071214295 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085528044 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071250599 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070085972 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070706787 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072570475 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074668356 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071627385 seconds)
  done (took 4.58187629 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071221541 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073305246 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081631217 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.08265639 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068263857 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070140308 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072084131 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068573662 seconds)
  done (took 2.444310998 seconds)
done (took 29.640053148 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080843314 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069835607 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073360616 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089121437 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075428241 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071590812 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066890297 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076817647 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073071296 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.07265565 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.0747583 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.06834292 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071745996 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066230369 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073625527 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067360493 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.074184915 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071940848 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072619838 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.074242021 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.072900854 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073659682 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076257696 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072609482 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072995829 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072480487 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076938477 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074424435 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068135298 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070776944 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.069946034 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081978171 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074260986 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074658839 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068029345 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068055694 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072382827 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070774791 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074600561 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.077402794 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070755919 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076901309 seconds)
  done (took 4.897392358 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089225094 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095186967 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087185909 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.084143398 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.106906457 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.08433501 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.092155147 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.081061134 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079646194 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.090803492 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075090015 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080722569 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.081502294 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.073820977 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.08016848 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.076164484 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081068397 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.075120088 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079446904 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079692991 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091102433 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073754328 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080918906 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.080923443 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075416244 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081204636 seconds)
  done (took 4.021702806 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074695376 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090061046 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094002068 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.143249278 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.112068502 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084131759 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083860772 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.103096963 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.10269233 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069741398 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073574773 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096385756 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098215499 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076658053 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107813617 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087895042 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082101534 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071057789 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076261347 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103676591 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.09218345 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087931424 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102038915 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089283965 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068578233 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078464805 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075844904 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.08456481 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077245537 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082174056 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073325609 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072719662 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070005501 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081384637 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073665208 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067022294 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091451475 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081784477 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084548012 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107577933 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079345225 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070924208 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099229468 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.13406016 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.06847876 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.071718777 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.073233097 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081426241 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070615781 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099007271 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087394802 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068760252 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087721101 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070569194 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070832251 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085482114 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070569096 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070874155 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081559887 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075926674 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.089595887 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074784851 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090396894 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069123038 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.08118412 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070556658 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071184165 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067654608 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.104769366 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.07655189 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121670559 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070042226 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067315433 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081490963 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080191787 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075820094 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069185821 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088171204 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081137922 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072622451 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080818153 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072230446 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072322523 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104693875 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068527123 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067226894 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067285532 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.07133784 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.07224865 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069407438 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082134599 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068474939 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072149235 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084460884 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068928356 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069910335 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071501595 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.07014969 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068370136 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079832566 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.07330789 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070685765 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081341237 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070411388 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072922593 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.084190544 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078966566 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068786094 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070756099 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071434756 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.074250754 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073328955 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073205865 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071359262 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076489307 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076523009 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.07486925 seconds)
  done (took 11.3065158 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.163278825 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.154196031 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070408863 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149830871 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.078168002 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073706436 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.148992668 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.088827089 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.070035025 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071215519 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068905625 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.098025984 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.093333727 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.10449939 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.07466234 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070867657 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095197873 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.103650746 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.151108577 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.146393302 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.09296892 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077235239 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.072031851 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071132181 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071821646 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078651645 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086715861 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078228113 seconds)
  done (took 4.611634822 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077898464 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.112604005 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074254027 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094280737 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.089363331 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070348197 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071524172 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071293868 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086940444 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.077554161 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070026216 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074304649 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073647922 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.072202571 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070595517 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076304155 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076036791 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069249535 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073446045 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074388285 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.079934911 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.096103926 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.073629614 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070040593 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072338866 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069632739 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076770357 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.080020252 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069334786 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099671597 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067381253 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074460131 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083581037 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.07113532 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069631185 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070520432 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069974475 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.069608754 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070113066 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.067947715 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067904673 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.0748142 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068552227 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.07598875 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083898235 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077056856 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.070746879 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072278281 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072263671 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066395783 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073363276 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073000886 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072690901 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077770548 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073417121 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072169824 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071067612 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098678805 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.07572744 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069400899 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069134753 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.06805322 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071536717 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.078177242 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086247103 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071867947 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068106978 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069764782 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074618813 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084061195 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.068942897 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075093813 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.066658264 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069826682 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.07184407 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072987365 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070814643 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068365022 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.06965476 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.069608986 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070525281 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069344678 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069166185 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072152688 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067652051 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068141975 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070081566 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070603867 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.07678856 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068799864 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.07235296 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070801296 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068530548 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072493213 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074933037 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072928244 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089345192 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078937827 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070044693 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067688615 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084362964 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071673986 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068919111 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075562617 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074176464 seconds)
  done (took 9.705810721 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.09223757 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071107211 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089868796 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.09703722 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.080187053 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075568184 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.083940649 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070889758 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086522792 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.068942585 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079385698 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068540005 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083306976 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078792948 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071670201 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079857549 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.072219863 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090763963 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084231466 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.071293071 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.07856169 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082167574 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082098881 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087753702 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.08749241 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088370533 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.082139022 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072165508 seconds)
  done (took 4.173307969 seconds)
done (took 40.561408624 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.942938164 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.104073516 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.93318355 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.127644729 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.21788665 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.047381537 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.052935613 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.928081959 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.202725153 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.957199503 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.237642697 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.336041079 seconds)
done (took 69.009104947 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.020828094 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.078794551 seconds)
    (2/2) benchmarking "String"...
    done (took 2.156045582 seconds)
  done (took 6.102966048 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.528908709 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.929998926 seconds)
    (3/3) benchmarking "different"...
    done (took 1.981214924 seconds)
  done (took 8.307095142 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.09034881 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.943177689 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.192881398 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.930070546 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.935757899 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.340718025 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.738288651 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.393782317 seconds)
  done (took 32.344418718 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.036082284 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.130195629 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.630914564 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.657576548 seconds)
  done (took 16.364358185 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.540386618 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.192197474 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.192051495 seconds)
    (4/4) benchmarking "different"...
    done (took 2.186208735 seconds)
  done (took 11.031869081 seconds)
done (took 86.219367015 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.968747159 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.931675811 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.97914648 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.962640978 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.935839961 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.93226143 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.934760309 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.921776604 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.990869714 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.98863598 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.935151468 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.940479846 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.934706163 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.933853628 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.613720774 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.985102159 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.956147633 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.942415499 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.934733318 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.969708223 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.938563751 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.091514901 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.438996205 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.131358186 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.557299522 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.375943417 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.973070445 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.377598777 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.940479008 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.932284087 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.992061114 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.326907288 seconds)
  done (took 209.638732826 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.931238553 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.98493656 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.007614359 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.945966669 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.563135643 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.126950462 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.05301417 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.597423476 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.934449557 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.9388933 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.070012325 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.933944531 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.0817615 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.897274546 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.929281743 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.937967788 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.106003984 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.089280014 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.931485267 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.112836734 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.940789553 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.915607399 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.873427078 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.049730999 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.974336992 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.030965039 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.947631839 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.967282092 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.118161716 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.09261111 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.952917132 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.937979162 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.107446956 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.797623601 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.945507769 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.966430755 seconds)
  done (took 175.663214775 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.109159152 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.943390274 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.933874552 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.991225536 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.072531468 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.939644019 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.612647661 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.945825528 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.0327518 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.941357108 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.934350675 seconds)
    (11/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.934194626 seconds)
    (12/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.935778545 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.947426118 seconds)
    (14/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.027185331 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.938293983 seconds)
    (16/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.950384278 seconds)
    (17/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.935806614 seconds)
    (18/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.959570755 seconds)
    (19/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.938499311 seconds)
    (20/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.934581344 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.934689616 seconds)
    (22/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.934471325 seconds)
    (23/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.93555489 seconds)
    (24/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.935526492 seconds)
    (25/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.935024653 seconds)
    (26/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.93487099 seconds)
    (27/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.200844992 seconds)
    (28/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.18277532 seconds)
    (29/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.937402075 seconds)
    (30/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.936375263 seconds)
    (31/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.51316311 seconds)
    (32/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.94961286 seconds)
    (33/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.474088107 seconds)
    (34/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.941871729 seconds)
    (35/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.025674519 seconds)
    (36/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.994193625 seconds)
    (37/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.034902056 seconds)
    (38/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.940029981 seconds)
    (39/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.153598663 seconds)
    (40/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.016995355 seconds)
    (41/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.936390935 seconds)
    (42/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.936312218 seconds)
    (43/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.997989562 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.950520973 seconds)
    (45/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.937254545 seconds)
    (46/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.93660048 seconds)
    (47/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.938559858 seconds)
    (48/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.944708183 seconds)
    (49/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.000075679 seconds)
    (50/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.181813304 seconds)
    (51/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.942648674 seconds)
    (52/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.071688639 seconds)
    (53/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.425075428 seconds)
    (54/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.94035884 seconds)
    (55/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.938121783 seconds)
    (56/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.937020368 seconds)
    (57/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.936844235 seconds)
    (58/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.937005857 seconds)
    (59/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.935452156 seconds)
    (60/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.526549141 seconds)
    (61/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.942073501 seconds)
    (62/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.937114759 seconds)
    (63/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.937253595 seconds)
    (64/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.944902199 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.944574544 seconds)
    (66/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.938399633 seconds)
    (67/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.937914204 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.323751321 seconds)
    (69/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.008595703 seconds)
    (70/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.13220106 seconds)
    (71/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.220054721 seconds)
    (72/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.938445689 seconds)
    (73/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.543976321 seconds)
    (74/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.138922765 seconds)
    (75/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.937654501 seconds)
    (76/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.938630789 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.938768423 seconds)
    (78/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.939667866 seconds)
    (79/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.938144945 seconds)
    (80/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.942853303 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.075310154 seconds)
    (82/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.949922267 seconds)
    (83/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.037076102 seconds)
    (84/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.022780056 seconds)
    (85/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.933355999 seconds)
    (86/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.075468397 seconds)
    (87/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.943069078 seconds)
    (88/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.95016926 seconds)
    (89/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.741607964 seconds)
    (90/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.011270117 seconds)
    (91/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.977193037 seconds)
    (92/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.75166215 seconds)
    (93/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.943026196 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.314565834 seconds)
    (95/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.698246791 seconds)
    (96/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.944481382 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.939571808 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.9526513 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.944081766 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.939425327 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.94046759 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.018174375 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.939824131 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.077237537 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.665724464 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.182800724 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.939431527 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.939637372 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.948016262 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.019139024 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.076723703 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.94524505 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.003849034 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.948767602 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.942172057 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.027253612 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.940741101 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.940723713 seconds)
  done (took 427.168186663 seconds)
done (took 816.484426417 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.595419947 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 2.616874906 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.696514999 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 2.571077739 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 2.543259261 seconds)
  done (took 14.903208659 seconds)
done (took 16.776489665 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.971319214 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.957694298 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.946595191 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.995897314 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.966072531 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.955020069 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.987622727 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.986354173 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.971915018 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.951678431 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.990175667 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.957808015 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.97112151 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.975182765 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.01679181 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.97952893 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.957096324 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.949848662 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.001233099 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.959505649 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.958188957 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.956672519 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.955064945 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.991658226 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.024653601 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.964170482 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.945735899 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.982512909 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.963596606 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.990032434 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.010873384 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.975759197 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.988886668 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.020373542 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.001346233 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.024577097 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.964924764 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.011989425 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.962271556 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.027848164 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.01610154 seconds)
  done (took 83.06468291 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.954401191 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.088361104 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.168943938 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.984052136 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.95386597 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.167588132 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.009821399 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.083883039 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.086848624 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.17013623 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.17508434 seconds)
  done (took 24.730866887 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.952644257 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.097806146 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.173841211 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.987446594 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.976948826 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.168643348 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.014790366 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.083392932 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.08775687 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.178753389 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.179934106 seconds)
  done (took 24.791860451 seconds)
done (took 134.461912402 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.31721198 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.973689824 seconds)
  done (took 6.175434599 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.968867511 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.103092657 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.947391006 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.948730028 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.950041465 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.948374753 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.948504529 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.948609294 seconds)
  done (took 17.649710622 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.947101513 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.946686024 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.947583481 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.947330104 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.947885583 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.946599004 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.94697851 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.947614869 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.947143588 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.947702479 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.946246874 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.94766953 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.948042995 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.947915118 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.946677788 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.948347357 seconds)
  done (took 33.04385362 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.950145961 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 1.94713373 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 1.947615115 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 1.940097579 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.948509637 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.949589944 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 1.949041183 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 1.948133414 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 1.948405758 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 1.949012142 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 1.947975015 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 1.95045569 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 1.938184458 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 1.939317462 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.94663651 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 1.949756785 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.947579225 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 1.949712692 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 1.953972431 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 1.948797826 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 1.952226702 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 1.948602396 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 1.947758568 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 1.948434959 seconds)
  done (took 48.632089218 seconds)
done (took 107.385290609 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.118442751 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.650854036 seconds)
  done (took 8.653319299 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.952716438 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.949312449 seconds)
  done (took 5.850071898 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.949746864 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.949134772 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.94983493 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.949468312 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.950916639 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.950790918 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.950871302 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.950868294 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.951215465 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.950154427 seconds)
  done (took 21.387436334 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.951284914 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.950188315 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.950808618 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.951556889 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.950423323 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.952739531 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.951876243 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.951926132 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.951286175 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.951391858 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.95142694 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.951124987 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.951109726 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.950366131 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.952111344 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.951912342 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.950996541 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.951274004 seconds)
  done (took 37.014810295 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.952399084 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.951561995 seconds)
  done (took 5.794006648 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.9519858 seconds)
    (2/7) benchmarking "second"...
    done (took 1.951234487 seconds)
    (3/7) benchmarking "month"...
    done (took 1.951364179 seconds)
    (4/7) benchmarking "year"...
    done (took 1.951327656 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.951104968 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.952704265 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.954756469 seconds)
  done (took 15.555400819 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.951420343 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.10134144 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.155538183 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.5800012 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.953391529 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.9542836 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.800448173 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.954648573 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.956547632 seconds)
  done (took 21.296667669 seconds)
done (took 117.431991774 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.79375926 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.960903682 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.21955435 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.027575149 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.028158056 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.248421394 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.996720757 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.545680702 seconds)
done (took 43.704929662 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.021824357 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.953209378 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.9864474 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.984101862 seconds)
  done (took 22.812604525 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.952748968 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.273962563 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.976372437 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.843014953 seconds)
  done (took 22.951539431 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.333802672 seconds)
    (2/2) benchmarking "read"...
    done (took 2.300121351 seconds)
  done (took 6.529844925 seconds)
done (took 61.200257119 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.954505192 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.952978063 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.952192715 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.953117589 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.953553039 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.954464429 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.953738951 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.95279779 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.954227309 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.954194422 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.954751325 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.954028568 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.954127441 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.953160141 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.953064388 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.953116385 seconds)
    (17/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.954389761 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.954101559 seconds)
    (19/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.954709944 seconds)
    (20/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.954534071 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.955349138 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.955035106 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.953980397 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.953775107 seconds)
  done (took 48.786356436 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.955319422 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.954016647 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.955391305 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.954851142 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.952630538 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.954421124 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.955210682 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.95462199 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.951073954 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.954832503 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.955765967 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.955651599 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.955062173 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.955040239 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.955561009 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.95652647 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.955452993 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.953553019 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.955014699 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.955763568 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.955395667 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.955330311 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.957155258 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.954588815 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.956282055 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.956695084 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.956148448 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.955607004 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.956268522 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.957356772 seconds)
  done (took 60.551370297 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.956385568 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.95657167 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.955844402 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.957777456 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.956843944 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.956260117 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.956417898 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.955536034 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.955345473 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.956335785 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.956674344 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.957046919 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.956560103 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.956736972 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.956808405 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.956469689 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.956960484 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.956761173 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.956760646 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.956461835 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.956178568 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.958370409 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.952490375 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.956545624 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.953165942 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.956618253 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.957826591 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.958009467 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.957655501 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.95740938 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.957542473 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.958576112 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.958483335 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.957954626 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.958509175 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.957616482 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.95894723 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.959217959 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.959407287 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.957159014 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.957753225 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.959078724 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.958389248 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.958927717 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.959539776 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.959006014 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.959769158 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.959290542 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.959246111 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.959630589 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.958724977 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.959002777 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.960037588 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.958372162 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.959061485 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.959008021 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.960218651 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.959961216 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.959956129 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.959525624 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.9600013 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.960516246 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.958622406 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.961110579 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.95791408 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.959828807 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.960242422 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.960771019 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.960209971 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.960377555 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.960466843 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.9604296 seconds)
  done (took 142.880348195 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.958149709 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.961389847 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.959338778 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.959988099 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.96216102 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.960541165 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.961889621 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.962037927 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.960540625 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.962150172 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.96006531 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.958750685 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.961178157 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.961914103 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.961234559 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.960577708 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.960852133 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.962479354 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.961721845 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.960906844 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.962070363 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.961561416 seconds)
  done (took 45.041393043 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.961946661 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.961111335 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.960771018 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.962133854 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.961744334 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.961219487 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.961854141 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.962083015 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.963200509 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.963264598 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.962162509 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.961501162 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.962636723 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.961399114 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.963014702 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.962095392 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.961221142 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.963846501 seconds)
  done (took 37.21497281 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.962938137 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.962926664 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.961999052 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.961910292 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.963635372 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.961655461 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.963435927 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.963085934 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.962094511 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.963825991 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.963646581 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.96189585 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.963749626 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.963423395 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.963469145 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.963133869 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.96374679 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.964003214 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.964102299 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.963464934 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.96344371 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.964050698 seconds)
  done (took 45.088600679 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.963705871 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.965202767 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.96353063 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.964882862 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.964976845 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.96425555 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.964190753 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.958072319 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.957937334 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.964572616 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.964747407 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.96440981 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.964654935 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.964457526 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.964876798 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.965707615 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.964572241 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.963870457 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.965329766 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.964955045 seconds)
  done (took 41.178280455 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.965885121 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.965737455 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.966413829 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.966175265 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.965819186 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.966618361 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.966193782 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.966397143 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.966941562 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.967250435 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.966105159 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.967022967 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.967385129 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.966413351 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.967139452 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.967369862 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.966330143 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.967432465 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.966798783 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.966239431 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.967420716 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.967757898 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.967176895 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.966972287 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.967662048 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.967622877 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.966763993 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.968164085 seconds)
  done (took 56.972169594 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.965184111 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.967211052 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.966271249 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.966270906 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.965288342 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.966019564 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.966557881 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.966460826 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.966097615 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.966180942 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.96695575 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.966105131 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.96693395 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.966089351 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.966963979 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.967322162 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.967283006 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.967387593 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.967072883 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.967744597 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.967671473 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.967435794 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.967792512 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.967112019 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.967747154 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.968102267 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.967638783 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.96837307 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.967653545 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.967456903 seconds)
  done (took 60.911914696 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.985500411 seconds)
    (2/2) benchmarking "in"...
    done (took 1.98794217 seconds)
  done (took 5.877303878 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.968133235 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.967580384 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.968633515 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.967773694 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.967836287 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.969387409 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.96924042 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.968844079 seconds)
  done (took 17.652897612 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.968052826 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.972217344 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.969251512 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.969306814 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.970567986 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.977339133 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.970272492 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.971104674 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.972108779 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.970781871 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.974296278 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.974327586 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.978598204 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.975307172 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.969260629 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.971445416 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.972209813 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.972482979 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.973399594 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.970596917 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.974469491 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.970255671 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.969647981 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.970397562 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.970775464 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.974310008 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.984420886 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.972361316 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.972339246 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.969893277 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.977421283 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.970984557 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.971310638 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.975084951 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.972184458 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.966708121 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.977779552 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.971505259 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.9718942 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.971128403 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.971402116 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.974557669 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.974750069 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.979878813 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.972389397 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.971116056 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.970696953 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.972926051 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.971634827 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.975478422 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.980831271 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.971648082 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.972042595 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.972280209 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.974913974 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.973034718 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.973591307 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.975288858 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.980185993 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.980626134 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.973611763 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.994488636 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.982180807 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.973429487 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.973491051 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.984479175 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.999622062 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.975157633 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.975479362 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.972906706 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.981166069 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.972848143 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.973210238 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.973132493 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.986928119 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.982835976 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.9750383 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.974768801 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.973092853 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.974471474 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.975264157 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.975041306 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.974753397 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.974377526 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.983797619 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.001019156 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.974954192 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.974115755 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.973699346 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.976505411 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.979128169 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.977798373 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.974470254 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.973921863 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.976143956 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.978615318 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.975273897 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.975607311 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.974979833 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.985767248 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.974242033 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.974798064 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.978861052 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.985213617 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.974649394 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.975618915 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.976628556 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.977098847 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.983036467 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.976288992 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.976705267 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.973970773 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.976863303 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.979769162 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.975335353 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.979776706 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.984932534 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.984044932 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.976725932 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.979729307 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.980153044 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.978835201 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.987083061 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.003268636 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.976169625 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.9800307 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.982391901 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.990012629 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.981326882 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.97564605 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.979465744 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.976675626 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.976844999 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.979204414 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.955103226 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.96414861 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.965682233 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.977968886 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.977620962 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.978213486 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.980759547 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.979891393 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.980078112 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.978967871 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.981835286 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.977495467 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.980141642 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.986306721 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.976977885 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.978986426 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.978051564 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.981353067 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.980786861 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.979867885 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.977946742 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.97804416 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.978851044 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.978852173 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.981243185 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.979672419 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.978529541 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.979879511 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.982615698 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.978669717 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.979515124 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.979053761 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.979283079 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.978834982 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.980885312 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.980918408 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.982463973 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.979893768 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.984358106 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.978977217 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.979845524 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.980230393 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.977512765 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.970652785 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.984167052 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.991335368 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.984265829 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.99028515 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.980257464 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.986573437 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.979226662 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.98175003 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.980995694 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.970413063 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.980601033 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.979272304 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.980020497 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.985325209 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.003644678 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.991147732 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.983247842 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.982521001 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.98776909 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.984263032 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.986880999 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.981424481 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.981274807 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.983313692 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.981323963 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.980191776 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.98074623 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.983211589 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.981632822 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.980623559 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.98528883 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.981097509 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.966499314 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.982991421 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.981775786 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.982832934 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.980674137 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.981782057 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.982242132 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.981608459 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.989814133 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.98523959 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.981488467 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.982279204 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.984479204 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.98218099 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.983210789 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.984464242 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.986814805 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.982686426 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.981967141 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.990297754 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.983110607 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.983614642 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.983242086 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.981974273 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.985644651 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.982868992 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.986970494 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.991481026 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.985979535 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.983172474 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.988276223 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.981358975 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.985819856 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.984192159 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.973686749 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.963583796 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.984571988 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.984453783 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.983716043 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.99584537 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.98363282 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.984076688 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.983843569 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.985740041 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.984897807 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.987041953 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.985176919 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.988061238 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.993039368 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.991670667 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.984844019 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.988112752 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.986872603 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.985214151 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.98824388 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.986699336 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.999815594 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.994883645 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.984371075 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.984768942 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.985363704 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.987567732 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.98394588 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.985241891 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.9932322 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.985732571 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.986237901 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.990830186 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.985905496 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.975577529 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.982993179 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.983399187 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.98844377 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.988633328 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.988033246 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.985999225 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.984011505 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.988098633 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.986384938 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.987773312 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.990470372 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.985668738 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.987072708 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.985516343 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.995679502 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.985816322 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.987884553 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.99504098 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.987378381 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.982406132 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.979069942 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.977135377 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.98786225 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.989148078 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.986859077 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.988011834 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.986842271 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.99072144 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.99892778 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.991853205 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.995696027 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.988670409 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.987524367 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.977334845 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.985647731 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.987514676 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.990678236 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.995124913 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.986742075 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.986714973 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.960514977 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.98941892 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.988232066 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.992484378 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.98712253 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.988462741 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.988026058 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.989830442 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.994224857 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.991820507 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.988295725 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.988668199 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.987863149 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.976317991 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.990681537 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.978753776 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.988333046 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.990097273 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.988481722 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.98968463 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.988951457 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.989230153 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.991173086 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.986897512 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.988619656 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.997165445 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.990028861 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.989806241 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.994562041 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.988647675 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.99808433 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.989665421 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.990719151 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.990691585 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.989006528 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.992370018 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.989117281 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.990424007 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.991166393 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.989236799 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.990699543 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.002487826 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.998099611 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.993733359 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.992879619 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.990533295 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.992080625 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.000754185 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.015279416 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.991181581 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.993137565 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.994813527 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.997224664 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.993535159 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.997760057 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.994597957 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.999944812 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.992735428 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.990753427 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.993523126 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.004557791 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.991584344 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.990997736 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.990577601 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.996421929 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.99331939 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.991695528 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.992952482 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.994644967 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.992733119 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.004511434 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.990646571 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.994547542 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.993209053 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.990351741 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.992689381 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.995433051 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.994324466 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.99372689 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.993050321 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.992768035 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.995128909 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.997516246 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.992376433 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.996468191 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.003180273 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.994129753 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.994266698 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.995027512 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.99357546 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.995429576 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.993565597 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.993125956 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.995574697 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.992207025 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.993964663 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.997492916 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.002613116 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.995556205 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.992753482 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.993370027 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.996947672 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.993452101 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.994746835 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.994988386 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.003670835 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.998620836 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.006660881 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.004152135 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.995055519 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.995915584 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.002449437 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.003361155 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.99466878 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.99385492 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.995118352 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.996597124 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.996681916 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.99582445 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.994682799 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.99623292 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.001092413 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.993768833 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.994886778 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.995420706 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.994278822 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.997386291 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.998254054 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.000809942 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.994883062 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.995211227 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.995236213 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.997075282 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.997825476 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.998524623 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.99749064 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.995932362 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.997209243 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.997324667 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.997823444 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.995329559 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.995222054 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.997322887 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.99642215 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.994851338 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.996211287 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.997693125 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.995373002 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.000448851 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.00596809 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.995783406 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.998964265 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.998232802 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.002546877 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.997586006 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.997322737 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.997066547 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.996352733 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.00522424 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.996600657 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.993409408 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.998659654 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.996397636 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.002092547 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.998852158 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.002830679 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.99747884 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.99759186 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.997481549 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.001535143 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.007931511 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.003784487 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.001360942 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.006860452 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.002911085 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.001404006 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.9977385 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.997400987 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.99527838 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.998670067 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.002294764 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.000022708 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.000710509 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.998391144 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.000958408 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.998751696 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.001671888 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.998154897 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.997397311 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.491961966 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.008560351 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.008372159 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.997783506 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.001494529 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.999655992 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.003794027 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.011066764 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.000612825 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.999823235 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.000680017 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.00054746 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.001118857 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.008004368 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.009359752 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.991857981 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.00069664 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.005293725 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.020605604 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.002778083 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.009281368 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.03274085 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.000533132 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.00141374 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.001279702 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.000364501 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.000741462 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.002880765 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.001581625 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.008064073 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.001050712 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.000276186 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.0092069 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.999465948 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.000252714 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.000733895 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.003519431 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.007673966 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.002334399 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.009912252 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.000733903 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.001022633 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.001104682 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.004586252 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.000770239 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.000931237 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.000687347 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.003838807 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.00080157 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.001447176 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.010445941 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.002238452 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.002967085 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.016787605 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.015035078 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.00246471 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.001311004 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.001849885 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.007089033 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.004416902 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.000306908 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.005511762 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.010870819 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.006240621 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.011047035 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.004777596 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.002630288 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.003864512 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.001015132 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.003131314 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.01759088 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.01445051 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.003898332 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.005136093 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.009751796 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.001815778 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.011118112 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.008942275 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.00378109 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.004182205 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.003469345 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.003017026 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.003067024 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.990072748 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.007361983 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.012651158 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.00346033 seconds)
  done (took 1187.71036478 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.003928229 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.002536491 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.998301015 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.00312106 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.003133038 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.002850479 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.003785599 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.00399703 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.989085645 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.00493659 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.004051695 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.003916525 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.990029425 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.003862957 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.002891975 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.004726989 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.004670643 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.003887352 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.003839901 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.989444775 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.004709436 seconds)
  done (took 43.969199615 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.004355872 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.005538056 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.004622807 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.005643497 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.005140225 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.004097069 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.005612118 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.003899688 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.004099153 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.004211047 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.004673729 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.004964904 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.005218295 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.005848606 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.005836696 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.004084513 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.003804851 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.005207297 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.004392309 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.004537405 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.006647233 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.00625476 seconds)
  done (took 46.047270232 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.006678278 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.006233566 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.007506178 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.005357592 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.004781537 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.006714218 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.005893834 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.008122406 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.00628861 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.007527517 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.015575365 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.015996352 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.00619975 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.995869904 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.990377788 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.007935877 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.151500376 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.007729124 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.007297842 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.007661067 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.007564511 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.016246774 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.006772006 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.007522499 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.006715996 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.009225667 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.007407196 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.007966425 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.008829035 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.008708471 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.01461203 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.007112656 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.00948575 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.012885197 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.008224796 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.009845979 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.013040505 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.008024594 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.009266635 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.00799469 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.018051613 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.032090579 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.008075929 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.009955654 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.018456831 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.008354185 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.007870467 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.013884759 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.017148923 seconds)
  done (took 100.534149103 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.007543754 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.00878476 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.008516653 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.009531356 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.008811268 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.00881506 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.009159929 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.008420836 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.009672703 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.009611798 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.009200821 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.009013209 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.010399115 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.009224775 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.008838031 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.009913354 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.010688918 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.009540206 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.009961344 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.01002865 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.00974944 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.008671196 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.010141515 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.010834091 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.009553276 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.006826673 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.010188419 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.010111743 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.009957614 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.010613887 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.010813709 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.010780058 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.010807625 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.00998494 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.010738183 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.011525935 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.011719393 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.01094217 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.011002421 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.011630913 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.011614808 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.010461995 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.009037676 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.010199675 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.012179069 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.010108534 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.011237184 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.011737452 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.012259288 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.010893868 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.011556639 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.011034834 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.011564596 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.011129297 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.010928327 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.011736685 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.011180585 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.013011681 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.012766856 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.012033307 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.009114529 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.011573898 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.011865197 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.012592648 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.012582201 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.009733581 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.014582975 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.012749569 seconds)
  done (took 138.659791497 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.013720826 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.013709499 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.013421441 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.013041404 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.014668058 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.014440013 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.012752114 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.013931128 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.013943898 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.013730615 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.015867741 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.013509047 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.013947158 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.013350099 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.014154523 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.014603745 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.014773903 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.014180593 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.013913007 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.013845865 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.01549455 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.014675277 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.014918556 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.014928421 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.015034394 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.014043902 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.01527715 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.013889685 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.014529128 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.014656116 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.015539283 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.014910802 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.014108783 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.014413197 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.014454748 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.014904983 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.016608052 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.014980734 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.014691879 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.01559654 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.015822172 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.014867368 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.014780452 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.015250468 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.014381778 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.015175283 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.015219624 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.01524991 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.015493334 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.016215005 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.016254235 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.016050223 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.014980724 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.015665359 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.015695882 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.015635867 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.015945917 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.016439859 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.015859598 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.015986235 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.016564966 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.016050355 seconds)
  done (took 126.868465516 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.015079364 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.016422185 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.016184467 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.015689693 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.016231829 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.016328497 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.016552702 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.015697549 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.01560901 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.015507422 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.01609692 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.01622034 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.017621029 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.015840365 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.017264501 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.017219673 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.016652088 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.017077071 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.016567942 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.017090033 seconds)
  done (took 42.278829147 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.015822262 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.012618416 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.012202993 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.017008649 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.012473247 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.017607561 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.017193933 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.016752618 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.016754199 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.01706265 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.017568428 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.016791676 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.017073628 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.018552762 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.018095084 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.016998889 seconds)
  done (took 34.215185439 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.018255255 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.01372357 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.014257282 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.017589046 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.018217313 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.018164647 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.016131562 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.015857757 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.015883126 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.015946707 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.017436844 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.01574841 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.015959909 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.01661271 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.017164741 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.015938495 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.017453628 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.016733451 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.016144956 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.017938062 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.016105439 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.015988429 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.015216963 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.017355757 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.018076099 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.016391378 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.015540449 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.01654602 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.014905492 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.017948917 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.016734563 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.015306143 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.0143058 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.015227893 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.015323562 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.015715367 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.015295257 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.01377982 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.013307393 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.013673188 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.015024126 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.01263079 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.014470425 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.013669024 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.013004522 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.01531687 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.014898901 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.015030856 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.01449746 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.015615556 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.013756618 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.012366786 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.012708696 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.014454435 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.015007192 seconds)
  done (took 112.811940639 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.010289886 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.012023092 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.010700698 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.01045968 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.011159275 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.011150251 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.010783056 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.010532041 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.010374598 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.011429776 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.0108477 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.009499337 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.009596389 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.010261117 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.00974509 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.010299703 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.010941572 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.008888936 seconds)
  done (took 38.136378146 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.003149479 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.010073615 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.002328873 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.009047365 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.010882857 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.010535919 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.01101431 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.011180328 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.011114469 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.01135672 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.010061757 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.011437548 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.00906271 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.012246595 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.011828139 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.010144088 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.010143129 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.009492964 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.009304057 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.011430902 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.007772516 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.009132372 seconds)
  done (took 46.158735296 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.010625985 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.01009828 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.023005791 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.030276093 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.029807339 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.044382565 seconds)
  done (took 14.092686379 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.006194406 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.008065502 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.007013098 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.006818318 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.008148818 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.007237483 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.006656525 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.005502724 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.005883766 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.007988608 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.007649298 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.007020382 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.007146216 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.008551729 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.007514587 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.006804401 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.007578465 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.007407344 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.007461454 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.004005956 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.006912758 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.007338964 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.002522996 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.007399481 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.008607084 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.007641777 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.008136948 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.008357939 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.00773425 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.008755445 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.004450674 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.008905396 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.007557267 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.007785901 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.008148502 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.007900456 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.007492065 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.007417423 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.008651968 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.009848344 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.008721474 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.008049029 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.005490384 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.009233974 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.009310146 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.009400981 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.009148542 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.008296371 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.008026691 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.009742744 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.007377275 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.009270863 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.008485156 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.009454237 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.008604168 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.009633516 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.008054648 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.009532935 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.00988233 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.009987946 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.009000287 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.008996515 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.00885317 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.009055797 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.009859183 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.00872183 seconds)
  done (took 134.45862051 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.00894473 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.008648215 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.00993858 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.009702638 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.010633493 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.009264257 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.009773125 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.009196691 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.009638226 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.009606074 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.009849894 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.010479706 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.010923615 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.009046447 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.009862341 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.010217127 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.009104584 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.009493862 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.002134181 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.007580546 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.009291904 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.007526787 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.00753968 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.00219174 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.002867747 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.002676913 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.003791964 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.005620135 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.001873532 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.003626815 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.000455512 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.001731912 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.002537815 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.998861619 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.000302519 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.000579848 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.999857632 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.001955731 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.002124833 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.997614773 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.002114306 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.000694861 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.001439213 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.000572662 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.999043814 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.001413343 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.999687567 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.001069441 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.998018789 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.999793003 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.996728384 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.999014097 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.999665712 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.997353852 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.997829536 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.995633424 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.996135923 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.998530837 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.997563473 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.997372873 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.996125783 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.996235818 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.996940619 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.996329989 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.995153526 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.996403092 seconds)
  done (took 134.140321591 seconds)
done (took 2764.128306027 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.056057404 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.072712355 seconds)
  done (took 16.054651355 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.161220539 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.118619846 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.999880425 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.05120603 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.997838199 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.028767141 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.026695374 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.996287675 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 1.998827949 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 1.99725667 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.998848735 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.18604306 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.036300396 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.99727467 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.999046763 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.089432119 seconds)
  done (took 54.61833933 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.003409267 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.989137949 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.012893351 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.002387936 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.004508066 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.013952627 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 2.031234789 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 2.00795112 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 2.039756984 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.016151016 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.073678104 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.015305516 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 2.003616079 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.054746791 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 2.01160693 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.016878198 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 2.099508083 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.079728166 seconds)
  done (took 38.401157606 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.082832406 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.009092979 seconds)
  done (took 11.022961685 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.019351447 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.990472645 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.006995782 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.016957511 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.988435574 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.996310104 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.009328775 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.998829117 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.027300995 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.01537557 seconds)
  done (took 71.99782053 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.999516694 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.999884426 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.000813969 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.998841258 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.991382732 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.994848222 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.997056851 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.995916047 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.695333617 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 2.031263865 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 2.01151693 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.003865141 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.996771271 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.994908859 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.993252765 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.020629215 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.162512349 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.990518936 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.990380362 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.999048111 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.996110609 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.080944786 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.008516295 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.993781189 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.027688757 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.698847956 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.002241135 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.998701145 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.166064283 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.976801394 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.000954365 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.153186822 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.999421947 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.437590793 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.278445218 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.000852103 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.002091774 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.001450437 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.990819622 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.181524453 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.995029519 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.999742574 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.929296851 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.241546165 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.098328163 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.037084411 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.37608057 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.995598669 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.996987968 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.023277479 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.994935102 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.99358556 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 2.009593182 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.514423405 seconds)
  done (took 139.993219651 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.990800505 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.236507399 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.143210261 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.993211161 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.243710124 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.200586023 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.991989723 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.035055488 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.98732119 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.188260905 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.239324073 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.095563278 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.993274799 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.990940336 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.984373428 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.995763436 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.134694196 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.060955149 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.985769631 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.990676081 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.013103328 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.191955154 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.111839333 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.989431789 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.013195427 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.192659856 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.107077008 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.08749979 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.797345346 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.985122164 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.053450522 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.984813295 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.986348884 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.983057709 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.140153145 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.08127436 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.065104465 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.985653178 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.985141655 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.984659976 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.664712583 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.185118135 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.078220423 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.105569529 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.231489499 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.204697719 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.594185698 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.984760251 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.61670164 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.150100876 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.192006398 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.200696167 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.102350284 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.99024713 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.539734619 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.984690355 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.984760457 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.206423913 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.199631799 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.085775324 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.985705613 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.985782733 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.986167776 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.228079979 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.985152547 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.073423387 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.99040296 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.984998178 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.078120381 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.083891813 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.205393546 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.211864034 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.014222763 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.326611379 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.479297807 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.190135101 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.04729271 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.203288715 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.988991746 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.982130812 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.069174465 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.817403909 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.247571324 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.2295663 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.182428538 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.013673121 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.63737361 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.986536021 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.175621255 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.176893406 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.218385394 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.226839079 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.223299087 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.369243146 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.986834038 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.987450827 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.287523453 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.104354863 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.942582098 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.344103998 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.214747852 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.513346516 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.016476206 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.315351307 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.111651136 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.990618621 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.636278909 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.988891901 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.189138375 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.025702006 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.988414647 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.990273425 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.178221681 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.892095164 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.989686053 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.935316967 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.052856982 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.988673162 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.196237591 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.988574308 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.232125166 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.991826637 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.220255135 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.621909269 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.018861204 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.214166877 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.236702276 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.61668694 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.229044631 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.229074939 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.098716 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.258565789 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.983840211 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.989007113 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.251675824 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.988391847 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.993300596 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.157893717 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.994769916 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.131198839 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.991534885 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.253591633 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.005338282 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.225172932 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.993293994 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.229743248 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.020292372 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.037711356 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.992794097 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.120566321 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.992967042 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.827956318 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.146475982 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.990573971 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.992182446 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.720737521 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.989916192 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.138626876 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.216249956 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.00644142 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.06226383 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.551997066 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.979461516 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.074621504 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.010443527 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.272605533 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.991279418 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.242671835 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.952582513 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.478130095 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.990757348 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.226475432 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.228045132 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.994867386 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.993674458 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.834901492 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.99495436 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.991433569 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.148109666 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.974981899 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.893354594 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.191551027 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.992941214 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.116997718 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.993438529 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.061658028 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.341795882 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.992691538 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.99416325 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.993314766 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.99319349 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.993802113 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.25363843 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.014608035 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.425178895 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.12989911 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.245986373 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.295592967 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.188913489 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.027175919 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.982274458 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.209635369 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.990112011 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.054887848 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.991773553 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.013998782 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.220463383 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.993358342 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.198412278 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.223986663 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.88118995 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.040447925 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.994778211 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.994373039 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.96991552 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.141526532 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.075397571 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.991918995 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.99459737 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.107139839 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.108719754 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.170839784 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.821597114 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.152751499 seconds)
  done (took 928.721354128 seconds)
done (took 1262.730532801 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.994128138 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.993007241 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.998850317 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.995248532 seconds)
  done (took 29.902091015 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 1.997057768 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 1.996025024 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 1.991118332 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 1.994649496 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 1.996165113 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 1.996144911 seconds)
  done (took 13.89371965 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.995995285 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.992009686 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.995535109 seconds)
  done (took 22.906418128 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 2.070581161 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.414133319 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 2.133735304 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.424966425 seconds)
  done (took 10.96620887 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.996077649 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 1.99663829 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 1.997151191 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 1.995968404 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 1.996917914 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.998770781 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 1.997316775 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.996407184 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 1.99897579 seconds)
  done (took 19.899355035 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.29045473 seconds)
done (took 103.772670071 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.098329273 seconds)
    (2/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.09765043 seconds)
    (3/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.112347058 seconds)
    (4/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.84254441 seconds)
    (5/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.014498382 seconds)
    (6/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.22618148 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.318342349 seconds)
    (8/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 1.994897701 seconds)
    (9/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.010873862 seconds)
    (10/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.298646958 seconds)
    (11/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.628725792 seconds)
    (12/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.138269775 seconds)
    (13/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 6.997737223 seconds)
    (14/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.246040069 seconds)
    (15/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.178087881 seconds)
    (16/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.625681635 seconds)
    (17/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.000483732 seconds)
    (18/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.452788752 seconds)
    (19/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.011390892 seconds)
    (20/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.395860659 seconds)
    (21/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.138595719 seconds)
    (22/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.130381263 seconds)
    (23/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.24528768 seconds)
    (24/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.107130316 seconds)
    (25/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.343384626 seconds)
    (26/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.744210928 seconds)
    (27/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.006137975 seconds)
    (28/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 6.996751313 seconds)
    (29/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.849075223 seconds)
    (30/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.07952364 seconds)
    (31/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.147197271 seconds)
    (32/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.741545645 seconds)
    (33/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.51623924 seconds)
    (34/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.073227902 seconds)
    (35/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.015551753 seconds)
    (36/341) benchmarking ("sort", BigInt, false)...
    done (took 7.00106306 seconds)
    (37/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.030698 seconds)
    (38/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.009371022 seconds)
    (39/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.765782229 seconds)
    (40/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.000297723 seconds)
    (41/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.012543384 seconds)
    (42/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.911205365 seconds)
    (43/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.13184457 seconds)
    (44/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.126127204 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.023257265 seconds)
    (46/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.300178682 seconds)
    (47/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.13234231 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.08136024 seconds)
    (49/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.137275707 seconds)
    (50/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.019253333 seconds)
    (51/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.122609373 seconds)
    (52/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.000473658 seconds)
    (53/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.14993869 seconds)
    (54/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.110072765 seconds)
    (55/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.381311268 seconds)
    (56/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.4797322 seconds)
    (57/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.143228741 seconds)
    (58/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.132362291 seconds)
    (59/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.084227963 seconds)
    (60/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.127688107 seconds)
    (61/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.381868465 seconds)
    (62/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.250679448 seconds)
    (63/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.460238316 seconds)
    (64/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.687123678 seconds)
    (65/341) benchmarking ("perf_sum", Int8, true)...
    done (took 1.997390142 seconds)
    (66/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.435849584 seconds)
    (67/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.41539132 seconds)
    (68/341) benchmarking ("sort", Bool, false)...
    done (took 2.214212841 seconds)
    (69/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.141663677 seconds)
    (70/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.165013217 seconds)
    (71/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.889168209 seconds)
    (72/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.005416322 seconds)
    (73/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.177560195 seconds)
    (74/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.201729175 seconds)
    (75/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 6.999106754 seconds)
    (76/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.009393829 seconds)
    (77/341) benchmarking ("sort", Int64, false)...
    done (took 5.641842702 seconds)
    (78/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.126437971 seconds)
    (79/341) benchmarking ("map", abs, BigInt, false)...
    done (took 6.998680707 seconds)
    (80/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 8.829227882 seconds)
    (81/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.228492328 seconds)
    (82/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.699085165 seconds)
    (83/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 6.996417508 seconds)
    (84/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.069227173 seconds)
    (85/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.110304208 seconds)
    (86/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.014092364 seconds)
    (87/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.296370468 seconds)
    (88/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.005289368 seconds)
    (89/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.387764576 seconds)
    (90/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.010701118 seconds)
    (91/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.079405899 seconds)
    (92/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.009419982 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.297919778 seconds)
    (94/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.917883304 seconds)
    (95/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.53568496 seconds)
    (96/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.472643633 seconds)
    (97/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.004309237 seconds)
    (98/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.290241634 seconds)
    (99/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.096358185 seconds)
    (100/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.332791364 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.283144107 seconds)
    (102/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.012336636 seconds)
    (103/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.000714787 seconds)
    (104/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.037699133 seconds)
    (105/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.981183512 seconds)
    (106/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.221406757 seconds)
    (107/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 6.998508077 seconds)
    (108/341) benchmarking ("map", abs, Float32, true)...
    done (took 3.947524635 seconds)
    (109/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.000725859 seconds)
    (110/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.839248314 seconds)
    (111/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.192583489 seconds)
    (112/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.298303498 seconds)
    (113/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 6.996837563 seconds)
    (114/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 6.999775009 seconds)
    (115/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.059339943 seconds)
    (116/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.254887726 seconds)
    (117/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 6.997528186 seconds)
    (118/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.219287296 seconds)
    (119/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.753553016 seconds)
    (120/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 6.9942067 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 4.394837301 seconds)
    (122/341) benchmarking ("sort", Float32, false)...
    done (took 5.642972348 seconds)
    (123/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.202049984 seconds)
    (124/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.36678303 seconds)
    (125/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.659728978 seconds)
    (126/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.000764071 seconds)
    (127/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.087650657 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.098762281 seconds)
    (129/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.058806878 seconds)
    (130/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.275834018 seconds)
    (131/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.012215707 seconds)
    (132/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.009932548 seconds)
    (133/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.20232369 seconds)
    (134/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.077848904 seconds)
    (135/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.394599227 seconds)
    (136/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 6.997808115 seconds)
    (137/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 4.656920238 seconds)
    (138/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.434882049 seconds)
    (139/341) benchmarking ("sort", Float64, false)...
    done (took 5.686375436 seconds)
    (140/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.286573321 seconds)
    (141/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.003129336 seconds)
    (142/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.114680216 seconds)
    (143/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.022961764 seconds)
    (144/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 6.995240606 seconds)
    (145/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.256467968 seconds)
    (146/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.460489404 seconds)
    (147/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.741335722 seconds)
    (148/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.125161235 seconds)
    (149/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.190596945 seconds)
    (150/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.313385135 seconds)
    (151/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.016309337 seconds)
    (152/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.01060117 seconds)
    (153/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.200897996 seconds)
    (154/341) benchmarking ("sort", Int8, false)...
    done (took 4.950304529 seconds)
    (155/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.081266462 seconds)
    (156/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 6.998881093 seconds)
    (157/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.268596312 seconds)
    (158/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.282654371 seconds)
    (159/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.475272633 seconds)
    (160/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.060658012 seconds)
    (161/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.150674777 seconds)
    (162/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.137954285 seconds)
    (163/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.253758841 seconds)
    (164/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.098959306 seconds)
    (165/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.018442188 seconds)
    (166/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.07909094 seconds)
    (167/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.094654382 seconds)
    (168/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.100734357 seconds)
    (169/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.25155041 seconds)
    (170/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.015126683 seconds)
    (171/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.384279418 seconds)
    (172/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 6.994980865 seconds)
    (173/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.406165556 seconds)
    (174/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.289781024 seconds)
    (175/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.001920802 seconds)
    (176/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.185086902 seconds)
    (177/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.309212349 seconds)
    (178/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.091354292 seconds)
    (179/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 6.998836965 seconds)
    (180/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.134388356 seconds)
    (181/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.013002056 seconds)
    (182/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.803997063 seconds)
    (183/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.815976926 seconds)
    (184/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.548058501 seconds)
    (185/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.677261697 seconds)
    (186/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.99609646 seconds)
    (187/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.193175335 seconds)
    (188/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.005277831 seconds)
    (189/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 3.920443891 seconds)
    (190/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.022237363 seconds)
    (191/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.806566854 seconds)
    (192/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.076883755 seconds)
    (193/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.5936602 seconds)
    (194/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.085588788 seconds)
    (195/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.154490407 seconds)
    (196/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.084970969 seconds)
    (197/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.238837016 seconds)
    (198/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.237182274 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.001790656 seconds)
    (200/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.344823538 seconds)
    (201/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.701802355 seconds)
    (202/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.111649651 seconds)
    (203/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.206323526 seconds)
    (204/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.079214465 seconds)
    (205/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.004090605 seconds)
    (206/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.285851568 seconds)
    (207/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 2.981625178 seconds)
    (208/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.521196636 seconds)
    (209/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.375230921 seconds)
    (210/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.323711088 seconds)
    (211/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.00837797 seconds)
    (212/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.103669772 seconds)
    (213/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.474712654 seconds)
    (214/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.202149914 seconds)
    (215/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.110641742 seconds)
    (216/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.307402091 seconds)
    (217/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.246394559 seconds)
    (218/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.750927938 seconds)
    (219/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.906102487 seconds)
    (220/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.095337304 seconds)
    (221/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.009084749 seconds)
    (222/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.019591528 seconds)
    (223/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.400621855 seconds)
    (224/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.76852255 seconds)
    (225/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.324501601 seconds)
    (226/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.024172699 seconds)
    (227/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.292993598 seconds)
    (228/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.18682276 seconds)
    (229/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.301461075 seconds)
    (230/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.474452221 seconds)
    (231/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.243352464 seconds)
    (232/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.767332246 seconds)
    (233/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.136838859 seconds)
    (234/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.712393994 seconds)
    (235/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.47832155 seconds)
    (236/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.382877198 seconds)
    (237/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.683498718 seconds)
    (238/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.307118033 seconds)
    (239/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.41465122 seconds)
    (240/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.110644764 seconds)
    (241/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.010413774 seconds)
    (242/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.225895986 seconds)
    (243/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.178286203 seconds)
    (244/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.898633356 seconds)
    (245/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.19030162 seconds)
    (246/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.408386694 seconds)
    (247/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.32247508 seconds)
    (248/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.316663242 seconds)
    (249/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.023363503 seconds)
    (250/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.022491577 seconds)
    (251/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.19246014 seconds)
    (252/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.399239013 seconds)
    (253/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.003770679 seconds)
    (254/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 3.559503287 seconds)
    (255/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.107759634 seconds)
    (256/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.01323323 seconds)
    (257/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.111709213 seconds)
    (258/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.249145775 seconds)
    (259/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.28632135 seconds)
    (260/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.098542898 seconds)
    (261/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.135444203 seconds)
    (262/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.09627487 seconds)
    (263/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.26923193 seconds)
    (264/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.231391059 seconds)
    (265/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.284582545 seconds)
    (266/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.019438971 seconds)
    (267/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.134655968 seconds)
    (268/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.597528793 seconds)
    (269/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.653966903 seconds)
    (270/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.036039301 seconds)
    (271/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.791967201 seconds)
    (272/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.13918742 seconds)
    (273/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.411265345 seconds)
    (274/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.341259904 seconds)
    (275/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.11084971 seconds)
    (276/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.884653274 seconds)
    (277/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.592854831 seconds)
    (278/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.255687541 seconds)
    (279/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.026026486 seconds)
    (280/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.155020672 seconds)
    (281/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.1155333 seconds)
    (282/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.24559343 seconds)
    (283/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.343454766 seconds)
    (284/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.256366898 seconds)
    (285/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.010670127 seconds)
    (286/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.176702792 seconds)
    (287/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.807974033 seconds)
    (288/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.13607301 seconds)
    (289/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.058565252 seconds)
    (290/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.28028858 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.006393894 seconds)
    (292/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.895734181 seconds)
    (293/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.120766142 seconds)
    (294/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.019982528 seconds)
    (295/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.087139502 seconds)
    (296/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.378437971 seconds)
    (297/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.396844705 seconds)
    (298/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.141336041 seconds)
    (299/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.55900568 seconds)
    (300/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.205609645 seconds)
    (301/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.088365023 seconds)
    (302/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.006305538 seconds)
    (303/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.209416038 seconds)
    (304/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.387868954 seconds)
    (305/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.025205874 seconds)
    (306/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.892746897 seconds)
    (307/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.116526772 seconds)
    (308/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.287563377 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.925920725 seconds)
    (310/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.04523425 seconds)
    (311/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.953940529 seconds)
    (312/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.014310136 seconds)
    (313/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.020509856 seconds)
    (314/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.090717059 seconds)
    (315/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.108874797 seconds)
    (316/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.013589323 seconds)
    (317/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.133242907 seconds)
    (318/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.16727902 seconds)
    (319/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.676423591 seconds)
    (320/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 2.984129206 seconds)
    (321/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.010588949 seconds)
    (322/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.175679386 seconds)
    (323/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.662561457 seconds)
    (324/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.417994445 seconds)
    (325/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.263041023 seconds)
    (326/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.071012642 seconds)
    (327/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.293364613 seconds)
    (328/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.112881866 seconds)
    (329/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.834690368 seconds)
    (330/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 2.974568218 seconds)
    (331/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.014069355 seconds)
    (332/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.207596535 seconds)
    (333/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.039361303 seconds)
    (334/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.088446947 seconds)
    (335/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.096719393 seconds)
    (336/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.010800876 seconds)
    (337/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 3.923666602 seconds)
    (338/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.02326633 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.615718778 seconds)
    (340/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.224552119 seconds)
    (341/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.362836537 seconds)
  done (took 1133.478640816 seconds)
done (took 1135.506636784 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.047845248 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.034697937 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.016841283 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.038824413 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.131740794 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.067774582 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.030675969 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.022233213 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.068590252 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.068350744 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.016900806 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.069423021 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.019661597 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.018357152 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.019500985 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.033258379 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.409011797 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.054148823 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.035701206 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.032445427 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.037707472 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.018069617 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.06787239 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.067520106 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.026796927 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.023447058 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.022123622 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.037660765 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.132101998 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.024873368 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.023092401 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.032129996 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.40952952 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.050996434 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.016134416 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.03964387 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.032373187 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.032446689 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.023934767 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.051750668 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.55623076 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.021619985 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.020225905 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.021970187 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.020739884 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.026489206 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.020599629 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.029406009 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.03437856 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.034665162 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.543169664 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.039995262 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.023174379 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.021475723 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.033518812 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.021658085 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.020935616 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.036891745 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.044288441 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.036307889 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.388604836 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.063688442 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.026296101 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.040218491 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.03029877 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.579476042 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.022796356 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.029091975 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.556168105 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.031409852 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.579133372 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.03694873 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.025587148 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.037836359 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.055996876 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.410678797 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.054967598 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.021589017 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.031864031 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.020386854 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.034681055 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.037429237 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.027089914 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.023542965 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.037589998 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.072841714 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.034945798 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.023893486 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.035356721 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.044254758 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.032239566 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.038813134 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.022622364 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.019904667 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.035088425 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.029526717 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.02775852 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.026501075 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.027748109 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.036303893 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.556421024 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.040329071 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.020693909 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.02154287 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.019635483 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.041731085 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.557500639 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.02708554 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.045677461 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.068450623 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.026877349 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.39126218 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.062405354 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.039400568 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.037697332 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.028147087 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.021920716 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.39190642 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.580207124 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.042468748 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.025382942 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.022747869 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.040926918 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.027009575 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.023761478 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.413003761 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.058556347 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.038215948 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.146717932 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.03954188 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.058752073 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.02474667 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.029509796 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.074367599 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.0424629 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.057951824 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.026232633 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.041482794 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.042967503 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.023723052 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.038242176 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.03899687 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.024531344 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.032627392 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.024972244 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.076423113 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.039178096 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.041334715 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.047523041 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.149578533 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.022402718 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.394146876 seconds)
done (took 318.878331107 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.103659241 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.019371006 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.111875412 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.022139819 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.109497319 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.094035395 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.018692953 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.023324589 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.022951044 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.501468215 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.021412018 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.031848879 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.021461702 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.023118709 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.095021078 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.023865479 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.023855832 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.290994007 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.02620949 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.100315584 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.024008563 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.02298477 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.023325462 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.500305622 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.021347746 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.022726131 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.1026718 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.023715669 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.296777887 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.022894518 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.025180914 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.294459261 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.102027933 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.035970805 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.031266271 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.031588181 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.112190428 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.030681968 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.089546068 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.089273682 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.113174159 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.05886058 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.023718622 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.026369975 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.027419237 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.026568493 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.024093831 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.056527084 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.024793343 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.029566946 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.29302545 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.032037938 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.030980508 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.026861878 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.023613328 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.041947792 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.026880899 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.027799494 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.103255703 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.025821112 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.090260315 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.504991767 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.502266607 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.024423582 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.025429353 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.025362437 seconds)
  done (took 194.752830276 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.126780956 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.098281688 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.129514873 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.030368485 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.07401622 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.132389868 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.031341088 seconds)
  done (took 16.574727257 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.031506258 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.025721236 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.085330721 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.086321358 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.02590622 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.167740863 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.037408477 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.030663533 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.055625282 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.02640582 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.371819969 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.08636035 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.032509583 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.028010131 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.03773793 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.088243564 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.028538079 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.012649696 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.140598897 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.174911694 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.031301429 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.032682451 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.052916726 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.037797625 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.025660031 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.029282124 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.026698752 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.03474334 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.025409751 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.025814261 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.030044373 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.038576793 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.026062348 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.027000633 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.027171863 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.02810285 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.026805414 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.024790619 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.028859492 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.027266773 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.026352994 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.0261192 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.026001936 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.026999264 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.026666628 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.053374484 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.025316237 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.027017629 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.029127011 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.026095339 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.056948112 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.02731269 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.027942972 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.031541581 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.072168719 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.036674547 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.029220932 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.027972284 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.028834302 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.027675456 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.026080467 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.166278658 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.088593729 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.026454794 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.085226505 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.098481344 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.029309464 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.028693328 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.028485887 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.090989368 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.029220746 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.090999736 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.030534976 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.144383978 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.029038664 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.173584784 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.053587765 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.03292338 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.033484912 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.031343644 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.036905253 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.031167641 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.033599561 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.037272707 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.033274181 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.030986087 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.035872779 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.031168394 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.037974632 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.031005474 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.080419722 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.032446936 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.030964554 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.143380229 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.031414085 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.144898334 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.057977528 seconds)
  done (took 220.972395376 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.037297721 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.037251563 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.031152739 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.047441688 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.032932274 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.033066416 seconds)
  done (took 14.174797867 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.03331588 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.034973681 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.032463045 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.031004502 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.032952993 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.032556873 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.03566696 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.032950257 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.035600753 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.032430778 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.031662431 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.035707913 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.032676745 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.029981483 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.032438916 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.032851439 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.034920601 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.031434122 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.032408815 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.031672441 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.16532703 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.033253183 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.032045631 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.037101855 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.036703796 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.03147534 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.044337526 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.031947349 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.032940383 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.040735838 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.034763145 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.033439506 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.036002996 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.038611268 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.036188065 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.037471359 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.036257168 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.033799241 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.032582965 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.034328955 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.033801445 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.033480745 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.033776167 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.034294439 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.034682477 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.039455427 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.038711255 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.044899579 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.032291579 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.036028525 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.033716821 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.032697351 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.034030939 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.035342943 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.038657136 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.039618164 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.038963559 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.034502364 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.034878638 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.03873564 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.037049944 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.033566058 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.03597463 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.039066565 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.039233929 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.034186854 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.036909784 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.038410917 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.03463283 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.034847533 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.037393352 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.034794204 seconds)
  done (took 149.614560931 seconds)
done (took 598.054419911 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.12910684 seconds)
  done (took 9.087853932 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.208134399 seconds)
  done (took 9.269886955 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 11.621136665 seconds)
  done (took 13.582453089 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.110718507 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.040939012 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.044285526 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.037098255 seconds)
  done (took 30.206452422 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.354222461 seconds)
  done (took 9.31492977 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.050478314 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.031231903 seconds)
  done (took 16.115332746 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.073374063 seconds)
  done (took 9.034295357 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.465195183 seconds)
  done (took 9.439972572 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.054460045 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.054194048 seconds)
  done (took 16.091908574 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.041475711 seconds)
  done (took 9.002360927 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.910876574 seconds)
  done (took 9.972302079 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.040430789 seconds)
  done (took 9.018412319 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.112081476 seconds)
  done (took 9.073648737 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.480485959 seconds)
  done (took 10.44047975 seconds)
done (took 171.604016173 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.041620325 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.030679918 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.030627283 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.034171154 seconds)
  done (took 30.100692628 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.071292493 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.071056199 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.080497393 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.071716179 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.063661998 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.062693883 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.07313564 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.071987791 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.062752335 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.071223465 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.073106261 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.069414245 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.072893409 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.080133312 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.081873216 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.071349705 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.072981666 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.074158346 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.064470151 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.082099889 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.070801216 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.074409875 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.036212138 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.037838193 seconds)
  done (took 51.625367263 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.228842686 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.105006327 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.192160502 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.085523029 seconds)
  done (took 10.576684142 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.036974325 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.102526731 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.089594174 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.085266242 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.123434262 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.14096356 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.090353616 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.247582673 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.156758387 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.162241265 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.046060668 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.062781693 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.061593596 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.084044406 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.143734333 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.04092655 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.039285409 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.154668892 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.101565177 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.248770622 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.039410153 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.093160823 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.134192471 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.091369676 seconds)
  done (took 52.540154685 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.039687921 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.048485712 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.049019942 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.040575745 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.039726792 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.040098168 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.049174788 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.045241774 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.061497897 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.043860142 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.040970082 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.040909244 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.04881646 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.041738185 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.041794185 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.053129233 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.054120833 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.043553341 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.046121535 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.047401151 seconds)
  done (took 42.881017613 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.038479749 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.886833024 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.388961356 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.292088185 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.041043 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.042488383 seconds)
  done (took 32.653180006 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.053537492 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 2.046612728 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.041731739 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 2.098593498 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.175876444 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.041587602 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.041159669 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 2.052294075 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 2.081355123 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 2.103357253 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.061011421 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 2.065858264 seconds)
  done (took 26.830794747 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.040474893 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.041046309 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.040756667 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.050776696 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.049832133 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.043227667 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.049417364 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.040130548 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.051507474 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.057932826 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.048373338 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.053637965 seconds)
  done (took 46.535670803 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.255445275 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.269221771 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.26957683 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.464997755 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.554444162 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.024485556 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.327852789 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.257384344 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.82182427 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.849648244 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.346692694 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.115142838 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.98598495 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.963322384 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.958035331 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.282831467 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.041902266 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.896498682 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.302509311 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.099198625 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.04198055 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.041206776 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.040364877 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.342479395 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.370107265 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.043028021 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.254044795 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.058106116 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.05210479 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.265664977 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.35347166 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.084683771 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.24420549 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.298394693 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.386216903 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.094703536 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.174257723 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.040302804 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.076604719 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.079032632 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.052137062 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.05465978 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.586472712 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.057089461 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.3160179 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.045012221 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.044688026 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.169274896 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.964283683 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.374340313 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.15862187 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.042150254 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.079610052 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.478273944 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.163008171 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.285872142 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.052979545 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.049332039 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.092650601 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.319784305 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.162388206 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.157969214 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.259331817 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.97240639 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.469626473 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17196208 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.048381693 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.051968818 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.747738664 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.290876677 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.130578518 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.386016562 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.806491661 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.04802011 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.049839017 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.051158905 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.14509898 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.042404706 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.342082655 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.048403526 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.971518502 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.146231135 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.443780155 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.052066705 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.045949709 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.053297088 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.894299296 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.058374341 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.145312962 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.316221191 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.372973474 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.049675012 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.04976112 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.070202111 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.051951069 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.997751965 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.426381222 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.101377937 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.976137717 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.614734579 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.356770218 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.00121485 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.355983421 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.080157665 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.349994292 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.191232371 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.454256647 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.261199722 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.294610099 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.969138939 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.055557366 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.607614893 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.132922931 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.128020759 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.049564051 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.611846898 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.058388116 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.351992605 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.169146354 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.052064707 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.976885618 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.061349151 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.255007665 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.365980235 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.089615784 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.046386924 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.055525974 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.051256468 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.05438553 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.220037631 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.06686192 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.352736795 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.132424326 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.050826269 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.989620555 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.051628414 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.348937379 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.434825653 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.101380363 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.327128545 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.329544151 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.751260875 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.068772159 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.069872676 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.326821762 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.129001416 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.126431508 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.648473428 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.191612109 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.14882659 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.956442734 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.182581198 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.060125155 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.055107234 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.178493779 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.461407246 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.479894694 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.095496055 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.066684124 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.065800376 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.061594061 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.281897196 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.166511754 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.076920442 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.057896713 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.137863537 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.282344636 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.053868085 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.072816393 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.315426174 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.302114565 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.353195846 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.116181929 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.163417399 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.125204343 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.064112965 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.2667797 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.136699989 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.697978067 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.598298512 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.280564313 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.455416403 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.005217697 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.695799652 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.324090523 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.438751818 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.073480711 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.505589407 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.061263501 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.556718684 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.076748372 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.582863847 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.982176994 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.060207776 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.400234345 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.018630842 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.553574121 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.122992706 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.09189827 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.059049722 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.058747374 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.06447957 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.057653666 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.159823796 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.126813584 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.126012484 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.9844452 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.528967628 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.082379726 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.05933145 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.055613312 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.479782322 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.966978005 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.010609653 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.05707713 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134484632 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.798945448 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.602781634 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.056181633 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.061850552 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.650738392 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.661847808 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.967454284 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.061169844 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.977461401 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.083051268 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.336081104 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.186109752 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.368147708 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.746543953 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.13450885 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.058288992 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.059320336 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.761017602 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.067279816 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.760744023 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.353494504 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.343353692 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.5266133 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.123660593 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.269968991 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.070870313 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.060174649 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.591782791 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.078416116 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.062481239 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.264970202 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.572521342 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.438562196 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.705746532 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.143590582 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.081447024 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.334806953 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.064023208 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.370790654 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.740268536 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.072803233 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.086158062 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.295486771 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.74750249 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.062156642 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.036831864 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.065426894 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.273185709 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.263766299 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.345267377 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.372568173 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.512404627 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.084178405 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.064947862 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.08526228 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.304160291 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.058017949 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.096734485 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.505820133 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.168672808 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.489750773 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.353193913 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.46777167 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.693691066 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.339066414 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.131085348 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.074233078 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.719137943 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.198586227 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.995507622 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.178368838 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.991232178 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.849610336 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.346501326 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.073953276 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.337758882 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.043829883 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.408071182 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.36366889 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.330785646 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.111425953 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.085680586 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.980179654 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.110255508 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.071331536 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.082012594 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.166381589 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.069490807 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.430821452 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.088997463 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.109291558 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.06649705 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.594031784 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.085007976 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.066235652 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.757831959 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.697176318 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.180340035 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.133836406 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.861576904 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.39843293 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.084682662 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.943421332 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.711377415 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.337555437 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.123392792 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.525998383 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.107865964 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.466918014 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.091195636 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.275787815 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.069287811 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.457181465 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.097137556 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.356345218 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.024344693 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.26990573 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.273206648 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.09043317 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.064102981 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.990795905 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.162705813 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.944515822 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.04322425 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.068362796 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.092411332 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.495362008 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.09499143 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.517988524 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.871141719 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.06660903 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.46187365 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.471600622 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.496527042 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.086794381 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.067474123 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.4078698 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.828315315 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.386877457 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.356336785 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.069398603 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.719785522 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.27998445 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.190848584 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.983886321 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.534884243 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.621446681 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.765213486 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.075933692 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.271053544 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.406712772 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.179799499 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.088400209 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.143187009 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.47066025 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.34243556 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.809150484 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.990412278 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.06577536 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.462943941 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.065953363 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.162229449 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.306398722 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.393546192 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.419714996 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.369130381 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.100301499 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.495578301 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.476864092 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.460620905 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.289268363 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.446943436 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.39381773 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.655326512 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.476722091 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.277337181 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.164882477 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.351088702 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.941534913 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.77725119 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.309882995 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.071467027 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.996077044 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.274775814 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.070782637 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.282558734 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.585227733 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.070175642 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.342782464 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.545491133 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.603786737 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.08039626 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.08157452 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.032606463 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.095770277 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.087356154 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.067210494 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.536370229 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.355257629 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.080685328 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.009174841 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.736718441 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.99328078 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.28061351 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.078755606 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.093692539 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.623476489 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.34354446 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.175104332 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.373829924 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.142346318 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.09334659 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.994379728 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.797395265 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.014176946 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.180607804 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.491026537 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.083034986 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.068598771 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.270534304 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.994824733 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.113854859 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.676937227 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.276278638 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.653910491 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.343637666 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.197357284 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.325464866 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.37446148 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.06560647 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.030969912 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.338391699 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.993910413 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.530060438 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.763648445 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.754709334 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.140776461 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.068720478 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.071273669 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.339576774 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.403717887 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.177226895 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.493790259 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.091497445 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.093159694 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.414041675 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.166039462 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.071651107 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.07319141 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.391547282 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.293470703 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.076902943 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.105324815 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.284109716 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.14421343 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.274118345 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.143896429 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.586426602 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.077223339 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.072469534 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.105782515 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.021041755 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.981922716 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.873201266 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.133640865 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.094878393 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.352374496 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.701369691 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.275561624 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.466822258 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.932562825 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.078522597 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.102752271 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.074105134 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.08087539 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.472913873 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.380657969 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.071082852 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.354176821 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.123649522 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.07664483 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.085914717 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.041175716 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.070573188 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.861425875 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.951289709 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.79821171 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.4680811 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.088872687 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.080772847 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.074201112 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.983735278 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.095643538 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.08545063 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.065261645 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.072464477 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.457467886 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.138208641 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.163515827 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.077249987 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.072255698 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.079039996 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.285519657 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.587447078 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.08854961 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.773475521 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.275601264 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.082154495 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.544359949 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.528890195 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.161680175 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.101026147 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.091670695 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.318540562 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.617459198 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.094055008 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.034047265 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.297082642 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.076655899 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.3465182 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.348058457 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.074777217 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.285764775 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.392924954 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.347725136 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.083176283 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.57906807 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.141205473 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.102060609 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.062895399 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.924117939 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.841021723 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.198215395 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.975421778 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.920582644 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.928665368 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.400775869 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.604534352 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.393599777 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.080949124 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.207396086 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.695984402 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.669473006 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 1.914838087 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 3.849291922 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.938389133 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.944314945 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 1.922892959 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.945331697 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.672845841 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.640507756 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.134154065 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.197002717 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.8519621 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.124824776 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.485175534 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.845387277 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.884957634 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.695313104 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.177519355 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.850024564 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.923698226 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.923641368 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.918859882 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.442474442 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.176533022 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.924083528 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.850897339 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.923287694 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.928711835 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.922456178 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.008629525 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.924009794 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.038360428 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.198923409 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.25630057 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.019262072 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.52660978 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.671071253 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.855428356 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.962866819 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.519507317 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.492515501 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.908627025 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.685942812 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.671007757 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.865500147 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.845590375 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.939784468 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.121831653 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.926319372 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.927743946 seconds)
  done (took 2260.429611141 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.925965441 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.994138474 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.927935873 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.933375209 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.918960704 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.937246716 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.941708735 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.930343999 seconds)
  done (took 57.364505875 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 6.92035165 seconds)
    (2/17) benchmarking "4467"...
    done (took 3.899084265 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 1.928994539 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.921836922 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 1.923857 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 6.921088095 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.127537631 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 6.932896356 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 1.922111021 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 1.926021572 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 6.920823717 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 6.921953927 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 2.238446358 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 1.949915794 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 6.924054675 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 6.918071859 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 1.930068669 seconds)
  done (took 77.080264388 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.925092718 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.284556672 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.957956168 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.922134307 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.298175369 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.921578412 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.225671907 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.974846698 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.918827778 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.147179041 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.215213961 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.926001011 seconds)
  done (took 89.572738433 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 1.927835159 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 1.920057387 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.921538077 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 1.920995611 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 1.9196225 seconds)
  done (took 11.463840379 seconds)
done (took 2791.668999166 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.163788038 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 1.975096132 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.015157492 seconds)
  done (took 5.838095223 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.075025502 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.114914155 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.230236489 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.258826083 seconds)
  done (took 10.532736376 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.201225268 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.280588042 seconds)
  done (took 6.337897432 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.270492053 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.926889798 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.296469021 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.915321236 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.912341866 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.91265601 seconds)
  done (took 22.593224256 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.906044294 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.90802128 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.907580185 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.906519467 seconds)
  done (took 9.470032807 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.90320985 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.62680794 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.898842166 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 1.910425126 seconds)
  done (took 21.178031205 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.075103486 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.96922623 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.667957614 seconds)
  done (took 8.551543479 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.530178309 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.352331785 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.515223991 seconds)
  done (took 9.231225654 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.739872211 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.716723641 seconds)
  done (took 7.287395288 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.038752433 seconds)
  done (took 3.868444076 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.763677212 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.214164846 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.367685741 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.77788539 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.541890577 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.305100066 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.400923739 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.207373176 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.322641676 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.336997319 seconds)
  done (took 26.068609664 seconds)
done (took 146.463157037 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.503771605 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.259017786 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.983849919 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.234467459 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.982207988 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.979842256 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.168961068 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.216555029 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.946069238 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.925780021 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.21963395 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.966086197 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.10814208 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.244320063 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.104905834 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.232996109 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.963015739 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.319360179 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.700252958 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.84121581 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.152141501 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.880324716 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.042063908 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.899419069 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.956055255 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.902984167 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.385574595 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.22873135 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.839801834 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.390184548 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.898156826 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.978458227 seconds)
  done (took 168.302526264 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.868026425 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.86959879 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.869234553 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.869392931 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.196653824 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.868927877 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.867427699 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.86621055 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.017023547 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.004579757 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.86519409 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.180511693 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.862591228 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.861604654 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.860914804 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.860162384 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.157008241 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.860848672 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.861455821 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.860801702 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.863437157 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.050705737 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.861658607 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.062915038 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.121453593 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.860102994 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.860599496 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.869211649 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.860175197 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.862842586 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.859813957 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.862262968 seconds)
  done (took 207.332868747 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.862403736 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.853968082 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.863821223 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.862833293 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.863044917 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.862115772 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.863684215 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.861443269 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.43901554 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.437108535 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.854921076 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.868640475 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.867949261 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.862624947 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.869467529 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.862082761 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.869869068 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.86094734 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.864253225 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.866050618 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.865124388 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.642838599 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.85605562 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.681343873 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.864019781 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.866892373 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.863186995 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.8630339 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.86211395 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.864416178 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.866907906 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.864055168 seconds)
  done (took 220.174925722 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.092187391 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.864698638 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 1.866975588 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.781195292 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 1.86438219 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.864492499 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.768366786 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.098236334 seconds)
  done (took 19.005247259 seconds)
done (took 616.673128963 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.2284021 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.609756273 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.006458448 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.892954398 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.117277379 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.934299564 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.884784674 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.9405373 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.717884105 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.964889401 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.294275153 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.892393729 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.678857048 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.920633966 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.004230144 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.934377972 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.2244989 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.542055381 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.028022463 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.538771104 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.043496342 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.844439162 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.971747762 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.754810746 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.316184809 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.891688785 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.907362309 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.235561063 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.891089818 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.041171418 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.510396347 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.1515673 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.906050244 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.885082712 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.935569524 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.918680888 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.090391667 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 1.902859324 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.004007999 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.640949684 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.558316461 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.602040603 seconds)
  done (took 100.159489116 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.879029349 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.873267217 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.873157132 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.871736628 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.8811769 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.871728336 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.873146718 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.872507433 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.872856397 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.873402036 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.872550473 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.880890639 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.87557194 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.880339379 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.872919751 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.875798728 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.872861969 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.880999278 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.874323822 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.873777784 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.874644561 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.873640994 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.868662595 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.875725896 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.874615557 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.876778505 seconds)
  done (took 50.560912072 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.865775225 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.027797287 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.102998946 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.890354439 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.86767178 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 1.870410646 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.893765337 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.875476014 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 1.869303933 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 1.870145196 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.982574743 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.872291073 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.88188469 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.10367251 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 1.886371977 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.866984938 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.866892538 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.869146565 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.039340336 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.8853192 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 1.898207861 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.87576835 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.897410009 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 1.879359008 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.86710935 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.87051676 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 1.872966279 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.283407555 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 1.879823893 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.984475777 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.94239922 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.901754882 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.223207452 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.116296805 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.925479829 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.878482562 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.868502812 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.989509151 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 1.87667231 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.867828334 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.899691548 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 1.877716344 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.104089124 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.385241414 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 1.884993592 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.868948418 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.281082517 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.000065592 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.912061951 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 1.8863154 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.109288034 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 1.888040376 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.870199365 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.87135831 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.905484179 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.886605883 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.870979738 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.136947427 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 1.888697603 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 1.901174083 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.877479642 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.872486724 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.043411828 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 1.881376507 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.03180064 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.880201586 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 1.876827319 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 1.869470742 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.103537727 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 1.891476599 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.395729024 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.886989937 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.869687004 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.987101796 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.037598171 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.30975171 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 1.885237341 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.046800136 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.231566723 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.909524585 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 1.882440453 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.272625418 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 1.911476638 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 1.881834713 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.871019174 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.870493221 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.872622433 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.91529678 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.898306414 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.317624297 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.396446951 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.153864835 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 1.913645484 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 1.885194232 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 1.873358622 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.135235829 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.883751178 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.870987297 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.096246576 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.409243225 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.887400095 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 1.875955571 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.373046498 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 1.888464292 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 1.901960229 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 1.86579385 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.100735324 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 1.890748928 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.914586454 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.872633716 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 1.878162555 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 1.87215528 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 1.901543328 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 1.883220137 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.870602993 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.367399211 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.00858601 seconds)
  done (took 232.072388714 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.874125732 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.871758272 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.871543419 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.872746565 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.872331205 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.872819733 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.871005683 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.871733629 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.873938665 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.871921568 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.872193153 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.870790665 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.872876057 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.876700239 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 1.912926925 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 1.87502375 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.347239825 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.872690892 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.87261382 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.87501987 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.4071893 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.8797781 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.876857555 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.874477843 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.873866924 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.875603939 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.873699272 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.909672325 seconds)
  done (took 167.353423968 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.87550029 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.930177948 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.88981058 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.921990828 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.889118995 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.874078597 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.964512214 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.896007016 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.878062099 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.873223395 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.876703108 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.907215416 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.883177055 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.97362424 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.902580143 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 1.982666226 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.981654399 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.883177405 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.874841471 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.873206029 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.918990843 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.892584753 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.896250455 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.938671169 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.891893127 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.930970532 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.892676271 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.875272389 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.877430046 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.988353167 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.898398524 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.906838764 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.909704703 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.896489472 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.989509214 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.993982934 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.981893158 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.975855374 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.882054813 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.875056823 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.874435134 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.876264301 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.93206038 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.88211951 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.867652974 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.992600423 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.90093683 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.878010825 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.873981909 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.865394374 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.890983028 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.880258805 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.913223549 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.003980364 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.917564684 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.903104368 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.976581316 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.002842999 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.877754167 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.974809296 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.88843175 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.991000178 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 1.900427902 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.879407036 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.87990412 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.88427028 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.925288444 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.989447553 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.986728993 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.888845722 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.976147249 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.934707875 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.891852292 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.87993723 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.879829193 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.93514241 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.989145824 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.937073831 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.938896315 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.916165726 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.886601445 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.879316664 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.879326214 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.907012846 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.888913932 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.993283122 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.999002814 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.890921904 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.879336777 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.880357166 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.877199285 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.904504788 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.941293491 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.922054088 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 1.990459591 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.921175628 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.92044931 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.888760514 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.894021004 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.882917606 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 1.910955722 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.890128071 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.891723822 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.163661433 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.911190425 seconds)
  done (took 203.127063969 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.228226864 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.929630804 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.949344759 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.151558699 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.239678948 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.803307443 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.916667319 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.930372655 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.938224124 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.058463281 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.991293074 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.969702001 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 1.917639038 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.90157559 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.924953812 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.94078435 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.958999514 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.224424254 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.13817407 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.428239883 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 1.914966482 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.218800429 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.267539841 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.276292987 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.968054381 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.2892447 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.521389749 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.033312378 seconds)
  done (took 62.849483006 seconds)
done (took 817.918206846 seconds)
SAVING RESULT...
DONE!

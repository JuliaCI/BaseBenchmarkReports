cset: moving following pidspec: 20240
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.932225766 seconds)
loading group "shootout"... done (took 1.077681354 seconds)
loading group "string"... done (took 0.631982961 seconds)
loading group "linalg"... done (took 8.309166839 seconds)
loading group "parallel"... done (took 0.163890478 seconds)
loading group "find"... done (took 2.905627632 seconds)
loading group "tuple"... done (took 2.05910063 seconds)
loading group "union"... done (took 14.40462828 seconds)
loading group "dates"... done (took 1.416769886 seconds)
loading group "micro"... done (took 0.211796719 seconds)
loading group "simd"... done (took 4.614593605 seconds)
loading group "io"... done (took 1.029648036 seconds)
loading group "random"... done (took 9.099949411 seconds)
loading group "problem"... done (took 1.552730019 seconds)
loading group "array"... done (took 24.27560223 seconds)
loading group "misc"... done (took 1.838398056 seconds)
loading group "scalar"... done (took 41.904707654 seconds)
loading group "sort"... done (took 3.214520381 seconds)
loading group "sparse"... done (took 12.35310746 seconds)
loading group "collection"... done (took 17.378424471 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.541787786 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.128140816 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.132893963 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.12626239 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.18904585 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.123041526 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.136856664 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.088547977 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.851878387 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.141590135 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116774161 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.439348547 seconds)
done (took 5.59481175 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.167630242 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093185914 seconds)
    (2/2) benchmarking "String"...
    done (took 0.084432566 seconds)
  done (took 1.52549313 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.07319643 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.06140686 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068389638 seconds)
  done (took 1.549702562 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065888527 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135448011 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066869321 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067220324 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067468475 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066579361 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066357514 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066384577 seconds)
  done (took 1.887583273 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072299691 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068338282 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065476129 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067397535 seconds)
  done (took 1.624218075 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065686745 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.121643272 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064886292 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065316352 seconds)
  done (took 1.665655598 seconds)
done (took 9.853231461 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.240937245 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.100667056 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.288038457 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.445873036 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.614985994 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.092520877 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074258457 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070008862 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.129236393 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.338884688 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.107199377 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.185425148 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089520692 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.173927159 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.024930649 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.119698437 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085442425 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.122665449 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094405953 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.131763505 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.393678997 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.077319692 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.072766476 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.069871745 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.067392154 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.649382394 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.671976432 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.124178297 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085570083 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.160581712 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.115645683 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.643460367 seconds)
  done (took 11.045074718 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.091024983 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088286274 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.068077278 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122415698 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.091414538 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068384761 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073908978 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066813868 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.086878576 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.122103363 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.08776941 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.096387714 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065439883 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067941319 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.075386337 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.200806489 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078359806 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.079345669 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066068967 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079637989 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104027714 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.076345788 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076275125 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076663845 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.127648621 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.167927125 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.095261987 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096907367 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.067307212 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078006343 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.113583598 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.122683239 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.064813043 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.063808871 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.117516459 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093772288 seconds)
  done (took 4.722789657 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.869699479 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.092975375 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.098491019 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.629279194 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065230445 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.14762735 seconds)
    (6/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.092077013 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071882821 seconds)
    (8/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.236176723 seconds)
    (9/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.272542638 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.14947532 seconds)
    (11/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.113214483 seconds)
    (12/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.14817522 seconds)
    (13/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.115094995 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068029434 seconds)
    (15/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 1.137486517 seconds)
    (16/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.116360424 seconds)
    (17/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.511861381 seconds)
    (18/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066848301 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066022724 seconds)
    (20/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.064601824 seconds)
    (21/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.067233321 seconds)
    (22/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066835071 seconds)
    (23/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063032106 seconds)
    (24/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.090056962 seconds)
    (25/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068704189 seconds)
    (26/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.095568264 seconds)
    (27/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087956998 seconds)
    (28/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.161764246 seconds)
    (29/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.969369544 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.300918823 seconds)
    (31/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066447617 seconds)
    (32/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.166828556 seconds)
    (33/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.084111464 seconds)
    (34/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.356710799 seconds)
    (35/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068398813 seconds)
    (36/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080906349 seconds)
    (37/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.083886267 seconds)
    (38/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.459234947 seconds)
    (39/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.121730633 seconds)
    (40/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064678699 seconds)
    (41/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.161719943 seconds)
    (42/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.114962392 seconds)
    (43/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063482284 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.118479332 seconds)
    (45/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.077326028 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067908425 seconds)
    (47/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067832113 seconds)
    (48/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.48061649 seconds)
    (49/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.068285332 seconds)
    (50/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070592456 seconds)
    (51/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.080978845 seconds)
    (52/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100003228 seconds)
    (53/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066856771 seconds)
    (54/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.064915493 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.168778916 seconds)
    (56/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063844742 seconds)
    (57/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065740518 seconds)
    (58/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.065905376 seconds)
    (59/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.062705869 seconds)
    (60/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.148910046 seconds)
    (61/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063236644 seconds)
    (62/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.139661894 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.063259882 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068049935 seconds)
    (65/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.100266705 seconds)
    (66/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.067654918 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.08440557 seconds)
    (68/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.092699025 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.330930849 seconds)
    (70/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.057289112 seconds)
    (71/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.06700505 seconds)
    (72/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.221432138 seconds)
    (73/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.076285451 seconds)
    (74/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065144163 seconds)
    (75/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068904061 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065753089 seconds)
    (77/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066575528 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066412165 seconds)
    (79/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.071358497 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070575006 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067190514 seconds)
    (82/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107737961 seconds)
    (83/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065262782 seconds)
    (84/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.063225571 seconds)
    (85/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069485466 seconds)
    (86/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.063172256 seconds)
    (87/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.065080057 seconds)
    (88/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070636862 seconds)
    (89/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098646712 seconds)
    (90/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.063733076 seconds)
    (91/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.542268089 seconds)
    (92/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.095054387 seconds)
    (93/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065026403 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.074042966 seconds)
    (95/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.103198697 seconds)
    (96/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065607262 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.069642434 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.182434206 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066820506 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065444538 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066285451 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068534818 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.094814838 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069020146 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112171773 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.051255415 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068403145 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06538597 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071347822 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068455447 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068656029 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06538431 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068119373 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067626033 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064429102 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.106057001 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.118013448 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065619302 seconds)
  done (took 22.901353971 seconds)
done (took 40.892542864 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.305495535 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.079088688 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.078580406 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.076880863 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.077336054 seconds)
  done (took 2.027120607 seconds)
done (took 3.473565088 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.129341327 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.080630484 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065857233 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.098308432 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.06772061 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.099029922 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.106649067 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.102113298 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.068010426 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.067319482 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.067374356 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.100336918 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.101971141 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.067378564 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.095713571 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.101001213 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.067710338 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.063360432 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.06711773 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.067324408 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.067543456 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.06281436 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.067160345 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.067233865 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.096685551 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.067197926 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063528559 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.096490946 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.067521083 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.096162293 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.067083924 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.0673053 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.0673807 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.097764972 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.06768705 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.097122724 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.06309329 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.067414456 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.0676219 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.067304807 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.070155851 seconds)
  done (took 4.688046546 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.069940565 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.080597907 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081690708 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06095841 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070522032 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080784663 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.0615461 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079838694 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086507353 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080767931 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.081019121 seconds)
  done (took 2.283508334 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.069165878 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081620075 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082793606 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060778361 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072155084 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083266144 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062369269 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082674724 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.084187997 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082034072 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082239859 seconds)
  done (took 2.28099227 seconds)
done (took 10.679395173 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.095312834 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.064864274 seconds)
  done (took 1.576472165 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.639708445 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.256191145 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.0666599 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.084743397 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.189630981 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.091090079 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.198316479 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.070064984 seconds)
  done (took 8.196431839 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.095726571 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.067593262 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.068193676 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.066763104 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.071106575 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.066488733 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.066410901 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.068080757 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.068578427 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.066533386 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066585235 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.068123594 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066880671 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.066622688 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.066817544 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.068001373 seconds)
  done (took 2.625637755 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.097812072 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.096834169 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.070965356 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.071954243 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.070565464 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.069885585 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073384339 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.073229597 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.070612916 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.072512804 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.07348571 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.070621858 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.069872985 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.06153708 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.071746341 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.072400822 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.068415888 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.071406397 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.071279641 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.073096959 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.071533278 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.061085349 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.069622121 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.07036781 seconds)
  done (took 3.288558135 seconds)
done (took 17.124053805 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.170360869 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.073068272 seconds)
  done (took 1.668662808 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.067098334 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.067352675 seconds)
  done (took 1.574645824 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071663868 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.059584551 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.0770513 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.06890038 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.060133614 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.05976564 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.075121522 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061049161 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.060083141 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.060498304 seconds)
  done (took 2.092852095 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061771194 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.067023448 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.065392947 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.063854807 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.065861219 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.061656633 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.063563641 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.061115477 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.067195458 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.06062664 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.064647672 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.080554703 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.063571625 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.08180302 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063360403 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.065127566 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.066158856 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063739261 seconds)
  done (took 2.628958993 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.060565798 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.060779211 seconds)
  done (took 1.576070525 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.063079143 seconds)
    (2/7) benchmarking "second"...
    done (took 0.061219343 seconds)
    (3/7) benchmarking "month"...
    done (took 0.063342279 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062607831 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.060376029 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.060063444 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060739123 seconds)
  done (took 1.881203753 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.416890229 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122672062 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.341829055 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069679464 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.077507655 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.251359522 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063264783 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067550802 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067702832 seconds)
  done (took 2.967961131 seconds)
done (took 15.845294531 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.081001638 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.177102142 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.089318529 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.399082198 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.090070852 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067158383 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112746117 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.168505427 seconds)
done (took 2.654131003 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.230004043 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.395481463 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.759160829 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.065536557 seconds)
  done (took 3.675422282 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.328989086 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078020464 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076102397 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066048579 seconds)
  done (took 2.023644951 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.064393037 seconds)
    (2/2) benchmarking "read"...
    done (took 0.07083475 seconds)
  done (took 1.60252532 seconds)
done (took 9.001485905 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.063873792 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062852406 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.092453325 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.063493346 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.062264341 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.062817767 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.062793027 seconds)
    (8/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062515568 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062804912 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.073424072 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.062649469 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.062978031 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062789286 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062792979 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062672067 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062243811 seconds)
    (17/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.062734802 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.06312667 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062923852 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062293554 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063186801 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06267586 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.062742832 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063058228 seconds)
  done (took 3.042691542 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077548836 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065702701 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.06585865 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.065283784 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.065862256 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.065487028 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.065495419 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.064472079 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066045389 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.064464047 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065889555 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065912004 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.064104494 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.066016939 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063993028 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.066248239 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.06542788 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0643764 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06425636 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065919239 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.065283799 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064376041 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.06598154 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065587339 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065821196 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066232225 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.063882248 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064429973 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065109802 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065643076 seconds)
  done (took 3.452138027 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.065101031 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.058869014 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059521058 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069028289 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.059534804 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.059622039 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.059798946 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.059022139 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.059345744 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.060105396 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059284836 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.059421649 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060097179 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058912185 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058893127 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.059833658 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063227316 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.077795118 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058864846 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.059143561 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062775216 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.05886922 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.059052846 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058518318 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.059269078 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058727223 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058608333 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.059500689 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058573032 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.05949766 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058940838 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063518188 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.06351278 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058570238 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068206826 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063830926 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060012204 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064495403 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062011913 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060766675 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060392126 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060464818 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060628396 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060207014 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070559761 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060475206 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.060858962 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061242935 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060201906 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.059542138 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.059461539 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.06051274 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.063896127 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060060446 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.059055935 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059643089 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058735658 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059573953 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058562704 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058377605 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058627032 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062398008 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060345352 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059985012 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.078220477 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.059964767 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.068135732 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061361759 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059703078 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062724999 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.058955836 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.076002909 seconds)
  done (took 5.90337565 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.0801939 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.083696959 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.064290573 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063993322 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059908566 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059599228 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067154741 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059386369 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063965074 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.079353995 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059610426 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064124683 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063959504 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063164604 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06001914 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063821129 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066734655 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.059908744 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.060042899 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064884105 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060994349 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.0688802 seconds)
  done (took 2.935413809 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.132980031 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064687997 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.103152087 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.0729247 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.0672617 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.073002322 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064582498 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065211248 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064695911 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065002564 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064953496 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064858875 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067364727 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065482525 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065342579 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066322166 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066192042 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066601007 seconds)
  done (took 2.784144139 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.075102607 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064794354 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.084783768 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065298096 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064811994 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064035789 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067854725 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068164982 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.064667618 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.06468272 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.06842026 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06390714 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.064497742 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064828631 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064329633 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.06420704 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.064008141 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064427143 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069356718 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068637403 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.06851098 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069349804 seconds)
  done (took 2.964985657 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075774057 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063331126 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078225461 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.065891612 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.05967322 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060257826 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065864471 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065025032 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.065592464 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064482219 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065154808 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060204751 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066603078 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065324648 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.06635781 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063874942 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063726847 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063720832 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063999417 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059314909 seconds)
  done (took 2.785345266 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.08433485 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062037789 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062115979 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.080972396 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06231103 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061725106 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.08095369 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.061780761 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.061758361 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.083300409 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062039209 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062171341 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.081020011 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.080473788 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061965245 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.080694845 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.080912731 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.080566607 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061911461 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061976142 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.083182407 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061934203 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.080356018 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062102802 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061779147 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061605996 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061718643 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.080386811 seconds)
  done (took 3.456367095 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062956895 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062070406 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.062376302 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.062782253 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.06321134 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.063347154 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064032033 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064061418 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063907251 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064309353 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.064086606 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.063976414 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.064127636 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063744812 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06416601 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063831614 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063689764 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064086897 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06409349 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064306769 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.063904442 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06382393 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064151543 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063816563 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064120144 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063734251 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063750787 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064244445 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063707849 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064254079 seconds)
  done (took 3.404934268 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.072053397 seconds)
    (2/2) benchmarking "in"...
    done (took 0.070230192 seconds)
  done (took 1.635792643 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.060733944 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075956321 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.058887208 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070874141 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068557698 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064458401 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070187874 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069296919 seconds)
  done (took 2.024970768 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.06558403 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.088545919 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.061186098 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062079341 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.068411857 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.130658279 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.072739011 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072521859 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074008339 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062938387 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.061219678 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.072755266 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.060372518 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073273031 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062239802 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069523848 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068440245 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.077418417 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073267125 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.059174924 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072802597 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061717284 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059615972 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061605352 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.06062201 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067150272 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.07568119 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072311904 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069329904 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058372577 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078612757 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059510039 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060776685 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068478541 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.063681002 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059335239 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.095173197 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.060144501 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064576214 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.059268778 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071559319 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.079595919 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073689213 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077100078 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061096785 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061612562 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.059760849 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.0612704 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.06326806 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068590784 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059490132 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066903847 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058957266 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060973279 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.069685214 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059838512 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064452715 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069559775 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072630129 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.069695958 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.067917843 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.074609787 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068367276 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.066997605 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.06016154 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.0780102 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061313518 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.071876426 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073855508 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060670245 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072223221 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059077873 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.057968131 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059077961 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.091241097 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061069612 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060955077 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059322424 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059662463 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.061089908 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069195466 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064701449 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067399649 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063150315 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074589582 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.068196435 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.059537704 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.065771832 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.076785755 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.062980653 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.059991164 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.075573249 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.063301122 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.059015523 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.076295295 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.068480863 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.060953959 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.060097545 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062934538 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072913879 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060382918 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057929403 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068374799 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062153041 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063759974 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065469244 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068650863 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060907685 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070855329 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065684758 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062352485 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059200143 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064725101 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060306557 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058169255 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068538916 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059576192 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074071571 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.06571924 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073726443 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074105148 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.06965855 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075162172 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.05951876 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058404069 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076803946 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068479 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.06077147 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076390044 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.059397811 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.069214676 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.059603678 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.19520312 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.068892151 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059136533 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061899018 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060089957 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.064385164 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061258273 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06150195 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.065194934 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068104781 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.071951957 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.060954437 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.068902138 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.060556685 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.075609183 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069946957 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.064580512 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063404438 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061431095 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.07180653 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066215507 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069143852 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059367531 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060751517 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060076494 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070223228 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069431697 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062073378 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067459986 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.06413132 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060831638 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060390192 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.063902633 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063595894 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063095155 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060520234 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.0678433 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068675597 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.072900555 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066878277 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068901303 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059258387 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.05952366 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061143408 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.0590763 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.063490354 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068965965 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07462305 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.070672858 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.080138416 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059829682 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069144349 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060963245 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.075590804 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.07299491 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060439438 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063984502 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.05881252 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060954116 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.068749489 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070998869 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.072415517 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074246741 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.064207303 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064066537 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.059623517 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074988772 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.060400634 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068813717 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068870929 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.063972658 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060075063 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.0613355 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.068193765 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.064453898 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.059275401 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.074707213 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.065553935 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.05916597 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.0733785 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060345971 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.070076047 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.059408251 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.063342759 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.064796095 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.061715392 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.069447656 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074429928 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059283114 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.060332731 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07484492 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.061540409 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061231952 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067780541 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.07405009 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063956551 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067365274 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070081793 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069336962 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.064007554 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068970173 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.060595861 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068609585 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.062727611 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070988198 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.05948964 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076586884 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.058695887 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076078555 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.06146439 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072332211 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.062034924 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070355099 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.06252303 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077826276 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061715012 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060153193 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070720589 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.058370559 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068179351 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.05904499 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063951594 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065713797 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068550696 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061200681 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068282013 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.061060267 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067774301 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.064061771 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067772604 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068772859 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063699105 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.059477305 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.067710768 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069786084 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.067250548 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.061385418 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.198460773 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.060692465 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.069113163 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.06173464 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.061242296 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068430725 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.065609381 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.066582114 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062021353 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.06217322 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061358605 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068071121 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070277016 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079131462 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070358739 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069023232 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071044643 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061278814 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077077651 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.06151744 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.06918235 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.06233256 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067209587 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070053009 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061743002 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08001575 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062932853 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069357381 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073942113 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069695539 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.064568231 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.079003717 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.063536132 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069222542 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.067661765 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064075525 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.06604489 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.061999579 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.067766566 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069057545 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.070128988 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060827886 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.06699473 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069264783 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061589791 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.067318041 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.061662922 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.067854038 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.06166667 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.058877534 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.064273414 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070624288 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.064207457 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064490939 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062782661 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.058508625 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.060390683 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.066563179 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.064380461 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.068373416 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074811446 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.058845628 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.060441622 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.059149931 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.06347321 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.07667571 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068964423 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067867272 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064192287 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059194332 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.061548627 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062070591 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.0603967 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.063343495 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.059272016 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.06063173 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071734846 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.062995702 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063929612 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060212224 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061150265 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.069310894 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.064603427 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.060449971 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065876961 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.059638252 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064598022 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.058977616 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.061190585 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063819634 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.059202424 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.063037989 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069681034 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075943998 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065928924 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.068129305 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.06104898 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067030882 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074429535 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066925323 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.0613791 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.069196368 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.059147917 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077184717 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.069204012 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067921677 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068962321 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.060761681 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075981275 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064038531 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069132441 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074220498 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060583404 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065915207 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059564504 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074399409 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063882759 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059343082 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067040852 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.0675729 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.06504624 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071225655 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060431627 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.067583397 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064613554 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063100984 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061218134 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061278729 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068059894 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.075089729 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060538682 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.063675667 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.06734058 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.067380927 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.063665542 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071255294 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.067040581 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061086477 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.060984819 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.062669554 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.0602503 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.070256004 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059590454 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.063632506 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.063399504 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.058532921 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.065609019 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075147448 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.068380544 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.06839658 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.058875636 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058362325 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.075943377 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.062478709 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062084824 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.066855477 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.068257422 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070635616 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.067764396 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.075287155 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.05998863 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.064681965 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071316473 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.06036331 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.059255621 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.062804914 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.060797857 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.067678159 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068759088 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.066461855 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061083259 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.065510046 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.07179699 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.059591312 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.063060125 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.063446915 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.059465412 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.068630693 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.066161683 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.067181546 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.06025219 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.058425284 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062236048 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.067201117 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.066183953 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.067327176 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060263878 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.064859078 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.071491043 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066406799 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061967801 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058305878 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061696674 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.067465372 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.062713865 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.058131451 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063424087 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062296922 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064871374 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.067228828 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.062838516 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058187862 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.074223169 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.066092151 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.067369815 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.060591982 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.060303158 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059010615 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.058252634 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069116457 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.058231765 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059557633 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.062924073 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.060018265 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.077667884 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.066126858 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07315076 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059112647 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.062386871 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.058089149 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067980812 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.06300722 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.059070591 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.068309006 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.057893412 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072780263 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.069352369 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.06312145 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.05786307 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.084113188 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.066016227 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.073116802 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.067977173 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.067291991 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062069916 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.068143368 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.06069194 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.068785243 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058562228 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.057513693 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.067956164 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.066760551 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.070175517 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.057943333 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.067843815 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.060423253 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.06656172 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.066087234 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.060271065 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059936432 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.060344091 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.067377632 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.062691106 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.067702369 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.06370734 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.074377152 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.059641352 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.068874351 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.067161781 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.068739895 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071452013 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069670039 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.065817453 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.059181644 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06527338 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.065841445 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.059754095 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.063132038 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.062086426 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078452478 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.059863873 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.059758691 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071298652 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.323566941 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062020091 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067995652 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066516393 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071775636 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062576764 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072564751 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.066393477 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.063036189 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066782724 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066958137 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061124676 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061500797 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061782226 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071135568 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065820592 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.06191699 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079803208 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062654695 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070064751 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072101887 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.067885934 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063093614 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060168931 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062257198 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074108984 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076387332 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064525385 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069415875 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062487763 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.06977652 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059462733 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069219521 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.068205913 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068769654 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.059949853 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060300421 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.075043411 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.0750247 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.064369935 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.069260442 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.069249797 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.061401967 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080608229 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.069786443 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062928027 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.071989118 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063820356 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061127487 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060856665 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063535189 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.072734247 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061223998 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064551395 seconds)
  done (took 41.313499315 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.09748816 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061445146 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.059921409 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.06011085 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070089997 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061989655 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060985598 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061476405 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061112529 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062630917 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.060240112 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06153278 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.070525893 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072449108 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069845571 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063282758 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060025095 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060772649 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.059910357 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061004324 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.069571246 seconds)
  done (took 2.986658214 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.066264634 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.074178222 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070397012 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.075886667 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067208167 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063809673 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.070849717 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06364295 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.071051421 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068777185 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.071292332 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06359255 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.069266422 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.068841797 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069111005 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064153095 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.071848383 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069194091 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.064896621 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.070542373 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063903291 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.070618798 seconds)
  done (took 3.104944236 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.061796878 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.060709888 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.06805359 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062059724 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.059079349 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.062542444 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059059407 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063946372 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063724737 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063975294 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068353636 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060549412 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059381696 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064991988 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.05948417 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.060432373 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.10161949 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061126133 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.060886816 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.059666546 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063042602 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068415205 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.059352728 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060237197 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.064119367 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.062988309 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.059707525 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061985592 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.06009868 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063661633 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.060639678 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059350239 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068376435 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.068035516 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063918797 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.064083837 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.061851949 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061087372 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.060277492 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.059614157 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.06877804 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062606546 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061909925 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063070875 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070664497 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061414245 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061666909 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070424931 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.061348593 seconds)
  done (took 4.712528071 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069479878 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.110910629 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066430723 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.092538907 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073738948 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067087106 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066634949 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.094748145 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062134565 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.06319042 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074743525 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075581074 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064205392 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065760499 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068354475 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064216282 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06505979 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063756962 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067169736 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063997367 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066761071 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.068643498 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073695845 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.0733373 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06336524 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061723398 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062106699 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.063460576 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.07320824 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066097236 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.063488567 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064433709 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.072232863 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067053154 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061711075 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061754659 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072276659 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.063857082 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.064125 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062574362 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063590714 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065046829 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068152011 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074859361 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064577581 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.067615245 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062034782 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.060013985 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.071976791 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.062337335 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065601831 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072670947 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063436078 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.062692391 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063549817 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072071375 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.062038226 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.06123749 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.062435256 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071993021 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060400993 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063017828 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072982162 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063274628 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067528789 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074105901 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066765869 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063079792 seconds)
  done (took 6.333567827 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068810331 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093694346 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070364159 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.070593757 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070152034 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.072736809 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.070934003 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071284902 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071686586 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072401809 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071896172 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.11129657 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.067418964 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.074202507 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069566202 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070200617 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069527726 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069876289 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069503696 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069406499 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069413512 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.070322445 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069650224 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.070291274 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07136998 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066108201 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069202275 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069401683 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070050356 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069535751 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.07177672 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069495261 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.070562318 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.070025863 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.071936566 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069690733 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060651568 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06929092 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069298418 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069777787 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067718055 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071434259 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071055056 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067924238 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071467072 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073797448 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07003935 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.071631122 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076230891 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.070570762 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069645366 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069927224 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069386696 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069579236 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.070055278 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.076218647 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070496848 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070086048 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069671403 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.070300327 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070304353 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.076492343 seconds)
  done (took 6.063497328 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072876105 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066728875 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077704485 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.05954043 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060665963 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070630881 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.060965692 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061460344 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067935804 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068301784 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06944172 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.0704822 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072568884 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069612523 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070563279 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072441047 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070352891 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070324564 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067603947 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069872226 seconds)
  done (took 3.001520451 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.074470008 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.078003676 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.065394783 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068208816 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.065155656 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068362504 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.064780222 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066540678 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066771188 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066940529 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071239285 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071351102 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067141761 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06993523 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071371958 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070257161 seconds)
  done (took 2.728615367 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.066153425 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066189279 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.066255451 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060876157 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065365336 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.0614701 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.061828032 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.060551175 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.060964273 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.074998855 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.061896571 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.074098504 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.061593639 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060268755 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.060121209 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065871965 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.059919859 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060433324 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.060418843 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.064591672 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.066835803 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.061348964 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064412347 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060515262 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.065590738 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.066897854 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.06167339 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064049739 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060788437 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062238636 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.0678859 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068936103 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062111961 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062900392 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061307473 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062440002 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062227236 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.06241013 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.067749107 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062282453 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061037459 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067486534 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062094788 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063133262 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061462284 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062844373 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061415945 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067443976 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062129075 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.067794538 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062686744 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064125957 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062611893 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069470599 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.06457331 seconds)
  done (took 5.131597873 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077203873 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064983682 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060386177 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061187802 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066242017 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066683265 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066341784 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066450132 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066848806 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061314998 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066878266 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.065542917 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066974888 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066372953 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066871807 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065179808 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058912668 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064671321 seconds)
  done (took 2.814073495 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.071481398 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064887249 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.06959177 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.065562105 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.064098517 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065231141 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06152736 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060786647 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.0608903 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.065115621 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064519931 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.064226993 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06002143 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.064792899 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064460008 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064337422 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.063975189 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059781229 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.064359778 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060099197 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064965358 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059789307 seconds)
  done (took 3.032443469 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.086549612 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082111661 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.124651179 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078669668 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.086290206 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070264149 seconds)
  done (took 2.157871037 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.091842619 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.102696729 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064393283 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064276857 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072578691 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070301748 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067213531 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067814369 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072583401 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071010045 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067403844 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072632591 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072694557 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068907079 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072936279 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074832251 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067529553 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067402109 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064599544 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074780956 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067618677 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072506735 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067403296 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067302522 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067835021 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068964329 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074730452 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071232581 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067076445 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072826166 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075385199 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067734995 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072521841 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071005526 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064451193 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072795005 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067741245 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076669969 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074578788 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070730583 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065934019 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074567691 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072952709 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068879157 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074690194 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067650837 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068937967 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067593507 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067796605 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077007244 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072854858 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068888345 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072839737 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074977482 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075253236 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077016889 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071299749 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06951459 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072420939 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071267316 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068899646 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072591151 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069301983 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071500413 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075454471 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069041106 seconds)
  done (took 6.352851615 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.098260102 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064579787 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067618019 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071747154 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069118261 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06745001 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067561841 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067816962 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067854181 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065293431 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101795699 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067955382 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069429234 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069157274 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068076078 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067728559 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067758758 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069284923 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065780752 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07740989 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067643204 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069901557 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069298899 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069393539 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07149854 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074853664 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067421568 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067501 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06705811 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067485511 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069527531 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069102795 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070323202 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066538073 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071322744 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069246305 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069360024 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071372325 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06941442 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073930403 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071109083 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077064887 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067174718 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067525491 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07129129 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06732477 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067119979 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065155789 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067521249 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064819436 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070850884 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07132142 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071368121 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068963126 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067673985 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067921404 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068025727 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067424357 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067661684 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074960486 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069415862 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067516768 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077126724 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067494167 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067455576 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069103508 seconds)
  done (took 6.279443804 seconds)
done (took 131.877645544 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.216147036 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.187799565 seconds)
  done (took 2.0247954 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.072819784 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.096066395 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.073600117 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.137315914 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070486305 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.107053711 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105365033 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.074291663 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.070184455 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070130694 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070646218 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.073198935 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.139899345 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.070286435 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.070318499 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.073137544 seconds)
  done (took 3.016387033 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.105059129 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.181108277 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.110738793 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068323837 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.104852748 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.075015024 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.068702202 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.079867446 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073776048 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.082211298 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076794897 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.073812911 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.069909057 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.073337709 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.072384619 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.077881567 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.07035561 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.074572549 seconds)
  done (took 3.184697534 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.095387583 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.084297173 seconds)
  done (took 1.831207424 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.153376896 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.10286132 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.142012881 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.321576271 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.127014085 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.124567796 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.12731509 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.12320744 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.108096645 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.12013565 seconds)
  done (took 3.093913416 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.103057633 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.17122129 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.306367166 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.119640382 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074429473 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.09660548 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.120517066 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08074102 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.077910998 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.078235833 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077738714 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075551689 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.09951118 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.074787544 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.073373358 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074835885 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.101901833 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072751724 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.07351728 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.074198188 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.103366159 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069306134 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074135703 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072657828 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076157996 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.075899485 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070194433 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069032844 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.073623608 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072980581 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.075784684 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.093153111 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.075845078 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.095558151 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.072804543 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.096592993 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.07337394 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072408578 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073195336 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.072665056 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.074714673 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.074949505 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.077659409 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.075603733 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070358135 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.072768679 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071001538 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069076994 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076915648 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.069637482 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.07655493 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.076181042 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.095923234 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.069525693 seconds)
  done (took 6.290337527 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104961124 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.103316955 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069078729 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.111257574 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.103108822 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06810867 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.101929131 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.097733281 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.105679274 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067844963 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067434532 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067611272 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07456193 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.07746125 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.113764377 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.105525936 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069931523 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068465252 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.105218999 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.10496535 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067384435 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.099269788 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.09703467 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.103035804 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.06687488 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068101371 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066922758 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.06703845 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072288405 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.074267718 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067275065 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073958805 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.078832715 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073385765 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066071013 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066831255 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06695936 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.073525845 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074512956 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07401531 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.073287381 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06624629 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066847501 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067702255 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067465279 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066472552 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072326274 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.073809088 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.07282019 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066749363 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067628334 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066559503 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067022931 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073231698 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.072708793 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.074164067 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073584931 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067090055 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066677966 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068831311 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074847054 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075311399 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074318975 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067928238 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.075289186 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066845895 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075479543 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.079317583 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066951731 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067442822 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067233104 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067300024 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067879437 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072787123 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.072880039 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067393328 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.06707836 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067228523 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.074807966 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.072780436 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066781778 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072062012 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066470198 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067248317 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067594961 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067914952 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.072106815 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076768372 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067693864 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066736192 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067202934 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067213075 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.066584961 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.072166391 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073533352 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.073584865 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.072830876 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067672857 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.073557361 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073204745 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067600378 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072914383 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066881556 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067314017 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067150803 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073158564 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072807235 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07507503 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067292312 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066992976 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073157362 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075586137 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066848153 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.073220515 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074889002 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.20786483 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066969001 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076132066 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067609269 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075132154 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067958113 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075508686 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067520135 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073064871 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067655142 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066630149 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067432113 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.073028868 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067979457 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067292648 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067962995 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067776429 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073593803 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076409888 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068323563 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073696501 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.073392401 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068161208 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073643036 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067798412 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074548073 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.300381427 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067744724 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066411293 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07617977 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067463512 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067516597 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067398112 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075281566 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067188763 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075360905 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072625582 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066971964 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077437959 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074908658 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.07237979 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.075864545 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067463443 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06736702 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067051821 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067939925 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072222095 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073612803 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067797567 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06715468 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.072677202 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.075448448 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066487528 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.072761083 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07260961 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.072856384 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067655814 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067119533 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075773599 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074760178 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.073005417 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.072714911 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073596632 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066536547 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072427526 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072553079 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067153195 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078580023 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067243528 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.076598076 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073274585 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072324175 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073014799 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.074474823 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074685822 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075461335 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076964307 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066526672 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066965525 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.073215031 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067312436 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067051318 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072564767 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067267916 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067519672 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077601927 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067147211 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075007704 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066503197 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073730007 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066599091 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067334362 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077436765 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067108225 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067578507 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072774251 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067183009 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072980417 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075055562 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073021719 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066791915 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067370405 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073386329 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073940864 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066945521 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066564702 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067478081 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.072414982 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.071953857 seconds)
  done (took 18.334709141 seconds)
done (took 39.438064579 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.201880131 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.162650565 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.190809296 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.113154639 seconds)
  done (took 2.414979389 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.089382909 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.097517566 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.074110964 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.063638213 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.07902069 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.063679682 seconds)
  done (took 2.158559142 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.243597888 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.184053884 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.168138257 seconds)
  done (took 2.280309896 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.212259774 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.189697802 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.474247988 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.2967956 seconds)
  done (took 2.95730417 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.125952909 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.075917513 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.062540478 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.07532463 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.101514979 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.129687555 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.083630142 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.104565164 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.073406193 seconds)
  done (took 2.5795196 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.126287351 seconds)
done (took 14.223883927 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.106811489 seconds)
    (2/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.250126359 seconds)
    (3/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.074384688 seconds)
    (4/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.074532977 seconds)
    (5/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.071888844 seconds)
    (6/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.230086403 seconds)
    (7/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.251736152 seconds)
    (8/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.089653891 seconds)
    (9/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.075171479 seconds)
    (10/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074603407 seconds)
    (11/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.07343036 seconds)
    (12/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.077337362 seconds)
    (13/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.205467766 seconds)
    (14/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.162019927 seconds)
    (15/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.223746864 seconds)
    (16/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.240987959 seconds)
    (17/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.072356691 seconds)
    (18/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.225882869 seconds)
    (19/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.077173245 seconds)
    (20/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.073011459 seconds)
    (21/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.181719484 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.122002864 seconds)
    (23/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.068017325 seconds)
    (24/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072627468 seconds)
    (25/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.215364056 seconds)
    (26/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.222740619 seconds)
    (27/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.097743232 seconds)
    (28/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.163288151 seconds)
    (29/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.210884263 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.182645006 seconds)
    (31/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.074337093 seconds)
    (32/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.074496423 seconds)
    (33/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.086585423 seconds)
    (34/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.064874421 seconds)
    (35/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.136961841 seconds)
    (36/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.153909329 seconds)
    (37/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.081905156 seconds)
    (38/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.194442454 seconds)
    (39/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.166559186 seconds)
    (40/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.07674488 seconds)
    (41/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.164838239 seconds)
    (42/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.063397941 seconds)
    (43/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.076295916 seconds)
    (44/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.071305794 seconds)
    (45/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.067451722 seconds)
    (46/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072212432 seconds)
    (47/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.085752755 seconds)
    (48/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.064476722 seconds)
    (49/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.083534186 seconds)
    (50/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.07295179 seconds)
    (51/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.183753093 seconds)
    (52/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.134167903 seconds)
    (53/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.075129046 seconds)
    (54/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.063025595 seconds)
    (55/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.07300622 seconds)
    (56/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067946269 seconds)
    (57/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.069303748 seconds)
    (58/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.162400418 seconds)
    (59/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.172041218 seconds)
    (60/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.154728527 seconds)
    (61/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072883245 seconds)
    (62/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.064506295 seconds)
    (63/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.138795355 seconds)
    (64/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.14875084 seconds)
    (65/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.088365869 seconds)
    (66/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.089637551 seconds)
    (67/341) benchmarking ("sort", Bool, false)...
    done (took 0.139007406 seconds)
    (68/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.076437726 seconds)
    (69/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.064130889 seconds)
    (70/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.071750125 seconds)
    (71/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.063615761 seconds)
    (72/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.080678292 seconds)
    (73/341) benchmarking ("sort", Int64, false)...
    done (took 0.064878016 seconds)
    (74/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.172186316 seconds)
    (75/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.073158497 seconds)
    (76/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.063906763 seconds)
    (77/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.142070071 seconds)
    (78/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.093548865 seconds)
    (79/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.224711946 seconds)
    (80/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.073535696 seconds)
    (81/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.088791853 seconds)
    (82/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.182931108 seconds)
    (83/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.091690882 seconds)
    (84/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.121046078 seconds)
    (85/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063387828 seconds)
    (86/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.072858946 seconds)
    (87/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.216104304 seconds)
    (88/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.157726244 seconds)
    (89/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.131786332 seconds)
    (90/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.192963457 seconds)
    (91/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.068545177 seconds)
    (92/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.190062687 seconds)
    (93/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.224921695 seconds)
    (94/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.064195877 seconds)
    (95/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.157292711 seconds)
    (96/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.065405741 seconds)
    (97/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073102507 seconds)
    (98/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.140903546 seconds)
    (99/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.143232062 seconds)
    (100/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.076185334 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.086136146 seconds)
    (102/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.064068664 seconds)
    (103/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.07185671 seconds)
    (104/341) benchmarking ("sort", Int8, false)...
    done (took 0.145779759 seconds)
    (105/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.075120341 seconds)
    (106/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.093633436 seconds)
    (107/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.064028266 seconds)
    (108/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.067206283 seconds)
    (109/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.121434683 seconds)
    (110/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.140066891 seconds)
    (111/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.143329039 seconds)
    (112/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.19417596 seconds)
    (113/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.065518878 seconds)
    (114/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.073142367 seconds)
    (115/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067241372 seconds)
    (116/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.064648952 seconds)
    (117/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.07043007 seconds)
    (118/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.10496313 seconds)
    (119/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.075761523 seconds)
    (120/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.077201934 seconds)
    (121/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.063542528 seconds)
    (122/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.065434859 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.086292508 seconds)
    (124/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.06737729 seconds)
    (125/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.140758385 seconds)
    (126/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.156527297 seconds)
    (127/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.064478719 seconds)
    (128/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.081004043 seconds)
    (129/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.064645612 seconds)
    (130/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.065914464 seconds)
    (131/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.063528956 seconds)
    (132/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.194375794 seconds)
    (133/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.063904727 seconds)
    (134/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.215769078 seconds)
    (135/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.081785764 seconds)
    (136/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.064182915 seconds)
    (137/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.155206636 seconds)
    (138/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.088125777 seconds)
    (139/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.075663452 seconds)
    (140/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.071392058 seconds)
    (141/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.063505576 seconds)
    (142/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.064172781 seconds)
    (143/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.114496847 seconds)
    (144/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.088797839 seconds)
    (145/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.135223919 seconds)
    (146/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.08473024 seconds)
    (147/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.138496782 seconds)
    (148/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.064519083 seconds)
    (149/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067323304 seconds)
    (150/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.085762434 seconds)
    (151/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.150263783 seconds)
    (152/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.063596699 seconds)
    (153/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.063976837 seconds)
    (154/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.063516739 seconds)
    (155/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.143997178 seconds)
    (156/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.063928965 seconds)
    (157/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.209205481 seconds)
    (158/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.064873596 seconds)
    (159/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.074007816 seconds)
    (160/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.07245788 seconds)
    (161/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.064483308 seconds)
    (162/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.068125269 seconds)
    (163/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.145954096 seconds)
    (164/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.072712181 seconds)
    (165/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071983751 seconds)
    (166/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.06749313 seconds)
    (167/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.067900159 seconds)
    (168/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.063296666 seconds)
    (169/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.149882463 seconds)
    (170/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073378925 seconds)
    (171/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.064283762 seconds)
    (172/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.066420155 seconds)
    (173/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.066258172 seconds)
    (174/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.063373317 seconds)
    (175/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.143759561 seconds)
    (176/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.08910021 seconds)
    (177/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.129187722 seconds)
    (178/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.073108721 seconds)
    (179/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.063241337 seconds)
    (180/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.072165136 seconds)
    (181/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.065820015 seconds)
    (182/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.073567874 seconds)
    (183/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.186485095 seconds)
    (184/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.065178808 seconds)
    (185/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.068593898 seconds)
    (186/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.086856382 seconds)
    (187/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.06385512 seconds)
    (188/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.067627875 seconds)
    (189/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071932872 seconds)
    (190/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.154364858 seconds)
    (191/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.072874297 seconds)
    (192/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.164061459 seconds)
    (193/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.148326775 seconds)
    (194/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.064771812 seconds)
    (195/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.063897848 seconds)
    (196/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.064681271 seconds)
    (197/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.110246107 seconds)
    (198/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.066081192 seconds)
    (199/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.170816262 seconds)
    (200/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.063226479 seconds)
    (201/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.063055722 seconds)
    (202/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.122618848 seconds)
    (203/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.063777599 seconds)
    (204/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.134658572 seconds)
    (205/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.124961479 seconds)
    (206/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.071020323 seconds)
    (207/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.071355962 seconds)
    (208/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.194327547 seconds)
    (209/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.162180388 seconds)
    (210/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.065066754 seconds)
    (211/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.138956552 seconds)
    (212/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.075277821 seconds)
    (213/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.183986478 seconds)
    (214/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.081475951 seconds)
    (215/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.146040403 seconds)
    (216/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.148517144 seconds)
    (217/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.085024372 seconds)
    (218/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.064929807 seconds)
    (219/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.064373912 seconds)
    (220/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.119688265 seconds)
    (221/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.071061982 seconds)
    (222/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.063814477 seconds)
    (223/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.071094986 seconds)
    (224/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.062177008 seconds)
    (225/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.07453704 seconds)
    (226/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.06502778 seconds)
    (227/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.076216228 seconds)
    (228/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.064835239 seconds)
    (229/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.064324945 seconds)
    (230/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.165412413 seconds)
    (231/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.064005043 seconds)
    (232/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.128807067 seconds)
    (233/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.069853123 seconds)
    (234/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072444584 seconds)
    (235/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.079669304 seconds)
    (236/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.086301295 seconds)
    (237/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.063404985 seconds)
    (238/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.065125474 seconds)
    (239/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.06279362 seconds)
    (240/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.070393631 seconds)
    (241/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.130650453 seconds)
    (242/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.120889381 seconds)
    (243/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070156431 seconds)
    (244/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.063846448 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.063081387 seconds)
    (246/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.063241557 seconds)
    (247/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.074667782 seconds)
    (248/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.064308646 seconds)
    (249/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.177907905 seconds)
    (250/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.064920842 seconds)
    (251/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.064197121 seconds)
    (252/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095860825 seconds)
    (253/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.065847004 seconds)
    (254/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.07046899 seconds)
    (255/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.06242698 seconds)
    (256/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.081939885 seconds)
    (257/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.06348995 seconds)
    (258/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.091269796 seconds)
    (259/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.062308561 seconds)
    (260/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.074497197 seconds)
    (261/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.073035137 seconds)
    (262/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.062816202 seconds)
    (263/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.126165892 seconds)
    (264/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.064018129 seconds)
    (265/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.140787603 seconds)
    (266/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.181399241 seconds)
    (267/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.078105102 seconds)
    (268/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.063112131 seconds)
    (269/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.08137229 seconds)
    (270/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.143765016 seconds)
    (271/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071292278 seconds)
    (272/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.062534417 seconds)
    (273/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.06450067 seconds)
    (274/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.0623292 seconds)
    (275/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.064396594 seconds)
    (276/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.078503959 seconds)
    (277/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.062808423 seconds)
    (278/341) benchmarking ("sort", Float32, false)...
    done (took 0.133185158 seconds)
    (279/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.163064567 seconds)
    (280/341) benchmarking ("sort", BigInt, false)...
    done (took 0.252564765 seconds)
    (281/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.06418643 seconds)
    (282/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.074102796 seconds)
    (283/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.075215546 seconds)
    (284/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.065053727 seconds)
    (285/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.071299475 seconds)
    (286/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.062301767 seconds)
    (287/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.063603116 seconds)
    (288/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.062017655 seconds)
    (289/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.064082495 seconds)
    (290/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.063831966 seconds)
    (291/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.065394853 seconds)
    (292/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.085761728 seconds)
    (293/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.063241406 seconds)
    (294/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.062406458 seconds)
    (295/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.079282736 seconds)
    (296/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.062030233 seconds)
    (297/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.061971031 seconds)
    (298/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.087117217 seconds)
    (299/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.062895219 seconds)
    (300/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.063097439 seconds)
    (301/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.074066122 seconds)
    (302/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.064859591 seconds)
    (303/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.083990221 seconds)
    (304/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.172206188 seconds)
    (305/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.063608766 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.137405774 seconds)
    (307/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.063495027 seconds)
    (308/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.064242396 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.08030915 seconds)
    (310/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.066973037 seconds)
    (311/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.06379627 seconds)
    (312/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.065110206 seconds)
    (313/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.062579471 seconds)
    (314/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.061890233 seconds)
    (315/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.069786417 seconds)
    (316/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.070173486 seconds)
    (317/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.064091901 seconds)
    (318/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.079299402 seconds)
    (319/341) benchmarking ("sort", Float64, false)...
    done (took 0.131381093 seconds)
    (320/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.0878976 seconds)
    (321/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.062199546 seconds)
    (322/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.064746308 seconds)
    (323/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.071666583 seconds)
    (324/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.066663837 seconds)
    (325/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.062910654 seconds)
    (326/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.066534793 seconds)
    (327/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.063014256 seconds)
    (328/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.075247622 seconds)
    (329/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.071892525 seconds)
    (330/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.06422966 seconds)
    (331/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.070768595 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.134181086 seconds)
    (333/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.06391291 seconds)
    (334/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.062413523 seconds)
    (335/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.062132135 seconds)
    (336/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.067876529 seconds)
    (337/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.086639664 seconds)
    (338/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.062923864 seconds)
    (339/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.063028188 seconds)
    (340/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.06378561 seconds)
    (341/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.062056169 seconds)
  done (took 35.289195724 seconds)
done (took 36.994229733 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.093843402 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.091428839 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.074167802 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.085244418 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.081839872 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.10175214 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.075715919 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079934481 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.083918154 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.082157488 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.080930993 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.074573367 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.07736648 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.076940163 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.074270401 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089711173 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082261432 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075313452 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075796581 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065827424 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075452955 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.066807286 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.066085706 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073331094 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.078279288 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.073264876 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.075538441 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075562979 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066832967 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.066302145 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071672944 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.074733801 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.065448932 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.077291732 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.074245594 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074416537 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075369622 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.078474072 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064731831 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.06579029 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.07646229 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.065439697 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.073522827 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071678489 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.070430273 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.072822652 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073816125 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076927026 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.087343669 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069723481 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.076635693 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.076178378 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.076441096 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.070911394 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.070968241 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073081551 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.071953732 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.087301487 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074100377 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.06976537 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075591471 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074378795 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.07198022 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.07362717 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073642956 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076690365 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076366373 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072302615 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076675332 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.072746813 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064890058 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.07299708 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.070297311 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.064707535 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.076259641 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.079391849 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.064128967 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.069872615 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.07326894 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.073200453 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.064456034 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069539091 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.064257455 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.070296081 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.0695742 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.07172358 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.071024251 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072534025 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.064268086 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073811249 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.072880057 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.073306622 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.065049787 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076972693 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.064971575 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.072120227 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.065244635 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065035989 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.064055301 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.070605518 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064804398 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069465955 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.073283709 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.063560898 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069901417 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.077576051 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064717438 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072914358 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.063926824 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.064639776 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.075351251 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.075981308 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.065000682 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069691643 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.064291552 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071299912 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.064556705 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.064830619 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064870822 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.065293592 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.07260644 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.065067036 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069939961 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071010229 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076849302 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.064765546 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.069824065 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069503458 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.065680382 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.071898058 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.06526248 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.064928804 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.064425615 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077930755 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069492949 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.065443554 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.071239221 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069667106 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073142159 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063405973 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073636213 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070794658 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069746967 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071718507 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063215028 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.075463935 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069286169 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068859044 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.06404607 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.206602916 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.064019195 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064730293 seconds)
done (took 13.11735635 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.065463639 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.10276667 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.072667189 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.080524692 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.07607777 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065811 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068265281 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.080822273 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.068277495 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.083983405 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.09246367 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085814228 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.090856477 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.064167989 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064946029 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.066215238 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.06350104 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.072087396 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.078935394 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.087815513 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.092791357 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.065215686 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.067731064 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.080989388 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.075182199 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.080671753 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066653818 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.066367685 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.108576374 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.081914022 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.091460618 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064920015 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.066204996 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.078669174 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.078813062 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.072113395 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.06633887 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.072357846 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.068207516 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067482605 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069750218 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081684878 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071509115 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070933032 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068616753 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068507515 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.068135656 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070778238 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.081029888 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.068581462 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.072837704 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.077114862 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066913238 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.06561147 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.063600873 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.068847072 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065280462 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.066604812 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065675454 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.065113723 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065767934 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.06771727 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.066540127 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.065668846 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068499143 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.067703772 seconds)
  done (took 6.638541105 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.078864134 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093255991 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.077341157 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.07719881 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.064859386 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.065465323 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.065341122 seconds)
  done (took 2.356464822 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.066237445 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078130243 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.080854799 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.080868756 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.074379193 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.082437205 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065374167 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.096142057 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064612219 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.07959106 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.110398841 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.081920802 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068823138 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077072546 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.066329756 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.072389521 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065897946 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075783459 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073700595 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.082942136 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069796708 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.094614466 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080374965 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066413905 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.085652969 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.069898233 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.064831098 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065885699 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067268837 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.066912975 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067281395 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.10325866 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.068925481 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.07699748 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06411341 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.065272845 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071881812 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069580014 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.06758396 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.073696605 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.070950141 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067070453 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.063914478 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.066939301 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.06805949 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.068711763 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.064132744 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.06721034 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066772903 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077227125 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064210963 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.069393141 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.070502444 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070201278 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.074891059 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069627511 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075630505 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067689737 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077842037 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073880719 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066990466 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.073131977 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.072429083 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.070852966 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.072768816 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.06983156 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.069121772 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.070676403 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066639679 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.067274705 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067809747 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.072342333 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.0650135 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.067915922 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.0691175 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.067289285 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.069086419 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082087154 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.081914005 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.078423183 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.067741812 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067098938 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.069244973 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.081631082 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069910089 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066625357 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.069248655 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064694539 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.070143632 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067179592 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071688272 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.066683661 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.07432429 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067380234 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069930007 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073098283 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.065425286 seconds)
  done (took 8.835584269 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068387972 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.066631669 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.067205398 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.066016642 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.067293333 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.066811158 seconds)
  done (took 2.287660891 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.086854229 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.066423421 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.081952528 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.066151405 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.102985081 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.07256167 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.072231247 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.073198637 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.071809266 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.079079336 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.072166716 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.074793007 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.071511351 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.070269854 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.071947038 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.067163187 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.072106142 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068895482 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.078634461 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070232829 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.078062789 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.070338191 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070982392 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.076833087 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.069310358 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.066834308 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066401441 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.07907239 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.078844245 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.073107763 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.070240564 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068599523 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07397298 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.072898036 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.072041782 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.073649823 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066231714 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.071279453 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068178701 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068834852 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.074059585 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070142352 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.067945834 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070911987 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.072765092 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.073955002 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.071518006 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069441541 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.071503502 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070714969 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.075527535 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.065914576 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068598974 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070998404 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.073707256 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072758722 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.071064942 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.071371156 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.070016991 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.073669454 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066398611 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.069195414 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072544799 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068663607 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.070504949 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071024433 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.073742366 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070477439 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070395847 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066101621 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071043629 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.065873407 seconds)
  done (took 7.037092848 seconds)
done (took 28.978902173 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.540424951 seconds)
  done (took 2.369041538 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.574089748 seconds)
  done (took 2.44145322 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.327201472 seconds)
  done (took 12.197251872 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.290054573 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.313755052 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.709298318 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.128597377 seconds)
  done (took 3.348148957 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.724158887 seconds)
  done (took 2.602193754 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.223409678 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.216056427 seconds)
  done (took 2.317620051 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.339775124 seconds)
  done (took 2.210776968 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.119238009 seconds)
  done (took 2.986446133 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.220076561 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.163243014 seconds)
  done (took 2.26453029 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.484812651 seconds)
  done (took 2.356773149 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.293073813 seconds)
  done (took 6.172489086 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.237214263 seconds)
  done (took 2.145517346 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.228730255 seconds)
  done (took 2.106650961 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.167506997 seconds)
  done (took 4.04036737 seconds)
done (took 51.43772688 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.082324009 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084292897 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.084375528 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079704694 seconds)
  done (took 2.179013738 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.07328931 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.069050477 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.072351942 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.072364801 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.070749274 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.071406612 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071583084 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067606453 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.070103407 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.069001178 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.067671026 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.069088358 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.074034086 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.068817072 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.071173214 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.072466874 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.069089015 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068854374 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.071542837 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.06876288 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.071547883 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068647084 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.06723005 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.068606758 seconds)
  done (took 3.555743127 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.077565356 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070920682 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.07358298 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.069739176 seconds)
  done (took 2.172620855 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.075466473 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.07534316 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.084110328 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.089105031 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.075575586 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.075818531 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08246225 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.083440645 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.064509702 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.085717603 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.067079408 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.065934936 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.065904701 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.084460663 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.082081122 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.061364961 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.063845154 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075408645 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.075681718 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.078577072 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.067560755 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.064638045 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.076153904 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.076435416 seconds)
  done (took 3.678270139 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.077973094 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.064264942 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.077221253 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.089153114 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.090367293 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.065133225 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.077668823 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090910723 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.124490887 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.064466489 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.07067934 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.064294241 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102004906 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.064417055 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078715171 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.106731515 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.109928215 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.068555761 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.097148334 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.06449996 seconds)
  done (took 3.538712739 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.074925088 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068747035 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.069087241 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.064958151 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.075721495 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.071813207 seconds)
  done (took 2.317188496 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.067264045 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.067131897 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.065869697 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.065627731 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.071431887 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.066494621 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.06494594 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.0665524 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.066797026 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.066380041 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.065795239 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.064815947 seconds)
  done (took 2.684176909 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.152199799 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.068000803 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.069548098 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.065339243 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.069948845 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.065696543 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.07970087 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.06707693 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082529916 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.065797742 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065762415 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067581063 seconds)
  done (took 2.793374077 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09827471 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098640247 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142841379 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114636436 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111966272 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094416582 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117298585 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092490472 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.156861875 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133291406 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113822694 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121786882 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085904393 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068970702 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098042703 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100130148 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133196973 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071595328 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110783456 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.192357647 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112337597 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.110077694 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120151992 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11473989 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07982973 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119366578 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.092593608 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10050532 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.151097777 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107501211 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116795526 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.095239113 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070788763 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069888313 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145187087 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.097652183 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.133602939 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.091338587 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09754547 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086403619 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105701345 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.068149018 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.084769572 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.104109773 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082955769 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114682122 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.086499527 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101916105 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079704428 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.127509447 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103637671 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096618312 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084765374 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101466281 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127202269 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093538157 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109027101 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105203584 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081196488 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116744703 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.099626117 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096507402 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091516026 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.229630089 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1567759 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088319766 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.110343093 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111179773 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.081355863 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091828253 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101649966 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128178776 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104814094 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.105454994 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112042129 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122608975 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107746088 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.09064073 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.126645553 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091742093 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.072319837 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102681036 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126111063 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084047949 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098235336 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127112002 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090775106 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105690811 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.090576489 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.115264966 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078884508 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.094427415 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.068897525 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.096455758 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104902278 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095513517 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109422147 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105074126 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076475581 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121509821 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10680652 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071744146 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.115115674 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096993407 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149813883 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093919677 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.075294229 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098323092 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092429279 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.144979269 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083732145 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078686484 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09654852 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137703862 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092353106 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.166356105 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094016105 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12518604 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094550616 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086116995 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07392432 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.087228855 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099735397 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105305248 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099504466 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087613999 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.075293078 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085799503 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094127634 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090833107 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08012316 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110564018 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098644474 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.073371386 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.242110446 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075913358 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123100135 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076996515 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106553766 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122023083 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077167086 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103249534 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125451951 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135383558 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.095635705 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105035985 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13769828 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.113498525 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078637448 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.082372542 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106128505 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.138443752 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.111390442 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083530189 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075546381 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098241339 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109288474 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095751094 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.134801689 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124694995 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107007437 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095987655 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136626326 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114970019 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089387216 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093288113 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094887414 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.12040243 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104773288 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151193038 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092562417 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116088116 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112640529 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136941259 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111471125 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087739839 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083343823 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093228687 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.102209799 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103914882 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139212051 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.094095542 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071580889 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091003888 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128204998 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075009304 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097212215 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088960638 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.091137979 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115853703 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.081843064 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079999746 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067445058 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099551772 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132566605 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068625232 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110645086 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110886318 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101107204 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.102193561 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.068471555 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096826056 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.300875937 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104200702 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138340967 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114485947 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099169703 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11628614 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.097036212 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103628036 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078395793 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122334046 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131754157 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095366871 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088935739 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132382114 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115869639 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.130787053 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.094830738 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113254045 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.103026889 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09784588 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101426047 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.097774345 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138897429 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117132925 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.121275026 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112956213 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106480088 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105158141 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133395181 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080927134 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114082588 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.073978322 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109546446 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.07626174 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10486087 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.078059795 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.109439598 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079037905 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097542108 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068292463 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073168337 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138421221 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.109705948 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087531308 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084801829 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.133174727 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.128012254 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.07949247 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099771061 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.132727764 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099308244 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100000336 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107347333 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.083973848 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094098036 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.136464873 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077764685 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.08013885 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.097079679 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092674688 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105084661 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083134699 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074100198 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133628704 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102602839 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.253554339 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106738876 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094521438 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119970682 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08919633 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086563372 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103427804 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101600258 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137039566 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088751003 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.096091999 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.115080759 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079440118 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.090524373 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.068907922 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.083475098 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.074739349 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.107104824 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075274424 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106602303 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.068117192 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.127141285 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085344765 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.090769103 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100278213 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096132669 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124909073 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090595712 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125214074 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087975936 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100431156 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105618312 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09646671 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10897074 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101831634 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093804157 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107855702 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.094714512 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103974279 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107686328 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092683537 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.138104282 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088316425 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117928024 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103633587 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104577095 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102170886 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114507893 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134423606 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109817049 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138963196 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074165762 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081238813 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103000424 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098203454 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141822308 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100621278 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.071117825 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114982167 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089607793 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094604821 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102211435 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080762962 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139054628 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085926849 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.08560358 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110828694 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.088230848 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095658418 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074741191 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093938522 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.098325345 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092744029 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.247649819 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.132219103 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115456445 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111993868 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12992508 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.097289024 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091903017 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.117100903 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10818951 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109732634 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084661376 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084922761 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120957214 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09967813 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.125188422 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.098372745 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09291435 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09904339 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089290149 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097579862 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0954384 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.10703632 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078957396 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.074959411 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.067840154 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071298018 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.115057658 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106526546 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096692291 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096826515 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.072036217 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101461249 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096241556 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071391184 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085952383 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092399284 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.123887034 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.082348063 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090936359 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.111852647 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089609428 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101765666 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127231347 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128619191 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.098937292 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087405759 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139568647 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125383232 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086488115 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091357985 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070910717 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077741535 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099816301 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142097703 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115633011 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.076382679 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083081755 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.076609168 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085790556 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070795005 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.087376595 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.087689732 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101597776 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117531795 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.109854182 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101762721 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074733756 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101000902 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095765461 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09048992 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095492425 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100000067 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103346842 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.279222291 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10027608 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096002053 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075621989 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.079565042 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075172081 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078754139 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.101133233 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.076928712 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075604077 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127168749 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089922111 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102365017 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107136697 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083957692 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074870168 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130080935 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.068308389 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131122565 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.071010895 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081473718 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.079985448 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078474172 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092345974 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102452696 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093986964 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111169406 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103549252 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102942858 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109290415 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151915337 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.069710208 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.14604878 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07463712 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074924761 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075182802 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109652217 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089138496 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102014841 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138128695 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08821895 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09119729 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07607009 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126176631 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.095470947 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101869232 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081780875 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077962146 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12525418 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078156677 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.070143172 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084494075 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109085188 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.071664801 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.131826895 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112224855 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078648739 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111002379 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.629014405 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088826511 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.07438222 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087294718 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.145063652 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125193325 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081911977 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106110416 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.116172741 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088230627 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11315785 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105334821 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.179372574 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073655083 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093346174 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.261096177 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098000782 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091626001 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.090819571 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.0856038 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.09078502 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084996063 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079036125 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105591189 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086627864 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090531152 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122241536 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081620828 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.079162627 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.127862721 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101875199 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080298457 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087160279 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.100035913 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086312602 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089080083 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068224076 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141207326 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118983124 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099681936 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.090074028 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105465204 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115079261 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087978441 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110085347 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.087283283 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107756345 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083995042 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.07765491 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100222894 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.077147767 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076521951 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11508563 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.082419949 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091797414 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102658949 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.094837529 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111625208 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115803237 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108783074 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096106906 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077884458 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085230136 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.086024686 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074955889 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077496595 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.073433734 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.075292839 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106010959 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084353984 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111010336 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110853111 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083169302 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101607386 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.09845111 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107451697 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08146528 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099037756 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1061902 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088922605 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101480041 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097878344 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125573461 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141997976 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097715808 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.120793971 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129876966 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.075873633 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.233096604 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.068581408 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144533025 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079103212 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.080136807 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109457461 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129193241 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.080627599 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093195079 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.226095923 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079505917 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.080518082 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094854831 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069155108 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081993748 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105675328 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084157332 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079848134 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096967594 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112178911 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114914455 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108667371 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088122477 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081589565 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079983935 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092129233 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.102927085 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.126631636 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089192366 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.07428109 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104779912 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101577899 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120804546 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071860952 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079588178 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127022183 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090476232 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101392894 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079358418 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117753395 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.128669354 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088793915 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130275397 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07048063 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082189137 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087628327 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.123428862 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073669714 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086678261 seconds)
  done (took 64.69169472 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.151356447 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.145289298 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.081063069 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.096693691 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.185802462 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.195038495 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.117945102 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.095222979 seconds)
  done (took 3.120345884 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 0.06695799 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081956755 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 0.098880886 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.082257437 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 0.065773989 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 0.067626045 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.199354563 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.080905579 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.065520873 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.106062163 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.074837193 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.068332868 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.35252995 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.065669774 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.067133102 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.075250686 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 0.066353797 seconds)
  done (took 3.707691286 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.358944077 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.632261068 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.321623639 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.07463382 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.773065292 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.087932465 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.139987295 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.135192591 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.080886505 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.519628565 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.368578192 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.132825185 seconds)
  done (took 18.657331413 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.074850562 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.07388236 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.077235119 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.076978838 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.073041506 seconds)
  done (took 2.40166081 seconds)
done (took 117.403987843 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.08150884 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.16716532 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.066460077 seconds)
  done (took 2.296456104 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.081191371 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.079608034 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.0796978 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.076994485 seconds)
  done (took 2.355021484 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.073433445 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.075111993 seconds)
  done (took 2.179166576 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.219461594 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.172450482 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090030371 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.080944245 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078696468 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.079029289 seconds)
  done (took 2.274520009 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.071168048 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.070420588 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.07078656 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.071605595 seconds)
  done (took 2.306926485 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.066434788 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065504522 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067509444 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069692519 seconds)
  done (took 2.294635692 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.084383702 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.081951214 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.110054064 seconds)
  done (took 2.300406901 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.081881845 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.082160306 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076982756 seconds)
  done (took 2.27185396 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.107122828 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.095674222 seconds)
  done (took 2.22984495 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.082224935 seconds)
  done (took 2.113497371 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.089303607 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.097248341 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.138769645 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.105503999 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.13789986 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.123808673 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075562482 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076850853 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.072274083 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.071240984 seconds)
  done (took 3.015590418 seconds)
done (took 28.234196107 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078160691 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.371733715 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.35876927 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085837406 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.689400077 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.355396738 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.994527919 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089534135 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.09775092 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067492614 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083813651 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.649706234 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.985118774 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.324566993 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.970567358 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.328991959 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.650237573 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067497629 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067078475 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067273706 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.976868474 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066742328 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067205094 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067271823 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650940068 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.373240791 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068305283 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.329795154 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067433789 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069987111 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.354943911 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068420039 seconds)
  done (took 16.545435033 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.068976416 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.120386102 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070944013 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08286105 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.069544882 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068655262 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070172905 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.068162473 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.108825205 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067539215 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083835639 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066886321 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071001786 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068492835 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086839408 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068060157 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069195033 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068549527 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06792455 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068482174 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085816687 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068025455 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069028218 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068790606 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.068102907 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.080591634 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069325746 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068089316 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068279849 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070324636 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071498566 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069063647 seconds)
  done (took 4.417330839 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.119545134 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123505977 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072245397 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107473613 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.116505751 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069219951 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.148600777 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.090082082 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.111446795 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067912067 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083842576 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067065799 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.101952644 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068571116 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087552034 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068544487 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069332471 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068538929 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067898531 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068273164 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086546197 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06727547 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067937615 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068407241 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.068646978 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08255268 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068439181 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068128435 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068042067 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070380334 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07213391 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068865051 seconds)
  done (took 4.682658771 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.069405111 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.070735444 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.078945053 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.079601776 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.066206566 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.068107026 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.069239039 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.066158788 seconds)
  done (took 2.624264088 seconds)
done (took 30.317682442 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.077836328 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.068063757 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.070536014 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085842778 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072866216 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.069495879 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.06432058 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073400845 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.070826105 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.070826593 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.072612145 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.06622673 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.069404023 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.06466327 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.071658747 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.06523937 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.071183254 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.069427525 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.070368288 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.071720123 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.068113753 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.071247633 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.073973085 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.070375485 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.070431064 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.070383278 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.074621813 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.071424171 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.066199624 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.068571268 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.067892378 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.079386452 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.072304778 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.071781253 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065665065 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.065650896 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.070132998 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.068253823 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.072089557 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.074685194 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.071012773 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.074587352 seconds)
  done (took 4.993724706 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.086459524 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.09175327 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.08437076 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080992032 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.103197619 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.081614306 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.088342223 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078092812 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076766754 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.087667508 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.07333599 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.077667644 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.078380326 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.071746356 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.077382359 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.073543873 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078685499 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.073204724 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.07759782 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.077727711 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.089398941 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.071581565 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078367341 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.078908809 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.073333517 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.078698226 seconds)
  done (took 4.145015431 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.071948424 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.086527866 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091039064 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.138281808 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.107642513 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081561235 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.081161435 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.101185473 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.099744445 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.067077497 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.071094664 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.093384714 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094792525 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.074073999 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.104895981 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.085042648 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.079764481 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068482997 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073087745 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.099875238 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.088888551 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084757583 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.098733223 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086405547 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066120652 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075357106 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073528591 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.081525759 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073659952 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078425953 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.071182445 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.070759362 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067447964 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.079146047 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.070925082 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.065240017 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.088428647 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079230895 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.082259478 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.103965885 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077019579 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068596415 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.096539122 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.129686581 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066485435 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069283574 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070583621 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.078805413 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.067871537 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095880062 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084867766 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066678743 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.085427008 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.06818025 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068333267 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082802149 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068245123 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.069060268 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078668512 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072896358 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.08780491 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.07234545 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.087250007 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066358741 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.077529508 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068384403 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068478388 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065819506 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.102068321 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.073837013 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117793764 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.067676836 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064975591 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.078798134 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078078527 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.073713395 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066799121 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086117787 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078636232 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070446831 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078250963 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.070102379 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.069744996 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.100857172 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065818819 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064987469 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.065319796 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068955125 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.069696662 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067343918 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.079429416 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.065920105 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.069836532 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081760628 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.066507668 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.06743598 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069078946 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068068642 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066491851 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077158796 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.070472615 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.068423226 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.078814829 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.067689053 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070012985 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.080651098 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076163108 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066062999 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.067797729 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.069226123 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.068255048 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.071463353 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.069580907 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.068447201 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.073575548 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.074343753 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.072221366 seconds)
  done (took 11.179001928 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.157987474 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.148266497 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068531237 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.144559198 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.078505324 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.074393008 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.146433354 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.086091739 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067736778 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068864287 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.067107581 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.095430965 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.090716236 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104731955 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.071228009 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067640611 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.091976046 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.099868084 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.145838951 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.142140172 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.089759531 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.075367197 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070217462 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069105763 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.069256667 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.076352022 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.083626224 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.075047648 seconds)
  done (took 4.729051316 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.074743665 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.109342814 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.071548939 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090487744 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.086132526 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.068151765 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069346434 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.068487708 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083937737 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.074007858 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.067923827 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071902588 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.071241028 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070221385 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.068260818 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073993628 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.074015564 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.067206545 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.0712185 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.072149242 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077661986 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.092368626 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071480971 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.067473451 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.07095302 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067651649 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.074028459 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.077342473 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.067067916 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.09714693 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.065119268 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071805308 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081358278 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.068802843 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.067330472 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.068055036 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067485081 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067613483 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067861349 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065684131 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065654609 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.07191824 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.06681137 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.073989069 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081201441 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.074544476 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068834278 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.070359659 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.070559978 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.065096856 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.07076292 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070805116 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.06954289 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.07536224 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071085727 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069802904 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068694276 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.095372678 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073314475 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.067277654 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066637242 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065938575 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069149432 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075268063 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.083713228 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069029965 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.066032411 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.06743852 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.072544095 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081675768 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.067147628 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072504048 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.06447612 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067640626 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069741923 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.069942201 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068794794 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.066249931 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067253725 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067347174 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067566509 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067285479 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.066998383 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.069538508 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065747559 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065951253 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.06775691 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068504455 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.073948093 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066607586 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.0703216 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.06837692 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066190246 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.06956822 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.072377347 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070085506 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.086216643 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.07628944 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.067639239 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065377904 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.081210511 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069243813 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066763677 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.072601175 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.071950559 seconds)
  done (took 9.650102145 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.089459213 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.069273064 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086982413 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.093146296 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.078039587 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.072990926 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080868744 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.068319582 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.083081919 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.06697656 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.076192372 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.06626078 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080662888 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.076361326 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068985885 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077650242 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.069502175 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087079695 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081585399 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.066211736 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.076575027 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078784568 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.079520416 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085119222 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084143794 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085308677 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.079704145 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.070215536 seconds)
  done (took 4.290334571 seconds)
done (took 41.038091351 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.14233086 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.382775805 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.134468302 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.355045201 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.193452008 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.282834769 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.255767291 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.150664415 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.289123523 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.14911123 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.443415094 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.55464097 seconds)
done (took 71.451762612 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.14553023 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.268325443 seconds)
    (2/2) benchmarking "String"...
    done (took 2.336243324 seconds)
  done (took 6.661303736 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.719243917 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.125656928 seconds)
    (3/3) benchmarking "different"...
    done (took 2.176166772 seconds)
  done (took 9.076392607 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.253839236 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.135371313 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.383241011 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.123353213 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.132578616 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.529925789 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.909387813 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.578918954 seconds)
  done (took 33.851485899 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.330767906 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.322458562 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.865706577 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.899885445 seconds)
  done (took 17.520070016 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.732069487 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.387438949 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.387174273 seconds)
    (4/4) benchmarking "different"...
    done (took 2.382930944 seconds)
  done (took 12.002241692 seconds)
done (took 91.660525692 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.12789785 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.126253896 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.132977094 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.159235708 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.127971236 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.127078642 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.126481069 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.128756117 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.154323971 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.225946349 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.128532531 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.141569565 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.13091394 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.163562646 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.726833597 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.185873291 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.152430158 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.147693375 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.134672842 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.142457984 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.131844059 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.296196094 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.64136722 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.331813431 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.759187692 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.379057546 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.560341504 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.577125747 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.136643055 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.132684754 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.182216393 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.328077969 seconds)
  done (took 216.005236366 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.130913275 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.054048893 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.089887888 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.146610272 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.742091172 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.321765733 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.250600899 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.763799361 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.133331332 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.154248225 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.315716155 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.135111593 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.327304516 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.07213411 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.133191636 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.144396292 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.32673842 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.312941961 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.13841089 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.310271389 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.139968531 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.240738427 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.204402501 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.274647489 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.180635778 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.138777097 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.133255667 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.142721605 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.327616081 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.304372463 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.140771557 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.172117679 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.303106046 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.00053046 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.147217726 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.152252897 seconds)
  done (took 183.074233908 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.312875062 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.143018623 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.132344963 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.189893636 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.254688854 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.136773766 seconds)
    (6/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.133769289 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.1372598 seconds)
    (8/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.81064065 seconds)
    (9/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.407720862 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.139354853 seconds)
    (11/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.133172097 seconds)
    (12/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.124687807 seconds)
    (13/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.133274641 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.143657627 seconds)
    (15/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.220042807 seconds)
    (16/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.135945203 seconds)
    (17/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.149434362 seconds)
    (18/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.134212258 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.148817793 seconds)
    (20/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.136801055 seconds)
    (21/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.132387021 seconds)
    (22/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.13393715 seconds)
    (23/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.132391178 seconds)
    (24/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.133596328 seconds)
    (25/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.134509463 seconds)
    (26/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.132601882 seconds)
    (27/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.134962648 seconds)
    (28/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.577552576 seconds)
    (29/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.380079913 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.132369354 seconds)
    (31/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.133436632 seconds)
    (32/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.433284625 seconds)
    (33/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.135994986 seconds)
    (34/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.202487242 seconds)
    (35/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.133626811 seconds)
    (36/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.219004636 seconds)
    (37/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.131094488 seconds)
    (38/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.187389627 seconds)
    (39/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.225375438 seconds)
    (40/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.13488442 seconds)
    (41/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.349069154 seconds)
    (42/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.216669807 seconds)
    (43/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.134296263 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.130564545 seconds)
    (45/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.193681869 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.14462353 seconds)
    (47/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.132185196 seconds)
    (48/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.130755601 seconds)
    (49/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.134986268 seconds)
    (50/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.137385833 seconds)
    (51/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.197330066 seconds)
    (52/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.352295669 seconds)
    (53/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.132525871 seconds)
    (54/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.269058537 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.620854498 seconds)
    (56/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.132183506 seconds)
    (57/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.131400901 seconds)
    (58/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.133055594 seconds)
    (59/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.130299872 seconds)
    (60/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.741747977 seconds)
    (61/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.133694574 seconds)
    (62/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.130799617 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.140037832 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.143396192 seconds)
    (65/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.134791648 seconds)
    (66/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.132456489 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.51662868 seconds)
    (68/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.204074847 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.240171099 seconds)
    (70/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.579573846 seconds)
    (71/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.139922401 seconds)
    (72/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.869166028 seconds)
    (73/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.211534367 seconds)
    (74/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.13220287 seconds)
    (75/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.133416182 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.133462578 seconds)
    (77/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.134617567 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.133536188 seconds)
    (79/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.13699896 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.269711519 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.146855727 seconds)
    (82/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.239299954 seconds)
    (83/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.220433102 seconds)
    (84/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.133939066 seconds)
    (85/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.271415741 seconds)
    (86/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.137102228 seconds)
    (87/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.133353016 seconds)
    (88/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.144448487 seconds)
    (89/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.935817826 seconds)
    (90/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.20555044 seconds)
    (91/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.169832985 seconds)
    (92/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.939873961 seconds)
    (93/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.136499191 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.508277638 seconds)
    (95/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.898456628 seconds)
    (96/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.138115074 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.135313011 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.147572821 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.135889999 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.134437256 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.1350851 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.213306848 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.13579712 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.271578947 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.859834398 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.745688078 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.136435778 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.136776879 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.14339107 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.215230575 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.271844966 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.139095044 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.200189475 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.144905866 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.139336869 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.221118892 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.136741575 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.137266909 seconds)
  done (took 451.483600863 seconds)
done (took 854.978989734 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.857155203 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 2.746109429 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.887869718 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 2.758625268 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 2.738458692 seconds)
  done (took 16.05726924 seconds)
done (took 18.125131479 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.167139189 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.153866231 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.142114825 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.191358667 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.160936858 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.147822771 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.182868845 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.181869342 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.167418543 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.149371653 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.184457564 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.153891185 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.168586862 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.168175235 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.212553395 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.172763551 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.153145744 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.145939341 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.192331892 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.153093553 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.152922179 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.150796326 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.150891136 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.18595987 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.217864718 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.1593896 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.149935903 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.186701148 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.158914801 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.184388946 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.206188432 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.171638322 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.185938429 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.215170259 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.198663084 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.2188629 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.162056168 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.207634986 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.157072494 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.222554717 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.198062885 seconds)
  done (took 91.261211819 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.147970386 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.279973281 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.353986989 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.178482461 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.147708363 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.358995022 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.20278757 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.296023643 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.275579502 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.355970004 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.359437383 seconds)
  done (took 27.032003789 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.146961299 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.282229722 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.359860455 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.182232979 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.149730529 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.361120904 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.208399783 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.267981756 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.282438895 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.36424818 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.369824263 seconds)
  done (took 27.054787975 seconds)
done (took 147.417492915 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.514752368 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.174630622 seconds)
  done (took 6.762749472 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.161724262 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.303413189 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.14394156 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.145340488 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.149372567 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.145022504 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.144712224 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.142795072 seconds)
  done (took 19.409668941 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.144528048 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.143459275 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.143737654 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.14418553 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.143851633 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.144394201 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.1425909 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.144948952 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.145005984 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.144707452 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.143832537 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.145292417 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.144592635 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.144408859 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.143962193 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.143334182 seconds)
  done (took 36.382347578 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.146951275 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 2.144686457 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 2.144681871 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 2.146111012 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.144736656 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.146286902 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 2.146526335 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 2.144544884 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 2.145363602 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 2.146497137 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 2.144179259 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 2.145152091 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 2.144774111 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 2.145712858 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.145234703 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 2.145916619 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.144675483 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 2.147101052 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 2.149123336 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 2.146919114 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 2.14485426 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 2.146695186 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 2.146408649 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 2.146286575 seconds)
  done (took 53.574393652 seconds)
done (took 118.209397758 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.290390634 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.592190006 seconds)
  done (took 8.958204499 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.148600904 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.145299312 seconds)
  done (took 6.4170986 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.148384226 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.14528024 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.147213504 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.147131374 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.146004469 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.145601134 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.146480364 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.1467089 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.146093748 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.14689753 seconds)
  done (took 23.541821493 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.146657928 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.147235253 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.147276115 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.147580971 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.14748744 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.148897127 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.147924822 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.147076565 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.147286119 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.147481061 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.148822171 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.147213061 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.147716999 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.148988963 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.147474034 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.147139389 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.148113507 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.148627728 seconds)
  done (took 40.736260556 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.148770825 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.148056776 seconds)
  done (took 6.372556864 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.148031765 seconds)
    (2/7) benchmarking "second"...
    done (took 2.147773683 seconds)
    (3/7) benchmarking "month"...
    done (took 2.149206059 seconds)
    (4/7) benchmarking "year"...
    done (took 2.147178729 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.148072388 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.148186371 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.148978947 seconds)
  done (took 17.114938082 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.14998947 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.292968269 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.343720311 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.748551908 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.149387658 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.151224726 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 3.02912454 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.151829472 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.151455988 seconds)
  done (took 23.245292192 seconds)
done (took 128.463536436 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.947862194 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.149803996 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.423188773 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.204237085 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.174489555 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.490258277 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.160547096 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.753060584 seconds)
done (took 45.381762714 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.23563063 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.146066832 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.17509725 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.176671715 seconds)
  done (took 23.575977929 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.149804581 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.569605004 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.175270548 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.082718312 seconds)
  done (took 24.309215099 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.52791382 seconds)
    (2/2) benchmarking "read"...
    done (took 2.497058114 seconds)
  done (took 7.108535368 seconds)
done (took 64.310755621 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.137720501 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.148367898 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.15140446 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.136876136 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.150387294 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.150100224 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.148959838 seconds)
    (8/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.150222093 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.149508794 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.15196812 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.148759444 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.150323222 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.149930646 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.150320806 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.149580347 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.15124659 seconds)
    (17/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.151106232 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.151221632 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.151844384 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.150159927 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.150812436 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.150144804 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.151612833 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.151488697 seconds)
  done (took 53.664107747 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.137802051 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.151768116 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.15231002 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.134886371 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.152388356 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.15145577 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.152757508 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.152364604 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.15216411 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.151051854 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.151236174 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.144623269 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.153134071 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.152503884 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.1533395 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.15434736 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.152386118 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.152342415 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.153845944 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.153337522 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.152822618 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.152760175 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.153093503 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.152792391 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.152984739 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.152462688 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.151945093 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.153057702 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.153515835 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.152947692 seconds)
  done (took 66.616181515 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.153057793 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.153672728 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.153249188 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.153594495 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.154518749 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.15427301 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.155277386 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.153604947 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.154401427 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.153855995 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.155420181 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.15448215 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.15305009 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.153129164 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.153623572 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.155611712 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.154551692 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.155229177 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.154876838 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.155103315 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.153232355 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.154166064 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.154509707 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.155596748 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.155821364 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.156502164 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.154990934 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.154440669 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.155828805 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.155800878 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.154587575 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.156273858 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.158091297 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.155943649 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.154263143 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.155462791 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.156606495 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.15655579 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.157945243 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.157040796 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.157251098 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.15520487 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.156428754 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.155894844 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.15652813 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.157184325 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.158442261 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.158266889 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.157105339 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.155622814 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.156750415 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.157540598 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.157297074 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.157728076 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.157560865 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.159419825 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.157306662 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.158007174 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.157223121 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.155736907 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.157587609 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.15810566 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.158780641 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.157929303 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.15629872 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.15925405 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.156945281 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.159831961 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.157181114 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.159617132 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.158599095 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.158181346 seconds)
  done (took 157.324769685 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.158674898 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.158929443 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.157622195 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.159043228 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.158722729 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.160271223 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.159417134 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.15897772 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.159004682 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.158589499 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.158456926 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.159181637 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.157919602 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.15980384 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.158937902 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.159345714 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.15972535 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.160588301 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.159408207 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.160061407 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.15850281 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.159344133 seconds)
  done (took 49.587983029 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.160534216 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.160171255 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.16050766 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.159995433 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.160369088 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.159931599 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.160405826 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.159736329 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.15987265 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.158926609 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.161081865 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.158825719 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.159558027 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.158611297 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.158199139 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.158075848 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.159765627 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.158082409 seconds)
  done (took 40.960950548 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.159051405 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.157786188 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.158648155 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.156676298 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.157789625 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.156629609 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.157880241 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.157507618 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.15458608 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.155109113 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.156418824 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.154855378 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.155034119 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.155933853 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.15564414 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.155138154 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.155480255 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.155693884 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.156197725 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.156795697 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.156662358 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.156653433 seconds)
  done (took 49.531463044 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.152264419 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.156112034 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.158360487 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.154882961 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.15543287 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.1547922 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.154250547 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.155105742 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.153604232 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.154147155 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.155021766 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.153620504 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.15404539 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.154304736 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.154123658 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.154812428 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.15617735 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.151328175 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.153356012 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.152762096 seconds)
  done (took 45.170832749 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.160542248 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.15602205 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.15722631 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.156539568 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.157899381 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.156616883 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.157637201 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.15824402 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.157896435 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.157240696 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.157315351 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.157278882 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.158172278 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.159950801 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.162351215 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.158611944 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.15795003 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.15952366 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.158803506 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.160205527 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.158896805 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.158438759 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.163993745 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.162133014 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.158905344 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.159024372 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.15730833 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.1601641 seconds)
  done (took 62.526991074 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.154696303 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.153299208 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.154565015 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.155147544 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.155032087 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.140687931 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.156191442 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.152931816 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.155522916 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.153168624 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.152617185 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.149407444 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.153047654 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.150409631 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.153210494 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.150728836 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.149420305 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.151388069 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.151137287 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.14970726 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.148798012 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.150185036 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.150251648 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.149495826 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.149487675 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.151360065 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.149875748 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.150681896 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.151414157 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.148733367 seconds)
  done (took 66.628078794 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.175008761 seconds)
    (2/2) benchmarking "in"...
    done (took 2.171331545 seconds)
  done (took 6.426859567 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.150804915 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.150009451 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.150407492 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.149260175 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.149923658 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.151700362 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.150997755 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.151524829 seconds)
  done (took 19.286581928 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.154622993 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.154035873 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.14930944 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.154181526 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.15709494 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.158895472 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.155170354 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.15258614 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.152700507 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.153223587 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.153366909 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.15784125 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.167011261 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.155118126 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.1528579 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.151668714 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.152354022 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.156514101 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.153844946 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.152154027 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.154974564 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.159492869 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.151919529 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.158038193 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.151743752 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.154217177 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.162221349 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.154577623 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.139382397 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.15468985 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.158169452 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.153643184 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.157900664 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.152535164 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.157278562 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.153514567 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.160769475 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.159265861 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.155927278 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.156161765 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.149433341 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.148713262 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.150707342 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.155508477 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.15400685 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.146823648 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.144263355 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.153790647 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.144266735 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.147613441 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.153084971 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.145684567 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.146920663 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.143980076 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.139742973 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.147321051 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.146175401 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.141048136 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.14942579 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.142147222 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.141638659 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.161188798 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.150290815 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.145159017 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.139825579 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.144904678 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.169364394 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.135737315 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.134031301 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.135521076 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.142750796 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.137114836 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.140581824 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.137107679 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.147937848 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.149487197 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.139327264 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.13654844 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.136977032 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.139271309 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.135478871 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.142002348 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.133470412 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.140308509 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.144546607 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.162014482 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.142870197 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.139776519 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.13488067 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.135327236 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.14578842 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.137837339 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.132672447 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.13313109 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.133860736 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.135960024 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.140587205 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.138202667 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.130229395 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.128363653 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.132006979 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.131850926 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.134668023 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.145943636 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.134327786 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.140215953 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.133551416 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.137848929 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.139570109 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.142132177 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.133518132 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.133500476 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.133932736 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.140834277 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.132368097 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.134063949 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.144526896 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.140509495 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.133310651 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.133544946 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.13398779 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.132816543 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.141759902 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.161956381 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.127612709 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.134392937 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.137627676 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.150533427 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.137100894 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.13295864 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.131245783 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.129774352 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.132630163 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.133641618 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.131971718 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.134291952 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.129920019 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.134984655 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.132170298 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.134959915 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.13219526 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.132634999 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.135563873 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.137060912 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.135226124 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.137089168 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.133379951 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.13735105 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.132395503 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.136308857 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.133606431 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.133487957 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.132805645 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.130597054 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.131010721 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.13009222 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.138874508 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.129302269 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.131359595 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.134493163 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.131425076 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.133366876 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.134637606 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.135956422 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.136066448 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.129178852 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.135850709 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.136253669 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.129809288 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.130671894 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.135957868 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.135465244 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.133333116 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.130503008 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.12969108 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.136417009 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.130000582 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.127701631 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.131949659 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.141065868 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.133760627 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.138873985 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.130770605 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.136701164 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.13540851 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.126681528 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.1305192 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.134495808 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.135868878 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.131136929 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.129015991 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.13341481 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.151332174 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.140427543 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.134208702 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.12927848 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.133344393 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.133986203 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.138218472 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.129145053 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.131749898 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.132835974 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.134220071 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.139064024 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.131420089 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.133226368 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.128793403 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.132043748 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.133703201 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.135585032 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.130034616 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.129556615 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.131458976 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.124527989 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.128215533 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.126513233 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.131239072 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.134367778 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.139199431 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.133549082 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.131861803 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.136784191 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.132414848 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.136781849 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.132683978 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.120855091 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.133777903 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.13200863 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.129688681 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.13572049 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.117274659 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.131157581 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.119054747 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.13047961 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.132767898 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.131150477 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.135003487 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.137886912 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.133208205 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.130761563 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.136273929 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.132987599 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.131406412 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.133839211 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.128428865 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.133842479 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.132417453 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.136586197 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.130233629 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.135907325 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.130046774 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.12941098 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.131848505 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.132420145 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.129198505 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.135107792 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.13547057 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.132059922 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.141125315 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.137822789 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.131038031 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.133385982 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.131998039 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.131670029 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.134196366 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.131445758 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.141086783 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.138943052 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.131741808 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.131886951 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.134070297 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.134425512 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.133034265 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.139237884 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.137185715 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.132065981 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.132135192 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.135442076 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.139183362 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.136830438 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.13869021 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.131922876 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.135028882 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.134827879 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.132243199 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.130234948 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.133146788 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.133653022 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.138818918 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.133983008 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.135173669 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.132382951 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.135103602 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.133756713 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.141753954 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.132696728 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.132549845 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.140702763 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.133411908 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.131381199 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.13417967 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.133713343 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.132676424 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.13268603 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.13096043 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.13340788 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.138329474 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.132619651 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.142133334 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.13665391 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.14455461 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.135342349 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.141551033 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.139467982 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.133843316 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.139862647 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.138505751 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.146805838 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.134516685 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.133561101 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.141693514 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.135089269 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.134234191 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.142521996 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.133717231 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.142857948 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.138244319 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.135512857 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.136838544 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.137023198 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.133902814 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.139858238 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.134523098 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.134898118 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.136931885 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.135395418 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.133733086 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.132878421 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.134494866 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.142392491 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.139779413 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.139895391 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.139584986 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.136182895 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.139084028 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.139237284 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.138984172 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.135314323 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.144854132 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.135391829 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.143784667 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.142513554 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.140849574 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.139894463 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.135102702 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.138808751 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.137706629 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.139597348 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.140548864 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.135380189 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.136395823 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.147962892 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.145368512 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.138765732 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.136343279 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.141127134 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.135529061 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.144502703 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.157855011 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.142231616 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.135758981 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.140215482 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.144614958 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.139003452 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.139550662 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.139735286 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.149349586 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.138191069 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.136631588 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.139354158 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.149154862 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.145135267 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.137592924 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.138671569 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.143711856 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.140704583 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.140842725 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.139433395 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.140012065 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.138701288 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.14983932 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.133292645 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.139387071 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.14527032 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.13905694 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.142972359 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.138908578 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.139025865 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.137416793 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.144836474 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.145719119 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.14045258 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.141025551 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.136611996 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.14531407 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.146142128 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.144248748 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.143269462 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.140439401 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.143599888 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.13924636 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.146261607 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.138509906 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.141240449 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.143709588 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.140601743 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.142341276 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.148388066 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.140088719 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.137470421 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.13940215 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.142312069 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.138767234 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.142277246 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.127356384 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.149006908 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.142650192 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.149857055 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.150104491 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.14499176 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.14111719 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.146655172 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.156515644 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.144622582 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.140072839 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.144701013 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.14145883 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.144197921 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.143093129 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.146778435 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.140277244 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.145219081 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.147190336 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.141645534 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.14634474 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.143037189 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.148309611 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.141374665 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.14557177 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.144394955 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.143491285 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.141983669 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.143667409 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.142234001 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.146397472 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.147238826 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.142565272 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.144770391 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.141710363 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.146072475 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.143137952 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.142950175 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.144982925 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.143988524 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.143899303 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.144045276 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.143138818 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.145063355 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.146536855 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.148803953 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.144457209 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.134821014 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.144783892 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.147993978 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.14915635 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.149779458 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.150160411 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.143640921 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.150240987 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.145736298 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.14986954 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.143270705 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.146385241 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.149354872 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.145339634 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.147455864 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.149676827 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.144187791 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.14588201 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.146255962 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.151408802 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.15368857 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.147174161 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.150873741 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.148568603 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.144673678 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.145574305 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.146879997 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.144448046 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.145405751 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.150205727 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.147449726 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.146472309 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.588870838 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.14783348 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.150683595 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.145345789 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.147081401 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.145472013 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.147022097 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.152078221 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.157146507 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.147591418 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.146526878 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.152929423 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.148930483 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.155897343 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.151704502 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.151502459 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.152610138 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.147184393 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.145803333 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.152752387 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.152679882 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.149730479 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.152169859 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.149860485 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.16187827 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.148016086 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.1545621 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.175098421 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.1479107 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.150861105 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.146494758 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.14682316 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.153163879 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.147702142 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.1533398 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.153955788 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.15251295 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.147610827 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.155884268 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.145875088 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.147958783 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.152661154 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.14676977 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.150929735 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.153629497 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.153864244 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.152928874 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.147901605 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.148195959 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.14889636 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.147355529 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.147758276 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.14689617 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.150100884 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.14855822 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.153832862 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.156780312 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.155290708 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.150062156 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.160869381 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.158380022 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.153117739 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.14842082 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.152139825 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.153687063 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.153022182 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.147399199 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.151462902 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.155508037 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.15128264 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.156181818 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.142059358 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.149060165 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.149560206 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.150971788 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.154687877 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.160188905 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.159511983 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.149561608 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.148719756 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.155923561 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.151964528 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.156099824 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.157770843 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.15642922 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.151311527 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.156116131 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.149893189 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.151792095 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.150069249 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.153562432 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.157090419 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.153609218 seconds)
  done (took 1279.028047467 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.151997048 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.152297186 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.151504386 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.149689904 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.150050723 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.15210337 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.151896842 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.153045976 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.151765657 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.150649442 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.150509798 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.152383284 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.1521874 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.155357815 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.150530202 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.152832512 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.152360873 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.151893312 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.1508484 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.151956803 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.152700088 seconds)
  done (took 47.262709324 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.150548686 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.142236489 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.152433689 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.152844616 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.153637837 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.154589211 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.150683111 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.151202801 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.153499627 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.152212466 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.152987193 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.153757344 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.15175636 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.153789562 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.152812476 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.152647882 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.154200651 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.153735526 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.153225949 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.153474851 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.153071573 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.15294684 seconds)
  done (took 49.426348033 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.15845371 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.158650204 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.152834709 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.154745074 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.154802822 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.158010669 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.152190879 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.153515806 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.153011758 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.153879607 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.158642976 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.15988377 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.153280363 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.156077318 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.154979896 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.158374362 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.299571461 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.158196083 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.160589454 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.155559863 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.159852323 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.160947314 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.15377665 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.153910761 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.151816521 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.160265276 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.153369751 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.153988572 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.156292111 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.154718076 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.160300659 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.15251275 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.154163617 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.15677483 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.153868073 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.153271572 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.163354591 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.160001543 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.154257307 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.154111324 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.164304731 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.176523004 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.156114214 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.160912178 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.160681472 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.15450187 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.154566771 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.15810647 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.16396521 seconds)
  done (took 107.913060562 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.156147437 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.154121287 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.155577066 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.154419531 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.154516954 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.156139211 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.156702476 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.15424524 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.156255338 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.156535084 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.155759322 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.155708234 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.155805308 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.158728019 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.155238624 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.155321001 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.155515833 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.155688323 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.155391103 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.157030779 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.156604176 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.156133835 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.158138669 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.155789057 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.156425858 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.155739659 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.155917659 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.155414033 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.156606009 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.154785577 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.159027127 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.156912489 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.158367099 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.159059702 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.159402017 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.157209848 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.159921834 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.158014217 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.156513733 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.156762212 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.157236877 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.158087614 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.156794528 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.15695142 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.158479228 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.15836213 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.156596559 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.158296187 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.159288823 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.156347102 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.158469825 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.159390282 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.158917614 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.156726982 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.157973095 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.157186604 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.158119814 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.159859657 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.157701239 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.158587192 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.160007778 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.156904677 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.158903549 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.159530463 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.159529016 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.159478161 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.158196196 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.159186136 seconds)
  done (took 148.768277774 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.163582278 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.165837354 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.163188829 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.165407767 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.164176109 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.164866022 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.16515444 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.165018155 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.164904622 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.163557511 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.164395891 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.160069055 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.163362212 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.159503904 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.163291435 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.16423837 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.164937407 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.164761798 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.165684319 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.163841072 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.166996449 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.158532222 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.161881927 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.164130609 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.166510156 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.165307045 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.164830721 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.165796877 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.164332177 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.165418947 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.166020534 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.166529361 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.166760713 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.165110574 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.166028852 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.165620499 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.165264631 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.151017808 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.164509255 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.16610657 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.165685003 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.1667475 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.166236122 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.165274999 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.16531155 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.166163478 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.164909559 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.166138338 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.161127195 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.166233536 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.165420603 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.167301351 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.166461547 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.165456864 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.165916698 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.161314776 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.165917684 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.168008021 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.16542542 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.166758008 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.167686264 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.162480854 seconds)
  done (took 136.291476082 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.162229624 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.163251248 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.161500823 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.163117386 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.163147964 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.161594555 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.163442792 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.163107124 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.151018352 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.163146616 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.163055367 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.149539005 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.165185559 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.164296632 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.162740917 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.153893004 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.163154651 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.163248769 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.163510669 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.163091807 seconds)
  done (took 45.31327294 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.162637502 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.164172003 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.162653152 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.163337144 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.164376941 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.162756532 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.165063769 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.164710716 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.163700036 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.164910666 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.163408277 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.163277584 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.163689739 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.164724026 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.164717312 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.164905416 seconds)
  done (took 36.709712005 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.163663003 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.166504096 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.168560915 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.168755524 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.16473365 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.165634287 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.163792649 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.166358963 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.163430998 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.165587195 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.163782588 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.164334239 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.164083378 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.170912661 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.164750154 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.165106143 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.166161066 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.164772579 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.159415897 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.16956167 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.165993174 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.164484685 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.164742781 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.164916728 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.166557458 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.164708445 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.167123608 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.164295518 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.166730373 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.163050514 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.164583192 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.165892683 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.165346963 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.165333407 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.171096439 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.166992895 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.165932461 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.166564761 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.166092842 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.16706326 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.16451996 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.165033637 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.166433997 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.1660265 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.167421689 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.166801729 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.165545052 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.167165504 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.16642591 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.166613154 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.167818913 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.171664594 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.167280628 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.167209715 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.166052266 seconds)
  done (took 121.217678516 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.16679463 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.168246527 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.166620265 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.166247303 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.166976816 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.168095823 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.167430812 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.166777817 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.166750071 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.168718781 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.166924761 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.167844778 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.168026744 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.167573383 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.169447186 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.167791171 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.16703946 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.168858798 seconds)
  done (took 41.106078297 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.167502607 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.168853777 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.167769276 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.168067061 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.169583575 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.169549545 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.169185792 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.167018747 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.16983085 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.168961227 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.169459254 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.170207935 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.170993309 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.16873936 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.170206267 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.167572915 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.170041788 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.169633938 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.167126043 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.16891645 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.170340189 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.16905871 seconds)
  done (took 49.810096066 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.170914128 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.16914891 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.183678002 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.187864259 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.187108081 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.201278416 seconds)
  done (took 15.191685066 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.170443968 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.169613881 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.172114932 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.169714656 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.171984051 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.17071719 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.171174817 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.171414068 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.171410879 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.171285704 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.170236746 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.171841439 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.170660391 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.16956179 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.171521663 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.172182035 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.169347383 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.171304403 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.169731851 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.168329072 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.171728482 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.171127571 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.171164856 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.171099623 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.171562589 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.17137168 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.168216596 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.171593648 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.172627786 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.168796662 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.172032302 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.172212456 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.172247359 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.173867972 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.17114485 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.170925565 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.171390099 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.172581991 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.171077627 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.173473139 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.172610475 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.17249385 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.172629844 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.17348323 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.17239108 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.172869015 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.171714778 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.173477612 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.17125089 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.171684484 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.171180095 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.170624665 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.172912097 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.170510824 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.173803596 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.173964779 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.173406353 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.173497964 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.173334515 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.171934592 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.173479908 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.174646695 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.173332822 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.175397529 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.173155899 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.17444756 seconds)
  done (took 145.434571831 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.174915547 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.172945687 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.174040361 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.17571517 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.174745465 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.174142751 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.174165264 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.173865348 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.174399508 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.176087873 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.174498536 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.175518568 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.173352022 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.173983353 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.174162243 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.173972805 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.175564036 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.173944802 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.175208411 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.175441744 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.172750829 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.174837642 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.175413869 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.175709459 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.1759657 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.174230171 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.176224999 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.174957351 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.176280344 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.175482467 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.175037459 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.177350193 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.177026573 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.175763235 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.176883198 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.175322224 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.175684956 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.173906519 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.176517876 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.177226233 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.177356608 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.17715153 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.177486792 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.175594351 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.177154223 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.175079125 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.175595116 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.1759991 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.176544164 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.174281291 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.174396631 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.174539617 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.174776334 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.175481407 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.176676426 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.174805829 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.176899786 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.176018669 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.177621926 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.177466213 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.176323231 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.175348618 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.176591874 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.177277385 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.177460292 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.177491823 seconds)
  done (took 145.68371702 seconds)
done (took 2988.967948463 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.185151821 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.281532373 seconds)
  done (took 16.564888416 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.339138254 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.293291037 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.180557088 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.214266097 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.175549836 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.202973006 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.180966677 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.174668827 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 2.179931316 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 2.179740472 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.179375019 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.365654885 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.208827777 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.174007818 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.181104572 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.272044588 seconds)
  done (took 57.618981717 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.185788406 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.183156922 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.194779482 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.185617797 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.183204432 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.194138088 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 2.213676691 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 2.187548089 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 2.219821814 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.19325578 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.254126561 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.191648463 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 2.184260759 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.235509254 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 2.197634446 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.197079515 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 2.278030909 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.25374712 seconds)
  done (took 41.832170104 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.2591677 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.189751547 seconds)
  done (took 11.555635127 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.212828907 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.202866356 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.213530118 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.18032128 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.208149927 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.206662168 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.218994085 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.214548012 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.17524433 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.199456269 seconds)
  done (took 74.170108417 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.187745731 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.187116418 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.18749941 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.183005404 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.179733604 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.181120107 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.180795331 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.181114111 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.871507507 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 2.216688824 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 2.188110574 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.189852042 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.184677342 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.185881014 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.182126223 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.207994364 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.350436619 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.179594546 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.179817773 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.190752254 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.182999603 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.238718343 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.19661494 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.183893057 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.214104295 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.871525698 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.188562424 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.190150516 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.348261685 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.179500277 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.183827797 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.344553563 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.186622046 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.617396637 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.458676785 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.183907492 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.188613698 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.190715407 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.18070143 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.364266634 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.184865711 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.189151439 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.129515062 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.432919236 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.280752638 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.229211417 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.528130319 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.183546694 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.185826853 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.215864336 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.186928795 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.185916216 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 2.202611658 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.696873864 seconds)
  done (took 150.226153148 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.184483522 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.417112686 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.334985003 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.179187739 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.436976728 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.385864899 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.180434494 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.226610165 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.182901575 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.384153059 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.433381153 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.28228636 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.182410341 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.180502306 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.180499022 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.175530972 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.326876055 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.248789922 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.181953291 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.180901367 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.205150906 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.384776509 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.302763089 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.184747126 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.207920584 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.386355566 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.301102742 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.282840419 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.996073094 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.177958094 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.243943793 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.183734242 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.183929717 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.179729485 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.334221135 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.274867197 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.264729357 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.18230375 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.167592278 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.181489078 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.856297008 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.38567665 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.278172392 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.303855927 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.426510678 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.395544765 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.798165963 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.183261064 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.816032498 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.347338061 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.39043932 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.392151151 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.296983614 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.181433883 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.731781246 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.182257226 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.182487383 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.402235674 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.40052205 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.278793852 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.185786063 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.185245921 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.17877945 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.421064756 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.186790838 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.272295129 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.18472432 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.177780187 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.274104532 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.283003919 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.409984166 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.402344031 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.212397574 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.495885429 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.665026084 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.385396406 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.247471531 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.404039613 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.186291687 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.17962527 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.26556508 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.007220253 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.439305402 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.426371541 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.381228555 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.211248276 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.837110153 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.184693341 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.373286339 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.371726114 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.425139965 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.422008697 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.424967848 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.536822789 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.185677905 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.185487249 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.515277968 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.299677318 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.187299274 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.543046799 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.411529168 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.706840754 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.212620205 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.511889075 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.309800903 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.18852379 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.834056197 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.183831851 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.389424172 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.224407878 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.188273268 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.186763878 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.374545779 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.086234439 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.187207815 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.134928793 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.246592582 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.187052449 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.391495459 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.183796674 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.427447533 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.187616738 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.418272106 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.822848628 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.213212364 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.412269506 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.425159692 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.821029366 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.429121508 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.425193903 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.297842965 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.456019034 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.186969052 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.185465497 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.448218076 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.187188174 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.186472648 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.354045322 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.186266519 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.32777747 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.188477347 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.453298154 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.205077414 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.419052804 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.192007547 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.426923338 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.216593871 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.237172146 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.176442243 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.315908823 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.19311977 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.026952425 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.344202645 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.193366081 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.189516206 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.916548693 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.187292786 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.336816893 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.413306648 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.203070314 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.256517111 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.753320125 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.188044583 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.273238601 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.205076968 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.453257664 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.192388335 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.440482987 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.161346944 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.668321268 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.19119605 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.424790585 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.4212262 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.195017622 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.18740789 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.032967774 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.189926169 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.192056588 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.346586348 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.157239499 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.099620761 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.385338533 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.187124104 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.313584674 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.193913032 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.262058903 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.535827353 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.188261724 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.189335389 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.190134889 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.192492282 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.189232185 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.453056862 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.213934557 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.625171932 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.3282554 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.448178762 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.49482951 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.387523751 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.230184061 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.196460862 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.410553521 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.192241761 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.250529042 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.189732388 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.207195414 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.420592925 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.192241246 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.39428078 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.423332971 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.082548242 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.237988519 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.195445147 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.190388814 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.174966613 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.335209648 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.278076395 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.195529248 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.19480822 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.305267142 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.30811754 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.373177451 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.011479245 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.317421119 seconds)
  done (took 972.910377481 seconds)
done (took 1326.980372274 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.193433639 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.190474299 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.195778832 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.194086363 seconds)
  done (took 30.889274966 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 2.195328645 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.195157446 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.200339753 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.191613595 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 2.193304388 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 2.1939054 seconds)
  done (took 15.285290018 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.191481818 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.187052978 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.19091101 seconds)
  done (took 23.683684491 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 2.268507701 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.609515188 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 2.332591363 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.63195011 seconds)
  done (took 11.958312919 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.198858396 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 2.200405949 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.196902089 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 2.193423823 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.197215792 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.19720673 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 2.192074284 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.193459836 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 2.196816361 seconds)
  done (took 21.883006719 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.309310336 seconds)
done (took 110.126012194 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.205742127 seconds)
    (2/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.569923865 seconds)
    (3/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.307030899 seconds)
    (4/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.591250115 seconds)
    (5/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.206848976 seconds)
    (6/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.49732882 seconds)
    (7/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.419943724 seconds)
    (8/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.824304998 seconds)
    (9/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.391270056 seconds)
    (10/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.212775393 seconds)
    (11/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.204377228 seconds)
    (12/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.330682073 seconds)
    (13/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.458730258 seconds)
    (14/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.368864829 seconds)
    (15/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.415690365 seconds)
    (16/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.587215604 seconds)
    (17/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.275695993 seconds)
    (18/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.574914903 seconds)
    (19/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.192466308 seconds)
    (20/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.397661795 seconds)
    (21/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.194942923 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.80767425 seconds)
    (23/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.264154146 seconds)
    (24/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.208299321 seconds)
    (25/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.936464219 seconds)
    (26/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.199590846 seconds)
    (27/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.230757346 seconds)
    (28/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.446693975 seconds)
    (29/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.193068374 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.272020509 seconds)
    (31/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.27726718 seconds)
    (32/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.490226067 seconds)
    (33/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.20688869 seconds)
    (34/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.936225579 seconds)
    (35/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.342097271 seconds)
    (36/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.32934835 seconds)
    (37/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.306592527 seconds)
    (38/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.589675364 seconds)
    (39/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.56292222 seconds)
    (40/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.195648 seconds)
    (41/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.678242651 seconds)
    (42/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.381739354 seconds)
    (43/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.753257298 seconds)
    (44/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.480391745 seconds)
    (45/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.471253324 seconds)
    (46/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.34145711 seconds)
    (47/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.526980451 seconds)
    (48/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.435694342 seconds)
    (49/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.437361695 seconds)
    (50/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.206701465 seconds)
    (51/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.401580069 seconds)
    (52/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.327347283 seconds)
    (53/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.465677646 seconds)
    (54/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.28975557 seconds)
    (55/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.827310102 seconds)
    (56/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.343110231 seconds)
    (57/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.275211471 seconds)
    (58/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.166425932 seconds)
    (59/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.199220144 seconds)
    (60/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.452069715 seconds)
    (61/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.214134343 seconds)
    (62/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.301433699 seconds)
    (63/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.402911027 seconds)
    (64/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.155405036 seconds)
    (65/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.506297224 seconds)
    (66/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.197985844 seconds)
    (67/341) benchmarking ("sort", Bool, false)...
    done (took 2.416284348 seconds)
    (68/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.616035542 seconds)
    (69/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.199922083 seconds)
    (70/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.226268681 seconds)
    (71/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.499907311 seconds)
    (72/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.277394897 seconds)
    (73/341) benchmarking ("sort", Int64, false)...
    done (took 5.826703062 seconds)
    (74/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.198923271 seconds)
    (75/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.85417885 seconds)
    (76/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.677447284 seconds)
    (77/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.402024547 seconds)
    (78/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.803970509 seconds)
    (79/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.508543932 seconds)
    (80/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.45153369 seconds)
    (81/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.212963195 seconds)
    (82/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.198788387 seconds)
    (83/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.217633234 seconds)
    (84/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.199556123 seconds)
    (85/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.357226062 seconds)
    (86/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.207978271 seconds)
    (87/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.279082001 seconds)
    (88/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.28868311 seconds)
    (89/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.301046432 seconds)
    (90/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.480644359 seconds)
    (91/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.339263024 seconds)
    (92/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.520859155 seconds)
    (93/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.20476891 seconds)
    (94/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 4.05595598 seconds)
    (95/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.299251602 seconds)
    (96/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.283406883 seconds)
    (97/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.286961137 seconds)
    (98/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.459939223 seconds)
    (99/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.477631708 seconds)
    (100/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.217277186 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.544034118 seconds)
    (102/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.348075661 seconds)
    (103/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.287377112 seconds)
    (104/341) benchmarking ("sort", Int8, false)...
    done (took 5.138713267 seconds)
    (105/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.199467795 seconds)
    (106/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.300690669 seconds)
    (107/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.654355448 seconds)
    (108/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.857727552 seconds)
    (109/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.448530326 seconds)
    (110/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.306378373 seconds)
    (111/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.203605109 seconds)
    (112/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.578189256 seconds)
    (113/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.515031706 seconds)
    (114/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.349334402 seconds)
    (115/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.43645799 seconds)
    (116/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.599941423 seconds)
    (117/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.283055459 seconds)
    (118/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.696719203 seconds)
    (119/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.230261201 seconds)
    (120/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.335298048 seconds)
    (121/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.274987287 seconds)
    (122/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.442266819 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.120012182 seconds)
    (124/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.313628774 seconds)
    (125/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.200676797 seconds)
    (126/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 4.508261719 seconds)
    (127/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.900488347 seconds)
    (128/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.984947549 seconds)
    (129/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.206431552 seconds)
    (130/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.247395798 seconds)
    (131/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.296532093 seconds)
    (132/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.615384343 seconds)
    (133/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.452980828 seconds)
    (134/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.479579119 seconds)
    (135/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.407364784 seconds)
    (136/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.34962375 seconds)
    (137/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.346919518 seconds)
    (138/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.075992609 seconds)
    (139/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.855043612 seconds)
    (140/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.225974017 seconds)
    (141/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.960906939 seconds)
    (142/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.193786085 seconds)
    (143/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.331866417 seconds)
    (144/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.520729777 seconds)
    (145/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.283060955 seconds)
    (146/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.227285143 seconds)
    (147/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.399787349 seconds)
    (148/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.317002893 seconds)
    (149/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.265671423 seconds)
    (150/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.504147283 seconds)
    (151/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.244586985 seconds)
    (152/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.527515323 seconds)
    (153/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.448639595 seconds)
    (154/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.206639559 seconds)
    (155/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.287145991 seconds)
    (156/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.511834796 seconds)
    (157/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.457787794 seconds)
    (158/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.202641018 seconds)
    (159/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.545332073 seconds)
    (160/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.215131281 seconds)
    (161/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.441495167 seconds)
    (162/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.584102806 seconds)
    (163/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.20273411 seconds)
    (164/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.961161666 seconds)
    (165/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.464569032 seconds)
    (166/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.266175876 seconds)
    (167/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.285438171 seconds)
    (168/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.501104469 seconds)
    (169/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.797314675 seconds)
    (170/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.23000861 seconds)
    (171/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.899081345 seconds)
    (172/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.297177985 seconds)
    (173/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.221509337 seconds)
    (174/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.322347593 seconds)
    (175/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.232922309 seconds)
    (176/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.860270678 seconds)
    (177/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.322431232 seconds)
    (178/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.456641525 seconds)
    (179/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.374160899 seconds)
    (180/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.337231946 seconds)
    (181/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.108582299 seconds)
    (182/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.510526673 seconds)
    (183/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.605292259 seconds)
    (184/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.506905609 seconds)
    (185/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.342549363 seconds)
    (186/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.205165805 seconds)
    (187/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 4.255329229 seconds)
    (188/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.59458223 seconds)
    (189/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.214313978 seconds)
    (190/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.33398021 seconds)
    (191/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.209991423 seconds)
    (192/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.205323839 seconds)
    (193/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.094956542 seconds)
    (194/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.271380852 seconds)
    (195/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.591417663 seconds)
    (196/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.997082654 seconds)
    (197/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.429241116 seconds)
    (198/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.716306564 seconds)
    (199/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.520347305 seconds)
    (200/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.224415903 seconds)
    (201/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.285646563 seconds)
    (202/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.078992931 seconds)
    (203/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.488297468 seconds)
    (204/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.341599411 seconds)
    (205/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.336177953 seconds)
    (206/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.209196854 seconds)
    (207/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.299726715 seconds)
    (208/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.602593048 seconds)
    (209/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.411009405 seconds)
    (210/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.463215168 seconds)
    (211/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.489579513 seconds)
    (212/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.20805404 seconds)
    (213/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.298434121 seconds)
    (214/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.189288542 seconds)
    (215/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.209924337 seconds)
    (216/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.207475914 seconds)
    (217/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.34622211 seconds)
    (218/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.967515 seconds)
    (219/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.29796498 seconds)
    (220/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 10.099720296 seconds)
    (221/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.332331319 seconds)
    (222/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.478905295 seconds)
    (223/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.22632042 seconds)
    (224/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.357736305 seconds)
    (225/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.760427009 seconds)
    (226/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.271930922 seconds)
    (227/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.299438886 seconds)
    (228/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.271548746 seconds)
    (229/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 4.66276708 seconds)
    (230/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.207377046 seconds)
    (231/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.516988754 seconds)
    (232/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.210170609 seconds)
    (233/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.291367709 seconds)
    (234/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.22030748 seconds)
    (235/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.597749262 seconds)
    (236/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.571246162 seconds)
    (237/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.37296838 seconds)
    (238/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.174552951 seconds)
    (239/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.520968292 seconds)
    (240/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.221760043 seconds)
    (241/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.679675914 seconds)
    (242/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.212297753 seconds)
    (243/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.26307495 seconds)
    (244/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.315217352 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.520514745 seconds)
    (246/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.607295007 seconds)
    (247/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.224944552 seconds)
    (248/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.633498778 seconds)
    (249/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.199214032 seconds)
    (250/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.207458014 seconds)
    (251/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 4.236638209 seconds)
    (252/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.200045972 seconds)
    (253/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.600722556 seconds)
    (254/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.441789725 seconds)
    (255/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.215726274 seconds)
    (256/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.348355349 seconds)
    (257/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.035683306 seconds)
    (258/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.317228099 seconds)
    (259/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.527508347 seconds)
    (260/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.880438282 seconds)
    (261/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.505559849 seconds)
    (262/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.976082923 seconds)
    (263/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.330019479 seconds)
    (264/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.359817963 seconds)
    (265/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.288349683 seconds)
    (266/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.212306027 seconds)
    (267/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.030587165 seconds)
    (268/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.345779016 seconds)
    (269/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.132167773 seconds)
    (270/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.216749378 seconds)
    (271/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.223710408 seconds)
    (272/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.305456919 seconds)
    (273/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.212371324 seconds)
    (274/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.734327364 seconds)
    (275/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.546984969 seconds)
    (276/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.710564813 seconds)
    (277/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.519531348 seconds)
    (278/341) benchmarking ("sort", Float32, false)...
    done (took 5.878295703 seconds)
    (279/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.15423685 seconds)
    (280/341) benchmarking ("sort", BigInt, false)...
    done (took 7.209454628 seconds)
    (281/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.212297926 seconds)
    (282/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.914543175 seconds)
    (283/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.122536081 seconds)
    (284/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.807135359 seconds)
    (285/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.232437105 seconds)
    (286/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.587828926 seconds)
    (287/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.557427692 seconds)
    (288/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.610505181 seconds)
    (289/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.521959318 seconds)
    (290/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.35757659 seconds)
    (291/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.023483918 seconds)
    (292/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.100475075 seconds)
    (293/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.215831998 seconds)
    (294/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.26458755 seconds)
    (295/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.347196893 seconds)
    (296/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.31983517 seconds)
    (297/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.396528397 seconds)
    (298/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.988926004 seconds)
    (299/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.363449911 seconds)
    (300/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.354034231 seconds)
    (301/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.685436786 seconds)
    (302/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.216264121 seconds)
    (303/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.705784712 seconds)
    (304/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.208932511 seconds)
    (305/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.288154349 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.353477718 seconds)
    (307/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.299335269 seconds)
    (308/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.70438444 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.090672053 seconds)
    (310/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.306268415 seconds)
    (311/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.333305223 seconds)
    (312/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.869707126 seconds)
    (313/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.631115295 seconds)
    (314/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.309210815 seconds)
    (315/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.219005164 seconds)
    (316/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.227459283 seconds)
    (317/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.209175298 seconds)
    (318/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.373686743 seconds)
    (319/341) benchmarking ("sort", Float64, false)...
    done (took 5.942589904 seconds)
    (320/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.191063095 seconds)
    (321/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.486550121 seconds)
    (322/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.21531589 seconds)
    (323/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 3.764594697 seconds)
    (324/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.409158032 seconds)
    (325/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.613720295 seconds)
    (326/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.500716143 seconds)
    (327/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.322181891 seconds)
    (328/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.118509984 seconds)
    (329/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.218596811 seconds)
    (330/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.246730467 seconds)
    (331/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.227180912 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.33478093 seconds)
    (333/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.47251103 seconds)
    (334/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.523359261 seconds)
    (335/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.297778049 seconds)
    (336/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.304529022 seconds)
    (337/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.985588435 seconds)
    (338/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.430657599 seconds)
    (339/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.296213947 seconds)
    (340/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.469069454 seconds)
    (341/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.50156547 seconds)
  done (took 1204.819199465 seconds)
done (took 1207.020409658 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.241242739 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.235734456 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.218595739 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.242671342 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.331762119 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.262066336 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.23249951 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.222897846 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.269581936 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.269590851 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.21559261 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.265554797 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.220213155 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.217188727 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.220249165 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.232098403 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.619241152 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.248039029 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.235047761 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.231010417 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.226275046 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.216528147 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.27136005 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.266760343 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.223598716 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.224824577 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.223695122 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.240241358 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.333058129 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.224271971 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.226725266 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.234135361 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.619103527 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.256676382 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.221456843 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.237274486 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.234537693 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.234531668 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.222487766 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.253714163 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.774263684 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.225365141 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.222046891 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.223138562 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.222909313 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.228231654 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.221329148 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.232354384 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.236124668 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.236139173 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.759871827 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.242215139 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.226640377 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.221895369 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.235333062 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.224075201 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.224196731 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.237372057 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.240757461 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.238860228 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.599350185 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.269102429 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.221242562 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.239553988 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.230565947 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.79480637 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.225429466 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.229470244 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.775655 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.234847281 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.795800292 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.23564545 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.227257081 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.238707636 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.253331133 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.621546008 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.257327454 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.222748411 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.233463142 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.222409112 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.237101196 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.241030566 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.231232867 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.2272838 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.239635591 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.272579407 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.238117053 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.22529553 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.238229467 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.246244396 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.233972588 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.237329409 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.225954749 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.223544117 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.23596725 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.230483405 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.229581007 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.226357517 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.228217165 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.236730779 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.772240495 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.245816257 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.220718273 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.21999328 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.221388997 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.240089548 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.776004694 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.230619275 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.246885748 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.27358994 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.226781962 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.601433311 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.262602927 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.243767008 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.236819971 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.225314307 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.222380643 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.601283829 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.806404013 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.250055973 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.228528387 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.22688702 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.24691238 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.231096585 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.22656552 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.628514545 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.269642835 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.241846418 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.352841701 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.247331641 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.263993182 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.229291538 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.232525667 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.281366918 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.246878517 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.262237374 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.235498833 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.245409801 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.248417691 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.228796968 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.244669923 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.241822783 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.231746853 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.241724005 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.230304745 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.281429822 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.246059995 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.242564881 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.25232029 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.35222144 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.226951322 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.607716075 seconds)
done (took 349.971389071 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.308638408 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.226297118 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.313382736 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.23130038 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.315016841 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.29928704 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.227407206 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.22892557 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.226217894 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.700915461 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.227277897 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.231879212 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.22781522 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.228137007 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.297508915 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.227148922 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.22953453 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.491631499 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.231644999 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.309583809 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.226670106 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.229260275 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.229755429 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.708495059 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.227919722 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.227774476 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.306929411 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.228599821 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.501561383 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.229875807 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.228241951 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.501073401 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.30537783 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.241402498 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.234890134 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.237351421 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.317292114 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.236170326 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.291163935 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.293616126 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.314434257 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.266569781 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.227039975 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.224941502 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.233196178 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.234027775 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.229979988 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.259218943 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.230567745 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.23691683 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.494957583 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.236902395 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.236291035 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.231621551 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.231290998 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.249790179 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.195088705 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.237026663 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.307381683 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.237339789 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.296861876 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.710288517 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.703870745 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.231119869 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.228148447 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.229546559 seconds)
  done (took 208.444689106 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.332489763 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.303788972 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.334617623 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.236504928 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.279194747 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.336730393 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.235719839 seconds)
  done (took 18.209677476 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.238481814 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.231469901 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.290743491 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.290448507 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.237854484 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.408421094 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.241266059 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.234678001 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.259201089 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.21890692 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.865674387 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.288511615 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.229356885 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.229644113 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.241355931 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.291563989 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.229379171 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.238103452 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.34514993 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.380085541 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.238761254 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.239751604 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.256877735 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.243056314 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.233995109 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.231806063 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.236862462 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.237762798 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.233777576 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.230550717 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.234762907 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.292556957 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.234563069 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.229138691 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.234917899 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.233893089 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.23884063 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.233270757 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.232385464 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.229142468 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.234767388 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.233400468 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.23587837 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.233960979 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.234458524 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.256040828 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.23539017 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.235662114 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.234118535 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.235611285 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.259637836 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.235155203 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.23474714 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.239681986 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.278589525 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.242657993 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.239272406 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.233423478 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.23463245 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.234581303 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.232048935 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.379648462 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.293202734 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.233936093 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.293724409 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.385263286 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.236532037 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.234083298 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.233413889 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.29621594 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.234851935 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.294069284 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.234097452 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.351443889 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.236087571 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.412089518 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.25597172 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.237970548 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.237415499 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.235136009 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.242875833 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.23700321 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.238810437 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.243107475 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.241808235 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.236815736 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.236718384 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.236640267 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.243695813 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.23614715 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.286965242 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.235872746 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.241166947 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.350912271 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.236218998 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.35011895 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.264259835 seconds)
  done (took 241.628136094 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.241407585 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.242693435 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.236064971 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.249209601 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.208657017 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.233730181 seconds)
  done (took 15.566062952 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.239244739 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.240768481 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.238450065 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.236310174 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.241403093 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.242897117 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.236494922 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.237435622 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.245412562 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.236421395 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.240391276 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.238134803 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.239023639 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.241254978 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.236029523 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.235682804 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.237323032 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.237978174 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.238312947 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.241508071 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.367878285 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.242360971 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.242044727 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.238107553 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.246643943 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.236304265 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.248849885 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.236930387 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.237692562 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.242900054 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.246402325 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.242873887 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.239728744 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.243483837 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.241374128 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.240819967 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.241604042 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.237005041 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.238780575 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.24272176 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.238857321 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.243415965 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.237914032 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.238121554 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.240357698 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.241442364 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.242730709 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.247558941 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.241200919 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.239004935 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.237966675 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.237156872 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.245567379 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.236545021 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.241501265 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.244672814 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.243040195 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.237869885 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.244296997 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.240274003 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.242563831 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.243798423 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.236923934 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.244236079 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.245412069 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.240595287 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.242216325 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.243755451 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.244309683 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.238029572 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.239090969 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.240225113 seconds)
  done (took 164.613441179 seconds)
done (took 650.63661625 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.273756447 seconds)
  done (took 9.429389567 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.432548527 seconds)
  done (took 9.674493422 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.039739387 seconds)
  done (took 14.199154015 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.264669694 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.263143875 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.252125312 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.233934613 seconds)
  done (took 31.184860712 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.404092164 seconds)
  done (took 9.562059291 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.246250415 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.238508203 seconds)
  done (took 16.698357994 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.318519215 seconds)
  done (took 9.476858665 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.449838102 seconds)
  done (took 9.631768809 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.249087014 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.270830031 seconds)
  done (took 16.697500339 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.240516443 seconds)
  done (took 9.399372971 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.056207288 seconds)
  done (took 10.295165404 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.245448377 seconds)
  done (took 9.418271339 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.240648533 seconds)
  done (took 9.399604141 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.797927737 seconds)
  done (took 10.957931032 seconds)
done (took 178.185846176 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.242474541 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.237214536 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.235437945 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.238483108 seconds)
  done (took 31.111348551 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.275306637 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.268200074 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.279135842 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.275475189 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.265778477 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.262951831 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.274303571 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.27695331 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.265068804 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.27068759 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.275865511 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.274964026 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.273639212 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.282474337 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.28335556 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.271607549 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.265227751 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.264452555 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.269427921 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.285584521 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.275226258 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.276010708 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.241059765 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.239355554 seconds)
  done (took 56.653015945 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.432661417 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.308347215 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.394524939 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.288170526 seconds)
  done (took 11.586562178 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.241066885 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.303601675 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.294132253 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.28608396 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.326540384 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.344940449 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.295144204 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.448465855 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.35985103 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.369120911 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.250263532 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.262219471 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.266526285 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.289296841 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.342844568 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.242049184 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.240655691 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.353189108 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.304522735 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.441851086 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.243446896 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.297412959 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.335860834 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.294198412 seconds)
  done (took 57.594297767 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.244430736 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.253866318 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.251402706 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.245583231 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.243703375 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.245656087 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.251714023 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.246010993 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.266128585 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.246693082 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.240801353 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.243104645 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.248533401 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.241998392 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.242739392 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.247690173 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.257602938 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.245653797 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.247768348 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.251479054 seconds)
  done (took 47.124341244 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.240432442 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.089424108 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.589168376 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.495094778 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.241265537 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.243420655 seconds)
  done (took 34.049861894 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.255315822 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 2.2523048 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.241749545 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 2.299282059 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.379219726 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.249158523 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.245765938 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 2.252322491 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 2.290251385 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 2.308058376 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.26104569 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 2.273398702 seconds)
  done (took 29.471897998 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.246083769 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.242526249 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.24297192 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.25432155 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.25146406 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.253659714 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.252991897 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.243536649 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.256087853 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.260727905 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.251782302 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.255486018 seconds)
  done (took 49.171499361 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.455720482 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.472659967 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.443343971 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.785819595 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.847255092 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.219981332 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.532612018 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.45816436 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.930107983 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.955367829 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.532047579 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.304918148 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.194943907 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.165955923 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.162173003 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.491362332 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.247896182 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.103676376 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.500743962 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.306027312 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.247654936 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.249948354 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.252695337 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.532625344 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.563873808 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.244149566 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.45967067 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.263848052 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.257372972 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.475574712 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.665932329 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.297614632 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.449067033 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.505986871 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.579262846 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.292229059 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.259772793 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.366115735 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.285109762 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.280660204 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.25967136 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.258726746 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.774588211 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.258326835 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.518337129 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.249529241 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.253416776 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.252439556 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.172890795 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.563847388 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.342772632 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.246020543 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.283270085 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.683051364 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.368965276 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.492485995 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.25390103 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.374097073 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.303091767 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.500408206 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.343135365 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.255860355 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.463356434 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.175808119 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.559263127 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.354221225 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.252202253 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.25487573 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.9495548 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.491488926 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.328980257 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.565653262 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.992624204 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.250195516 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.252611334 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.264626759 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.347797779 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.244155749 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.545328777 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.235743248 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.175727767 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.346540056 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.645879863 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.25592363 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.246389692 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.261780536 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.09433699 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.273308796 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.345606013 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.501199155 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.557373295 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.251780286 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.251134057 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.273479363 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.25387141 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.198296801 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.768116436 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.310479519 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.177566925 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.81585782 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.669600274 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.211614997 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.660834286 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.288814055 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.512784848 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.392283175 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.654839877 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.458912193 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.498420851 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.783658247 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.256784677 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.866252638 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.334964133 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.325904509 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.253271561 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.797987905 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.383105636 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.534571612 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.350770932 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.253193653 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.179752681 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.262406845 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.456332659 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.670459897 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.303418028 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.248574233 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.258367147 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.252387737 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.256152823 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.358685056 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.268890181 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.540287246 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.315094074 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.253816142 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.190984128 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.255195021 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.528583288 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.807407791 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.308093019 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.491130052 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.508934736 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.951037433 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.265540085 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.268361447 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.519611063 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.316459544 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.32966519 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.793471371 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.36540078 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.349225009 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.25401989 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.392444332 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.258752001 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.257326547 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.558604645 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.661529085 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.681983367 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.296614109 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.256679369 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.271621824 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.37708554 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.492502063 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.270277196 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.274445988 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.262458255 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.338775187 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.482883015 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.261203072 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.260931822 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.479889821 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.483055801 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.541400384 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.322329493 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.259996314 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.320839054 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.26862382 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.471216087 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.337695654 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.924533607 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.804119089 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.450155089 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.747820348 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.215491895 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.921672726 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.509755974 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.618215537 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.274090586 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.704751283 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.37102512 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.883592248 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.279963545 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.783031823 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.184410484 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.259612319 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.573459719 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.196285503 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.854828906 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.393921122 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.270875659 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.258984051 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.26020944 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.266293277 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.26264956 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.358409615 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.322793432 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.329361675 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.183490637 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.856825875 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.29154255 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.258873463 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.258535068 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.520922655 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.03027145 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.211052542 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.255525409 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.336568121 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.00733309 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.807759143 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.256411097 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.263343183 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.874561396 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.892215253 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.166247655 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.272660389 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.957236819 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.282881297 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.519315542 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.370479099 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.55264972 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.959472673 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.335104743 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.257565729 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.257042194 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.957735235 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.266703784 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.958199819 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.537396437 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.524462864 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.693620838 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.310627105 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.468792835 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.272125196 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.260083612 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.68951844 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.282991356 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.261707743 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.462358322 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.780298529 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.574080858 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.202421451 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.346204863 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.282429205 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.527098496 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.251591179 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.672335491 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.928428167 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.251383866 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.277186787 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.49939322 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.944369214 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.25957732 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.238127296 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.265505517 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.470702634 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.461748079 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.51105431 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.53643693 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.701817233 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.274515626 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.267263737 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.283887838 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.502898373 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.257842113 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.296760367 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.70647463 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.28493955 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.682814132 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.544405336 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.631395236 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.880205216 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.521213915 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.32080937 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.274689116 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.900795079 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.381386313 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.193683321 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.382271113 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.189361551 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.952575407 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.550790517 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.27647711 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.530178947 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.234774179 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.590457667 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.55300839 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.514983169 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.292741684 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.28714584 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.261508717 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.315250728 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.264684546 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.392136293 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.373679596 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.27102998 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.744073052 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.295960453 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.312579852 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.265847907 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.69766768 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.278791781 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.26492874 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.96037736 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.918169236 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.380366217 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.335253857 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.975908277 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.759267417 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.292532178 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.153018847 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.915530866 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.531200053 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.31259345 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.693623949 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.287565114 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.667709762 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.290332759 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.475741352 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.268271986 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.797198952 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.304956306 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.519397271 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.204313071 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.473813458 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.439505973 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.276035587 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.267760875 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.191510438 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.365598746 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.132485043 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.242860389 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.267163279 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.275213793 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.676356195 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.43126649 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.705890878 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.087371503 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.26613251 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.505132431 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.643515661 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.849221302 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.294075282 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.266436776 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.593948006 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.018477446 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.562090858 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.538621233 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.271696224 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.939840767 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.477615283 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.389450405 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.183868576 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.755762298 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.846712439 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.967221593 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.2791301 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.469943971 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.597412523 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.489391028 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.294336269 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.337643735 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.668867023 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.528718477 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.957172338 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.189242016 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.266443149 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.657755347 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.296086304 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.364143333 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.50865521 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.552240822 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.794798687 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.697946089 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.310240103 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.600608738 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.70126821 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.674480623 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.45688485 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.594179417 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.57516232 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.148169287 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.67750896 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.475333736 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.366296151 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.525687655 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.12190335 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.978038903 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.510032066 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.26978304 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.194582235 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.473777783 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.27511464 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.575081805 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.789006531 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.290223711 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.526171065 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.726970113 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.806043573 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.394463111 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.288110709 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.231883966 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.29054984 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.289158537 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.268976457 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.761502116 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.553793389 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.281317712 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.206727333 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.934947503 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.193305268 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.480812634 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.406729374 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.299072792 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.825433756 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.538495418 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.345768064 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.672566069 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.455024633 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.299549343 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.194724079 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.927613326 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.214452275 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.28521974 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.688184896 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.28596896 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.27287704 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.472448356 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.195327183 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.313212375 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.899936101 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.447386944 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.83525058 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.535457761 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.387085985 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.493787737 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.557293163 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.272891059 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.226804582 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.54148794 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.196878143 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.837931046 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.963463679 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.960102649 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.339613861 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.266401858 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.270433449 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.541352136 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.609670339 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.351391303 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.700285409 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.299378883 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.293729652 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.594172466 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.344624734 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.274010888 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.275709178 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.701114047 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.500802279 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.29337936 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.298502595 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.485055281 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.342297695 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.468518715 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.309303878 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.785093419 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.276752245 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.273258567 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.303813847 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.220125329 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.268706692 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.928331915 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.329459918 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.272562131 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.541896322 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.886718916 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.473642511 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.668129953 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.150494227 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.402036784 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.311657858 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.275475671 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.280542376 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.55153808 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.566606199 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.270609277 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.541486381 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.314476347 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.278400061 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.281350294 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.242625507 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.27299699 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.906421985 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.165540673 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 5.001985719 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.668026282 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.278476884 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.330664307 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.27755507 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.201439072 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.275035887 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.296185094 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.257652229 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.27475321 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.536595832 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.352320287 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.348641558 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.27627396 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.276265726 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.280848819 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.487263025 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.790254439 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.291753437 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.977466953 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.477975391 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.281704353 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.772845182 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.70881372 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.464402596 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.312134525 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.409447837 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.502793062 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.800644815 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.418006622 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.249498434 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.499227154 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.27885333 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.547752244 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.549538443 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.277133975 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.488214066 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.701773031 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.558803769 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.310964255 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.878134481 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.332263199 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.437369367 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.179274269 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.284993182 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.279387285 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.538404198 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.323854689 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.278476798 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.286734078 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.832060884 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.974414011 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.71853523 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.417276223 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.595247362 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.047615704 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 5.028357512 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.280757717 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.204170403 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.287277743 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.300851175 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.281542283 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.291223275 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.922615024 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.999159439 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.490539604 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.549815841 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.20272241 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.480249956 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.84833915 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.191965008 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.233358227 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.264745709 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.531978796 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.193909741 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.268182334 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.266724316 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.333191742 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.92244611 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.533321412 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.265846941 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.212497798 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.270115493 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.269301336 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.26571643 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.357524299 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.269193455 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.385385086 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.528861254 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.635668877 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.357346917 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.907767252 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.910534775 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.203022599 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.310111799 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.825238676 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.836923345 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.342007987 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.057302552 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.898023429 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.212633521 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.268487678 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.284307398 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.511127407 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.269084741 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.270987608 seconds)
  done (took 2393.663795936 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.274683246 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.309286774 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.317922174 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.417070832 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.282769505 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.295807771 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.31077344 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.324107489 seconds)
  done (took 60.719325625 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 7.267388467 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.235430841 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 2.275355507 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.269083811 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 2.275268252 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 7.269697819 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.484473517 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 7.284429918 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.295293154 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 2.275503796 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 7.270627863 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.267364975 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 2.602389369 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 2.303271809 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 7.271648806 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 7.277788663 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 2.271381695 seconds)
  done (took 83.415624938 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.27384149 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.373089206 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.325077178 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.266389189 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.952395378 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.27240072 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.205430889 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.320165786 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.275880584 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.639587471 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.564466615 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.310590915 seconds)
  done (took 94.969564793 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 2.266311411 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 2.271118814 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.271407645 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.270302593 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.272380227 seconds)
  done (took 13.541806584 seconds)
done (took 2965.292600327 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.587185766 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.311921106 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.376764756 seconds)
  done (took 6.880634592 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.41652552 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.465175988 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.57548467 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.583307094 seconds)
  done (took 12.237403219 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.559962047 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.640039634 seconds)
  done (took 7.389513561 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.637089259 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.282805091 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.655669516 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.274250897 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.274136704 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.275800827 seconds)
  done (took 24.018857848 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.274356702 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.273657719 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.274807248 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.275064196 seconds)
  done (took 11.289016825 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.275162703 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.966923559 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.275819898 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.286226163 seconds)
  done (took 22.996971158 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.459922839 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.480490071 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.037553141 seconds)
  done (took 10.168911205 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.902049513 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.731873878 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.887829223 seconds)
  done (took 10.714302386 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.109250948 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.089190036 seconds)
  done (took 8.389793231 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.417906536 seconds)
  done (took 4.608512331 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.133934646 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.586208988 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.743071567 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.758845429 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.833413367 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.476742267 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.580996803 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.53436135 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.645937057 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.648944448 seconds)
  done (took 29.134208547 seconds)
done (took 165.183440929 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.709124965 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.292819184 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.487035742 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.658527658 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.557817864 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.486566602 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.539049031 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.645367564 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.328581153 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.312791481 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.652415581 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.524561453 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.487446965 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.293709439 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.514530149 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.292768496 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.571121372 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.733496811 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.327696695 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.544477886 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.567666855 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.297433216 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.495580398 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.311740605 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.522901869 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.435630244 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.899398395 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.289443425 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.48236243 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.914281443 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.43605539 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.69381025 seconds)
  done (took 182.498259028 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.154355592 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.271937032 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.275137229 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.273739046 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.587611991 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.274446777 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.274160282 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.272049445 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.506399021 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.490587751 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.274754022 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.562282349 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.277024289 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.273134783 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.275446795 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.273135581 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.63000471 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.195972405 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.275022936 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.27529221 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.276465858 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.435988411 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.273556253 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.452826142 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.613142412 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.275873795 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.274055118 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.275377398 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.276670409 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.274167585 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.275344011 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.274988667 seconds)
  done (took 220.868667722 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.276263125 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.274889847 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.275282469 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.276784243 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.276178055 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.277433519 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.276332418 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.275081378 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.074677923 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.068579118 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.279496444 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.277058008 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.275193613 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.275344053 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.277954518 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.275857766 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.275496792 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.277994743 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.27722322 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.28128625 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.27647256 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.953292324 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.276810344 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.996394625 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.278650275 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.282420995 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.277818697 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.280933235 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.280589936 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.280975976 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.276591098 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.277886846 seconds)
  done (took 234.064068851 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.5210198 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.281835576 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.282484427 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.296795316 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.28443971 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.281866779 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.284457372 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.527284649 seconds)
  done (took 22.963498203 seconds)
done (took 662.598629832 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.641264114 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.021017103 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.415068976 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.301882474 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.559401204 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.340812694 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.298186267 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.360240749 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 3.14317414 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.37037855 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.71579461 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.305150718 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.100663012 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.323533385 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.41980214 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.356645617 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.670791498 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 3.007601199 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.43355845 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.972274898 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.453741184 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.262299056 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.379665132 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.172801591 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.73606845 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.291382983 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.31967756 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.667161143 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.304642956 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.455298327 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.932620867 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.552709805 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.301471181 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.302306724 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.358287643 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.332303574 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.514371357 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.306442511 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.421111657 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.05401435 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.963463875 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 3.018476606 seconds)
  done (took 118.057831615 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.290602339 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.287725402 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.284347655 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.279325932 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.299064042 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.290241687 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.281464323 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.287630038 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.275535599 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.288775012 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.283894743 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.299374835 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.289664422 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.298237729 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.28986255 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.281969759 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.289174693 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.299963651 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.290745548 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.291320118 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.288763881 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.289195224 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.293555442 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.291182812 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.287500587 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.29022756 seconds)
  done (took 61.732014892 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.288581042 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.445838214 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.519485037 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.298901329 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.284364546 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.289109439 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.312604246 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.289164679 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.288127394 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.286600342 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.380134306 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.288858582 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.298506855 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.520994181 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.298788255 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.285665752 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.286356942 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.284599694 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.451204803 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.301835219 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.316432848 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.291754524 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.315416272 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.300938725 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.289286426 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.286266201 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.287507339 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.7083117 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.297541114 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.383885433 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.327642325 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.316573293 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.627644354 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.534691215 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.339027915 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.295310133 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.290174575 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.387843481 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.293399659 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.286651469 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.315896429 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.292616558 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.525475922 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.801466853 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.298535472 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.288799306 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.70791782 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.39670686 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.324567759 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.296489192 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.533062193 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.303195631 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.287678552 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.289110591 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.322731163 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.301474325 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.286802385 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.553907895 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.305850935 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.314496325 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.295644047 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.288175526 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.461016182 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.294313702 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.448083747 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.295231454 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.29400285 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.290951059 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.527796555 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.30247036 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.814093538 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.2993235 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.289029543 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.388690667 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.451761121 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.730316804 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.299279134 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.463630357 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.64634301 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.326568201 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.297375079 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.694107982 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.327550303 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.298760826 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.290499941 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.28875956 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.291575945 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.340466115 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.315688206 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.735389628 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.809032072 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.570022446 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.329131927 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.302783423 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.293364529 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.555682204 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.300531545 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.293136014 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.518919061 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.821000992 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.303712411 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.296204895 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.791131713 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.30158134 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.320799034 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.301393459 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.54140075 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.302328836 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.340136479 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.290745985 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.297371177 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.29400867 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.319016492 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.297373872 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.292411105 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.783778038 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.398891254 seconds)
  done (took 281.183937434 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.293586146 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.286857685 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.291854382 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.28749752 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.290454239 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.290780875 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.289999758 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.289158477 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.291691757 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.290946609 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.290035617 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.288199812 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.291746979 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.296469228 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.826720368 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.314763923 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.803571408 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.310411441 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.311603283 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.3107664 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.920445765 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.31402694 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.311196514 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.312125486 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.313661035 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.311171639 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.322656166 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.352975595 seconds)
  done (took 180.318409829 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.312749165 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.392330771 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.33264073 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.360909958 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.327399128 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.314772582 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.492506422 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.334119022 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.320052662 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.314936805 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.313660154 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.345692434 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.321637797 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.412962956 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.348238475 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.418838006 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.413627303 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.31978314 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.315492462 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.314659615 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.364535233 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.331798542 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.348376255 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.369921199 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.329997509 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.370974457 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.329848627 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.316395116 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.314756452 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.451878697 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.333675893 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.346147948 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.346792538 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.334050048 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.433292404 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.433723729 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.417032673 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.419801362 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.322343548 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.317031732 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.317267428 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.320133636 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.371831961 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.330451053 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.317426769 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.43434371 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.332131542 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.317680284 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.314619927 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.317573978 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.330351965 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.331255518 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.353333074 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.441455585 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.365316199 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.342736151 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.41362792 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.432646235 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.322565309 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.413518201 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.323481245 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.431543788 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.334174227 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.321082579 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.320505448 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.32241447 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.366809143 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.429644684 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.419005118 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.323459333 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.415194545 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.371873337 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.331153604 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.308933371 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.320923873 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.373200697 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.428329183 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.370846677 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.375930837 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.353886958 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.328395387 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.317121764 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.321028564 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.34761859 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.32551628 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.434114022 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.436130037 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.32283629 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.319562299 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.319730273 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.319644571 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.342999731 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.379885613 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.358814252 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.428813565 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.354869278 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.355845147 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.32566563 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.333970963 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.323286107 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.352011918 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.325931653 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.331833967 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.595089369 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.350113789 seconds)
  done (took 249.807763171 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.669509996 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.364338318 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.389262739 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.591378367 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.685872779 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.169824272 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.355817061 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.367095286 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.376278565 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.472599025 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.435150732 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.407578525 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.355076003 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.341860071 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.362845319 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.38021118 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.393836664 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.68891396 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.573933611 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.814955917 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.358074289 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.66544143 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.701893109 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.744239115 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.407060868 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.774384223 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.958309766 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.463616438 seconds)
  done (took 75.511471196 seconds)
done (took 968.811190398 seconds)
SAVING RESULT...
DONE!

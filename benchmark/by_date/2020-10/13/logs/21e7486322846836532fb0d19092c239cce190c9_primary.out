cset: moving following pidspec: 25237
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.837134125 seconds)
loading group "shootout"... done (took 1.058967344 seconds)
loading group "string"... done (took 0.619784776 seconds)
loading group "linalg"... done (took 8.146338031 seconds)
loading group "parallel"... done (took 0.159712818 seconds)
loading group "find"... done (took 2.722615775 seconds)
loading group "tuple"... done (took 1.971629079 seconds)
loading group "union"... done (took 14.395763368 seconds)
loading group "dates"... done (took 1.374532787 seconds)
loading group "micro"... done (took 0.208459172 seconds)
loading group "simd"... done (took 4.639374635 seconds)
loading group "io"... done (took 1.017350816 seconds)
loading group "random"... done (took 8.964089143 seconds)
loading group "problem"... done (took 1.542725277 seconds)
loading group "array"... done (took 23.889400158 seconds)
loading group "misc"... done (took 1.766068078 seconds)
loading group "scalar"... done (took 41.029362145 seconds)
loading group "sort"... done (took 3.150140769 seconds)
loading group "sparse"... done (took 12.108098152 seconds)
loading group "collection"... done (took 17.490588871 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.523426941 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.123270022 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.12633612 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.118292655 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.183710537 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.118759677 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.128776126 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.083727517 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.851440033 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.134355213 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.111775168 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.426965589 seconds)
done (took 5.382443466 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166755506 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.090075214 seconds)
    (2/2) benchmarking "String"...
    done (took 0.081425517 seconds)
  done (took 1.40283769 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.069635451 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.059134312 seconds)
    (3/3) benchmarking "different"...
    done (took 0.065512177 seconds)
  done (took 1.42576918 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063362217 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.130787489 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064405377 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065208015 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.0648401 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064453803 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064643993 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064658875 seconds)
  done (took 1.7543518 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.070144338 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065480853 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063428345 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065558419 seconds)
  done (took 1.498427252 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063581109 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.120078575 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.062948094 seconds)
    (4/4) benchmarking "different"...
    done (took 0.063552796 seconds)
  done (took 1.541723831 seconds)
done (took 9.109163167 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.237575754 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.099028331 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.284480217 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.441674323 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.610226346 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.091902002 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.072920686 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.068250779 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.126294926 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.320666446 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.10140217 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.177671329 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.088117482 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.16695766 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.007620772 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.117301338 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.084330749 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.120883126 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.093302334 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.130769487 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.389127856 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076005434 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.071446963 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.068672269 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.066634799 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.645415212 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.663009214 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.118039414 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.081774093 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.160410967 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.114715769 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.662002423 seconds)
  done (took 10.823645624 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.090313377 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.087542209 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066550987 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.12120268 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.090445255 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.067921202 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073676565 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.065940233 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.085720457 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.121021287 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.087447783 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.095609406 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.064297986 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067011581 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074704521 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.198937738 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.077497928 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.078348113 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.065807607 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.078648571 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.10268518 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.075402377 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.075754077 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.075685432 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.126740781 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.166775858 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.094775842 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096288479 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.063805042 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.076535538 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.113679863 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.122395051 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.06451312 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.063846116 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.116760095 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093451718 seconds)
  done (took 4.570412981 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.866419623 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.092806762 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.097920914 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.623929443 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064199511 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.147070881 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.234800773 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071125069 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.282572827 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.146830638 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.137892029 seconds)
    (11/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.143146365 seconds)
    (12/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.114433696 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067703349 seconds)
    (14/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 1.12422422 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.116525655 seconds)
    (16/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.511148004 seconds)
    (17/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066305344 seconds)
    (18/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065761901 seconds)
    (19/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.064444974 seconds)
    (20/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.082010997 seconds)
    (21/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.066490665 seconds)
    (22/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065374685 seconds)
    (23/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.061808744 seconds)
    (24/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.089347455 seconds)
    (25/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067197737 seconds)
    (26/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.092852048 seconds)
    (27/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.085055151 seconds)
    (28/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.157522971 seconds)
    (29/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.956342764 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.296046197 seconds)
    (31/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06531583 seconds)
    (32/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.161216967 seconds)
    (33/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.06391341 seconds)
    (34/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.082581102 seconds)
    (35/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.067576612 seconds)
    (36/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.35682752 seconds)
    (37/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080512032 seconds)
    (38/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.452239363 seconds)
    (39/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.120944775 seconds)
    (40/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.063778494 seconds)
    (41/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.160175319 seconds)
    (42/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.114118612 seconds)
    (43/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.062532252 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.117819367 seconds)
    (45/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.076370747 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067047973 seconds)
    (47/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067632528 seconds)
    (48/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.480418485 seconds)
    (49/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067582392 seconds)
    (50/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069930262 seconds)
    (51/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079288919 seconds)
    (52/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099230389 seconds)
    (53/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065743927 seconds)
    (54/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.063984399 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.16790844 seconds)
    (56/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063148434 seconds)
    (57/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064870856 seconds)
    (58/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.06524513 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.148352681 seconds)
    (60/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.062838578 seconds)
    (61/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.138130027 seconds)
    (62/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.062590834 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067269143 seconds)
    (64/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.099155107 seconds)
    (65/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.066813163 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.084424258 seconds)
    (67/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.091966763 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.336016002 seconds)
    (69/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.041767534 seconds)
    (70/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066234445 seconds)
    (71/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.923107768 seconds)
    (72/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.077035404 seconds)
    (73/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.06626183 seconds)
    (74/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068571497 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064969577 seconds)
    (76/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.065827601 seconds)
    (77/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06515706 seconds)
    (78/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.070098997 seconds)
    (79/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069242356 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.066481035 seconds)
    (81/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106325022 seconds)
    (82/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.06445172 seconds)
    (83/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.063007992 seconds)
    (84/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068146921 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.064643463 seconds)
    (86/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.061886051 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070060766 seconds)
    (88/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.094867083 seconds)
    (89/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.065621214 seconds)
    (90/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.536976124 seconds)
    (91/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094428097 seconds)
    (92/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064550707 seconds)
    (93/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.073886928 seconds)
    (94/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.102819795 seconds)
    (95/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064987652 seconds)
    (96/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.068747843 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065065861 seconds)
    (98/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.180330395 seconds)
    (99/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064816223 seconds)
    (100/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065769233 seconds)
    (101/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067910735 seconds)
    (102/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.094495104 seconds)
    (103/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068098646 seconds)
    (104/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.110727777 seconds)
    (105/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.02892549 seconds)
    (106/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.067635475 seconds)
    (107/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064496648 seconds)
    (108/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.070681786 seconds)
    (109/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06761204 seconds)
    (110/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.06827782 seconds)
    (111/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064708326 seconds)
    (112/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067660633 seconds)
    (113/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.06671936 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.063425108 seconds)
    (115/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.062981414 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.104463386 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.11747467 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064391612 seconds)
  done (took 22.30294668 seconds)
done (took 39.800875852 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.301805219 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.076204412 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.076149555 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.076520122 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.076369968 seconds)
  done (took 1.890038595 seconds)
done (took 3.212742226 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.128151681 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.079457807 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065020639 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.097695866 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.066140466 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.098361916 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.104622717 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.100548551 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.066423226 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.066538019 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.066508813 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.098364038 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.100708063 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.066491787 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.094746473 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.099371528 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.06666747 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.062458573 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.066375418 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.066211983 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.066156538 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.06216325 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.066532411 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.066091677 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.095773105 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.066288563 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.062296172 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.095322968 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.066543879 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.095153949 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.066379483 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.066589329 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.066806811 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.096800387 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.066240939 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.095771149 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.062071725 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.066501534 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.066328618 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.066544108 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.069099223 seconds)
  done (took 4.520491049 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068827482 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079851621 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080636353 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060686219 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069305362 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080068843 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.059952096 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079208974 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085522756 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.079742967 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.079746318 seconds)
  done (took 2.148503181 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068038132 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081106981 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081633475 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060176928 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071058692 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081095923 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060306788 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080278194 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.082927114 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08076216 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080772673 seconds)
  done (took 2.136646177 seconds)
done (took 10.110370998 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.093995524 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.064147873 seconds)
  done (took 1.451519814 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.621877318 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.200296101 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065700939 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.083757662 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.187671053 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.090022955 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.197524975 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.069627311 seconds)
  done (took 7.993354416 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.097559558 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.06560828 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066413761 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067054137 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.066242801 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067392205 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.06846675 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.065563112 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.067060083 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065536485 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.066040896 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.06723311 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.06688996 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066921146 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.065815643 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066741091 seconds)
  done (took 2.490719107 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.096704794 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.095673837 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.070089965 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.07097079 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.069250376 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.068940359 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.07216829 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.072075391 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.069799088 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.071224157 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.072689354 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.071346595 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.071793844 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.062567268 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.071165088 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.071308175 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.067789758 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.070778451 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.071331772 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.071878416 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.070500469 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.060357357 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.068695846 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.069767111 seconds)
  done (took 3.149258159 seconds)
done (took 16.397024352 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.169342113 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.071869284 seconds)
  done (took 1.54405634 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.066086125 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.066306482 seconds)
  done (took 1.451256392 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.0712696 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058884561 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.075825944 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.067892953 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059830398 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.05972797 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074191946 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059775011 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059432303 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059534001 seconds)
  done (took 1.96587951 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061312451 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.066687345 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.064908056 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.062862754 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.064878539 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060626631 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.062705873 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060823975 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.06649721 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.060004364 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.063494948 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.080018675 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.062891891 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.080346683 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.063477129 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.063903635 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.065424312 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.062479808 seconds)
  done (took 2.49429344 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059308679 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.060124451 seconds)
  done (took 1.446677997 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.062920036 seconds)
    (2/7) benchmarking "second"...
    done (took 0.0603566 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062341548 seconds)
    (4/7) benchmarking "year"...
    done (took 0.061808072 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.059956212 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059583984 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060268559 seconds)
  done (took 1.74945651 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.407625023 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.118447286 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.33007463 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.066695416 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.074019028 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.245946397 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062241278 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.066257413 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.066507085 seconds)
  done (took 2.802898242 seconds)
done (took 14.788284465 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.07935082 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.176275142 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.088427416 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.394498191 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.088691568 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065026067 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.110874012 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.161807149 seconds)
done (took 2.512261551 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.227556164 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.377923922 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.749185324 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.064534789 seconds)
  done (took 3.523284066 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.324251823 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.076741806 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075749486 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.065148393 seconds)
  done (took 1.884863708 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.063723548 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069708689 seconds)
  done (took 1.468855868 seconds)
done (took 8.453794408 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.06294944 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062363018 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.063099133 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.061964917 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.062287717 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.062239952 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.061935671 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.090810936 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061622966 seconds)
    (10/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.071901367 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.061735211 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.061800656 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06157355 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062054555 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061990112 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061631827 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.062790869 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062150892 seconds)
    (19/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.062138864 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062104696 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061734105 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.062656021 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061863705 seconds)
    (24/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.061402552 seconds)
  done (took 2.892626078 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077248867 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063944311 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.065133353 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066350459 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.065541837 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064814003 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064913332 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063949036 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.065215256 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063408895 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06499582 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065602721 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063178732 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065274274 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063356602 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.065217938 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.06456404 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064043007 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06349267 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065357882 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.06449372 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06378987 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065424596 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064611727 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065387544 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065123081 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.063244856 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.063622908 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064564389 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065171254 seconds)
  done (took 3.298698859 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064606909 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.058526336 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.058519551 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.067765705 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058749656 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058664346 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.05911629 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057929274 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058432117 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059245752 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.058627378 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058507668 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.059177746 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058242284 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058963897 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.05869049 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063212459 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.077053149 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058522402 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058372737 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.06254163 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058369791 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058426775 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058039727 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058678039 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058192058 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.057831883 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.059030668 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.05861471 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.058914063 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058189884 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062499939 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.063066939 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058414817 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068314579 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063301898 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.05829036 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.062416598 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059361578 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058191271 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058584089 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058306824 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058475778 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058264 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.068073361 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058643548 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059189511 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.059273225 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058850095 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.057883965 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058123323 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060042135 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.064015778 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.059674313 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058055602 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059389387 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058267078 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.058715673 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058347945 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.05794637 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058098523 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.061459874 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.059714207 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.058967442 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.077389993 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.059685188 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.067612083 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060931404 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059466458 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062053385 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.058936405 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.07532004 seconds)
  done (took 5.706240397 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.078858103 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.083220096 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063461063 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.062728109 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058951262 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058516214 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065997249 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058802638 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063091 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.078339758 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059040124 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063101544 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063204112 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062825341 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059416387 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063305122 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066343526 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.059467706 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.058967939 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062618235 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059291496 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065613581 seconds)
  done (took 2.780313287 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.131734427 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064892348 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.102100701 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.071925718 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066393082 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.072005874 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.063904971 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063741393 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064006254 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064749501 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064595239 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064663225 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066806032 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064728963 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064666216 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064948629 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064299786 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064664638 seconds)
  done (took 2.639257086 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.074351325 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064435742 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.084365714 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063732792 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064015395 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063389625 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067505028 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067629998 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063773817 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.064162971 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.067924987 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063630949 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063562558 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063667796 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063482091 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064274269 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.063320291 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063751444 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067462426 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067780098 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067528674 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067612596 seconds)
  done (took 2.816944871 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074999871 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063070241 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.077926305 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064236769 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058761063 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058805162 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.063760803 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063122423 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.063701903 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.062685351 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063267265 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058625879 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.064356944 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063322799 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065483394 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063070884 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063094535 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063302974 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062705027 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058607238 seconds)
  done (took 2.633352165 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.084139069 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061448736 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061631461 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.080832418 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061308545 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061047713 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.080385395 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.061114911 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.061319549 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.082164718 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061799722 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061297466 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.080093038 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.080467139 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06134627 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.08012552 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.081100236 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.080382248 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061387971 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061288841 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.081873315 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061326644 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.080100226 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061348258 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061253905 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061230611 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06108359 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.079531468 seconds)
  done (took 3.311805371 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062644106 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061326514 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061369077 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.062365548 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.062590525 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.062424128 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.062241568 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.062307476 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062160528 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.062530697 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.062061388 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061556504 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061636011 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061713471 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.062218877 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061695689 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061755341 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.062372072 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062435139 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062101009 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061837963 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062243964 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061583058 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.062247067 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062644341 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061808235 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062569838 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062083735 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06204103 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.061958641 seconds)
  done (took 3.225029826 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.071641497 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069643967 seconds)
  done (took 1.505055755 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.060638244 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.07512731 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.05845064 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070670382 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066658463 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062507569 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067299661 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066695097 seconds)
  done (took 1.878015282 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.065046423 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.087832154 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.061019292 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060601254 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.066332183 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.127769566 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.07233592 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.071203617 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073638317 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.063019699 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.060767092 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.071899203 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059920226 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.072803292 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061407082 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.068374423 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067381942 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.076871394 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.07244089 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058439061 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072320726 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.0612114 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.05876165 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061277929 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.059955568 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.066560603 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.075194986 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072140292 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068203206 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058546533 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078078137 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059240135 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.059988226 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068120862 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.063925773 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059571912 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.095053231 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.05977727 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.063879206 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058545865 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071294665 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.078931532 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.072785583 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.076324339 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060682904 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.060743069 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058858845 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061338428 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.062327548 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068140584 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.058960666 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06596251 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058633983 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060331306 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.069275345 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059336574 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064338759 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.067967186 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072100934 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.069359968 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.067216982 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.07461865 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.067546897 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.06648468 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060065651 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.077373475 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.060739845 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.07138382 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073752125 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060205384 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071248251 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058522292 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.057808631 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.058643391 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.091191195 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060763365 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060010598 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.058842642 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059019788 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060089004 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.068215006 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064314922 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.065896103 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062419259 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074187052 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.067785073 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.05910363 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.065424213 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.076327318 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.062524292 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.059602193 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.075041216 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.06278736 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.058788456 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.076086235 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.068884876 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.061272111 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.060054037 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062852838 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072128622 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060417131 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057898441 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06723612 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.06081096 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.061016278 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063638159 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066509707 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.059273875 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.067970696 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063360348 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060558659 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057527382 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.062575711 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059506736 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057506155 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.06825035 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058506632 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072358711 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.064566276 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.07209746 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.072675708 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.068905658 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073960913 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058713186 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057468631 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.075451901 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.067785795 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.06012534 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.075189535 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.05844853 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.068294314 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.058391102 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.195149239 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.069979176 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059710821 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061543873 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060805442 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.064627304 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.060577034 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061721056 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.06453668 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067480861 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.070988465 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.060518906 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067790287 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.059795328 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074612892 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069196046 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063736629 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062642069 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.060192643 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.07083999 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.06580483 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.068656845 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059217072 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060206868 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059538265 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.069625106 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.068700438 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061624812 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.066491542 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.063894103 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060193247 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059683273 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06314584 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.062355327 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062408449 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.0598852 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066914994 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068313059 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.073083924 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066663217 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.067923352 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058950028 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059188699 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061237609 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058673782 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.063818853 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068481733 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074062811 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.070442997 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.07919911 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059433155 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.068539301 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060773862 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.075333449 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.071566433 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060297416 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063564932 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.05865297 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060730158 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.068101227 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070329813 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.072565318 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073565991 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.063492655 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.063327326 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.05876561 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.073227663 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.060602673 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067507076 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068548492 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.064250059 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.059508337 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.060894425 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.067993701 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.063658313 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.0595817 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.07450395 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.065277499 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.058700794 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.072633402 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.059598526 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.069575179 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.058790656 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.06245074 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.064376524 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.061264127 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.068686613 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073867985 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058252822 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059831494 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074122981 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.061032777 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060749833 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067186556 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.07351778 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063892888 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.066606461 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069770601 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.068860086 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063702029 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068303044 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.060009399 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068212275 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.062410364 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.07012362 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.059222345 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07637108 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.058274038 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073486586 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.059800216 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069549539 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059865659 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068310807 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.060657516 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.076045232 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060750078 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059947418 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070126025 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057849976 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.0675859 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058714066 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063631694 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.06512602 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.067967467 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.06054334 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067556394 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.060230744 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067173759 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.062932427 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.066271886 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067692945 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063394675 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058536545 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.067049652 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069371116 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.066500932 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.059950031 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.199956483 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.061474575 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.06972244 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.061960602 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.061701931 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067655199 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064295841 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065578661 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060943183 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.060991161 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061202991 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067541566 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.068775553 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076748053 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068618292 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.066859127 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.068463396 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058823589 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075893186 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059677686 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.066832594 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060103137 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.064880975 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.068595188 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060004287 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07742498 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060940392 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067133269 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071552714 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.06815813 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.06302273 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.076494591 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062650891 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068126463 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.067414845 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.063776577 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.065889374 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.061168279 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.067295625 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.06866412 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.069741889 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.06071148 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.066747563 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068121871 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061101571 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.066654144 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.060811037 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.068090485 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.061040232 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.058567382 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.063516246 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070250177 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.063761845 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064096497 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062142552 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.058466806 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.059595892 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.065737049 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.063577251 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.06767525 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074647743 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.058612517 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.060423874 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.059285553 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.062814944 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.076742762 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068651552 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067481785 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064293968 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058263206 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.060767234 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.061240466 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.05962812 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.063027472 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.058249789 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.058930244 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069704474 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.061292975 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063578524 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060196721 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.060516307 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.069152262 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.064213876 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.060430119 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065711403 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.059467229 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064504622 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.058851254 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.061209744 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063451222 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.059273819 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062862287 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069852432 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.07489638 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065908796 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.067745294 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.060621306 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.066892426 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074515355 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065985375 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060172081 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068326043 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058537652 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076863269 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068731108 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067508163 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068526053 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.060160962 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075510161 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063671574 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.068938102 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073986853 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060674074 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065561847 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059273456 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073937084 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.06377804 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059152482 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.066504931 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066534782 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.064351317 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.069767815 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059607009 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.066142434 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063951077 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.062195394 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.060090092 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.059944488 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.06679648 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.074281998 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.059405399 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.062611842 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.066076461 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.066731813 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.063398414 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070868365 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.066768277 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.203223921 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.062203239 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063753272 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.060981148 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.071304718 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060320843 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064101346 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064109923 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059176719 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.06606215 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075295426 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.068889245 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.06955226 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.059507717 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058680005 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.076671473 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.063183903 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.063282449 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.067181964 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.068547516 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071289883 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.068918818 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.075838026 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.060219558 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.065463221 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07212417 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.060756726 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060321037 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.063782725 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.061500596 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.068998819 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069273567 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069490781 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062290675 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.066147854 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.072937439 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.060360161 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.064012826 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.064639714 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.060533831 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.069884126 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.067313975 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.068294027 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.061234566 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.059721503 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062817117 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.067732364 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.066996364 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068133085 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060279547 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065636564 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.073061967 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066325232 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062197248 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.059218159 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062894506 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068353303 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063771309 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.059144254 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063850743 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.063028813 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066617625 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068667647 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063796168 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.05915229 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.076072869 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.067557506 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.068042347 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.061407228 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.06161403 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060200042 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.059213162 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070747577 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.059066787 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.060922681 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063874836 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.061028653 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.07853793 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067379368 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07477 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061001235 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063647116 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.059215444 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068493618 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063889573 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.059876403 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069492722 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.059250707 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074088375 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.070804425 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.06497116 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058996701 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.083730811 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.066938489 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.073795339 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069147338 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068303013 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062872281 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.06841118 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.06135624 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.069857971 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.05923935 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058410545 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.06881698 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.067401164 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.071129235 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.058926902 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069068813 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061024437 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067582071 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067263613 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061291429 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06128317 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.060856072 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068294901 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.063899026 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.068177969 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.063784759 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.075692725 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060561752 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.069479093 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.067339595 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.069336391 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07185462 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070505304 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.066300577 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.05939576 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06588432 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.066104973 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.059845398 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.063415403 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.061857657 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078719203 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.060253871 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.059921034 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07177588 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.204951877 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060058693 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.066099453 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.063630857 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.069502105 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.060835634 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.069507495 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.063294489 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.060215965 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.063834481 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.06374014 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.058522356 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.05940958 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.059445128 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069366198 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.064185735 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.059649795 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077453199 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.061254752 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.06786159 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070269112 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.066283771 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.06110227 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058659362 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060912549 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072581729 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075425942 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.063530434 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068499328 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.061210429 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068506031 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.058828412 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068403957 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067531305 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068155409 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.059038457 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060218046 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.074095805 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074416117 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.064084886 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.068755462 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.06807785 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.060856938 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080251662 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068468626 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060667137 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.071837967 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061895059 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058489375 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.058311774 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.060893435 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070680968 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058868415 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.061771444 seconds)
  done (took 40.956270655 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.09680425 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060981577 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.058970668 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.059488527 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069846102 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059737584 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.059273509 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060070155 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.060028921 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061439364 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.059207769 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059044814 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.069674678 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.071504219 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068631978 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062445782 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.05935614 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059922531 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.059235985 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059554683 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.068928652 seconds)
  done (took 2.801500835 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065352229 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.073462561 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069798099 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.074560322 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066997687 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063021879 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.069812881 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063423647 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.070100869 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068389427 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.070557677 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06324429 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.067873924 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.068272121 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068475143 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06326293 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.070295963 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067009053 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.062847605 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.069766999 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063278997 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.069834589 seconds)
  done (took 2.928355719 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.061536271 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059785632 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067905095 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.061026393 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.05839086 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.06217672 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058465277 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.06371197 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063314902 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063331435 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.067949237 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059794081 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058557291 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064449763 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.058437756 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.0596932 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.100043117 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.060190225 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.060232284 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058849603 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061460785 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.06787311 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058635111 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058924649 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063091576 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061938642 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.05882062 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061509446 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059226563 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.062969675 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.060022139 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.05851401 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068306753 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.066838028 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063208441 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.062980174 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060589412 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061857408 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058952654 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058904404 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.066866112 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060246273 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058881276 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060217602 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.067861148 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.05925273 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058520523 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.067473709 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.05866324 seconds)
  done (took 4.503693106 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069018038 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.108743728 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064542255 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.090409965 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.070960447 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.065285409 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064447481 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.091947942 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059804191 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060386425 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.072020819 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.072243785 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061719241 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.063103597 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065959111 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062187038 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062454514 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060847794 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064481411 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061869157 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.063919487 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065484788 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.070656649 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071113568 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062709106 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061069904 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061118852 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062983105 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071124867 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064192198 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.063115641 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063337147 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071482091 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066142303 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061129745 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061213149 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.071828549 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062177548 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.062118508 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060165417 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061473886 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063112268 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.065774359 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072404452 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062190779 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066555008 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061993173 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059882234 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072048865 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061861709 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065450353 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072385026 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062943893 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.062229964 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062948896 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072014067 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061775606 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060558728 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.06235311 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071119456 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.05997581 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062832659 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.07200715 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061253817 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064896659 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072225184 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066049738 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062853209 seconds)
  done (took 6.068728946 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06858329 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093046679 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069951934 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069850449 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069736243 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069313596 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069093311 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.069632969 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.069319825 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.069673789 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069578939 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.10765021 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066446718 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073714624 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069482289 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.068846631 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.068918761 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069405777 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069040676 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068669063 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.068928433 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069370523 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.068913495 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069497525 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073268487 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06538799 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069223813 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.068966109 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06962332 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.068521149 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.071385638 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.068586988 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069058026 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069196658 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.072041127 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.068588062 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060357359 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069229613 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069538954 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069109241 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065528797 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069959344 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069118995 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.065655991 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069211755 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071228775 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069447865 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.07120088 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.075348862 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.069501303 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.068909338 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069447591 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06882426 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.06934349 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069908043 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.075860818 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069560301 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070036332 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069320224 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.070245734 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069527127 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.075628951 seconds)
  done (took 5.84829638 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071914186 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065609788 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077124511 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058732993 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058922242 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06813872 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058839205 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.059133329 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065995139 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.065630145 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067320636 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068284755 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069876325 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067001107 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067822409 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069797982 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068111317 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067660121 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065275295 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067641767 seconds)
  done (took 2.799406664 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.074004085 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.077203415 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.064686329 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067554568 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.064071528 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067988537 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.063718107 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064655482 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064623964 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064812447 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068864011 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069162504 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065185754 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067690241 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.06874606 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068053761 seconds)
  done (took 2.53044166 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.066017725 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066200224 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.065873667 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062985039 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.063842639 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059968589 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.059729632 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058894836 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.059008003 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075773388 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060077989 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.071806599 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060156086 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.05927213 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.059929475 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064990564 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.059592414 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059916185 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.060058411 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.064601382 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.066318453 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.061033443 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.063743537 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060186302 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.065061996 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.066532372 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061000328 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.06371042 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060207086 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.060543499 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.065275816 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.066082977 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.060160448 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060594219 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059451987 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059765706 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.059888941 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.060379137 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064999085 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.059989455 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.058504736 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.064810797 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.06060944 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060780065 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.059363347 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.060619123 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.059105892 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.065774733 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060443548 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.065422193 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.059655054 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.061729373 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.06052681 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.066729325 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062655632 seconds)
  done (took 4.887872909 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075553881 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064858685 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058590759 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058852867 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.064127663 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.065754111 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06420978 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064602399 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064616875 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058993863 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064649198 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063965773 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064570734 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064420877 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065217442 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063866383 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058723006 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064195801 seconds)
  done (took 2.620781278 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.07028175 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064107715 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.068778114 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.064224516 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063488873 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063612913 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059890505 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.059451315 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059099618 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063389416 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064204654 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.06333839 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059389694 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.063189174 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063644678 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063524162 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.063175948 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059355799 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.064170646 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.059306846 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063785236 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059316132 seconds)
  done (took 2.847384384 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.085567613 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.081688785 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.123904301 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.077514005 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.085578315 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.069448719 seconds)
  done (took 1.988767118 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.090701972 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.101129125 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063491771 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064525199 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072152261 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068688243 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066483403 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066811339 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072141643 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070336791 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066751751 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072238186 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072107319 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068725528 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071797839 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074216785 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066558197 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066734297 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.063848454 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073726409 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066635652 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071691828 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066695669 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066546955 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066871894 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068177508 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074120447 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070482157 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066321936 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072036729 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073731424 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066450267 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07198336 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070334368 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.063702448 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07201253 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06711747 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074057465 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071965579 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068862765 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063854223 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072125197 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071850955 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068169599 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07458165 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067867551 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068653539 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066634487 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066886792 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076611185 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072115374 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068644713 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072097009 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074694444 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074657568 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076299493 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071043021 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068566074 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072351651 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070646556 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068683 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07227776 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068241817 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070573767 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074574442 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068336705 seconds)
  done (took 6.133217104 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.097598587 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064905176 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06703206 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070821288 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068828241 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066907514 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066779237 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067052026 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066590853 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064534115 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101665183 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067583321 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069117816 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068331445 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067364854 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06709907 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06712706 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068850984 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065046181 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076112301 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06690679 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068185276 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068949485 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068557545 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070722365 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074542695 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066912667 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067176667 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066950443 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069583927 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068275069 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066538374 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068316941 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064321944 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068571517 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066764477 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066465534 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068101453 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066939777 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071908478 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068469206 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074058531 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066950129 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066569615 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070960872 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066849397 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066690712 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064458067 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066828604 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064478207 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07085944 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070627599 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070439866 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068405956 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066764845 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066902965 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066691515 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066885028 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067472169 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074642147 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068212039 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066748683 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076197767 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066844706 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066710451 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068449869 seconds)
  done (took 6.054028317 seconds)
done (took 126.998499586 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.21433638 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.186638434 seconds)
  done (took 1.85426782 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.072875603 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.094638896 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.073043167 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.136134975 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.069977305 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.104179752 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.102670011 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.07302543 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.06921794 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.069491094 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.069850492 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.071690289 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.139254427 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.069990262 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.069274697 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072005836 seconds)
  done (took 2.832154522 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.103504033 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.178721749 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.109754093 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.067805945 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.103825373 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.073842733 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.067789886 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.078848794 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.071375383 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.07970341 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.074722389 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.073006207 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.069276064 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.071997094 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.071436276 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.076646749 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.069674289 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.073921838 seconds)
  done (took 2.995979613 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.094132159 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.083871199 seconds)
  done (took 1.66079542 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.149545608 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.102515518 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.140479822 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.31970604 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.126194532 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.12299277 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.126519829 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.122383135 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.107195676 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.119463156 seconds)
  done (took 2.912906339 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.102116886 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.169812161 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.300681081 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.117692016 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074278034 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.095246474 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.119621388 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.07973197 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.077203464 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.07683693 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077171284 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075165981 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.098025331 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.073525879 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072152484 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074201724 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.100770066 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.071525037 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.072547011 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073340124 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.101876412 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.068476193 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.073219007 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.07234896 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.075601124 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.074959863 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.069762478 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.068168881 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.073345818 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072360839 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.075020316 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.092992424 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.075366705 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.095404828 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.072579217 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.096043024 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.072573619 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.071371612 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.072702337 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.071601265 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.074059247 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.074215033 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.077308933 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.075192346 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070062854 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.072167677 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.069887526 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.068034477 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.07595973 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.068809983 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.076171876 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.075147518 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.094510203 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.068796096 seconds)
  done (took 6.080627589 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.103866149 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.101874743 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067973375 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.109358205 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.102395992 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067198829 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.100842357 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.096443448 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.10494571 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067036731 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066648647 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067092288 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073287066 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.076847205 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.112592218 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.103986912 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06896081 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067548317 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.104249662 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.103534012 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066399308 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.097681961 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.096636126 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.102532194 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.065780051 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067589512 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065997939 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.066812937 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.071021755 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.072389124 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.066228251 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.072899757 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.077588748 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072360239 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.0655704 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066204597 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.065913284 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.072331594 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073156604 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.073380333 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.071673037 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065866134 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066267119 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066913708 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.06695932 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.065675017 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071809836 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.072642787 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.071824095 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066233193 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066773495 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066097135 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.066190573 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072371836 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.071535456 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.073325281 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.072883308 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066508818 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066269736 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067896221 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073803286 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074053532 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073216657 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066780212 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07428351 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.065900729 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074902225 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077522694 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066366333 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066547172 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066528074 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.0661014 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.066724152 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.071541413 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.071464446 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06662298 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.066391806 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066150682 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.074048731 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.072313897 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066737415 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.0714811 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066721685 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066230342 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066535752 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066864966 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.071046945 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.074968795 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067092485 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066371529 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066384204 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066476607 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.065950302 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.070984745 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072525799 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.072648609 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.071754488 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066522938 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.072293182 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072097016 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066411744 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.071863639 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066336053 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066115929 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06623019 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072069715 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.071250715 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.073670609 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065925839 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065554108 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.071433989 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073472291 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066015635 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.070933106 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073211472 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.207436656 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066924237 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076070248 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066943964 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07481563 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066877764 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074773681 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066549735 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072696165 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066795179 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065933013 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066493096 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.07261281 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067049194 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06666336 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067478621 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067050387 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073066248 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.07627185 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067270538 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072379256 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.073385724 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066952903 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07255541 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066397431 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.073516906 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.283492087 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067245234 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065698913 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075237754 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066594041 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.0667406 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066408998 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.073831568 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066802724 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075427691 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.071720743 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066132986 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07592065 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074482071 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.071729543 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.074985481 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067776538 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066278047 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.065953952 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.066845783 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071663769 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072800713 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066955193 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06687435 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.071844408 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.074157654 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066165671 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.071694003 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072019885 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.071961386 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066396504 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066621082 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.074898672 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.075137721 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.072201528 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.07197997 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.072820695 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066535986 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07203632 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072024772 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066495297 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077944477 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066331346 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.075712029 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072178766 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.071546158 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.072534004 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.07374468 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.07398907 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074877907 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076390823 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066151551 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066281728 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072241975 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066459987 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066299833 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.071929696 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066987024 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.066648286 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.07675597 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067005242 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.074530977 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066316703 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.072840648 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065864096 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067064617 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076602177 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066781784 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066622629 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072407025 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066551439 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.071857871 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074558586 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072245511 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066623108 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066773433 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072933061 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.07350012 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066541565 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067255718 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066439376 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.071852695 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.071214787 seconds)
  done (took 17.962714955 seconds)
done (took 37.796593194 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.201635419 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.161888494 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.189523565 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.1126725 seconds)
  done (took 2.248119803 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.089397206 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.096612337 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.074143112 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.063631644 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.078532292 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.063218349 seconds)
  done (took 1.992728488 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.242724662 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.181548888 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.167466821 seconds)
  done (took 2.111351758 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.20976608 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.187595898 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.47224626 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.29411351 seconds)
  done (took 2.782544097 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.125711051 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.075193549 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.062145319 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.07438501 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.100973518 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.128369335 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.082898467 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.10393169 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.072493532 seconds)
  done (took 2.408246944 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.125191653 seconds)
done (took 13.215155683 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.228040516 seconds)
    (2/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.10242207 seconds)
    (3/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.181396523 seconds)
    (4/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.105634039 seconds)
    (5/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.070770077 seconds)
    (6/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.085113666 seconds)
    (7/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.258044015 seconds)
    (8/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.202637489 seconds)
    (9/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.180236253 seconds)
    (10/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.077258454 seconds)
    (11/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.073736108 seconds)
    (12/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.117922997 seconds)
    (13/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.137076937 seconds)
    (14/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.072212252 seconds)
    (15/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.150903636 seconds)
    (16/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.1856797 seconds)
    (17/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.074858262 seconds)
    (18/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071829905 seconds)
    (19/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.148730727 seconds)
    (20/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.076538086 seconds)
    (21/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.087925785 seconds)
    (22/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.090116644 seconds)
    (23/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072466472 seconds)
    (24/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.184231214 seconds)
    (25/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.145614112 seconds)
    (26/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.171208049 seconds)
    (27/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.182940401 seconds)
    (28/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.154245842 seconds)
    (29/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.224975512 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.121231613 seconds)
    (31/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.214488137 seconds)
    (32/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.231719107 seconds)
    (33/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.135843728 seconds)
    (34/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073949133 seconds)
    (35/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.183415173 seconds)
    (36/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.128394239 seconds)
    (37/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.072729412 seconds)
    (38/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.120382293 seconds)
    (39/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.084871351 seconds)
    (40/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.174177433 seconds)
    (41/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.088401971 seconds)
    (42/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.164250077 seconds)
    (43/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.074324277 seconds)
    (44/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.208650193 seconds)
    (45/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.169701684 seconds)
    (46/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.07575199 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.091009999 seconds)
    (48/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074416345 seconds)
    (49/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.12946568 seconds)
    (50/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.120235021 seconds)
    (51/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.073238124 seconds)
    (52/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.159421647 seconds)
    (53/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.071309757 seconds)
    (54/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.062173461 seconds)
    (55/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.061833595 seconds)
    (56/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.159197053 seconds)
    (57/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.065136106 seconds)
    (58/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.151673704 seconds)
    (59/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.073377075 seconds)
    (60/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.088228043 seconds)
    (61/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.067720311 seconds)
    (62/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.071990877 seconds)
    (63/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.082296924 seconds)
    (64/341) benchmarking ("sort", Bool, false)...
    done (took 0.140255971 seconds)
    (65/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.188561254 seconds)
    (66/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.160155831 seconds)
    (67/341) benchmarking ("sort", Int64, false)...
    done (took 0.064503499 seconds)
    (68/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.089100366 seconds)
    (69/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.074854292 seconds)
    (70/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.072594933 seconds)
    (71/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.079802922 seconds)
    (72/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.189236502 seconds)
    (73/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.153980234 seconds)
    (74/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.164172509 seconds)
    (75/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.064498395 seconds)
    (76/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.062221691 seconds)
    (77/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.071853424 seconds)
    (78/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.135455625 seconds)
    (79/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.069778116 seconds)
    (80/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.306982723 seconds)
    (81/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.074095864 seconds)
    (82/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.125054992 seconds)
    (83/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073051106 seconds)
    (84/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.064213663 seconds)
    (85/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.06849979 seconds)
    (86/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.062748037 seconds)
    (87/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.138268912 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.088811536 seconds)
    (89/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.19551921 seconds)
    (90/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.080046546 seconds)
    (91/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.208380666 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.086156009 seconds)
    (93/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.065830605 seconds)
    (94/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.140004515 seconds)
    (95/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.064702561 seconds)
    (96/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.075472367 seconds)
    (97/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.16767282 seconds)
    (98/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.07458831 seconds)
    (99/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.141296974 seconds)
    (100/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.064363606 seconds)
    (101/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.151695073 seconds)
    (102/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.13844397 seconds)
    (103/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.186193679 seconds)
    (104/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.063468679 seconds)
    (105/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.168335344 seconds)
    (106/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.064726784 seconds)
    (107/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068884908 seconds)
    (108/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.066172336 seconds)
    (109/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.187328411 seconds)
    (110/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.063188249 seconds)
    (111/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.064734973 seconds)
    (112/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.063099456 seconds)
    (113/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.188899362 seconds)
    (114/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.063664411 seconds)
    (115/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.13872871 seconds)
    (116/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.070944282 seconds)
    (117/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.084117705 seconds)
    (118/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.070905306 seconds)
    (119/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.072653199 seconds)
    (120/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.063480721 seconds)
    (121/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.118781443 seconds)
    (122/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.080324789 seconds)
    (123/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.065955475 seconds)
    (124/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.148572719 seconds)
    (125/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.071046154 seconds)
    (126/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.136801367 seconds)
    (127/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092800243 seconds)
    (128/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.063000309 seconds)
    (129/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.148882509 seconds)
    (130/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067950304 seconds)
    (131/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.22127971 seconds)
    (132/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.150251862 seconds)
    (133/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.063498038 seconds)
    (134/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.071988317 seconds)
    (135/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.063084885 seconds)
    (136/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.192987964 seconds)
    (137/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.07410777 seconds)
    (138/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.070470037 seconds)
    (139/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.062465843 seconds)
    (140/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072086018 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.089243419 seconds)
    (142/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.06387207 seconds)
    (143/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.091245341 seconds)
    (144/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.108164712 seconds)
    (145/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.152702046 seconds)
    (146/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.064540998 seconds)
    (147/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.070731956 seconds)
    (148/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.064017192 seconds)
    (149/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.071138339 seconds)
    (150/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.068037414 seconds)
    (151/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.064615696 seconds)
    (152/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.1405556 seconds)
    (153/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.063265679 seconds)
    (154/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.072451505 seconds)
    (155/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.072804062 seconds)
    (156/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.070826419 seconds)
    (157/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.062067481 seconds)
    (158/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.063590279 seconds)
    (159/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.079632838 seconds)
    (160/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.070760419 seconds)
    (161/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.062404489 seconds)
    (162/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.138163676 seconds)
    (163/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.063711896 seconds)
    (164/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.06345363 seconds)
    (165/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.219096889 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.094451405 seconds)
    (167/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071143788 seconds)
    (168/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.071313494 seconds)
    (169/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.062666704 seconds)
    (170/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.205542538 seconds)
    (171/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.072220882 seconds)
    (172/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.078798748 seconds)
    (173/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.146511834 seconds)
    (174/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.150402905 seconds)
    (175/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.071882084 seconds)
    (176/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.073830544 seconds)
    (177/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.081077334 seconds)
    (178/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.062185126 seconds)
    (179/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.062580848 seconds)
    (180/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.132408583 seconds)
    (181/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.186342861 seconds)
    (182/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.080606259 seconds)
    (183/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.066391665 seconds)
    (184/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.063801479 seconds)
    (185/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.066972269 seconds)
    (186/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.064161472 seconds)
    (187/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.143897578 seconds)
    (188/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.064578243 seconds)
    (189/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.063061615 seconds)
    (190/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.075162316 seconds)
    (191/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.063836739 seconds)
    (192/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.143431175 seconds)
    (193/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.085379782 seconds)
    (194/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.064907576 seconds)
    (195/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.292202871 seconds)
    (196/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.069749819 seconds)
    (197/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.065094066 seconds)
    (198/341) benchmarking ("sort", Float32, false)...
    done (took 0.137654608 seconds)
    (199/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073729275 seconds)
    (200/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.064359624 seconds)
    (201/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.068843429 seconds)
    (202/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.06406248 seconds)
    (203/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.071886369 seconds)
    (204/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.193720624 seconds)
    (205/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.064015652 seconds)
    (206/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.079536891 seconds)
    (207/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.067706818 seconds)
    (208/341) benchmarking ("sort", BigInt, false)...
    done (took 0.257883877 seconds)
    (209/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.064003095 seconds)
    (210/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.223289456 seconds)
    (211/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.067827738 seconds)
    (212/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.067671761 seconds)
    (213/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.0637513 seconds)
    (214/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.063816842 seconds)
    (215/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.070292763 seconds)
    (216/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.142225087 seconds)
    (217/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.064194436 seconds)
    (218/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.076999984 seconds)
    (219/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.071196604 seconds)
    (220/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.064396382 seconds)
    (221/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.072020845 seconds)
    (222/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.065102699 seconds)
    (223/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.071872929 seconds)
    (224/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.063701161 seconds)
    (225/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.064883186 seconds)
    (226/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.0628629 seconds)
    (227/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.064553593 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.144541249 seconds)
    (229/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.075397184 seconds)
    (230/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.181220812 seconds)
    (231/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.183789155 seconds)
    (232/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.064560584 seconds)
    (233/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.062598217 seconds)
    (234/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.063844709 seconds)
    (235/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.064205983 seconds)
    (236/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.07072234 seconds)
    (237/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.081930969 seconds)
    (238/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.063691431 seconds)
    (239/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.065760978 seconds)
    (240/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.075345489 seconds)
    (241/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.074000089 seconds)
    (242/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.080547541 seconds)
    (243/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.066411056 seconds)
    (244/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.141874236 seconds)
    (245/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.081416007 seconds)
    (246/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.133424632 seconds)
    (247/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.063490664 seconds)
    (248/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.0808058 seconds)
    (249/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.064577516 seconds)
    (250/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.090418823 seconds)
    (251/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.065768057 seconds)
    (252/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.07182791 seconds)
    (253/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.06345161 seconds)
    (254/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.08986811 seconds)
    (255/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.064258292 seconds)
    (256/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.062974923 seconds)
    (257/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.064276865 seconds)
    (258/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.06275757 seconds)
    (259/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.17328169 seconds)
    (260/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.06324642 seconds)
    (261/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.164707013 seconds)
    (262/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.063304213 seconds)
    (263/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.06431254 seconds)
    (264/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.070100358 seconds)
    (265/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.081669689 seconds)
    (266/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067218841 seconds)
    (267/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.064236141 seconds)
    (268/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.065979655 seconds)
    (269/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.065354922 seconds)
    (270/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.128447375 seconds)
    (271/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.062745393 seconds)
    (272/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.062727679 seconds)
    (273/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.063214683 seconds)
    (274/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.063924501 seconds)
    (275/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.06311636 seconds)
    (276/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.062630799 seconds)
    (277/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.080476229 seconds)
    (278/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.062547919 seconds)
    (279/341) benchmarking ("sort", Float64, false)...
    done (took 0.132483478 seconds)
    (280/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.063686406 seconds)
    (281/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.06641928 seconds)
    (282/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.064582064 seconds)
    (283/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.08014613 seconds)
    (284/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.081603404 seconds)
    (285/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.065580311 seconds)
    (286/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.06474837 seconds)
    (287/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.071344313 seconds)
    (288/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.063997582 seconds)
    (289/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.06371679 seconds)
    (290/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.076198001 seconds)
    (291/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.135070935 seconds)
    (292/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.065660879 seconds)
    (293/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.067146607 seconds)
    (294/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.063923638 seconds)
    (295/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.067172496 seconds)
    (296/341) benchmarking ("sort", Int8, false)...
    done (took 0.144445359 seconds)
    (297/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.067101461 seconds)
    (298/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.063717472 seconds)
    (299/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.064250377 seconds)
    (300/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.071023364 seconds)
    (301/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.062876194 seconds)
    (302/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.080258139 seconds)
    (303/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.166929218 seconds)
    (304/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.062879309 seconds)
    (305/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.072130183 seconds)
    (306/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.088167992 seconds)
    (307/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.087626261 seconds)
    (308/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.065429696 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.084083769 seconds)
    (310/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.07462911 seconds)
    (311/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.064837198 seconds)
    (312/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.064731361 seconds)
    (313/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.063014816 seconds)
    (314/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.159097117 seconds)
    (315/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.06360733 seconds)
    (316/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.062138921 seconds)
    (317/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.066999663 seconds)
    (318/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.064543028 seconds)
    (319/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.06814946 seconds)
    (320/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.073836368 seconds)
    (321/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.063707097 seconds)
    (322/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.066389928 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.073868547 seconds)
    (324/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.070732993 seconds)
    (325/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.230698894 seconds)
    (326/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073124663 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.084403482 seconds)
    (328/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072098133 seconds)
    (329/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.064877463 seconds)
    (330/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.112725043 seconds)
    (331/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.064722098 seconds)
    (332/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.064890441 seconds)
    (333/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.063439636 seconds)
    (334/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.067935707 seconds)
    (335/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.063046437 seconds)
    (336/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063575113 seconds)
    (337/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.065592377 seconds)
    (338/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.066153742 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.148055714 seconds)
    (340/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.064105626 seconds)
    (341/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.075184114 seconds)
  done (took 35.35335887 seconds)
done (took 36.898818009 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.080135443 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.086918007 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.070396049 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.081423656 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.078010973 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.096087703 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.071315629 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.07556336 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.078372046 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.076668342 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.075984948 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.070483277 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073407591 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.072935469 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.070364786 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.085523612 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.078869252 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.071947357 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072515452 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063431598 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.072666477 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.063858927 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.063597573 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070379049 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.075205817 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.071148339 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.073036733 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073040325 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063969364 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.064427067 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.069446135 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073138943 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063503685 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.075188898 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072252613 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072086401 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.073667316 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.076765978 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.063186737 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.064072233 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.074336701 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064395901 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.071764918 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.070138502 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.068939803 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071564537 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.071907457 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.075236837 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.085372445 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068768468 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.074967297 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.074681196 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.074277355 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069298198 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.069249844 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.071777465 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.070609241 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.085804997 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.072702096 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067965538 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.073984882 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.072741923 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.070798623 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071624188 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.07165472 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.075595479 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075417813 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.070700635 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.074823596 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.071123456 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.06378563 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.071986388 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069182731 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.063755403 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.07525589 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.077298321 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.062909831 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.068310302 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.07189867 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.071739002 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063097477 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068008849 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063140907 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.06946021 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067614021 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.069735318 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.068878055 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.071394779 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.062849548 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.072581172 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.070985099 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.071759074 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.06291866 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.075769686 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.063384176 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070702737 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.063776528 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064120873 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.063235214 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.069119233 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063374063 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.068544763 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072262966 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.062542942 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.068703706 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.076295812 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.063798206 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071008714 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.06305757 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062958104 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.073954917 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.074482213 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064090414 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068016914 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062784801 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.069338608 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063137314 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.063092737 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.063962344 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.063964508 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.070662203 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.063757885 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.06850269 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.069689397 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.07495478 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.063832367 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.069052312 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068010127 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.063644793 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.070581738 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064211316 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.063948112 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.063115753 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.076134634 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068163189 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.064356717 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.069732105 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.067990587 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.071486479 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062352237 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.071931369 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.069331261 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.068131481 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.070345798 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.062275014 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.074172979 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067626041 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.067629427 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062828583 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.206901449 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.063598987 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.06430578 seconds)
done (took 12.435804582 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.064546329 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.100850549 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.071033927 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.079396245 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.075561082 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.06531596 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.06730884 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.080073835 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067467981 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.082620426 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.090433876 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085110616 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.090179026 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063048085 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064447415 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065367411 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.06299198 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.071871724 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.078452924 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.086627678 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.0919535 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064549485 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.066769944 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.080466609 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.07450827 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.079586616 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065460984 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.06538979 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.104969222 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.080092019 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.088330758 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.063782331 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065171777 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.077582297 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.077690268 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.071231277 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065188939 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.068142991 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.064812386 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064399079 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.065623464 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.077665506 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.067885361 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.067746617 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065525501 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065532087 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065067471 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.067560186 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.077052021 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.067579403 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.071413744 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.075988241 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066507103 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064520703 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.06344381 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.068359195 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064401487 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.064935029 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.064718468 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064508199 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.064670497 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.066751056 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.065311243 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.06459638 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.067323638 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.066622335 seconds)
  done (took 6.336759025 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.078215837 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092063358 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.076784983 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.076714606 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.064057495 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064636728 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064594955 seconds)
  done (took 2.157144113 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.065212704 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.076922071 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079882421 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.080206285 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.073592539 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.082088812 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.064864294 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.094782348 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063580233 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078377057 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.108224588 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.081476625 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067693323 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076382485 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065090624 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.071134758 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065348455 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074426087 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072135054 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.08145255 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068589491 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.093232277 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078816269 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065181111 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.083901962 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.068296081 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.06426132 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065219305 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065892863 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.065786807 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065733363 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.101273636 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.068570669 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.075927738 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06283788 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064288756 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.070641034 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068336472 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.066690023 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.073326275 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.069788886 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.066449196 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.063334491 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.066191715 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.067631294 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.067929272 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.063512228 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.066377304 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.065983666 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.076082015 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.063232311 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.068272834 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069339931 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.069262313 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.073714754 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068996237 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074913932 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.066823078 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.07617878 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073025124 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066049466 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.072862682 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.072136114 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.069870726 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.072024176 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.069091281 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.0680593 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.069580588 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065992758 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066734277 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066953516 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.072098529 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.06449178 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.066597378 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068477377 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.066879886 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.068300332 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.0808979 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.081213073 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.076751434 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.066624863 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.066365093 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.068395065 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.081900076 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069412357 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066019305 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068176919 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.063953341 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069293203 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066419148 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071163347 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.06619322 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.073229136 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.066757418 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.06971554 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07222181 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064507581 seconds)
  done (took 8.536706469 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.067305598 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.065522879 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066267214 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065347528 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065382644 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065990383 seconds)
  done (took 2.070068134 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.085965304 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065054706 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080676616 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.065339606 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.101535129 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.071998575 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.071610201 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.07212201 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.070888569 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078031084 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.071479373 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.073616991 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.070650059 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.06943383 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.071306848 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066011664 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.071118913 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.0678664 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077853691 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069550615 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.077426303 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069316505 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069066719 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.075933346 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068110563 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.065707514 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.065428395 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.07790006 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077413553 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.071852756 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.068815417 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.067533433 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.072322267 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.07214732 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.070968389 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07313532 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06511972 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070021046 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066921955 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067376395 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.073055058 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069138892 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.067506265 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070391916 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.07219307 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.072488088 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070224322 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068141611 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.07116885 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070150845 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.071666134 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.065278747 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.067616083 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070357491 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.072971906 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071758387 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070508045 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.070837563 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.068751449 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.072485458 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.06497713 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.067896613 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071659362 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.067724414 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.069717 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070384117 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.073009046 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069867305 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069319774 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.065037038 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.070590208 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.065339136 seconds)
  done (took 6.754963586 seconds)
done (took 27.485982614 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.54046936 seconds)
  done (took 2.160565219 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.569299921 seconds)
  done (took 2.227152585 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 9.992208869 seconds)
  done (took 11.649930924 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.286386008 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.310984382 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.701246196 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.12773351 seconds)
  done (took 3.122472254 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.732568618 seconds)
  done (took 2.397298547 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.220841846 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.210983363 seconds)
  done (took 2.107915278 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.337720299 seconds)
  done (took 1.99495683 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.112333073 seconds)
  done (took 2.76619995 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.217908894 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.153706814 seconds)
  done (took 2.039947235 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.47987812 seconds)
  done (took 2.139561498 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.255587148 seconds)
  done (took 5.920566583 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.225386749 seconds)
  done (took 1.926150404 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.227918272 seconds)
  done (took 1.894646037 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.140735892 seconds)
  done (took 3.801147163 seconds)
done (took 47.82050972 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.081561544 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083751591 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083992375 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079597971 seconds)
  done (took 1.968901432 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.072408683 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.069085155 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.072142478 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.072477934 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.070485316 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070789075 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071203857 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067303278 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069226283 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068543257 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.067156925 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068616828 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073163504 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.068660035 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.07087432 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.072154246 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068640676 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068616664 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070769361 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.068604962 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.071029428 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068651397 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066582927 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067858781 seconds)
  done (took 3.339246554 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.076641246 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070422437 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073414292 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.069312282 seconds)
  done (took 1.961826517 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.075298849 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.07529665 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.083777904 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.088540073 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.07492206 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.075548177 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.082144478 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.083027163 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.064230196 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.085065916 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.06637355 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.065368554 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.06518195 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083608905 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081190416 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.061137355 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.063264635 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.07514859 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.0748999 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.078039885 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066931045 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.064211509 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.075333819 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075051593 seconds)
  done (took 3.454631791 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.077670661 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.064212763 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.076444706 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088763451 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089746412 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.06399024 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.076925764 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090717956 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.123606577 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063988991 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.070063608 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063826047 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.101762381 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.064344796 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078392864 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.1066284 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.109464239 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.068194812 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.09650065 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.064316276 seconds)
  done (took 3.319249966 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.074846314 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067696491 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068986747 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.064264712 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.075248693 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.071761484 seconds)
  done (took 2.105121316 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.066946911 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.068616878 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.065645488 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.065480194 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.070132986 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.06546916 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064627492 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.066746185 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.066672558 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.065490252 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.065576602 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.064821636 seconds)
  done (took 2.471733127 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.153221018 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.067350111 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070437617 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064772053 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.070109819 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.065235965 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.079408494 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.067115796 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082841991 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.065703369 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.066024356 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.068797055 seconds)
  done (took 2.598336761 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098345958 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098274437 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142455749 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114155982 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11235019 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094724738 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116805353 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.091845833 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.155537916 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.13265494 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113092937 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121073492 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084555258 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068038273 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097091543 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098714984 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131471001 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070696595 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10949606 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.190368241 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111036041 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.108738372 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118697374 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112712151 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078794269 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118638583 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091721924 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099379145 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.150591281 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106395543 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116911033 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.094832172 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.069957032 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.06944932 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144543975 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.098427436 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.133204725 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.090528747 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097521106 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086002757 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103892932 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.067886303 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.084214084 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.102837764 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082408982 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114275245 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.086610158 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100309712 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078941123 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.127313951 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103315418 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096085212 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083476644 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101144132 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126619471 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092667674 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107952601 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104519749 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080869455 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.115651645 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.09800714 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095221567 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090673162 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.229742237 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.157565316 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087871418 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.110068542 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112012857 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.080710509 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090456652 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100612233 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.127653737 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104672276 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.105034443 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1126324 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121774763 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107050588 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.090176672 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.125803779 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091071919 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071655357 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102572845 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.125674327 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083374738 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097250431 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126499178 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089996543 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10498279 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.090079959 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.114645865 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079091951 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.093722596 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.068608349 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.095893481 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104248396 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094814516 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109306052 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104825714 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076820617 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121811389 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106290196 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071118226 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114489157 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096593713 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148756157 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093843157 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.075258944 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097380323 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091920958 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.146139928 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083377016 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078857312 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096306337 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138730154 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092239557 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.165727162 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094339198 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125708465 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095496432 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086798415 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073829955 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.087560056 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099705903 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105673064 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099287341 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087408127 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.07596973 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084881801 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093916657 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090129524 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078709239 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10997371 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.097280644 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.072339818 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084693862 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.07358427 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120149829 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.075703 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104248594 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11903178 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.075739885 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100140691 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122939328 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131854753 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.093123047 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101033723 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131684978 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.109711179 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.075858986 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.079907591 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101616557 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.133075809 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108508858 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081422947 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.072817128 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094794834 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105015129 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092642637 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.131272678 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121203767 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102280863 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092685129 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128990893 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10912757 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085755623 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.089305719 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08928889 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.113951732 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102150571 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140892464 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087645079 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110004889 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10856748 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128057337 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.106352563 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084018591 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080590908 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08917435 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.095646394 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097957178 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129724432 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.090934239 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.069113775 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084844074 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120429473 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071658331 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092486432 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.085122121 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.087370848 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109326344 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.07858427 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076332548 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.065081268 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093934926 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124847956 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.066535949 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105544685 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.108231294 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094033608 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.09678955 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.066182624 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092494046 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.410639967 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107702205 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14156518 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118441948 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102229468 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120046309 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.100025166 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106241965 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081303405 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126496456 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.13501779 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096566569 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091276097 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134952921 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118654594 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.133881636 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.096569829 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114513291 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105309895 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100613468 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102218208 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.098382427 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14103077 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118760828 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.122177055 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114164289 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106352002 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106044301 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133652678 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081227497 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115207763 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.074107028 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110383563 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.076656082 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105223616 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.078282736 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.10926114 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078829111 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098192798 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.069244974 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073430604 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139880526 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.110505242 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087937478 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085127595 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.133363801 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.128612244 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079586535 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099765391 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.132056719 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099299923 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100021614 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107848005 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.084084098 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094082025 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.136595745 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077472288 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079992316 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.097189264 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092985795 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109335354 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083034616 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073713119 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134200542 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102057118 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.259824618 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107479733 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094390774 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119817711 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089261474 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086616839 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103716713 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101819171 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13678404 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088898037 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.096373494 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.115263457 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079445889 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.090698984 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.069052941 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.083324167 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.074649892 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.107047003 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075457006 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106278318 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067833083 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.127545231 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084786467 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.090686311 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100329665 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096388055 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12479805 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090180444 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124969625 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088269591 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099719944 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105941993 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092566643 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108450338 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101914412 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094686584 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107632243 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.094694516 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103607077 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108010474 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092893156 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.138923832 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088955843 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117915722 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104049497 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104033642 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102169612 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114271522 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133982763 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110032294 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139809846 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074463747 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081524173 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102388196 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098206518 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141800146 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100717168 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070974953 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114805411 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089279699 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094501413 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102449765 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080629115 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138554964 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085220444 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.085202956 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110599703 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.087679514 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.0948225 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074584722 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093838455 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.098224316 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.254754776 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093474914 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.130865007 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115586554 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110879889 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129947714 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.096845339 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.092001559 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.116119162 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10897768 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108547898 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084882191 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085898341 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120541747 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099279884 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.124383923 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.097910638 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091857683 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09793327 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090608736 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097367192 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094234858 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.106317422 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078397793 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.074716886 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066932112 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071495144 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11490348 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106738817 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096654264 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096670381 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.071032408 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10142541 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095204739 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070574118 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085906158 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092305497 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.123807014 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.082136081 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090341149 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.111463528 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089554475 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101541003 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127936279 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128518928 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.098530412 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087227806 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139667857 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12519976 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086545001 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091155871 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070701217 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077670688 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09931533 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141313277 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115658478 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.075955944 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082351436 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.076134066 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085200638 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070171514 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.08710137 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.087571087 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101773747 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117185709 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.109984416 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101701509 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074321359 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101125607 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095723462 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090706209 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.094936885 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100044509 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103365112 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.279152614 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099887178 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09665899 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075880167 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.079043022 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074948446 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078776634 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.100773456 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.076211855 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076354137 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126770004 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089980669 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10282583 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107049337 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083791977 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074155774 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129646341 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.068845276 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129817795 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.07055511 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080497636 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.079343561 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07801021 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091298396 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102024929 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092987378 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110541205 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102878429 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102078853 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108463465 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150746005 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.069804263 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.145580508 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074513402 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074419423 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075440128 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108894213 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088154985 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101834343 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137948889 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088332043 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091341918 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075754176 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125513219 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.094567367 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101748946 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081641144 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078081041 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127904165 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078182386 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.07005382 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084897981 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10916562 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.071556175 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.131563001 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112137077 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078438457 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110788896 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.628389137 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088955556 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.074368385 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087387458 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.145295672 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125775232 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082012963 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106079981 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.116050513 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088033465 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112360462 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10504518 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.178041001 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073222165 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093306673 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.260245831 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09687922 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091386189 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.091124706 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.085123815 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090197978 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084543526 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078962439 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105005779 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087590417 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090190643 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121934105 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081654649 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.078907525 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.127241449 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101848084 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.0805095 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086728215 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.098710897 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086373226 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088842526 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068791508 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141397421 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119192824 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099118691 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.089750955 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105783798 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114487278 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086990909 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109773813 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.087127797 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107504812 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083452244 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.077301479 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09977451 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.076681743 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076726929 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114889096 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.082632336 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091459569 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102208185 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.093828865 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11177472 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115449898 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113771338 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095982868 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077497659 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084894221 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.086178646 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07466721 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07697794 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.073162482 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.075488099 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106146048 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083797388 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111239287 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110885957 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082672553 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101237884 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.098192132 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107330213 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081811182 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099005669 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106855661 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089009039 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101769029 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098173448 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125194662 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142424724 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097036096 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.123045853 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130389655 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.234309805 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.07517521 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.0683393 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143388498 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078257323 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.079395661 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108799223 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129697344 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.08053283 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093648351 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.224755824 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079533675 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.080539386 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095096162 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068819314 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081813727 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105436217 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084220678 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079218225 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097076358 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111390499 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114311559 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108584392 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08794791 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081525029 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079470862 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091444933 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.102674559 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.126072528 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088558938 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.073998546 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10426636 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10103423 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120857894 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.072012428 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07971965 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126119053 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090437008 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101251609 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079194111 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117738263 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.128650631 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088927551 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130161755 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069800567 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082131129 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087880672 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.122994376 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073198074 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08679345 seconds)
  done (took 64.116152995 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.16559927 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.14020789 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080724299 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.096243116 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.184782286 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.194676738 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.117503046 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.094670769 seconds)
  done (took 2.95604823 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 0.070072996 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.080993867 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 0.0980154 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.081484436 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 0.065047807 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 0.067029196 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.198894362 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.08016538 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.065770231 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.105485024 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.073598025 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.067731901 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.351655362 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.064817543 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.066215559 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.073568497 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 0.066620668 seconds)
  done (took 3.527257957 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.356693212 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.629504634 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.318489446 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074789895 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.740599767 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.08844928 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.107321008 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.136119022 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.080950805 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.51445364 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.366316584 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.13076637 seconds)
  done (took 18.401565975 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.074810395 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.073654292 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.076578432 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.076687121 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.073150158 seconds)
  done (took 2.225015031 seconds)
done (took 114.165480171 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.081519763 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.166003309 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.066173687 seconds)
  done (took 2.117838524 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.080302623 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.079307088 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.079084874 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.076288698 seconds)
  done (took 2.174156125 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.073110471 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.075110251 seconds)
  done (took 2.000062817 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.219608503 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.170691169 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.088598895 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.080918635 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078754064 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078554042 seconds)
  done (took 2.103551163 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.070762785 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.070686829 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.070734953 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.071180927 seconds)
  done (took 2.136096069 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.066497991 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065035982 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067291391 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069243085 seconds)
  done (took 2.122242423 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.08373939 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.081825323 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.109403653 seconds)
  done (took 2.130861515 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.081676673 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.081903104 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076992715 seconds)
  done (took 2.102449958 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.106884764 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094962968 seconds)
  done (took 2.057742792 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081099357 seconds)
  done (took 1.941792127 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.087996961 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.09593915 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.138257598 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.105169079 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.137770333 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.124133689 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075773548 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076645064 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.072052013 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.071598575 seconds)
  done (took 2.84212104 seconds)
done (took 26.147397727 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077446379 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.366091034 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.358429399 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085191796 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.671342943 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.356715881 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.981095237 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.08931995 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.097699391 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067375539 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083591991 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.647714376 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.971759899 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.325368704 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.959924875 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.323859995 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.649206308 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067525944 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.0662248 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066781449 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.965819902 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066878768 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066765304 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067316733 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.648864203 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.373320781 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068684712 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.32396404 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067464889 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069733538 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.356666394 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068477683 seconds)
  done (took 16.289972657 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.068780882 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.119643209 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071498705 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082292679 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.069073987 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068626361 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070080241 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.067906769 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.108374203 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067261826 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083985451 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066260457 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.070676418 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068390561 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086908167 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.06750736 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069431471 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068798829 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067866947 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071808044 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085575913 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067535994 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068453619 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068148002 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067798062 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.080247134 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068799145 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067176222 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067591412 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070014882 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071397504 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069018198 seconds)
  done (took 4.241209348 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.119370294 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123209739 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071743894 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.106475415 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.115953724 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068593711 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.147046308 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089674613 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.111140367 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067089759 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083985149 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067132447 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.102505483 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069155599 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087865555 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068323479 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068796414 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068023259 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06776427 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068193537 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08662706 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067601773 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068124581 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068330553 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.06829428 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08279578 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068825308 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.06789832 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067654804 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069928783 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071690199 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068718979 seconds)
  done (took 4.505606212 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.068527773 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.070334367 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.078324124 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.079409723 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.065725057 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.068060814 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.069186135 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.065807922 seconds)
  done (took 2.445509494 seconds)
done (took 29.365952585 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.07753953 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.067040871 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.070040516 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085202554 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.07225462 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.069566692 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063834621 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073043042 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069688807 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.070081911 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071944666 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065875742 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.068828132 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.063616087 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.070431517 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064773763 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.070726574 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.069405309 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.069764781 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.071374887 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.067866731 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.071251095 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.07395506 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.069696431 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.069849159 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.070039231 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073911183 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.071148869 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.06631947 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.068357313 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.067893547 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.079453821 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.072429317 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.071854385 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065412757 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.065743777 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.069799591 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067698355 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.071988568 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.0742007 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070239705 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073778556 seconds)
  done (took 4.801973695 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.085751625 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.091204872 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.08363451 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080023726 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.103891681 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.080282367 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.088035706 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078179054 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.07582653 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.08718088 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.072252719 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.077529951 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.078255694 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.070962114 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.077033296 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.073179546 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078440473 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.072206572 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.077107701 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.07753329 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.089308942 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.070577662 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078052695 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.07870533 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.072368647 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.078660694 seconds)
  done (took 3.959794382 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.070963527 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.086610091 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090157328 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.137135859 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.106869871 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.080390878 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080343249 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.10039492 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.098003118 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.067379456 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070551023 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.09226668 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.093653145 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073522198 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.104112005 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084146444 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078463303 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068027489 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073116772 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.098899001 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.088590743 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084405633 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.097593616 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.085402747 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066339242 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075663254 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.072866214 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.081113792 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073633006 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078336896 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.07063686 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.069895599 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067187012 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078387548 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.070293284 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064870381 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.0879051 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.078824905 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.08124068 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.103885366 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.076013665 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068046706 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.095526874 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.129595275 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066205115 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069072362 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070064634 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.078348365 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.0679454 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094990463 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083987883 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.06622466 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.084797388 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.067775038 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.067658457 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082151842 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.06750659 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.068599546 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078074958 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072761334 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.086177489 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.071144939 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.086666146 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066060599 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.077066535 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.067335937 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.067837722 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065057486 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.101115665 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.073092321 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117135224 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.0671919 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064818566 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.077818171 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.077185261 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.073095385 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066085595 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085393129 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077949306 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.069620236 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077767059 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.068996157 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.069681216 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.099881921 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065528622 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064824498 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064618523 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068973201 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.069334414 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.066950801 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.07914938 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.065819349 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.069401984 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081000435 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.065913013 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067248954 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.068391661 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.06798831 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.065942902 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.076562519 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.07013942 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.068013999 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.077927976 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.067313399 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.069647345 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.080206351 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.075677928 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.065661615 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.067361602 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.068498565 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.067872404 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.070441952 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.069163102 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.06822815 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.073159271 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.073789931 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.071474499 seconds)
  done (took 10.939082848 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.157385886 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.147829535 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068000412 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.143152549 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.074359065 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.070841866 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.144347796 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.085708276 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067715391 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068458036 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066619337 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.094621507 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.090063944 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.103582606 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.071633145 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067616986 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.091127496 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.099511881 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.145759879 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.14138043 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.089325499 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.074393843 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069294 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.06831443 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068375386 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.076246098 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.083004183 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.07516579 seconds)
  done (took 4.530902196 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.073693001 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.108293111 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.071171487 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.089835285 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.085682223 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.067745674 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069127219 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.068469244 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.08390791 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.074205807 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.067577973 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071160228 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.071173084 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.069731406 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.068168988 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073684502 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073589911 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.065907324 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.071203322 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071298876 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077407426 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.091619676 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071331309 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.067015965 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069570874 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067302977 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073779616 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.076687081 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.06651414 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.096471642 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.06435748 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071296179 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.080306824 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067664043 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066851672 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067329803 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067248027 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067534799 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067548034 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.06541391 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065046003 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.071847963 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.065674277 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.073176653 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.080863113 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.073639059 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068222178 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.06984378 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069633595 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064209253 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070016909 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070332671 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.069604421 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.074644141 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070704255 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069434246 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068065509 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098854704 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073154633 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066359248 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066276884 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065708874 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068409072 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.074186317 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.08312389 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069029414 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065582104 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067336735 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.071604175 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.080857281 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066762389 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.07233466 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064204054 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067195838 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.06961694 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070033058 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068654188 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06577716 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.066275964 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067161317 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067196883 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066654182 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.066510428 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.069868955 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065437846 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065080896 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.067407335 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068344335 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.073399259 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066320295 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069778465 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068386665 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.06621094 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.069952008 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.071462327 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.069332392 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.085639542 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075444514 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.067765599 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064989283 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.080851776 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069268712 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066263619 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.072153472 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.071096555 seconds)
  done (took 9.426343292 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.088851527 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068321754 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.085651865 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.092128269 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076526141 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.072316019 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080942138 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067875004 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.082675042 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.066697897 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075512749 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.065819597 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.08001641 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.076083261 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068643281 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077623553 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.069433377 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.086831313 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081470643 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.065821347 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.076073668 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078551681 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.078869516 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.083551929 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.083469057 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.0850332 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.07879346 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.069285784 seconds)
  done (took 4.099866439 seconds)
done (took 39.638115639 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.97243817 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.211158863 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.960578716 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.192410084 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.015172962 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.199421267 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.08807724 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.955329545 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.234923315 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.985846379 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.276970006 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.396078394 seconds)
done (took 69.436370985 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.01488562 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.106470965 seconds)
    (2/2) benchmarking "String"...
    done (took 2.169646005 seconds)
  done (took 6.165033728 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.555993327 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.957666428 seconds)
    (3/3) benchmarking "different"...
    done (took 2.005276257 seconds)
  done (took 8.406550846 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.075508932 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.971321638 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.212179569 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.955660693 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.961420225 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.362731312 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.767768024 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.42676769 seconds)
  done (took 32.547807543 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.1746198 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.161544958 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.711512289 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.743216003 seconds)
  done (took 16.732659458 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.561520973 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.219418948 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.219039297 seconds)
    (4/4) benchmarking "different"...
    done (took 2.21297971 seconds)
  done (took 11.160575931 seconds)
done (took 87.09481256 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.966530513 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.959176343 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.991163312 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.991566692 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.956093188 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.961712618 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.961713329 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.961728199 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.963676916 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.000815935 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.959935013 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.961378646 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.959652941 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.003245227 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.471880373 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.006159134 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.970573188 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.958618408 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.968021792 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.968256155 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.964590485 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.960945698 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.420129366 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.111682458 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.578201246 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.139213102 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.340034484 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.346419416 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.973236042 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.95792692 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.020889177 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.145925594 seconds)
  done (took 209.791250043 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.957836821 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.72106079 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.777575403 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.989404405 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.206622552 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.152024537 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.093972181 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.314253806 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.960278391 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.962282367 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.106538275 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.958978763 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.134312458 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.943776216 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.956075699 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.051328474 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.092202986 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.145632383 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.957846292 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.12608652 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.970407452 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.901748427 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.869308601 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.090525606 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.990515527 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.95337386 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.986759696 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.983119454 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.148600678 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.056676549 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.002938325 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.973582144 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.074497551 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.820705309 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.974748988 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.976204665 seconds)
  done (took 175.274336202 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.28616325 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.979680641 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.959955018 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.020367559 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.178696193 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.960421911 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.649215226 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.972095097 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.610300645 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.96485463 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.96034441 seconds)
    (11/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.960818747 seconds)
    (12/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.962912606 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.972567421 seconds)
    (14/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.087398342 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.9641372 seconds)
    (16/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.975129652 seconds)
    (17/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.962629202 seconds)
    (18/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.987242025 seconds)
    (19/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.949993946 seconds)
    (20/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.959936967 seconds)
    (21/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.961395016 seconds)
    (22/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.960735156 seconds)
    (23/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.960904382 seconds)
    (24/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.960587322 seconds)
    (25/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.962058174 seconds)
    (26/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.960662276 seconds)
    (27/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.961006146 seconds)
    (28/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.257520289 seconds)
    (29/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.217059685 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.963933161 seconds)
    (31/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.962064327 seconds)
    (32/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.848838586 seconds)
    (33/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.961406061 seconds)
    (34/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.975901667 seconds)
    (35/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.964360143 seconds)
    (36/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.202032249 seconds)
    (37/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.05309172 seconds)
    (38/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.021188695 seconds)
    (39/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.057520909 seconds)
    (40/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.96207751 seconds)
    (41/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.178995665 seconds)
    (42/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.056176052 seconds)
    (43/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.963538038 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.961607036 seconds)
    (45/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.024235039 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.976424023 seconds)
    (47/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.965496602 seconds)
    (48/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.962604146 seconds)
    (49/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.965065049 seconds)
    (50/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.97040535 seconds)
    (51/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.025949911 seconds)
    (52/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.186562642 seconds)
    (53/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.964199211 seconds)
    (54/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.09896124 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.451917887 seconds)
    (56/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.962740277 seconds)
    (57/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.963034979 seconds)
    (58/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.963659642 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.558338214 seconds)
    (60/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.963645244 seconds)
    (61/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.963500215 seconds)
    (62/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.970245158 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.971132095 seconds)
    (64/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.963234161 seconds)
    (65/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.965339931 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.349569902 seconds)
    (67/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.038144051 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.0103679 seconds)
    (69/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.222587546 seconds)
    (70/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.963895272 seconds)
    (71/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.564400125 seconds)
    (72/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.048315823 seconds)
    (73/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.965555229 seconds)
    (74/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.963081424 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.964336851 seconds)
    (76/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.965997711 seconds)
    (77/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.963647884 seconds)
    (78/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.966610071 seconds)
    (79/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.100837964 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.972929542 seconds)
    (81/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.053872825 seconds)
    (82/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.044394739 seconds)
    (83/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.964160124 seconds)
    (84/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.100505153 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.966687909 seconds)
    (86/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.963827023 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.976988668 seconds)
    (88/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.783299377 seconds)
    (89/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.034698357 seconds)
    (90/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.004113611 seconds)
    (91/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.771259433 seconds)
    (92/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.965226025 seconds)
    (93/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.337447971 seconds)
    (94/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.707480067 seconds)
    (95/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.965583373 seconds)
    (96/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.965083197 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.976779622 seconds)
    (98/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.965376806 seconds)
    (99/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.96594037 seconds)
    (100/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.965970949 seconds)
    (101/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.042366917 seconds)
    (102/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.965963323 seconds)
    (103/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.100366753 seconds)
    (104/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.688139725 seconds)
    (105/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.437242581 seconds)
    (106/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.970223683 seconds)
    (107/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.966503544 seconds)
    (108/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.974095921 seconds)
    (109/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.045458914 seconds)
    (110/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.103374374 seconds)
    (111/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.968466942 seconds)
    (112/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.029819286 seconds)
    (113/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.972615765 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.966810832 seconds)
    (115/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.965028274 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.079144418 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.967435602 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.965755979 seconds)
  done (took 430.866625629 seconds)
done (took 820.162642165 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.683418318 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 2.564262182 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.716112508 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 2.584206282 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 2.560223488 seconds)
  done (took 15.006530265 seconds)
done (took 16.907046161 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.996535519 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.983390648 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.972022826 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.027452242 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.992594541 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.978316989 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.013850786 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.011364038 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.997575106 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.979328107 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.017153918 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.983651945 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.99828652 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.002131453 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.043106468 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.004718056 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.985301819 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.974487907 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.023583151 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.984044972 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.981413023 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.967144154 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.979957552 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.01740719 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.05128588 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.9909533 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.979999118 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.016825923 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.991218407 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.014651685 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.03581406 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.002708553 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.014044156 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.046272661 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.027496375 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.050196 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.991807358 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.038579028 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.98760209 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.055743985 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.028153461 seconds)
  done (took 84.139532191 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.978085612 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.108688582 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.185700165 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.010199996 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.979549417 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.192206291 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.034973102 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.107022251 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.108988915 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.190201877 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.198860352 seconds)
  done (took 24.999943372 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.977307503 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.113622253 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.197054493 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.014141848 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.001676279 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.189743189 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.041666374 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.107191566 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.111774969 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.20745331 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.201818086 seconds)
  done (took 25.074673523 seconds)
done (took 136.114270304 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.347539466 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.003512947 seconds)
  done (took 6.253871738 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.991579952 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.122349955 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.972600599 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.974795591 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.974073441 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.975181357 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.975279159 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.973713906 seconds)
  done (took 17.862886166 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.973141586 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.973679238 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.974997341 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.972484513 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.972904672 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.973227448 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.975801452 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.973299603 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.959574493 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.972710518 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.959332974 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.975284577 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.974750403 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.97078107 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.972271278 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.973247111 seconds)
  done (took 33.452941215 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.975071963 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 1.970551603 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 1.973500168 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 1.975592952 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.976607487 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.974134426 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 1.974416612 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 1.973886474 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 1.973892652 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 1.976566742 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 1.974577932 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 1.975518546 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 1.975016414 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 1.974482939 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.977206741 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 1.975038155 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.974102061 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 1.974655929 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 1.979000939 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 1.974915284 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 1.976064582 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 1.97559372 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 1.975522722 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 1.974743209 seconds)
  done (took 49.309628206 seconds)
done (took 108.79288211 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.192298588 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.473418625 seconds)
  done (took 8.572639319 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.978167132 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.976259265 seconds)
  done (took 5.92140196 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.976481519 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.977342212 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.976716532 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.975162322 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.976077955 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.976194802 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.977154428 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.975597293 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.976757359 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.976709342 seconds)
  done (took 21.671215391 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.976372889 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.977503401 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.975944851 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.976269927 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.976093291 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.977066916 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.978109387 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.977325614 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.977399731 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.977244162 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.97604204 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.978371723 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.977683537 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.978231811 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.977096548 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.97791599 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.977721248 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.977079769 seconds)
  done (took 37.496946597 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.978196629 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.977416365 seconds)
  done (took 5.863651854 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.977536452 seconds)
    (2/7) benchmarking "second"...
    done (took 1.977504462 seconds)
    (3/7) benchmarking "month"...
    done (took 1.977065757 seconds)
    (4/7) benchmarking "year"...
    done (took 1.977658405 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.97938541 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.977829222 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.978114147 seconds)
  done (took 15.753760788 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.978783305 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.123652796 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.17114814 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.598161572 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.979408303 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.978828238 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.85582783 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.980233928 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.981177123 seconds)
  done (took 21.556511387 seconds)
done (took 118.742651641 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.804512165 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.977759266 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.222806755 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.057836736 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.996532091 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.272518954 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.003300013 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.569020959 seconds)
done (took 43.813576031 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.053612038 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.977417935 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.011474948 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.009524727 seconds)
  done (took 22.907710057 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.97857843 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.314265337 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.004333894 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.825107474 seconds)
  done (took 23.050250823 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.356443002 seconds)
    (2/2) benchmarking "read"...
    done (took 2.33773166 seconds)
  done (took 6.607334084 seconds)
done (took 61.529909349 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.970373472 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.974003129 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.973290451 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.978840128 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.978547992 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.978970192 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.979270744 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.981919028 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.979237485 seconds)
    (10/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.978871244 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.96842575 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.978749288 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980571293 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.979653712 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.979090965 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.980300345 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.980100862 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.982336537 seconds)
    (19/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.979282338 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.979520587 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.980499935 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.980806909 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.981537467 seconds)
    (24/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.979113161 seconds)
  done (took 49.388599973 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.978598732 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.978848427 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.981793725 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.980873242 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.98055175 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.980705041 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.981219472 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.981906375 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.98049655 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.98005097 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.980089404 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.981007737 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.98463023 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.98103378 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.979883114 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.979741243 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.981230354 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.982221227 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.979841274 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.980390674 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.981475239 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.980073847 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.981652019 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.980612829 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.98144666 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.980727509 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.981230167 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.983863094 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.980366323 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.981373471 seconds)
  done (took 61.339612967 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.981571845 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.962967141 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.969614826 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.981013176 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.981909309 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.981269481 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.984162177 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.981432977 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.980751876 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.980773207 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.983457832 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.983008987 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.982882111 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.981226577 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.982357639 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.981460765 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.984702506 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.981866634 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.982687443 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.981875427 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.982224127 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.98269236 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.984834818 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.982256762 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.983198983 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.982689976 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.981235412 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.984029449 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.982759622 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.983729404 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.983553522 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.982036971 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.986405752 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.983136666 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.97442872 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.981564245 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.98362663 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.984100224 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.983613079 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.983392595 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.983748485 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.984686362 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.983966794 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.982396598 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.985038055 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.984758526 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.985288828 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.985248748 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.984163195 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.983347804 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.984396295 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.984628722 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.984206805 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.983726372 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.983846571 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.984942904 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.98442525 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.984627131 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.984059543 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.984965245 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.983751302 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.985111601 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.9847191 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.985552721 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.985534147 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.984843525 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.985549059 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.986209783 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.985180423 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.98532273 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.985077124 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.985582356 seconds)
  done (took 144.690692244 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.985206451 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.985894838 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.985466783 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.985714684 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.98102544 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.985391342 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.985375527 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.986072269 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.984653856 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.986417782 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.985623368 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.985927309 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.986051981 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.985609936 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.986334116 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.985163084 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.987870732 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.987033878 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.986956668 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.987044725 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.986098822 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.987072097 seconds)
  done (took 45.603733436 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.986550859 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.987897008 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.986610188 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.98671315 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.988006687 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.986842043 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.987492855 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.988780835 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.988591656 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.988022931 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.987122662 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.988233044 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.986586526 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.987121081 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.987750223 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.987738896 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.987005626 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.988125463 seconds)
  done (took 37.693362772 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.989206525 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.988773372 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.98878642 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.986171898 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.987996009 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.98818319 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.987880401 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.988019549 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.987787413 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.98887081 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.98929055 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.988267509 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.988775783 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.98806792 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.989944625 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.989327232 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.989565226 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.98851132 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.988380565 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.989014872 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.988952946 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.975062233 seconds)
  done (took 45.654425977 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.989147712 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.989242382 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.989275119 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.988923533 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.989989436 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.989319379 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.989418492 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.989245051 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.990204815 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.98991485 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.989935129 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.989889368 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.990182187 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.989586313 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.989987096 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.990948238 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.988607019 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.989276033 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.990086587 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.990132676 seconds)
  done (took 41.703156587 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.992527781 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.992698462 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.993648293 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.993427448 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.992463271 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.99284749 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.992290204 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.993101441 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.992735089 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.993554242 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.992028194 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.993523334 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.99263503 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.993969429 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.994554286 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.995074578 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.993186144 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.992932872 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.994211363 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.993215916 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.994037324 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.993692896 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.994135881 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.993374281 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.993650283 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.994526504 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.993684211 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.994481852 seconds)
  done (took 57.738482672 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.992819231 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.991967269 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.993092603 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.99310258 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.992046592 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.992944026 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.993513847 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.991497048 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.992399459 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.992485157 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.992142652 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.993443827 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.991390051 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.992930156 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.993753929 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.993775005 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.992948419 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.993376185 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.993755035 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.993932107 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.994872292 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.99423058 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.992873733 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.993730625 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.993958219 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.995203978 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.993423736 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.993814178 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.994657238 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.99371956 seconds)
  done (took 61.721651613 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.015464037 seconds)
    (2/2) benchmarking "in"...
    done (took 2.012788943 seconds)
  done (took 5.952298648 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.992858589 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.994306428 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.993691641 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.994519364 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.994448061 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.993763109 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.993972588 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.994477211 seconds)
  done (took 17.876114431 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.995855299 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.999784332 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.996814889 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.995778761 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.996157617 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.00504084 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.985202668 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.000237882 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.998744325 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.996402937 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.000855146 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.001079771 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.006385933 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.001870621 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.99566303 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.99649748 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.999164478 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.000846098 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.000366911 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.995808933 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.002126192 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.997998272 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.99555935 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.997821144 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.996509481 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.000259212 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.007433032 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.000127308 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.999689258 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.997247152 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.004712544 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.996928344 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.999294831 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.999789361 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.999194424 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.997090747 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.006096994 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.997936553 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.998444822 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.996744961 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.999660285 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.9999442 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.003457459 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.006971184 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.999819064 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.996366024 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.997046173 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.998279596 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.996694092 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.002638116 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.004990952 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.999404751 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.997311064 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.996432103 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.001577891 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.999294301 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.999944021 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.987862942 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.005995712 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.007055607 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.002927701 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.020219098 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.008253115 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.000377111 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.000525582 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.009456716 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.023379309 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.001545725 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.002478734 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.997838611 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.00873208 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.998448156 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.998476262 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.997780619 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.01450972 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.008435481 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.000620955 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.999369867 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.000165078 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.001285088 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.002881736 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.999861661 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.001929039 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.000798157 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.010241394 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.024762304 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.000733151 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.00070757 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.002664947 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.000532295 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.005108655 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.004566917 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.000338716 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.999033125 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.002276249 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.002365442 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.001233934 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.002153872 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.99907306 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.010599516 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.000044506 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.998529186 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.006349362 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.009454268 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.999327053 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.002351368 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.002122506 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.001683108 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.01019408 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.000675941 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.002950775 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.000788876 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.002050968 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.006104634 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.001502028 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.006803136 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.008459118 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.011468346 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.990640582 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.006744184 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.006814434 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.004866417 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.012446051 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.025699083 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.001112682 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.007737991 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.008910729 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.013941012 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.007599794 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.00126948 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.005873614 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.001831273 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.001087768 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.005318108 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.001255653 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.003880295 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.001926549 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.004382569 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.003174475 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.003262644 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.004764653 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.994257976 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.007493254 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.004182793 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.009683736 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.004053416 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.008204275 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.011494744 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.003716755 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.004843296 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.002605381 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.007749241 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.005254279 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.006678477 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.002644394 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.003758578 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.004575808 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.004546291 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.007709727 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.004761753 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.002937098 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.005098314 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.008229783 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.005682205 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.005265592 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.003510941 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.005502233 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.006488942 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.007122432 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.007047127 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.00822889 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.006506877 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.010895766 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.004696512 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.0043513 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.006306464 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.003786166 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.00529224 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.010881747 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.018450032 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.010054214 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.01733458 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.005301258 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.014333741 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.004203079 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.009790936 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.008797741 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.008066522 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.0069628 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.003633347 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.005239461 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.011008011 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.03075266 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.017179098 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.010532275 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.005724619 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.010870433 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.009478709 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.014201191 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.006954339 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.008431676 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.010002645 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.009009034 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.006579491 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.005825977 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.012006578 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.005611894 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.006398449 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.013298025 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.006102348 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.005832209 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.009448875 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.006832736 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.000770948 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.00616539 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.006254466 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.995516146 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.006493561 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.005399888 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.009642167 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.994689526 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.007223626 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.01236292 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.008681956 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.003539715 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.009889256 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.000476435 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.007530996 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.010269186 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.00552422 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.007751387 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.00843646 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.007212115 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.007301887 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.011750794 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.006739874 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.013341137 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.015731441 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.013343157 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.007853339 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.015341308 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.00809036 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.012524326 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.996563604 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.010545572 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.997025198 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.015026832 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.009278027 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.008652286 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.004277135 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.008438648 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.01163875 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.00851535 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.00984624 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.008980473 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.012685704 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.010540491 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.01504414 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.018672702 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.016882237 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.010258965 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.013819129 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.013396849 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.009308401 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.013439141 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.013404484 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.026889819 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.02077745 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.009671075 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.008366086 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.010693755 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.014661107 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.010327091 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.01141025 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.01985699 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.011376296 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.011400888 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.013523396 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.010843055 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.011289126 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.019905078 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.014095091 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.0151612 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.014290717 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.014555575 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.014393072 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.009845589 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.016008931 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.011832112 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.013937572 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.013931338 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.012343529 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.013028871 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.010529208 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.021755467 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.010745492 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.013748736 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.020829498 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.015020787 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.01116315 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.013943305 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.010504891 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.014237304 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.013480566 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.010175515 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.012221693 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.012686559 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.016462827 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.024557844 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.016250301 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.021789938 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.015910088 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.024599826 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.013774698 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.01224608 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.013675568 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.019082178 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.022484877 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.011534288 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.010756505 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.022940164 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.013559521 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.013051552 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.018630658 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.013392939 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.014732987 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.015241036 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.014411714 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.021268947 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.020194907 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.0127076 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.015653156 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.012728249 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.013494691 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.019229676 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.017213426 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.018242252 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.013279315 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.013091251 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.014034902 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.016314486 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.01685993 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.015002533 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.013469029 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.013568293 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.024478052 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.016922367 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.014432851 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.020033608 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.014939283 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.025511697 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.017263803 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.0161711 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.015259254 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.014507759 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.01635853 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.016179995 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.015571971 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.016556812 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.014337025 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.016226912 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.030427101 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.024260585 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.018289118 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.018924879 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.016999417 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.017784288 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.026109475 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.03741814 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.01660508 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.019646763 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.019196769 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.024304224 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.02006807 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.022520185 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.021564519 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.025573518 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.01986631 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.015120961 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.020931358 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.032854258 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.018247925 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.014966949 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.015696966 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.022190452 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.019506797 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.015814624 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.018772019 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.022601625 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.018272673 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.031459455 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.016404628 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.018393624 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.018411305 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.016008465 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.019635849 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.017994925 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.020796828 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.021048684 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.0190151 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.019706258 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.021692596 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.025914891 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.017093968 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.023237322 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.028627098 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.019549409 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.018636978 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.020528004 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.019943375 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.02233994 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.018736981 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.016648065 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.020151881 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.017264863 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.0221567 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.023972936 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.028428332 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.021460615 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.01835887 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.018590236 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.025882097 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.020121686 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.018599926 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.021630796 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.026864193 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.024646327 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.031698796 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.030119844 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.02045367 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.019284245 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.028929739 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.02949811 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.0204776 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.018359704 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.022218795 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.023190474 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.024770576 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.02267778 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.021250335 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.022093714 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.027639303 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.021004956 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.020724942 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.022936581 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.022506512 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.024942874 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.025184074 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.026725411 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.021992124 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.020353291 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.018744363 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.025523068 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.024744523 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.026473082 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.022963557 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.020550657 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.025589771 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.026744793 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.025381848 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.02091343 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.021021272 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.026558055 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.022879609 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.020909884 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.023141114 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.023181844 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.021270622 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.027123353 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.024523593 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.021670905 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.026208534 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.023135227 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.02803719 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.023939136 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.022688226 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.022253003 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.021929704 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.032460843 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.022038012 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.024049031 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.023406361 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.022641666 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.031332169 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.026460058 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.029760076 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.024685937 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.023646368 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.022825233 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.028972433 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.032645179 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.029371614 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.028547207 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.031139133 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.030361491 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.027573095 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.022453718 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.022881777 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.01920288 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.024262702 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.030252817 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.026654727 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.029197657 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.488775448 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.027304736 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.025862844 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.029666418 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.017913566 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.017591972 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.030504441 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.034809577 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.035917569 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.023690188 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.02778385 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.026345022 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.018703693 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.03506158 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.026016746 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.026597005 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.027001965 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.029258782 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.026255229 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.034980697 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.033444697 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.031837586 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.027302705 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.031977725 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.045997802 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.030631692 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.036299118 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.058679596 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.027328863 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.0277333 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.027697165 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.025800195 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.026905958 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.028542276 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.026833559 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.034822821 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.028037042 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.026785732 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.037151621 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.025805849 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.027122975 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.028462929 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.027205953 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.035540423 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.027587489 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.035935447 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.029984179 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.026860394 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.027632332 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.029725534 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.026618405 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.028606913 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.026640209 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.031354354 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.0129849 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.028424458 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.039151194 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.028494946 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.031375678 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.044730009 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.039131879 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.029662245 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.028739108 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.029484739 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.035323617 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.03306546 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.028391553 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.033762711 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.03701197 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.034084084 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.035900254 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.031156216 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.031101406 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.032425887 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.027793695 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.030699006 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.044688844 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.042241178 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.029355807 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.029061335 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.039022124 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.028559123 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.039036005 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.038010548 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.031216878 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.033223229 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.031035713 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.02916311 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.028848417 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.030250545 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.034987084 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.036485329 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.03154998 seconds)
  done (took 1203.345460632 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.02848784 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.028813518 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.029353215 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.029869252 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.028563994 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.031102704 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.029408597 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.030231954 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.030230495 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.03021714 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.030035298 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.030491361 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.030297666 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.03032403 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.030806608 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.031188522 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.031466301 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.030107047 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.031217805 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.030474167 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.030830125 seconds)
  done (took 44.591967993 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.030830314 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.030243466 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.030247316 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.03113427 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.030590473 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.030479712 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.031242308 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.030922324 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.030499926 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.031710904 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.030460609 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.030602555 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.030681471 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.032047745 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.030087956 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.031947327 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.032281554 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.028203961 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.032007375 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.028185003 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.029748892 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.031563955 seconds)
  done (took 46.635804777 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.033222917 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.033936584 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.033881418 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.031390324 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.032186016 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.034836157 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.032273813 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.034697839 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.031491659 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.033663114 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.041335417 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.04100797 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.031993836 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.034912852 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.033567594 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.034678125 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.178258622 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.034804342 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.034160619 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.031567641 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.034276602 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.042093227 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.032676359 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.032096467 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.032913526 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.035664803 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.032990044 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.033813588 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.032874403 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.035465694 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.039855243 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.03398437 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.03722673 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.039171129 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.034623258 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.035021671 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.040045457 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.03613228 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.03394378 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.033212976 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.046456038 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.057757644 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.034048074 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.036431175 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.0451353 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.034222622 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.034564907 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.039779883 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.043108514 seconds)
  done (took 101.868422269 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.03528441 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.034725498 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.034753254 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.034932342 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.035590964 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.034342291 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.034842627 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.035462015 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.034037059 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.036187312 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.035051745 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.033715908 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.034340717 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.033776018 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.033147702 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.034159495 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.03339203 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.033253316 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.034400018 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.033108199 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.034337517 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.0339386 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.032558627 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.034395592 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.034512677 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.034238447 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.022879381 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.022824783 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.03361238 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.023627663 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.034211293 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.033853825 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.035488378 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.00747421 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.032839716 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.035269588 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.036091076 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.024468894 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.035774189 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.034835821 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.035568375 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.024345682 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.035210961 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.036317862 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.035791075 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.035058292 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.035907153 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.034896699 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.035769262 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.036395982 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.036706603 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.036377454 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.035899027 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.03618859 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.035943395 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.036523264 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.036919735 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.035864798 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.035980782 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.037038612 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.036546101 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.036625189 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.036281729 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.036448912 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.036846715 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.037047756 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.03750952 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.036510809 seconds)
  done (took 140.274213089 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.039054383 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.028489269 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.038760578 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.027951494 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.02384452 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.03907569 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.038231923 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.039233034 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.040616236 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.039663059 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.039590881 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.037485644 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.03923873 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.040640937 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.039043207 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.039474702 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.040048555 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.039230761 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.040994734 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.039491947 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.039642931 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.039826002 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.039099516 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.03953142 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.039713499 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.039882843 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.039581465 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.040394684 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.039865713 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.039513174 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.040880943 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.041056484 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.041391024 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.042110935 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.040800377 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.041634393 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.040755447 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.040892191 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.042101268 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.040770935 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.040331442 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.040756824 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.041153755 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.041805783 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.041990767 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.040413588 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.041442992 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.041858432 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.039882521 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.041340148 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.041862837 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.042463306 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.04165092 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.043163615 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.029407614 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.018098541 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.042044216 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.043003992 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.04182517 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.04336204 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.04225084 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.040585705 seconds)
  done (took 128.408176994 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.02699679 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.041111472 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.041161847 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.041913942 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.040541695 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.039563312 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.026955611 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.040175251 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.027616916 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.041985711 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.041227777 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.023812029 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.042689395 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.041415098 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.041468697 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.042348282 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.039666988 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.041900417 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.040940905 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.042198039 seconds)
  done (took 42.735393639 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.006089961 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.040893783 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.042303591 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.04113363 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.041008023 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.043031133 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.04141612 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.041823538 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.042739839 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.042255547 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.040584787 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.042644522 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.041996164 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.042950049 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.042609528 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.04267955 seconds)
  done (took 34.606264642 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.038122606 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.041629039 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.044969738 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.04460798 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.032772484 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.040013835 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.043324164 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.043088413 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.042080458 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.042836014 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.029680846 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.022437748 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.031790982 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.045341759 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.032490596 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.030394989 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.042945542 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.042564033 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.042800237 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.045500321 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.044244463 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.043090995 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.042429185 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.041936545 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.031968819 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.044415327 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.042911193 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.031177081 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.043134039 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.04200529 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.043536951 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.042625348 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.041488356 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.031438887 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.043132796 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.030519663 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.040642993 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.029676054 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.040606542 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.030438587 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.042172489 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.040623894 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.040090958 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.040168965 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.039461808 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.040230154 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.038781568 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.039264516 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.038988425 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.038560615 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.038246234 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.03976463 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.033246589 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.037194446 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.037544846 seconds)
  done (took 114.116832179 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.037059948 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.036959935 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.037026707 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.036025538 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.03679883 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.033923761 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.037073222 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.035507973 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.03656949 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.037593075 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.036976654 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.035577574 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.036469097 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.037453514 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.03691973 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.035776943 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.031528807 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.035860125 seconds)
  done (took 38.618897347 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.035471365 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.034122527 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.033675035 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.035220681 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.036090904 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.03546457 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.034572145 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.035165922 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.035439874 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.036293527 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.034278258 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.034575425 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.035020348 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.036024304 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.036189529 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.033980652 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.036107947 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.034675456 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.034634876 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.036909465 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.034478996 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.034139488 seconds)
  done (took 46.740725582 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.035914539 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.035621679 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.050159334 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.055367243 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.055941522 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.070907152 seconds)
  done (took 14.268122378 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.035264535 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035298195 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.035333038 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035429116 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035918385 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.03523637 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.033731102 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03495306 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.034580015 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.035287812 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035406067 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.034977592 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.034396941 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035398504 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035310553 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035395875 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.034022238 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.034601493 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035668345 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035763796 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035703855 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035654433 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035701932 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.033807279 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035777631 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036038413 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035866679 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03621787 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.03595733 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035780602 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03520679 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035247731 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036350812 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.036369028 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03619848 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037426497 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.023324908 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035748474 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035958258 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037287353 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.037168629 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035765879 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.03731339 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.035928878 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037071458 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036034149 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036508369 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.036991567 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037958196 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037178511 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037022835 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036680915 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036853384 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037363659 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037615974 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036390347 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036179274 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037197718 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037844875 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036989856 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036645047 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.036807176 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037493182 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.040124051 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036682764 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.0358674 seconds)
  done (took 136.336865429 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037714132 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.037932218 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.0369023 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037787457 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.026741552 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037214881 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037292968 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037393838 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037079535 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037842813 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037330883 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038546142 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036662419 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037142085 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037231984 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038458928 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037035807 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036793667 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037173244 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037771655 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.039857572 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037468142 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03761688 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038308795 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037546751 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.039951857 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037487151 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.033445704 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036749298 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038180702 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038336898 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037083684 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03895233 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.036289195 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037771541 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038638484 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037227208 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037435561 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036869429 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037810007 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037479473 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038446896 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037186259 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037488688 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037334211 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038835457 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037621368 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037381555 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037682636 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037558272 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.039662554 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.034160639 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036703637 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.032856795 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039309604 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.039511728 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037673967 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.032849426 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.038261874 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037699905 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.039310826 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036970657 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.038804261 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038113768 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037379665 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.038586316 seconds)
  done (took 136.434754053 seconds)
done (took 2800.261404574 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.038186143 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.28664936 seconds)
  done (took 16.281580916 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.207537996 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.157541055 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.043404924 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.052920046 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.042999028 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.066245486 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.043933526 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.042013765 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 2.042670078 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 2.043149122 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.043419344 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.226384797 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.084886257 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.041552753 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.04071995 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.130640823 seconds)
  done (took 55.281021143 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.043336909 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.043145019 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.050331713 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.042493397 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.04578319 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.062016677 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 2.075536763 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 2.047987791 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 2.107107862 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.059004736 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.159958383 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.055600263 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 2.043374066 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.0839421 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 2.057468006 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.061626055 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 2.135985811 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.123711535 seconds)
  done (took 39.263975021 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.12993474 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.046428177 seconds)
  done (took 11.148171983 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.033348702 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.034453015 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.013570115 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.033757418 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.01844909 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.047602033 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.027646717 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.025870063 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.03371784 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.034058061 seconds)
  done (took 72.271748852 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.027368732 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.023994505 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.025399333 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.021707479 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.020012803 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.022804666 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.018176457 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.021369819 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.721911006 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 2.060601416 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 2.029163246 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.027002113 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.014712861 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.015876817 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.012316155 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.040977371 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.182936145 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.010220727 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.009849534 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.018295822 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.013299087 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.072099383 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.025007641 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.013505422 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.048612797 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.717206619 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.026455759 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.014177449 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.171422058 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.006170695 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.009277266 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.169130864 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.017908915 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.374797551 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.29426082 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.018415311 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.017263619 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.013453052 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.004649141 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.17451006 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.005467931 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.011967285 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.927790068 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.259389091 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.094352139 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.051898761 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.396734875 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.004795671 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.001198495 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.034589386 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.002333965 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.998696858 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 2.017429086 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.507414553 seconds)
  done (took 140.793916654 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.994752891 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.21652276 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.144880882 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.994939773 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.248655447 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.199910847 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.993413572 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.033220718 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.990681285 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.18885577 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.241057132 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.090386761 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.988207892 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.98625047 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.983082975 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.983737865 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.124769481 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.048693556 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.984091886 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.977708926 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.003244685 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.179741197 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.101541696 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.982123178 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.003209817 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.183672816 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.098825532 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.078480182 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.800551369 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.973432617 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.03744127 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.977249287 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.977660159 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.973021134 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.125944379 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.066708639 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.055935372 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.975423782 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.970944388 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.972001856 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.64518043 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.171828126 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.066976108 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.093610828 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.216108921 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.191403955 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.581072525 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.969261867 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.597039818 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.132733836 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.175096088 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.176686872 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.090501788 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.97078361 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.519855679 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.966064613 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.966188228 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.188221291 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.186295095 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.064852951 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.96973576 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.964417313 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.964080893 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.202613827 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.968602107 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.056360892 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.969216298 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.964225031 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.056286736 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.066337312 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.190329965 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.186536296 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.996653364 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.288469552 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.449358323 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.167872617 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.030908571 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.185358237 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.967883027 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.964775703 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.047247906 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.809407515 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.220083336 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.207844458 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.165442463 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.996779018 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.614995213 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.964751034 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.151831522 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.157238429 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.200401636 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.206904186 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.20185288 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.339806269 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.965327393 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.965642948 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.260216268 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.083640964 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.919006965 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.323650195 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.195416859 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.453349171 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.992034664 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.29640153 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.097389645 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.969220346 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.611613308 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.965450456 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.171252568 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.005440457 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.968559565 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.967709599 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.157188215 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.870609213 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.966379864 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.920263471 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.027367188 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.967982145 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.170616015 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.97072397 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.213142006 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.969627493 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.200142696 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.551990162 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.997433607 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.191592196 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.209677046 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.59586535 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.208675053 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.210654696 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.082498198 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.240372873 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.970744299 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.968573856 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.228672459 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.970857116 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.9676165 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.135904525 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.968548296 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.110198091 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.971419228 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.234061564 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.989893974 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.199855123 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.9736784 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.206644756 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.00139711 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.018281568 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.971486556 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.098152443 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.972661793 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.815687021 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.125942001 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.970376383 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.968258201 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.726002512 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.970147981 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.117378492 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.194742295 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.990033202 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.039067832 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.53540212 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.960885219 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.053808946 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.991230399 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.599556915 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.969210446 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.222822151 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.93161043 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.452339059 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.969100871 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.204160388 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.208700468 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.971755433 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.970254107 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.814672106 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.969435217 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.968578483 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.123827432 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.945725605 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.870891232 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.16756487 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.974141483 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.098011507 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.974183789 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.050256086 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.316840209 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.970699735 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.970405184 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.970533746 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.97176741 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.97243566 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.228499947 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.997179661 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.404660722 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.107507723 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.226742612 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.27758531 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.16775558 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.012322778 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.975594565 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.195009739 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.974377588 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.033481308 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.975227976 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.990665527 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.199347193 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.975952113 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.176243113 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.206673343 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.970359737 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.018485009 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.975188205 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.970665486 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.938740359 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.118807588 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.059165299 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.977103026 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.972623784 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.086460349 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.094397078 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.154345052 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.789392826 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.138862195 seconds)
  done (took 925.125689817 seconds)
done (took 1262.134631044 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.974806083 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.972249885 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.977438101 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.975727114 seconds)
  done (took 29.806508361 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 1.975022832 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 1.973362098 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 1.97557426 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 1.973549543 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 1.973887142 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 1.974233758 seconds)
  done (took 13.751495461 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.973450959 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.973217559 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.975223806 seconds)
  done (took 22.828280231 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 2.052870028 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.402833362 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 2.121583538 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.416461109 seconds)
  done (took 10.90067348 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.976936797 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 1.976401884 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 1.976262989 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 1.97555727 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 1.97531849 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.976625138 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 1.975565376 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.975232296 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 1.976944953 seconds)
  done (took 19.691704672 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.035317856 seconds)
done (took 102.919936963 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.263858021 seconds)
    (2/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.097235833 seconds)
    (3/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.07521603 seconds)
    (4/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.620366775 seconds)
    (5/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.107456903 seconds)
    (6/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.462327983 seconds)
    (7/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.491596768 seconds)
    (8/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.946080444 seconds)
    (9/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.086735786 seconds)
    (10/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.078660746 seconds)
    (11/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.153549794 seconds)
    (12/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.082706894 seconds)
    (13/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.082356061 seconds)
    (14/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.223345136 seconds)
    (15/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.079186879 seconds)
    (16/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.613000647 seconds)
    (17/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.079578945 seconds)
    (18/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.226522638 seconds)
    (19/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.079069352 seconds)
    (20/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.159126229 seconds)
    (21/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.393924475 seconds)
    (22/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.08077 seconds)
    (23/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 3.670959372 seconds)
    (24/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.824151865 seconds)
    (25/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.347434808 seconds)
    (26/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.079262808 seconds)
    (27/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.335236435 seconds)
    (28/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.328441294 seconds)
    (29/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.455858046 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.080742893 seconds)
    (31/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.543675562 seconds)
    (32/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.288222062 seconds)
    (33/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.180327964 seconds)
    (34/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.167378071 seconds)
    (35/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.28559622 seconds)
    (36/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.203772819 seconds)
    (37/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.08058019 seconds)
    (38/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.118487863 seconds)
    (39/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.422824436 seconds)
    (40/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.184933476 seconds)
    (41/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.845643937 seconds)
    (42/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.963309111 seconds)
    (43/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.099433919 seconds)
    (44/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.076781397 seconds)
    (45/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.308076718 seconds)
    (46/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.210706689 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.424450737 seconds)
    (48/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.097964263 seconds)
    (49/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.177344117 seconds)
    (50/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.878677219 seconds)
    (51/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.890485907 seconds)
    (52/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.276951628 seconds)
    (53/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.233051657 seconds)
    (54/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.178469399 seconds)
    (55/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.173225126 seconds)
    (56/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.214559098 seconds)
    (57/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.082438067 seconds)
    (58/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 3.705483008 seconds)
    (59/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.215972431 seconds)
    (60/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.834523743 seconds)
    (61/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.17150457 seconds)
    (62/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.083802115 seconds)
    (63/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.494209946 seconds)
    (64/341) benchmarking ("sort", Bool, false)...
    done (took 2.296364345 seconds)
    (65/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.344227448 seconds)
    (66/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.360700059 seconds)
    (67/341) benchmarking ("sort", Int64, false)...
    done (took 5.72142601 seconds)
    (68/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.086900488 seconds)
    (69/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.088413439 seconds)
    (70/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.324768846 seconds)
    (71/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.88756 seconds)
    (72/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.228382891 seconds)
    (73/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.364532926 seconds)
    (74/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.174730314 seconds)
    (75/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.03991439 seconds)
    (76/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.238433738 seconds)
    (77/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.101812564 seconds)
    (78/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.181634323 seconds)
    (79/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.391647173 seconds)
    (80/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.062859543 seconds)
    (81/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.32087053 seconds)
    (82/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.220973471 seconds)
    (83/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.193246732 seconds)
    (84/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.233303798 seconds)
    (85/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.242890224 seconds)
    (86/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.159669997 seconds)
    (87/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.284477176 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.483095647 seconds)
    (89/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.404576816 seconds)
    (90/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.904948297 seconds)
    (91/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.345041442 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.951589854 seconds)
    (93/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.09120331 seconds)
    (94/341) benchmarking ("map", abs, Float32, true)...
    done (took 3.777442637 seconds)
    (95/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.210586472 seconds)
    (96/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.104595223 seconds)
    (97/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.081757654 seconds)
    (98/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.085380649 seconds)
    (99/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.450697363 seconds)
    (100/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.362316514 seconds)
    (101/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.669399026 seconds)
    (102/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.330150534 seconds)
    (103/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.391615051 seconds)
    (104/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.401647943 seconds)
    (105/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.29573058 seconds)
    (106/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.116511512 seconds)
    (107/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.282235533 seconds)
    (108/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.31887691 seconds)
    (109/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.485704789 seconds)
    (110/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.262718587 seconds)
    (111/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.396553255 seconds)
    (112/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.386248402 seconds)
    (113/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.864892384 seconds)
    (114/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.084268994 seconds)
    (115/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.26359406 seconds)
    (116/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.147605484 seconds)
    (117/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.091912825 seconds)
    (118/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.101434302 seconds)
    (119/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.109354882 seconds)
    (120/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.182987388 seconds)
    (121/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.263123248 seconds)
    (122/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.457117662 seconds)
    (123/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.164020314 seconds)
    (124/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.083499393 seconds)
    (125/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.125348001 seconds)
    (126/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.470793123 seconds)
    (127/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.695785399 seconds)
    (128/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.473826567 seconds)
    (129/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.107540828 seconds)
    (130/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.143429894 seconds)
    (131/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.082076475 seconds)
    (132/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.129371532 seconds)
    (133/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.495946971 seconds)
    (134/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.097285196 seconds)
    (135/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.383451632 seconds)
    (136/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.512278763 seconds)
    (137/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.384135107 seconds)
    (138/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.087892959 seconds)
    (139/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.227092582 seconds)
    (140/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.106699766 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.682081528 seconds)
    (142/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.433459932 seconds)
    (143/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.234244361 seconds)
    (144/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.308327634 seconds)
    (145/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.349096544 seconds)
    (146/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.405843226 seconds)
    (147/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.226178735 seconds)
    (148/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.857348979 seconds)
    (149/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.190838361 seconds)
    (150/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.166128799 seconds)
    (151/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.084627077 seconds)
    (152/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.59989103 seconds)
    (153/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.356916451 seconds)
    (154/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.106641632 seconds)
    (155/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.337234371 seconds)
    (156/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.337501871 seconds)
    (157/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.168936105 seconds)
    (158/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.218943402 seconds)
    (159/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.381848664 seconds)
    (160/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.224410996 seconds)
    (161/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.620831019 seconds)
    (162/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.34917783 seconds)
    (163/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.349863999 seconds)
    (164/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.301176336 seconds)
    (165/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.458962413 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.080018862 seconds)
    (167/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.106135789 seconds)
    (168/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.098308467 seconds)
    (169/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.188167975 seconds)
    (170/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.091689845 seconds)
    (171/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 3.984824675 seconds)
    (172/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.19504122 seconds)
    (173/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.090022127 seconds)
    (174/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.219809892 seconds)
    (175/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.120433204 seconds)
    (176/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.791291792 seconds)
    (177/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.709507417 seconds)
    (178/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.105796486 seconds)
    (179/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.087949499 seconds)
    (180/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.163303778 seconds)
    (181/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.400146045 seconds)
    (182/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.733598437 seconds)
    (183/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.955651133 seconds)
    (184/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.530081877 seconds)
    (185/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.467345396 seconds)
    (186/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.394500117 seconds)
    (187/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.09229176 seconds)
    (188/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.087978669 seconds)
    (189/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.80466826 seconds)
    (190/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.087521039 seconds)
    (191/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.586042128 seconds)
    (192/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.089906851 seconds)
    (193/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.96995965 seconds)
    (194/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.919370046 seconds)
    (195/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.225689385 seconds)
    (196/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.089206559 seconds)
    (197/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.436615061 seconds)
    (198/341) benchmarking ("sort", Float32, false)...
    done (took 5.778687527 seconds)
    (199/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.109302456 seconds)
    (200/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.494047897 seconds)
    (201/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.180485425 seconds)
    (202/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.207929621 seconds)
    (203/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.101108084 seconds)
    (204/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.31275534 seconds)
    (205/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.464000174 seconds)
    (206/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.329354008 seconds)
    (207/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.153629944 seconds)
    (208/341) benchmarking ("sort", BigInt, false)...
    done (took 7.087590694 seconds)
    (209/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.394861913 seconds)
    (210/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.12490877 seconds)
    (211/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.486672191 seconds)
    (212/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.087712101 seconds)
    (213/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 3.85724707 seconds)
    (214/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.437298158 seconds)
    (215/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.095029805 seconds)
    (216/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.082368617 seconds)
    (217/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.329891148 seconds)
    (218/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.990971337 seconds)
    (219/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.485312769 seconds)
    (220/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.234712608 seconds)
    (221/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.224235068 seconds)
    (222/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.374255207 seconds)
    (223/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.100395578 seconds)
    (224/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.26536551 seconds)
    (225/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.302105166 seconds)
    (226/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.18649231 seconds)
    (227/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.517711268 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.106152844 seconds)
    (229/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.090058251 seconds)
    (230/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.075879466 seconds)
    (231/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.07799332 seconds)
    (232/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.166662578 seconds)
    (233/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 3.897188826 seconds)
    (234/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.392599942 seconds)
    (235/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.279833901 seconds)
    (236/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.317944469 seconds)
    (237/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.462601454 seconds)
    (238/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.309050211 seconds)
    (239/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.719514312 seconds)
    (240/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.833868208 seconds)
    (241/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.367531405 seconds)
    (242/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.973655593 seconds)
    (243/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.215403174 seconds)
    (244/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.062809967 seconds)
    (245/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.997023546 seconds)
    (246/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.15602256 seconds)
    (247/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.16552605 seconds)
    (248/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.211745423 seconds)
    (249/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.304618549 seconds)
    (250/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.075440164 seconds)
    (251/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.056289049 seconds)
    (252/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 3.906665967 seconds)
    (253/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.45297753 seconds)
    (254/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.053795661 seconds)
    (255/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.318827357 seconds)
    (256/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.232570262 seconds)
    (257/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.546577182 seconds)
    (258/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.202864217 seconds)
    (259/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.04588164 seconds)
    (260/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.226989603 seconds)
    (261/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.050205963 seconds)
    (262/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.348819228 seconds)
    (263/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.185113847 seconds)
    (264/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.136590034 seconds)
    (265/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.193167517 seconds)
    (266/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.093373073 seconds)
    (267/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.031865095 seconds)
    (268/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.68435873 seconds)
    (269/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.090916977 seconds)
    (270/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.245322493 seconds)
    (271/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.221553252 seconds)
    (272/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.114911394 seconds)
    (273/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.785606213 seconds)
    (274/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.388376305 seconds)
    (275/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.470968076 seconds)
    (276/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.061243622 seconds)
    (277/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.158482432 seconds)
    (278/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.165853951 seconds)
    (279/341) benchmarking ("sort", Float64, false)...
    done (took 5.719186995 seconds)
    (280/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.316860278 seconds)
    (281/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.012770503 seconds)
    (282/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.028319041 seconds)
    (283/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.222655479 seconds)
    (284/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.920729393 seconds)
    (285/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.029074325 seconds)
    (286/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.778125576 seconds)
    (287/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.031979225 seconds)
    (288/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.146801418 seconds)
    (289/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.424616831 seconds)
    (290/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.702852671 seconds)
    (291/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.158756805 seconds)
    (292/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.012330986 seconds)
    (293/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.222796038 seconds)
    (294/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.713343288 seconds)
    (295/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.089240482 seconds)
    (296/341) benchmarking ("sort", Int8, false)...
    done (took 4.976489772 seconds)
    (297/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.076297028 seconds)
    (298/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.009877968 seconds)
    (299/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.170262363 seconds)
    (300/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.030306816 seconds)
    (301/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.174443576 seconds)
    (302/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.123140956 seconds)
    (303/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.938750334 seconds)
    (304/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.32062637 seconds)
    (305/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.247828517 seconds)
    (306/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.773516221 seconds)
    (307/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.040379177 seconds)
    (308/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.398862798 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.925009669 seconds)
    (310/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.677776767 seconds)
    (311/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.313304187 seconds)
    (312/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.008718653 seconds)
    (313/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 3.56978529 seconds)
    (314/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.51036955 seconds)
    (315/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.898922603 seconds)
    (316/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.233972589 seconds)
    (317/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.272025575 seconds)
    (318/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.00461691 seconds)
    (319/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.115816279 seconds)
    (320/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.476189079 seconds)
    (321/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.307525377 seconds)
    (322/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.298392465 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.886713575 seconds)
    (324/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.015186728 seconds)
    (325/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.286872478 seconds)
    (326/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.012503628 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.15511265 seconds)
    (328/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.017327107 seconds)
    (329/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.092260305 seconds)
    (330/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.143467268 seconds)
    (331/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.00123259 seconds)
    (332/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.494270147 seconds)
    (333/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.460397814 seconds)
    (334/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.086470025 seconds)
    (335/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.150854325 seconds)
    (336/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.218914907 seconds)
    (337/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.916272709 seconds)
    (338/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.167498468 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.046424032 seconds)
    (340/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.320188405 seconds)
    (341/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.487549362 seconds)
  done (took 1159.936963651 seconds)
done (took 1162.043229942 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.035557386 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.024005919 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.006762458 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.026503018 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.121279264 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.057211635 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.020128448 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.011682958 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.057128537 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.057309209 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.006086399 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.055042756 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.008292166 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.011001529 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.007968212 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.024316991 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.411422803 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.059894199 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.028735479 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.015747296 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.022436953 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.004246154 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.055909409 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.054216042 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.005835688 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.008334527 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.006725184 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.02156317 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.116987514 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.003614223 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.003756468 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.011348986 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.400537099 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.043659167 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.995819832 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.018154194 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.010872702 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.009916669 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.989482243 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.032097514 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.562694294 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.008563433 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 1.996359346 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 1.976107993 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 1.9991513 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.0017331 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 1.992135163 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.007624969 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.013641835 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.015664328 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.54616125 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.024226532 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.003497471 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.999328064 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.013731534 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.00032729 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.004348496 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.016401667 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.019513233 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.017104686 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.380423347 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.054704056 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.004151118 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.019433771 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.009316178 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.582657558 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.007716028 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.006530359 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.564404032 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.016329486 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.582893154 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.019339722 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.002774401 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.015044396 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.03294717 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.400933313 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.046800836 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.000565109 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.010787089 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 1.998887375 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.013018808 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.016590433 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.006207704 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.000378721 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.016563038 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.049418397 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.014101234 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.001605784 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.014213922 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.022376195 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.010440382 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.014302085 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.005735185 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.000125045 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.015334167 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 1.975583079 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.005748229 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.006089176 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.006885997 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.015183947 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.561984188 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.029335883 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.000068323 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.000420063 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.002733576 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.017421458 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.565186163 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.011898705 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.026602008 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.052045265 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.004245795 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.382419996 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.053099136 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.020095055 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.015500168 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 1.998289606 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.000880258 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.381554667 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.596681235 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.027751208 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.00457651 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.001322261 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.020919705 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.005017827 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.000623953 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.401452805 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.050344893 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.015578731 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.121574019 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.013057428 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.027181798 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 1.993945429 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 1.999335924 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.044647376 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.015303451 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.026374993 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 1.995785234 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.009695198 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.011137837 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.992655517 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.003597303 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.99407419 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 1.979116779 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.000575603 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.989709589 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.040764012 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.006760331 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.007029604 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.012341683 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.114647562 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.988658513 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.369514113 seconds)
done (took 315.997444895 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.071783921 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 6.989647357 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.074776075 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.991791781 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.078424098 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.063055213 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.990181174 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.990310867 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.989652206 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.463338703 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.991265686 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 1.995860755 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 6.989548266 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.989122381 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.058473219 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.989779694 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.989968757 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.254259761 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.993064251 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.067480784 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 6.989046669 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.990739959 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.99113276 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.468642981 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.990529606 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 6.989673218 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.067450152 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.989417603 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.261647555 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 6.990229504 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 6.990509309 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.263897447 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.06849234 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.003143843 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 1.999220421 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.998033017 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.078399465 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.00180972 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.057106235 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.057272413 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.077076452 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.025800607 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 6.991200237 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 6.990667696 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.994819555 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.993698151 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.991323156 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.023073596 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.990766161 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 1.999664448 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.287266048 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 1.996599776 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 1.999582906 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.991962282 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.991831082 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.007773899 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.991514252 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.994798107 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.068821656 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.994428664 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.057764978 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.47007561 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.467750294 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.979001766 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 6.991205127 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.993867297 seconds)
  done (took 192.550558722 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.107942079 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.065833043 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.105275323 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 1.997876798 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.041421071 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.109124894 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 1.993249117 seconds)
  done (took 16.342777359 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 1.998903357 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.992958605 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.05409819 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.055756191 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.990083414 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.200695738 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.996871133 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 1.997940962 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.019573931 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.993115426 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.676411897 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.055759241 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.000743816 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 6.992992433 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.007688304 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.062465058 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 1.995826887 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.99510823 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.108624662 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.141247584 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 1.998851445 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.001105585 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.020802828 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.005652888 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.995678658 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.994251718 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.996433224 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.000711699 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.994079333 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.994162032 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.99434575 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.057278175 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.995912596 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 6.993325306 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.99472742 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.995163855 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.99513645 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.995253037 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.000155615 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.99534751 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.998193388 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.997674352 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.99737223 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.997890425 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.999010186 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.021414495 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.998282559 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.998449587 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.997497458 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.997923549 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.024033399 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.999557547 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.997648032 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.004231814 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.043809052 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.006205656 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.999118846 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.99739176 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.999981848 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.997616665 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.998423576 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.146826856 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.060934569 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.997879953 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.060226712 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.228537856 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.998743823 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.998665915 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.998660988 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.064791862 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.997917873 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.061200846 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.999269877 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.131866652 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.99985771 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.202698002 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.021727899 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.003646834 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.003117279 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 6.99925512 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.008941141 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.999742451 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.002789172 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.006722272 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.005715573 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.001058509 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.999793152 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.001940883 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.007133351 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.001069822 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.050944283 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.000377155 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.000874426 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.124590549 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.000598426 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.114643548 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.027002082 seconds)
  done (took 218.680747826 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.007323536 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.008341325 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.001534264 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.015473081 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.000097797 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 1.993271082 seconds)
  done (took 13.953025122 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.0032139 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.004538015 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.999449029 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.000527421 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.003238749 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.001622543 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.001029538 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.003507823 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.007258732 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.999871887 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.002796076 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.988488127 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.002348707 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.001638828 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.001923158 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.000353859 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.001486822 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.000130351 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.000997015 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.002246967 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.132374822 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.002768751 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.003031672 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.008208649 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.008436787 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.000523788 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.012603967 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.0024318 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.000411122 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.010499571 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.008768026 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.003821958 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.007415176 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.009058891 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.006664701 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.0079328 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.005707861 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.002367509 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.000849496 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.004982911 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.003166776 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.002689075 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.003189375 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.003523123 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.003598148 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.012602429 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.006854758 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.013454571 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.003137276 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.004094616 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.003175654 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.001529116 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.004104763 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.004051413 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.009066657 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.008786818 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.007700202 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.001827199 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.004083312 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.008943142 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.007068481 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.005784515 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.005662135 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.007890421 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.009445191 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.004331123 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.009788349 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.009588729 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.004174455 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.003025338 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.00444343 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.004567563 seconds)
  done (took 147.381012486 seconds)
done (took 590.854726851 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.125627263 seconds)
  done (took 9.055659813 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.20242685 seconds)
  done (took 9.237383309 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.084509654 seconds)
  done (took 14.01441886 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.040880703 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.044569537 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.01919281 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.003249707 seconds)
  done (took 30.053510141 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.310119029 seconds)
  done (took 9.240170854 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.016391029 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.99787131 seconds)
  done (took 16.017195854 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.040422627 seconds)
  done (took 8.971045537 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.020426211 seconds)
  done (took 8.965589348 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.02498126 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.018950325 seconds)
  done (took 15.995065004 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.004754487 seconds)
  done (took 8.935291152 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.707259187 seconds)
  done (took 9.733308195 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.011462638 seconds)
  done (took 8.960737268 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.088510899 seconds)
  done (took 9.01976659 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.032046112 seconds)
  done (took 8.962731859 seconds)
done (took 169.091682589 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.016682095 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.00448915 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.004838641 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.002388522 seconds)
  done (took 29.958309256 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.039133091 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.037698341 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.045840478 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.038153083 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.028175727 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.028121291 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.038221115 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.038506027 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.02866833 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.035884875 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.038510786 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.037184346 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.035544276 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.046387279 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.046339125 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.036851875 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.037164532 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.035982459 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.039764208 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.043991931 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.034811261 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.036902927 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.001690454 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.003307662 seconds)
  done (took 50.766038298 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.193636976 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.066478778 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.156999669 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.049757143 seconds)
  done (took 10.396023622 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.002060889 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.067563706 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.055266232 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.050258916 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.089120971 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.106051404 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.05616851 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.206722976 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.118706763 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.13122533 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.011134155 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.025699063 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.029348076 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.049924678 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.107287207 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.00395889 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.004911326 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.119241056 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.065995769 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.214654901 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.002600831 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.057967133 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.087705575 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.045342464 seconds)
  done (took 51.639758208 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.002631516 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.011368615 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.009820344 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.004493628 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.004051097 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.004468673 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.010126509 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.993263665 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.01779216 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.00474917 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.00272944 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.002657904 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.009991938 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.003025137 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.004198617 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.014617207 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.017191502 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.003241048 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.005723128 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.012752489 seconds)
  done (took 42.067522656 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.999997576 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.847021451 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.347775847 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.252610071 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.998768408 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.000418127 seconds)
  done (took 32.375037125 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.015153441 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 2.008944133 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.001600163 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 2.060767387 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.142806015 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.009757075 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.003229347 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 2.013853899 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 2.050726825 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 2.071855395 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.02483148 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 2.033611409 seconds)
  done (took 26.36293117 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.991136176 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.001785883 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.00049213 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.014109535 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.011962001 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.009652092 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.009002923 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.999468699 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.014237285 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.020144156 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.008949005 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.012201664 seconds)
  done (took 46.024595238 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.214467372 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.226528343 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.215990685 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.62813853 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.556314432 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.986529177 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.285078697 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.198678861 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.799705109 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.823496744 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.305057366 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.054644027 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.950056992 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.92479992 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.912907138 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.240132279 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.989387382 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.855119998 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.249263653 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.056824296 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.999020477 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.999025364 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.982601788 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.285731418 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.3282017 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.003719233 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.210876269 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.015814718 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.013857144 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.229900987 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.472339361 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.040039113 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.202034478 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.250587589 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.337452421 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.046126211 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.131650406 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.186817842 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.039955887 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.029095708 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.007004625 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.005112268 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.517669855 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.00581471 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.265677456 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.995636365 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.997920601 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.113253242 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.920299609 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.37783105 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.114494854 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.990593851 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.02684025 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.429776587 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.112736259 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.234697398 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.996383602 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.192862659 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.051301312 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.321929382 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.113976168 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.103597269 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.204629083 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.921851545 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.460992629 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129560934 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 1.994947148 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.997640981 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.695288929 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.241663359 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.074725273 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.38052869 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.767705919 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.997455991 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.999051579 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.018335405 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.082748049 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.994283653 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.289648542 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.009090162 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.92133314 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.095117355 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.400181437 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.00349817 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.994020708 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.004119422 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.841906744 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.01534026 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.093131438 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.323220387 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.332142101 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.996996436 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.986556217 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.017315689 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.000786361 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.943717141 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.561417612 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.066050939 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.9231542 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.560175263 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.453828285 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.963528807 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.448120253 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.041787238 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.282068343 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.155744324 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.405385521 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.208438363 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.248802309 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.52791456 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.003870615 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.616153186 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.082212184 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.076800867 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.000775636 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.564270946 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.159923699 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.366593032 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.124465369 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.002116403 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.924354587 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.012892733 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.203652844 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.44565024 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.055418045 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.000929305 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.005008116 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.000270504 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.006354376 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.108574026 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.019344344 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.302942402 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.079346712 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.002339392 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.938450583 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.006967549 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.296649262 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.621149094 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.060890514 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.268467752 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.270666059 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.702485727 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.020307148 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.019106673 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.272189315 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.071786232 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.06988999 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.562074985 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.130806276 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.097581658 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.996952163 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.136009492 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.008448583 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.001195504 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.33634217 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.410486643 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.426721369 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.037290944 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.008008742 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.003542021 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.143933809 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.242646518 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.127604984 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.03177644 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.004143474 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.083422605 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.224823973 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.999917835 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.002193394 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.243335968 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.245219999 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.301570064 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.08674676 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.134720117 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.074928992 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.009986603 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.213957761 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.085061933 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.650159208 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.55209979 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.214228968 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.507074363 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 3.965015686 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.663471539 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.340454567 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.39066799 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.018207001 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.452188535 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.127195308 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.627878506 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.026977713 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.526435144 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.931109236 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.005761669 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.342162949 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 3.953270334 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.573154806 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.071871527 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.051637991 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.005284821 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.001878435 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.005558988 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.007058908 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.107852156 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.069632534 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.074761453 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.926002087 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.58371562 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.038375985 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.008924581 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.000528866 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.470110804 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.930693713 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.957418652 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.00293993 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.082814485 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.757663642 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.553037535 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.007903786 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.009075255 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.602085146 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.703275904 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.92182337 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.006474444 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.935063019 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.03148327 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.334168883 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.104243197 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.307446609 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.711600465 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.082703177 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.005553398 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.011414731 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.706838187 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.014641347 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.706755275 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.302318007 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.288122138 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.462661657 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.075481948 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.215141586 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.019373227 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.005605698 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.564727412 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.032205646 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.004913324 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.206734867 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.521871926 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.411371937 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.976198892 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.095189554 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.018977788 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.284733687 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.015142123 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.40526245 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.702791959 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.026490467 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.014231563 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.249325933 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.693095445 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.012680482 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.984059923 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.002362426 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.220000507 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.211558849 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.257713405 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.31576511 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.462013857 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.023632627 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.013596452 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.034423931 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.218229272 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.009075775 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.044590585 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.454991544 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.146232202 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.438522194 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.302592691 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.485160582 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.651267478 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.2852029 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.077041966 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.021681587 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.670745117 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.153239725 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.943215175 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.128085024 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.935914582 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.839771383 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.301421996 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.993438551 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.286947145 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.995786914 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.355095182 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.313039159 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.347538551 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.066724998 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.026876266 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.01034009 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.066655477 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.015499776 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.13258968 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.123516194 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.015310202 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.471168371 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.047607804 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.057056401 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.016808356 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.56972267 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.030792573 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.01485714 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.706013181 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.659870173 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.130875653 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.084861304 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.842226282 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.485000072 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.053271177 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.885224032 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.664517145 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.287506421 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.071816478 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.459719026 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.047676093 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.416262614 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.014319432 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.224210221 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.014894793 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.520414396 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.049346322 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.284134532 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.966310837 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.224190324 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.211717038 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.033958042 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.018589231 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.938606222 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.116565122 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.889419274 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.992358691 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.014338512 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.033374117 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.487389296 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.148535735 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.526471851 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.846043082 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.0160852 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.452900019 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.425419419 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.576836174 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.044717179 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.015611066 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.41955018 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.794031086 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.415493746 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.31624787 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.021368978 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.676916833 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.228823295 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.138771761 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.932380465 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.491118233 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.600028028 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.714743399 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.026899857 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.217271615 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.426595044 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.226509412 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.048107781 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.088029224 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.419595312 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.293381672 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.719557497 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.941795704 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.015663463 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.408736389 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.029238038 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.108769338 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.256221043 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.327965957 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.504398696 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.414188096 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.052664192 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.524362459 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.470277149 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.426959901 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.227673198 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.379492898 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.337871422 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.898842517 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.428076533 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.230718905 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.108362949 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.292247889 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.882018246 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.726373511 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.259438036 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.020861335 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.945956301 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.222922924 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.026419521 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.359753051 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.539272667 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.046962069 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.36583688 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.499639102 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.551577755 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.108341999 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.024476183 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.981631139 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.037793983 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.037204415 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.018625661 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.493417358 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.307564508 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.029902707 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.95709776 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.691310378 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.944979267 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.230195096 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.101924031 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.049627765 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.575128894 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.368749394 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.13302071 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.317454445 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.15824309 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.049725699 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.944805466 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.803141731 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 3.964435362 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.155460749 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.443358257 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.034825157 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.02292212 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.222614564 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.94864755 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.064142743 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.636511404 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.219938237 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.599647756 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.300696905 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.150422993 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.261360037 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.320563383 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.019824903 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.984805283 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2934976 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.948941965 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.537560532 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.714411388 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.724242978 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.091999551 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.019640308 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.02181862 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.293520228 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.429447725 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.124574908 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.496888197 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.04990195 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.043712847 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.421910703 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.121503226 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.022255629 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.025598228 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.389829482 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.245577729 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.035918583 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.047382931 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.2326441 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.095977832 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.216374583 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.094572867 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.536524696 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.025057866 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.027631106 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.057656858 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.967320795 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.98619579 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.803534393 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.081350921 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.017458577 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.300812385 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.646290492 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.223259963 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.416763913 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.89266742 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.095297888 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.055750005 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.024621289 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.020321265 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.41828742 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.334244089 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.021403416 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.301140716 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.073617748 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.024591669 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.023560373 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.986944811 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.022868959 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.778058055 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.906393473 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.751476703 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.414533645 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.029319575 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.043164103 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.025506142 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.948618696 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.050546055 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.056129952 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.004472219 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.037153446 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.403810342 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.161942771 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.1191608 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.023268866 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.022788058 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.026659097 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.234960443 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.535427799 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.036718635 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.721890062 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.226454938 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.025846323 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.497468159 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.481803645 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.156149744 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.061016512 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.071165934 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.26211608 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.559661479 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.09079279 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.998758624 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.25015167 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.021823958 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.294279583 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.295268943 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.024039239 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.235964339 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.374022297 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.307564895 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.053728134 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.582819424 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.094235642 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.084936697 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.96365279 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.034306357 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.028234514 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.303021587 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.086666534 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.023449174 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.034710509 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.578578642 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.839862649 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.494210316 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.184061318 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.427487499 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.943878931 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.782583822 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.02542002 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 3.951788501 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.028818102 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.040540337 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.030706256 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.034090998 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.796573841 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.748633274 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.233902534 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.294620766 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.954197522 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.227282003 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.588419281 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.951709437 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.994997272 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.968684372 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.289978726 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.951271714 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.028179012 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.025697267 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.124752429 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.61810374 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.289753097 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.027009769 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.973941877 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.031297184 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.027816438 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.025347681 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.111642557 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.028468363 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.141809079 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.30474296 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.486976086 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.139928243 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.664856475 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.801515529 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.968951761 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.072510785 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.585875121 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.59566141 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.132881049 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.821265112 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.78494593 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.973204717 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.029508289 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.045420994 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.262273667 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.035034635 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.030619222 seconds)
  done (took 2247.545077603 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.044853918 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.062570616 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.043126987 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.041474376 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.044630874 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.062336995 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.053656051 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.031648358 seconds)
  done (took 58.332524617 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 7.029653908 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.075652623 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 2.038635321 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.029415292 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 2.03365422 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 7.02994175 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.243012245 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 7.051959326 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.034788983 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 2.035124517 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 7.031825209 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.028184814 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 2.360120735 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 2.058693553 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 7.033758235 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 7.032002565 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 2.032498837 seconds)
  done (took 79.13725676 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.032657379 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.097851004 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.086996753 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.033028383 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.655643561 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.034382324 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.821682212 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.052889266 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.034208654 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.383277511 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.327086581 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.052994808 seconds)
  done (took 91.563005795 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 2.036426925 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 2.03276282 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.035090421 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.031456863 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.03138404 seconds)
  done (took 12.119769138 seconds)
done (took 2780.317420037 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.275911431 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.088664857 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.131885364 seconds)
  done (took 6.17398741 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.179195227 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.226202269 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.337123306 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.35927841 seconds)
  done (took 11.062715603 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.31975139 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.396323706 seconds)
  done (took 6.667883408 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.388994979 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.044200304 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.416095398 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.030410024 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.034065925 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.032883507 seconds)
  done (took 23.055720367 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.034118174 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.029557129 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.033663547 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.036803817 seconds)
  done (took 10.08521022 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.032272245 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.711687229 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.034987121 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.047229246 seconds)
  done (took 21.780477475 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.164627004 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.09445677 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.799524135 seconds)
  done (took 9.016459781 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.660266223 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.492503554 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.649597972 seconds)
  done (took 9.759053965 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.868940325 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.851616762 seconds)
  done (took 7.675844073 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.173625258 seconds)
  done (took 4.128164514 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.894151029 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.34630855 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.512276389 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.572021075 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.632314932 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.260681803 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.332601179 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.285365159 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.431522184 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.427867972 seconds)
  done (took 26.649882302 seconds)
done (took 152.131839058 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.471964303 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.049602655 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.235653085 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.407679358 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.277042331 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.243844051 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.340039136 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.389619033 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.069731429 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.05564353 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.401443125 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.267097506 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.290844121 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.047347093 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.293611028 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.048024623 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.26939324 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.482248817 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.076711441 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.290227205 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.340164987 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.044637525 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.243540348 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.05386551 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.271560526 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.198033656 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.653195833 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.049135571 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.22885618 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.666721314 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.1985015 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.444549349 seconds)
  done (took 174.359082016 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.034178898 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.035666329 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.040474568 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.036168339 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.310956055 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.040001059 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.036214553 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.034763643 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.238423676 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.234193838 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.035482597 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.291312328 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.037303067 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.036910378 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.036969613 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.035503418 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.359868991 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.038218646 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.036984723 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.036724508 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.036224391 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.168600353 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.051222526 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.177695833 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.353787716 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.036733231 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.038350177 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.037058411 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.02253381 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.036084678 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.037266234 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.037481555 seconds)
  done (took 212.978603094 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.03843345 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.036530424 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.037921788 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.03750808 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.025829681 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.035678942 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.035465092 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.036965757 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.807062267 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.810354596 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.037297762 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.036756353 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.040970348 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.037712745 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.037637444 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.038669442 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.036720972 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.037905062 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.037507706 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.037532253 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.038653583 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.731543247 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.037903289 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.773098433 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.038548122 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.039617454 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.037889253 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.039125096 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.037679581 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.03990573 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.038164342 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.039578551 seconds)
  done (took 226.133581857 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.27670167 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.038772085 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.045081218 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.057378892 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.042162796 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.039834976 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.045525958 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.287427495 seconds)
  done (took 20.794279064 seconds)
done (took 636.228708504 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.377430442 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.75852536 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.171192764 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.061989572 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.280031294 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.105869742 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.055504086 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.111194149 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.898778587 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.128849736 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.469221863 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.06341494 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.852302949 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.081679668 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.175027131 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.112329438 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.42339 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.758511 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.193996705 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.710761018 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.211357293 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.014570658 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.13466622 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.936512528 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.499191689 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.045259494 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.075970018 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.428259132 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.062223554 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.211500769 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.664065958 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.321267114 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.073433727 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.060169778 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.111901104 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.09068808 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.264477879 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.068760667 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.177611681 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.801049465 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.701818715 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.777358316 seconds)
  done (took 107.480654638 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.051502015 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.04536046 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.050036324 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.045406387 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.053203912 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.046638175 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.045233858 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.045633028 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.04579748 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.046212878 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.045701711 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.055575795 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.047299565 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.054894453 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.047755579 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.047360642 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.04432307 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.055609515 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.048246654 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.047047258 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.046386015 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.046493448 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.047590885 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.046213557 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.047119585 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.047866809 seconds)
  done (took 55.225085516 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.044179902 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.205913334 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.273196575 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.059119689 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.043529879 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.046332781 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.068927382 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.049129905 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.045968788 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.046023798 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.156659179 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.047061912 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.057351279 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.275711409 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.058651296 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.044342563 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.043740151 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.043911054 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.213477617 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.059395625 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.072715783 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.050059929 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.072676933 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.052810601 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.047551984 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.041017926 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.04678977 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.475358239 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.053397476 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.158960185 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.085558198 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.075069163 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.395842322 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.285349509 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.095926541 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.051535906 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.045788127 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.167534719 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.050842476 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.046196012 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.07232477 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.054081493 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.282562395 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.575885668 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.055842076 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.045403838 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.475008107 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.173747939 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.085499361 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.056828566 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.287933628 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.06151719 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.047144203 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.047382204 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.082113057 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.059504428 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.047049706 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.3418392 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.059219772 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.073110029 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.053302763 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.04982373 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.220336101 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.053584726 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.208529787 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.053365347 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.052834772 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.048166681 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.28084526 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.055210786 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.594934293 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.058066816 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.047727276 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.161357476 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.211431143 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.499317677 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.056317219 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.22368197 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.412446747 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.080320308 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.057855624 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.46260411 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.085413694 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.055581489 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.048570941 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.049802189 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.048028054 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.094465388 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.073985577 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.510880354 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.590240395 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.359273934 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.082564285 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.060819429 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.049926715 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.342636795 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.056330512 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.049680379 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.274424889 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.603413989 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.058487201 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.056241286 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.567638664 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.061062976 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.077099756 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.059797578 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.293261682 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.062108653 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.094606343 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.049219028 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.055566799 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.05119709 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.07795558 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.058262955 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.049700609 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.563984217 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.180461431 seconds)
  done (took 252.998566116 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.049934 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.048348817 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.048653147 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.047009193 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.048647721 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.049892466 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.05033182 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.049463667 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.049575976 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.047950787 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.048591636 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.050388903 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.052593756 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.054873462 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.632455255 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.070286064 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.555874515 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.067345771 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.067186314 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.069666706 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.674454581 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.071872518 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.06704811 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.072215796 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.069380501 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.067420466 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.074039262 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.105773354 seconds)
  done (took 173.33606969 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.0699401 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.147995704 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.0838034 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.117224382 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.08289986 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.069425363 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.252193984 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.092873222 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.077380679 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.069147455 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.070822728 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.099405896 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.077680042 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.169888364 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.107052532 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.178766831 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.177435377 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.07917454 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.069101395 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.070813565 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.117875935 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.082203212 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.101640126 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.134427055 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.081976271 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.129500521 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.082751958 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.070955992 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.071870926 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.206811781 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.090975919 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.103246137 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.105745352 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.090335257 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.188830494 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.189830977 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.17805616 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.178154308 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.078250487 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.073979324 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.072961578 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.07290212 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.128684478 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.08473029 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.073133586 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.189003646 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.092019922 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.072607088 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.073522595 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.073330039 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.085685047 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.091382344 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.110830641 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.196650602 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.120793172 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.099141333 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.171711753 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.189490065 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.077472511 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.170454472 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.079936446 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.187998304 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.092953091 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.075662204 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.075280287 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.077840603 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.123301929 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.184560245 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.180817543 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.07995509 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.170379565 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.132687544 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.087531898 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.074743149 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.074823972 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.130033171 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.185356877 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.132910751 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.135091366 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.103766413 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.084575835 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.072824515 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.077654992 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.101545821 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.082647851 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.191477908 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.192856221 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.084203556 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.077206289 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.077061527 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.076732234 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.101604296 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.141057752 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.115337865 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.18177469 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.113974553 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.114049989 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.084060774 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.090912999 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.083999043 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.109520589 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.083866633 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.089380307 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.355348376 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.108982123 seconds)
  done (took 224.036161102 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.458135413 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.121830223 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.145053626 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.341957712 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.458756262 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.940070339 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.11558675 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.126161251 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.136725471 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.255587759 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.184414004 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.166143917 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.117242407 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.098801492 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.121201565 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.138281953 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.151497526 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.429474815 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.31948041 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.596644372 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.118250048 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.395678812 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.441685736 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.479839592 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.166339186 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.485806435 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.734479458 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.223953741 seconds)
  done (took 68.47051439 seconds)
done (took 883.505574255 seconds)
SAVING RESULT...
DONE!

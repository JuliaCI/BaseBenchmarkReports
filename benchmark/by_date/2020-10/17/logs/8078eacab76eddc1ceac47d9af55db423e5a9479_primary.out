cset: moving following pidspec: 5428
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.874327989 seconds)
loading group "shootout"... done (took 1.106143141 seconds)
loading group "string"... done (took 0.660675676 seconds)
loading group "linalg"... done (took 8.772305191 seconds)
loading group "parallel"... done (took 0.169209241 seconds)
loading group "find"... done (took 2.898876205 seconds)
loading group "tuple"... done (took 2.254204936 seconds)
loading group "union"... done (took 15.030697019 seconds)
loading group "dates"... done (took 1.486011817 seconds)
loading group "micro"... done (took 0.222663175 seconds)
loading group "simd"... done (took 4.82642618 seconds)
loading group "io"... done (took 1.069988445 seconds)
loading group "random"... done (took 9.482654627 seconds)
loading group "problem"... done (took 1.502504183 seconds)
loading group "array"... done (took 25.229235233 seconds)
loading group "misc"... done (took 1.903603495 seconds)
loading group "scalar"... done (took 43.750471894 seconds)
loading group "sort"... done (took 3.362170444 seconds)
loading group "sparse"... done (took 12.905874409 seconds)
loading group "collection"... done (took 18.767274765 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.530751756 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.127009488 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.131704335 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.124439113 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.192544179 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.12396988 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.134501483 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087712997 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.842537909 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.144521194 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115776126 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.442324242 seconds)
done (took 5.425922937 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.169770055 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.092653492 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082734425 seconds)
  done (took 1.384678069 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071566938 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061019898 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068248646 seconds)
  done (took 1.410510174 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066162084 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.136220046 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067311951 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.069006851 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.068860285 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067980883 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067763288 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.068065804 seconds)
  done (took 1.760349902 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072805679 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068367471 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.06730976 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.06958903 seconds)
  done (took 1.49147295 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.068798977 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122876365 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.066703648 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066231736 seconds)
  done (took 1.535800214 seconds)
done (took 9.046403615 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.244211765 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.102235663 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.293058364 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.446964861 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.620860834 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.095888438 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.077076652 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072925653 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.130386398 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.341929917 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.107663484 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.18712703 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.09373964 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.170668184 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.044003533 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.121795199 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.086913396 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.124058855 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.09560409 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.132948408 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.401865283 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.080313767 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.075360144 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.072876095 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069779794 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.66069919 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.672249133 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.125252969 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086991145 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.163441003 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.118227675 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.638671956 seconds)
  done (took 11.001665558 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.092958066 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.093878862 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.070793965 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.126433592 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.09385148 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.071645821 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.078943611 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069804491 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.090705174 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.12628734 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090098179 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.100750411 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.068829408 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071156006 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.076276048 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.205279334 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.083040339 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.083524099 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.069644414 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.082676865 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108192264 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.077858191 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080370503 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080337387 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132005595 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.173362984 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.100565651 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099328871 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068240619 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.081130968 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.116645779 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128296313 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066846043 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066808242 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.122007441 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097510423 seconds)
  done (took 4.710250661 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.897559206 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.09597781 seconds)
    (2/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.100079308 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.102771587 seconds)
    (4/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.658714149 seconds)
    (5/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.068562854 seconds)
    (6/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.154747143 seconds)
    (7/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.245524702 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075975045 seconds)
    (9/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.290807427 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.154512146 seconds)
    (11/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.115221189 seconds)
    (12/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.151273366 seconds)
    (13/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.121354418 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072038597 seconds)
    (15/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 1.1613649 seconds)
    (16/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.121603243 seconds)
    (17/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.554144685 seconds)
    (18/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070653262 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068794607 seconds)
    (20/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.068141166 seconds)
    (21/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.069937465 seconds)
    (22/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069022575 seconds)
    (23/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.06531421 seconds)
    (24/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.094354699 seconds)
    (25/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.071423314 seconds)
    (26/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0981267 seconds)
    (27/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.090800426 seconds)
    (28/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.161974191 seconds)
    (29/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.97931818 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.311457278 seconds)
    (31/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070164002 seconds)
    (32/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.168178023 seconds)
    (33/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.089065235 seconds)
    (34/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.362225327 seconds)
    (35/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072326677 seconds)
    (36/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.085406313 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.480980895 seconds)
    (38/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.129417241 seconds)
    (39/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067928434 seconds)
    (40/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.168955463 seconds)
    (41/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.120470669 seconds)
    (42/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.066816351 seconds)
    (43/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.12337694 seconds)
    (44/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080913355 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.071174725 seconds)
    (46/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.07140747 seconds)
    (47/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.495139058 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071656545 seconds)
    (49/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07437015 seconds)
    (50/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081554043 seconds)
    (51/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.104045339 seconds)
    (52/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.070311615 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067898718 seconds)
    (54/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.175750446 seconds)
    (55/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.067705808 seconds)
    (56/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068288928 seconds)
    (57/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.069407215 seconds)
    (58/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.066136899 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.151710852 seconds)
    (60/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.067178783 seconds)
    (61/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.144809741 seconds)
    (62/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.066197655 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070487031 seconds)
    (64/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.105750054 seconds)
    (65/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071268316 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088354719 seconds)
    (67/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.097954185 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.345197057 seconds)
    (69/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.019203815 seconds)
    (70/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068663154 seconds)
    (71/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.993795246 seconds)
    (72/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.078797333 seconds)
    (73/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.068283257 seconds)
    (74/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.072333359 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.071303017 seconds)
    (76/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.069469686 seconds)
    (77/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06883054 seconds)
    (78/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.074223247 seconds)
    (79/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.073077311 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070391575 seconds)
    (81/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.110638098 seconds)
    (82/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.068820785 seconds)
    (83/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.086541257 seconds)
    (84/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.065823411 seconds)
    (85/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071621448 seconds)
    (86/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068230694 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.074084329 seconds)
    (88/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098732673 seconds)
    (89/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.067722269 seconds)
    (90/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.562228813 seconds)
    (91/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099459646 seconds)
    (92/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068314235 seconds)
    (93/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.193448908 seconds)
    (94/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106600111 seconds)
    (95/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.070351167 seconds)
    (96/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.073501105 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069269165 seconds)
    (98/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069326217 seconds)
    (99/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067957158 seconds)
    (100/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069026497 seconds)
    (101/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07117063 seconds)
    (102/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.099441534 seconds)
    (103/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.06571802 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071837463 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114969728 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.025245747 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.070204758 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068715223 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.074519127 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071260215 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071823498 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069381023 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.074316804 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070218262 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066084835 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.109972131 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.124595842 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068564387 seconds)
  done (took 23.050335476 seconds)
done (took 40.874056168 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.310407551 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.080695211 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.080625427 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.080679838 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.082428711 seconds)
  done (took 1.896333925 seconds)
done (took 3.193776453 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.134243019 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.083232466 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066127732 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.10325075 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070452559 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.103825367 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.11044666 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.1059544 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070311296 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.070161086 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.070044428 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.10431045 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.106534157 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.070548331 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.100064089 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.105367663 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.070460158 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.065454594 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.070281107 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.070242975 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.070100573 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.065838011 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069882419 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070159709 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101460183 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.070631391 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.069386879 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.101303916 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.070510699 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.100723948 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.071032696 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.070481013 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.070629514 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.102265729 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.070544097 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.101634421 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065632889 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.07060647 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.070470995 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.070383984 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.070043633 seconds)
  done (took 4.676366277 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071213209 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083995987 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084872871 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063119241 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073455612 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084050046 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063191327 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083527433 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090192984 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083732333 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084165756 seconds)
  done (took 2.165826437 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07034162 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085218013 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.086328818 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063734507 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075215934 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084788438 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063930571 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085694387 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088168302 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085423983 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085177278 seconds)
  done (took 2.154858455 seconds)
done (took 10.270282854 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096769079 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.070165245 seconds)
  done (took 1.430423692 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.650363475 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.237223017 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.068675677 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.087799574 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.197403751 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093985266 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.202528882 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072699666 seconds)
  done (took 8.06427977 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.105244153 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069181161 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071088706 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.06870849 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.06979186 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069797434 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069254894 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.069970714 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069838107 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069495296 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.070527144 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.06942395 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.07082177 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069602308 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071384478 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069330264 seconds)
  done (took 2.525499268 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.101876577 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.100385678 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.07376101 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.074160967 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073248124 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072171008 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074499127 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.073991269 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.071357027 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.073306299 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.075018009 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.073886938 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.073079565 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.064221141 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.074736165 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.075733216 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.071434704 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.074128643 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.074306645 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.07595952 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.074131328 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.064245698 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.073802461 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.074873996 seconds)
  done (took 3.204629717 seconds)
done (took 16.503508152 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.174371374 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074239689 seconds)
  done (took 1.523224808 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068249029 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068802601 seconds)
  done (took 1.427629208 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073081662 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.060742913 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078386775 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070543139 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.06174974 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061512787 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.078738906 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062941478 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062757784 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063143535 seconds)
  done (took 1.963684785 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063261177 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068768424 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066774904 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064909976 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.066690061 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062706244 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.066235505 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064185985 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070359651 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063176715 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066912864 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083953627 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.06735006 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084887557 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.066464158 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.067975614 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068879992 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.066203656 seconds)
  done (took 2.523698574 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061708854 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062187365 seconds)
  done (took 1.424197935 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064371559 seconds)
    (2/7) benchmarking "second"...
    done (took 0.061525309 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064344662 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064817235 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062236743 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.06183213 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062056421 seconds)
  done (took 1.733816579 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.419050307 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.124065141 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.347143568 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.073191998 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.078859984 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.255173571 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065163418 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070592424 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069989575 seconds)
  done (took 2.84034215 seconds)
done (took 14.737832889 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082110784 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.185140696 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.093133317 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.409979788 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.094106254 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.068311956 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113910422 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.170144538 seconds)
done (took 2.531020657 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.214410171 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.173236239 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.375533957 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.126653516 seconds)
  done (took 2.976891338 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.334228616 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.080135481 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077854236 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068789066 seconds)
  done (took 1.872477381 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065483046 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072676398 seconds)
  done (took 1.444744099 seconds)
done (took 7.819961913 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.094932221 seconds)
    (2/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065014959 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064761857 seconds)
    (4/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.064402377 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.065460144 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064485477 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.065440334 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.065706403 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.065012745 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.075723238 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.064612424 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.0647816 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064597112 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065284264 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064864194 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065239334 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065386734 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065131437 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065526363 seconds)
    (20/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.064937929 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064734344 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.067256729 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.065606483 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.070830982 seconds)
  done (took 2.943495533 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.07903909 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066155781 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067810764 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068419317 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.068881978 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068650466 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067854308 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.066900957 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.068596503 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.066769835 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067807894 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.068469917 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.066231456 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.068591524 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066866717 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.068842675 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.068485316 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067241016 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066886333 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069045721 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068603965 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067070582 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068621834 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068252721 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.068772755 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069007532 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067178706 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067664585 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069397921 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.069278865 seconds)
  done (took 3.371276098 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066311465 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061140201 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.06231151 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.071853237 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061288225 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061929599 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062441717 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.06129393 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062127193 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.062895319 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061869435 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061706636 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062241437 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.06149534 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061833032 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062059463 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066492702 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081247615 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061742784 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061548076 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066146712 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061645203 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061341876 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062013406 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.06213938 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.06230971 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061401402 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062027976 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061659328 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062127784 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061729753 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.065311488 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066617789 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061641284 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071488288 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066488925 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.061649662 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.06564586 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062796541 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061503458 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061645569 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061671318 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061494924 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061656461 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072160103 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062128667 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063475802 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062575062 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062026127 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061208451 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.061561927 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.063290234 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067128293 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062748126 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061114644 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062675126 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.06117222 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062168988 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061549302 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060964813 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061406641 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.068502207 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063283353 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062157492 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.08123913 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063340831 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072206691 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061514892 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062786101 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065243201 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062132843 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.0792095 seconds)
  done (took 5.918407135 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.081308351 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.086356972 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.06648215 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066337677 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062790476 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062187682 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.069667764 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062245771 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066893674 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.082716617 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062656033 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066449954 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066614383 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066443419 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062042913 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.066849576 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.07028899 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062194098 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061895048 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066129851 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062142956 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.069359858 seconds)
  done (took 2.822545356 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.134454257 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067300144 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.107904651 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.076391444 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.07020275 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.076642477 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067751164 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067970804 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067334633 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068411639 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068676673 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067757589 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069740647 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068757059 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068318074 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067806478 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067512427 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068059028 seconds)
  done (took 2.673602278 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076382236 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066337813 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.087835562 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067283249 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067769713 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067470638 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071497685 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07154798 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.06707156 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067462376 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.071293895 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067067491 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067260863 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067340654 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066732139 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067678616 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066800861 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067626092 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.07186038 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070852566 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070914394 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071846519 seconds)
  done (took 2.86680032 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076734549 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06626752 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.081593153 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068019779 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061553229 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061888709 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.067070319 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066827963 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067114898 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.06608802 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066436441 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062182764 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068054055 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066504941 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067994413 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066175694 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066196697 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066523604 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066187445 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.06203689 seconds)
  done (took 2.671260212 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086381255 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064348272 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064365214 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.08365818 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064700005 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.06471254 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.08448449 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.064846365 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064567693 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086642373 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064633381 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06460497 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.083954538 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.083838572 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065113645 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.084888474 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.08402535 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084234979 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064817464 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064734468 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086314697 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065052601 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.083872854 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064413335 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.064622669 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065000944 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06496436 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.084227776 seconds)
  done (took 3.383413554 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064436251 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06390611 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064938955 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065570474 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065171577 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065907833 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065330576 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.065744466 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065224881 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06573387 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065315639 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065368348 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065384251 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065106802 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065552415 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064607925 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064806173 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065399446 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065334672 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065780341 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064593023 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064732334 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064940486 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065190636 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065219893 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064815638 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065380861 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065221499 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06438149 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064989428 seconds)
  done (took 3.29086295 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073538667 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072154643 seconds)
  done (took 1.48182969 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062101522 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077914532 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061625937 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073929242 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070654726 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068761646 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071208425 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070196157 seconds)
  done (took 1.888658853 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067444332 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090228708 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.063244133 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063626088 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.066519524 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.13381181 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.076737026 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.07550737 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078000382 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066233161 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.06398389 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076223016 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062960783 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076950887 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064904668 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072248094 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070869557 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081125984 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076404172 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.06224544 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075661428 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064438021 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062089266 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064701737 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063711962 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070203266 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079632187 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076476618 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072037579 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061711361 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082228135 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062310747 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.0632196 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072295612 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.066830812 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062944025 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100502312 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063439175 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068003215 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062084425 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075250026 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083671234 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076965624 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.080738203 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064547261 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.064593046 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062303542 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.064634244 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066372502 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.07213541 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061979228 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069983105 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.061778403 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064341599 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072997256 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063047896 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068059695 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072291443 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076795658 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072882376 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071713646 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078748163 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071625246 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.070860789 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063794086 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082649398 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064501115 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075965996 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07783837 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.063950965 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076508606 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062215616 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061447093 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062156776 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.096530097 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064514006 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.063647718 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062837319 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062904471 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064744635 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072084039 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067839949 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070301109 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066275468 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078954199 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072007283 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062734974 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.0695444 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080403973 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.06573624 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.063150563 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079531295 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066056184 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.062247255 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080280012 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072628427 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063958954 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063724799 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.066067803 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076219049 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063882565 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060952477 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071084806 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063939135 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.064973366 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.066562747 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070062253 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.062446995 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.072591095 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.067030416 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063673522 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.06055479 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.065793579 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.063028093 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060882125 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07146463 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.062400447 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076408368 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068327415 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076231826 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076394453 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072433571 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077765572 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061457045 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060061811 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.07923766 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.070703028 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.063000512 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.078705547 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.060270667 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.071504653 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.060749161 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.062664956 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.070211351 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060787812 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063387713 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060923158 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065866566 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062378601 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062621516 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.066586173 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.07001571 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.07334433 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062524652 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069974837 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061599355 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076986069 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071325921 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065845995 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064368844 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061984206 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073197932 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.0677065 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.071465428 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061218913 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062518814 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.064248191 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.07184876 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07103314 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063444824 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067850061 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065533701 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062421041 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.062085174 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062893516 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065355314 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064936464 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062773365 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068863394 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070281551 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075019395 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067627645 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070830212 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.06100949 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061356778 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063206244 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061305068 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065999389 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.071189142 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077124738 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073128731 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082372058 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061812046 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071450285 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062807049 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077911591 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.075116641 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062729908 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065498374 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060432155 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062502561 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070659175 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071193757 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074464034 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076528207 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066564741 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066478995 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060843016 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076795445 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061914159 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070003555 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071587007 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.06524492 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060414671 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.061002985 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.068342179 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.064453538 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060521408 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077344615 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067124825 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060317972 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075444357 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.06167801 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072401442 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061059541 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064878437 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066466559 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063526663 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070528089 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076422698 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059989667 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062384794 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076002173 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062215781 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06070501 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067282383 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.075225685 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063990389 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069785663 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07007308 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069317098 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.0632795 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068717217 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061515995 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.069083326 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061344962 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.07115062 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.059838414 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076048348 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.058438367 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074106796 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060002804 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069895597 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059973789 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068735175 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.060482984 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075552475 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061041152 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059692621 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070213769 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.058769688 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068068995 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058696489 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064174602 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065542519 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.0683201 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.060594987 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068018554 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.306440299 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.073055569 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.070511526 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.073793827 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.075474031 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.070022348 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.064796609 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.074071583 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.077529123 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.0746072 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.06751771 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.06797033 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.066828049 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.075878444 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.067358988 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.067158462 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074268097 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.070293463 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.070932282 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065984685 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.066905079 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.066983295 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073387094 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074598977 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083346202 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073450454 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.073075313 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.073962231 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.064051924 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.080702194 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.064781249 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071803527 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.063339452 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.07157886 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.074474909 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.064391026 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083249863 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064904339 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.072171156 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076636366 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072487541 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.067141433 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081862421 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066783541 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.072108974 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.071585851 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067685368 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069514607 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.065090146 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071958276 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072966386 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.074047538 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.06443213 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070497035 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071891312 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065427256 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070957684 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.066024678 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.07036227 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063995071 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.061099567 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066084354 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073026772 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067911923 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.06835082 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063829498 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.062366061 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063507111 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070577336 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.068146485 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072242672 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07925842 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061910558 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064842385 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062802107 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.0669516 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081973362 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073616937 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071964209 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067795164 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062400945 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.065369819 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.065436822 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.064291043 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.067437251 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.06256577 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.063069855 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07411618 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.065545796 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067688989 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063631519 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064385814 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.072989844 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068247571 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.064058379 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.070451464 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063334655 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068262857 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.062434644 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.065127789 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067877395 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062584074 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066878729 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.074007732 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.080544108 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069698376 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.072228658 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.06441104 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.071234517 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078820062 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070293754 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064623717 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.07296281 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.062464099 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081469081 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.072608986 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071284637 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073622338 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.064261028 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.079738858 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.067552881 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.072813521 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078105662 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063852277 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.069268149 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.062409074 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078977576 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.06745972 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.062231244 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.070963726 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070489643 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.06846179 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07439917 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.209723057 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.071948978 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068407539 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066903243 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.065032988 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.064841476 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072218846 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.079488878 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.06376134 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067070023 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071215608 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.071742155 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067163736 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075333588 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.071798918 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064330688 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064868722 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.06692587 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.064251241 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075644838 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063947754 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067967804 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.068046826 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.062881605 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069430903 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079891925 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072881164 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072908936 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062564468 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061846388 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.080682942 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066058449 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066689411 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070905869 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072241714 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075288674 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.07202878 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.080372074 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.064080392 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068382902 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075172653 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064019102 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062945193 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066448078 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064507577 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072354151 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073225863 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.07110643 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06524576 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.070262973 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076939597 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064433115 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067675036 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.067962256 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.064146674 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073297227 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070899984 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071612563 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064898457 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062815118 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066599091 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.07181511 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070617256 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.07195336 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064155861 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.069706689 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.077545298 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070976073 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066279757 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062652999 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066636046 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072565773 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.06752237 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062538227 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067217655 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066520602 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070115681 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072466668 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067368266 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.063034417 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080253749 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071304216 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072341548 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.068180586 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.06525844 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063572914 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.06292518 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074296797 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.062415196 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064366199 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067370405 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.064685691 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080715 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071466104 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079044848 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063963121 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067136627 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062682146 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072678853 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067675691 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063023535 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073624828 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.06231636 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078719098 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.074925161 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068682967 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.062452823 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.089049317 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.071350931 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.078074322 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072935235 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.071963068 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066838599 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072330605 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064436511 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073866091 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.063255075 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061535157 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.073297869 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071944825 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075124183 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.062389964 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.072844209 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.064986948 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.071128755 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.070684198 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.064593465 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064168112 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.06434658 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071906129 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.06671675 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071583236 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.215116137 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079262461 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064783546 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.075074739 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.072710424 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.075023328 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.077118908 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075926055 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071641247 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.063795069 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070743199 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071196272 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.06448133 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068033196 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.066875205 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085158444 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.065632659 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.0646975 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077812361 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070392551 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.063218012 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069742402 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.067528391 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.073606497 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063656428 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073448087 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067042886 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.06389079 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067159537 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067358587 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.06199211 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062604288 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.06257428 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073104409 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067371115 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063371988 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081905372 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064548018 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.072271907 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074533661 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.06929075 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.065130656 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.06220303 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.06432447 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.076067927 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079667092 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066660041 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071624866 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064699153 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072275077 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.062191478 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071759117 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.070870015 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071266734 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062674502 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063109868 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078063277 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078571669 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.06770108 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072123696 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072195877 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064289683 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08504391 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.072002108 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064076004 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.073929243 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065277839 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062286902 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.062382083 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064548012 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.074683151 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.06280357 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.065285868 seconds)
  done (took 43.008085587 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.09991321 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064086521 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063533021 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063377508 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074412749 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064493979 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063523007 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06399601 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.064152437 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.066128336 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.063252308 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063501409 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074542141 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076942525 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073556729 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.067567223 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063105374 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064093481 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063302013 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064334697 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073747573 seconds)
  done (took 2.946812093 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.067753284 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.077738508 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.074644924 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.079730926 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071580734 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.068209982 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.074832052 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067557847 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.075309322 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073648982 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.075104509 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067556789 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.072850776 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.073135531 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073464619 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067603442 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.07767134 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071636518 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.067520977 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.074673125 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067668126 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.075410499 seconds)
  done (took 3.071840283 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063293414 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.06373224 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071997841 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.06268971 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062678242 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066440446 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062986495 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.067039675 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.0670186 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.067662509 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.072681215 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063631945 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062306014 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068311028 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062397284 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063595552 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.107001206 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063940917 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.064502471 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062797147 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.0658552 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.072341535 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062835687 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062703285 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.06696114 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.066555354 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062749623 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065514104 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.06382888 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.067332429 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.064203627 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.062920653 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.072426869 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.071579629 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.067906956 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.067292092 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064497833 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063729581 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.063125216 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062779503 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.071686147 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.064185568 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.06388572 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.06447699 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.072598859 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062804315 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062287117 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.072670844 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062646973 seconds)
  done (took 4.741243318 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071397116 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.116727684 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.069234045 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.097227172 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.076185446 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.069198403 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.069179316 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.098256424 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.063712733 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064916809 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.07711666 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.077916504 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066397311 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.067803851 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.070204129 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065994032 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06675763 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064805001 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.068657366 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065678559 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.06850402 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.070255724 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.07548651 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.076175304 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066810628 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064962137 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065265309 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.06753206 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.076130654 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.069097658 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.067902707 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.068127473 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.076597478 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.069075059 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065548635 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065698727 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.076834893 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.066675402 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.065444853 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.064435384 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065488481 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067027142 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.069961968 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077223172 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065833294 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.070279523 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065811245 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.064295372 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076241184 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065651474 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.069737368 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077737577 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066987474 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.066521958 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067249022 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076668544 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065963746 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.065223181 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.066418296 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.07645659 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.064272998 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.067224049 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077373115 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065542591 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.06944323 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077818365 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.07107138 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066859144 seconds)
  done (took 6.444281002 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.07190696 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.098795454 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07407095 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074882429 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073816937 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.073945756 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.073752599 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.07373092 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073709136 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074964943 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074061328 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.114583546 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.070806072 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078375886 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074318612 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.073835256 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.073590782 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073967152 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.07372288 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073635591 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.074306688 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07436967 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073885218 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074467152 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076532614 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.070121737 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073495596 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073889258 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074413352 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073567453 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.076540589 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.07353855 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073781429 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074181837 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.076409683 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.074245802 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067110082 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073824305 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.073672765 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.073763147 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069979558 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074351646 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073924831 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.070159504 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074420902 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074322923 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074640404 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076001663 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.080648191 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07433114 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.073945131 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074441538 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073631242 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.074379204 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074673476 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.080932101 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074481128 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075032255 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074371742 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074673772 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.077397236 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080969114 seconds)
  done (took 6.188730543 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074655474 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068126674 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.082597045 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.063330896 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063120753 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072940511 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062918155 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.063020693 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070267507 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.070436495 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.071774736 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072987959 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074916447 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072212495 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072566862 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074706144 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072542495 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072812117 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070492804 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.073612324 seconds)
  done (took 2.931155055 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076415885 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.082820096 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.069156396 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.073121181 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.068665336 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072537262 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.067869032 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069046336 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069751337 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068639958 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.074454918 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073944252 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069243723 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.073055401 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073833362 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.07276028 seconds)
  done (took 2.643431903 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.068751381 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069873273 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.070136047 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.065116874 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.068015048 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.063731013 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.064459785 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062854402 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063281655 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.077752433 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.064140006 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.076977693 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064088749 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.063503326 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.064415713 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.070171567 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063918924 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.064018078 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.064276744 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.06869568 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.07041909 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.065155559 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.068137505 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.064263292 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.069740323 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.071441528 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.065581765 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.068057301 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.06398054 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.06447602 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.070036617 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070957162 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.063793974 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064576922 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06311418 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.064218994 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064029761 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064505886 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.070913412 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064003169 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.062375789 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.068937788 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064103809 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.06496285 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063371498 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064487408 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063483989 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.069902448 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.064251553 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.06969565 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.064200429 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.066091201 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.064492977 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071685381 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066542492 seconds)
  done (took 5.160485908 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079151959 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068462653 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062904119 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062587218 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.068453025 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.068733751 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068803221 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068303557 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069101433 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062926272 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06912942 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067758743 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068994547 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068660862 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069454276 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068265345 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.063315451 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068732925 seconds)
  done (took 2.742692859 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.073286622 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068382319 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.07365711 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.06805508 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.068026433 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06790119 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063082099 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063303768 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062905556 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067723789 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067922932 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.067512562 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063425595 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.067402885 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067748538 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068249273 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.068087318 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063328414 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068376316 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063270705 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06822207 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063250967 seconds)
  done (took 2.981310356 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089209152 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.090104685 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.130520488 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.082851482 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.091080634 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.074741373 seconds)
  done (took 2.070419628 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095385424 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.106837413 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067520023 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067836834 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076624132 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071522268 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071484812 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071549048 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077265925 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075253321 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071501096 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076831095 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076911833 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073215787 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077154945 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079606378 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071499089 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071079171 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068061235 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079218992 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07135389 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077046008 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071718341 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071138441 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071406537 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072862381 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079237094 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075277624 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071334302 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076777707 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07947235 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071554586 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07683329 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075412431 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068446153 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077047093 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071519716 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079884208 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077390528 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073364488 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068452705 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076928669 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077186037 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073236769 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079375193 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071588276 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073022659 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071720517 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071934322 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081797664 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077249533 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073612145 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076954704 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079784753 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079603226 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081836994 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075886464 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073315014 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077396246 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075839952 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073438542 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077566575 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073639758 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07589513 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079753866 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073485566 seconds)
  done (took 6.497396027 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101105262 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069112532 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071875789 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075079243 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073515908 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071585834 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0714886 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071902964 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071705061 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069017753 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.108312695 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071911077 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074010772 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073291596 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07184674 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071825138 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071628885 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073372087 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06906781 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.082111455 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071710621 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073376961 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073347249 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073528863 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075370775 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079290938 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071303568 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071633234 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07142989 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071331299 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072840403 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071329955 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073056736 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06847208 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073086 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071110283 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071064701 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073079796 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070954062 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077024428 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072967206 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079365936 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071612597 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071383609 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07513741 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071467725 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071398172 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068651779 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071437903 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068415651 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075142848 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074903133 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075609913 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073427156 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071849072 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071689833 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071620185 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071620467 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071793063 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079116916 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073108062 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071098657 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.08151571 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071069985 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071627375 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073509731 seconds)
  done (took 6.402690438 seconds)
done (took 132.45049641 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.220223898 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.189490332 seconds)
  done (took 1.903982287 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075242561 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.101095272 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.079000931 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.142104597 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.07283469 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.111573981 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108610692 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.076592831 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.075193806 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.07467 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.074815865 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076840969 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.144821592 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073195344 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.075096534 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.077299961 seconds)
  done (took 2.955343061 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.108199376 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.190008984 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.117546305 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072629743 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.113846678 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.079774069 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.073016734 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.084336156 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.076611879 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.084860259 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.079475152 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.077820387 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.074803724 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.078072734 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.076342882 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.079533003 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.074643573 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.079006878 seconds)
  done (took 3.144161072 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098190283 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.088979531 seconds)
  done (took 1.715747959 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.165256397 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.109873707 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.146714833 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.331513568 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.134585931 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.133012849 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.136492301 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.12771138 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.113693984 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.123271051 seconds)
  done (took 3.040048633 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.10639204 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.180539723 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.319755603 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.125966353 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.078999513 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.101912604 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.127061791 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08524814 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.083508601 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.083114267 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.083232725 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.079937454 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.104939376 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.078827457 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.0774718 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.079451253 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.10811887 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.076641543 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.077303634 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.079055001 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.10980652 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.07324162 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.078971602 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.076822217 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.080687075 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.080595061 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.074962519 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.072724321 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.078457627 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.077685579 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.08081003 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.09936456 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.080429115 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.101038526 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077856439 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.103635033 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.077293755 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.07680992 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.077623513 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.076561678 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.079476992 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.079721006 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.082974078 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.079816831 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.075095128 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.077395933 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.074973178 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.073192532 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.08185898 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.074227622 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.081964862 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.080695471 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.101967563 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.07425919 seconds)
  done (took 6.444903723 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.10924015 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.107130706 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072781652 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.116860846 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109230585 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072995609 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.108570049 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.10391056 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.11169855 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.07244281 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070908887 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071533235 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079393729 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.084626801 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.120449001 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.109078705 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.074356509 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.072331933 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.111411952 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.111139461 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071320787 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.105811075 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.103809514 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.110864979 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.070668335 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.072518362 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071078152 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071775849 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.076273908 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.077784927 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071470808 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078265194 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.088178112 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.078219762 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070210838 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.070534344 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070981152 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.078121616 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079125487 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078668969 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.077138984 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0701163 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070669836 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071158845 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071960301 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.07061568 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076945632 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.078098571 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077115407 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070977417 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071175573 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071067319 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071533402 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078474987 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.077024913 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.079350985 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079009948 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071824643 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071283927 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.072573065 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080256444 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.080150995 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079760821 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072842318 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.080001754 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071198727 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.082462683 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.085578333 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071438935 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071523853 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.07133182 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07124926 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071749214 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077214301 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.077830556 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.07250956 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.074494546 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071004417 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.080321733 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077330986 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071101884 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076924527 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070739312 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071637923 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071852837 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071645306 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.077203363 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.078949073 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072275697 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071151416 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071853905 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071544421 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.071405594 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.078087268 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.078855021 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.079006461 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.077511972 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071842801 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.077703068 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077870848 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071826915 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.077063749 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071626268 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072081381 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071662626 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.077589655 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.076965197 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.079264557 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071593255 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070652666 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.077157919 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.214407274 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071657924 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.078794927 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.081238678 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.078654689 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.071475153 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.081222433 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070268918 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080193287 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069920385 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080221579 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072284274 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.078052385 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071719889 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.070363432 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.072226097 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.078150064 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072748275 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071109157 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071931622 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071565904 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.078100388 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.081396891 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072737564 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079405447 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.07841063 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.072905262 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078179636 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071504285 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079192408 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.07185171 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072267686 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070923128 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081355834 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072184136 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071269827 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071282734 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080380309 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069270429 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077699303 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077524039 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070988748 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.083781903 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077565287 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.076014097 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.080892185 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07265346 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071806684 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071191038 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071938855 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076851729 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078927432 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072300376 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071955702 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.077174516 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.080907724 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.070765527 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.312979909 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077165431 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.07744691 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071683001 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071106117 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.081046676 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079136816 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075544738 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.076666934 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078515051 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071238894 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076923804 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077832506 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071002711 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.08512831 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071547282 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.082536891 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078656782 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077251612 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078137647 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.079287921 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.080337702 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.080453854 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.082947976 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071106393 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070774699 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.07726249 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071397572 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071521302 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.07738268 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071723669 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.07148102 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.083357829 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069282754 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078114795 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.0712081 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.078538911 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070997374 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071642467 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.083491505 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071422079 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071605509 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077744005 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071342769 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.077362612 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080675543 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.076319146 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071063851 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071508197 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.077936498 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.078622504 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071097667 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070504136 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071665126 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.077291308 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.076469076 seconds)
  done (took 19.248843116 seconds)
done (took 39.988735579 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.210553647 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172854656 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.203344088 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.119665144 seconds)
  done (took 2.337762915 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.092122693 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.101243939 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.079380809 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.067623582 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.086778889 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.068012803 seconds)
  done (took 2.069416864 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.250028137 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.192332301 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.178162867 seconds)
  done (took 2.187617657 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.220019391 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.200597606 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.50865053 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.315914192 seconds)
  done (took 2.91648 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.131376494 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.08031945 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.066417235 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.076822967 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.107732847 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.13535275 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.088343109 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.110291857 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.077937636 seconds)
  done (took 2.50818554 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.133936653 seconds)
done (took 13.742562293 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.104923973 seconds)
    (2/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.077368221 seconds)
    (3/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.224115652 seconds)
    (4/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.079198481 seconds)
    (5/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.075928788 seconds)
    (6/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.079413084 seconds)
    (7/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.237448911 seconds)
    (8/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.077796539 seconds)
    (9/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.077942459 seconds)
    (10/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.128266489 seconds)
    (11/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.079655793 seconds)
    (12/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.079058886 seconds)
    (13/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.239074432 seconds)
    (14/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.187422178 seconds)
    (15/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.170590709 seconds)
    (16/341) benchmarking ("sort", Float32, false)...
    done (took 0.141660552 seconds)
    (17/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.165300838 seconds)
    (18/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.206043382 seconds)
    (19/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.072494327 seconds)
    (20/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.077380141 seconds)
    (21/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.08155617 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.127416363 seconds)
    (23/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.274423033 seconds)
    (24/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.077105732 seconds)
    (25/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.16198228 seconds)
    (26/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.159395505 seconds)
    (27/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.202065751 seconds)
    (28/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.181226105 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.130960076 seconds)
    (30/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.186606508 seconds)
    (31/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.094653567 seconds)
    (32/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.067321467 seconds)
    (33/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.243596563 seconds)
    (34/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.099713164 seconds)
    (35/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.111463909 seconds)
    (36/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.20202322 seconds)
    (37/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.097047466 seconds)
    (38/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.093541413 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.079303245 seconds)
    (40/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.24479926 seconds)
    (41/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.175584552 seconds)
    (42/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.174891912 seconds)
    (43/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.158614042 seconds)
    (44/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.158960799 seconds)
    (45/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.079924941 seconds)
    (46/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.102027643 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.092463192 seconds)
    (48/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.147916109 seconds)
    (49/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.181544044 seconds)
    (50/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.158174044 seconds)
    (51/341) benchmarking ("sort", Int8, false)...
    done (took 0.157453662 seconds)
    (52/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.209439951 seconds)
    (53/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.145012185 seconds)
    (54/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.079526109 seconds)
    (55/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.069641498 seconds)
    (56/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.076660121 seconds)
    (57/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.076489482 seconds)
    (58/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.088372742 seconds)
    (59/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.078874648 seconds)
    (60/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.06631555 seconds)
    (61/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.080216213 seconds)
    (62/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.133539195 seconds)
    (63/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.075857423 seconds)
    (64/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.203627321 seconds)
    (65/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.083096385 seconds)
    (66/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.083170215 seconds)
    (67/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.078621515 seconds)
    (68/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.081386245 seconds)
    (69/341) benchmarking ("sort", Bool, false)...
    done (took 0.145528945 seconds)
    (70/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.075012121 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.091582145 seconds)
    (72/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.159514393 seconds)
    (73/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.072801251 seconds)
    (74/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.192408508 seconds)
    (75/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.137979697 seconds)
    (76/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.203588478 seconds)
    (77/341) benchmarking ("sort", Int64, false)...
    done (took 0.068859026 seconds)
    (78/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.359116605 seconds)
    (79/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.078443301 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.094188949 seconds)
    (81/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.087390575 seconds)
    (82/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.069183502 seconds)
    (83/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.079510643 seconds)
    (84/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.167201782 seconds)
    (85/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.173520352 seconds)
    (86/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.165731299 seconds)
    (87/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.067682856 seconds)
    (88/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.213168813 seconds)
    (89/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.081242346 seconds)
    (90/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.138291322 seconds)
    (91/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.072899657 seconds)
    (92/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.069537004 seconds)
    (93/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.067420442 seconds)
    (94/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.072562015 seconds)
    (95/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.080365759 seconds)
    (96/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.06750625 seconds)
    (97/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.197186494 seconds)
    (98/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.089152071 seconds)
    (99/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.068722785 seconds)
    (100/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.222686416 seconds)
    (101/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.068108734 seconds)
    (102/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.073509485 seconds)
    (103/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.071671516 seconds)
    (104/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.149290264 seconds)
    (105/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.06959729 seconds)
    (106/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.078267143 seconds)
    (107/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.071035291 seconds)
    (108/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.126509359 seconds)
    (109/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.085534716 seconds)
    (110/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.156715521 seconds)
    (111/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.077949393 seconds)
    (112/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.089995914 seconds)
    (113/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.08070538 seconds)
    (114/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.082969786 seconds)
    (115/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.221283172 seconds)
    (116/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.148016837 seconds)
    (117/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.181440344 seconds)
    (118/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.078954277 seconds)
    (119/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.224432224 seconds)
    (120/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.087817525 seconds)
    (121/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.164794545 seconds)
    (122/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.094369867 seconds)
    (123/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.14692824 seconds)
    (124/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.096755321 seconds)
    (125/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.069334729 seconds)
    (126/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.076166596 seconds)
    (127/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.071509682 seconds)
    (128/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.079609454 seconds)
    (129/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.095141493 seconds)
    (130/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.086349014 seconds)
    (131/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.19767392 seconds)
    (132/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.069995926 seconds)
    (133/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.080766587 seconds)
    (134/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.187340571 seconds)
    (135/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.0728347 seconds)
    (136/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067568909 seconds)
    (137/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.177254802 seconds)
    (138/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.067384724 seconds)
    (139/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.069299701 seconds)
    (140/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.227732951 seconds)
    (141/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073154228 seconds)
    (142/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.08675517 seconds)
    (143/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.091129542 seconds)
    (144/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.076098632 seconds)
    (145/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.076782746 seconds)
    (146/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.069032471 seconds)
    (147/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.077148491 seconds)
    (148/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.067747278 seconds)
    (149/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.143289634 seconds)
    (150/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.068746483 seconds)
    (151/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.148112531 seconds)
    (152/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.086304192 seconds)
    (153/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.123826139 seconds)
    (154/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.204397397 seconds)
    (155/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.07107077 seconds)
    (156/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.084095413 seconds)
    (157/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.077563183 seconds)
    (158/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.06821383 seconds)
    (159/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.157148675 seconds)
    (160/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.070671131 seconds)
    (161/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.085544158 seconds)
    (162/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.162261775 seconds)
    (163/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.067219446 seconds)
    (164/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.192599286 seconds)
    (165/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.068154169 seconds)
    (166/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.07860246 seconds)
    (167/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.06691706 seconds)
    (168/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.091903547 seconds)
    (169/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.068219102 seconds)
    (170/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.165015961 seconds)
    (171/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.143397604 seconds)
    (172/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.076048745 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.118594091 seconds)
    (174/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.175590763 seconds)
    (175/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.0864513 seconds)
    (176/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.070346214 seconds)
    (177/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.146842178 seconds)
    (178/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.068591351 seconds)
    (179/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068986647 seconds)
    (180/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065963045 seconds)
    (181/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.06747264 seconds)
    (182/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095864564 seconds)
    (183/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.067579921 seconds)
    (184/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067504381 seconds)
    (185/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075402779 seconds)
    (186/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075743555 seconds)
    (187/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.152733817 seconds)
    (188/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.06683423 seconds)
    (189/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.082064311 seconds)
    (190/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.074216926 seconds)
    (191/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075215855 seconds)
    (192/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.083976713 seconds)
    (193/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.151177036 seconds)
    (194/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.1525702 seconds)
    (195/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.075538207 seconds)
    (196/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.226071789 seconds)
    (197/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.06655055 seconds)
    (198/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.093724853 seconds)
    (199/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.076523216 seconds)
    (200/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.066724843 seconds)
    (201/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.202079424 seconds)
    (202/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.067373707 seconds)
    (203/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.065626681 seconds)
    (204/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.066618262 seconds)
    (205/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.067531206 seconds)
    (206/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.06821131 seconds)
    (207/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134359828 seconds)
    (208/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075788885 seconds)
    (209/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.078137764 seconds)
    (210/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.085104494 seconds)
    (211/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.082410348 seconds)
    (212/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.067638235 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.13514285 seconds)
    (214/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.070923329 seconds)
    (215/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067925582 seconds)
    (216/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.067784709 seconds)
    (217/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.067153676 seconds)
    (218/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.195310735 seconds)
    (219/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.06818509 seconds)
    (220/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.068722336 seconds)
    (221/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.06689636 seconds)
    (222/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.06663417 seconds)
    (223/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.074659328 seconds)
    (224/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.075096061 seconds)
    (225/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.066389936 seconds)
    (226/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.126061241 seconds)
    (227/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.079105907 seconds)
    (228/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.0783006 seconds)
    (229/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.159978629 seconds)
    (230/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.094105047 seconds)
    (231/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.198140646 seconds)
    (232/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.139318377 seconds)
    (233/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074851068 seconds)
    (234/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.066805677 seconds)
    (235/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.067919228 seconds)
    (236/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.069663378 seconds)
    (237/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.133483755 seconds)
    (238/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.07973821 seconds)
    (239/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.072206059 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077868598 seconds)
    (241/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.066042947 seconds)
    (242/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.069634253 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.148732276 seconds)
    (244/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.089065684 seconds)
    (245/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147715861 seconds)
    (246/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.067950326 seconds)
    (247/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.072421496 seconds)
    (248/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.06833699 seconds)
    (249/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.124100799 seconds)
    (250/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.080435486 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091560866 seconds)
    (252/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.067589109 seconds)
    (253/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.066091915 seconds)
    (254/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075443899 seconds)
    (255/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153280977 seconds)
    (256/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.069991019 seconds)
    (257/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.066588251 seconds)
    (258/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.066988965 seconds)
    (259/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.089802682 seconds)
    (260/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.069939511 seconds)
    (261/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.074611128 seconds)
    (262/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.161950438 seconds)
    (263/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.071646434 seconds)
    (264/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.069943225 seconds)
    (265/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.067597414 seconds)
    (266/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.069335509 seconds)
    (267/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.083058772 seconds)
    (268/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.16872674 seconds)
    (269/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075731977 seconds)
    (270/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.067501774 seconds)
    (271/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.066394984 seconds)
    (272/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.066316802 seconds)
    (273/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.068174172 seconds)
    (274/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.06597969 seconds)
    (275/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.069108045 seconds)
    (276/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.065334172 seconds)
    (277/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.067195163 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.066155793 seconds)
    (279/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.085148476 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092682079 seconds)
    (281/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.067068708 seconds)
    (282/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.067936589 seconds)
    (283/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.069028861 seconds)
    (284/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.071289788 seconds)
    (285/341) benchmarking ("sort", BigInt, false)...
    done (took 0.266506044 seconds)
    (286/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.067846124 seconds)
    (287/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.069412577 seconds)
    (288/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.06994774 seconds)
    (289/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.183323962 seconds)
    (290/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.078416847 seconds)
    (291/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.074719937 seconds)
    (292/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.071005676 seconds)
    (293/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.067609029 seconds)
    (294/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.06674888 seconds)
    (295/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.066379118 seconds)
    (296/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.067490482 seconds)
    (297/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.067887119 seconds)
    (298/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.06881664 seconds)
    (299/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.066527433 seconds)
    (300/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.111601079 seconds)
    (301/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074171392 seconds)
    (302/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.086447923 seconds)
    (303/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.085011332 seconds)
    (304/341) benchmarking ("sort", Float64, false)...
    done (took 0.13740807 seconds)
    (305/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.067091653 seconds)
    (306/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.069918594 seconds)
    (307/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.07413498 seconds)
    (308/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.365378331 seconds)
    (309/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.077169829 seconds)
    (310/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.073882386 seconds)
    (311/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.072860942 seconds)
    (312/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.07083431 seconds)
    (313/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.157954376 seconds)
    (314/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.093821725 seconds)
    (315/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.073409858 seconds)
    (316/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.073941052 seconds)
    (317/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.072047289 seconds)
    (318/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.073818516 seconds)
    (319/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.071018991 seconds)
    (320/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.076746207 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.085223181 seconds)
    (322/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.071555925 seconds)
    (323/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.071986552 seconds)
    (324/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.071990602 seconds)
    (325/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.092654295 seconds)
    (326/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.075796334 seconds)
    (327/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.079553073 seconds)
    (328/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.072303602 seconds)
    (329/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.07250598 seconds)
    (330/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.071746929 seconds)
    (331/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.069772132 seconds)
    (332/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.071891393 seconds)
    (333/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.070287043 seconds)
    (334/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.072195059 seconds)
    (335/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.072180931 seconds)
    (336/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.069739628 seconds)
    (337/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.072198777 seconds)
    (338/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.070327928 seconds)
    (339/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.075093869 seconds)
    (340/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.078936267 seconds)
    (341/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.069286572 seconds)
  done (took 37.575271002 seconds)
done (took 39.162818954 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.084939593 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.095341255 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.077196959 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.088989203 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.084676247 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.104393842 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.077938115 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.08275961 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.08556116 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.083613742 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.082471259 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.076644731 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.079222907 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.07912607 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.076491654 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.093161356 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.085151771 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.078016794 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.077941987 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.068231783 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.077888471 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.069076321 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.068219625 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.076247491 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.081314309 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.076488481 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.078460601 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.078633253 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.069493473 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.069155404 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.074547748 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.078628138 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.06880241 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.081382338 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.078258996 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.077729861 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.079198124 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.08273519 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.068144283 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.069492581 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.08044531 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.069061959 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.077356039 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.075532764 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.074437375 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.076390983 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.07770049 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.081601086 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.093266678 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074516539 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080542459 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.080862073 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.080477826 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.074901076 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.075205625 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.077758669 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.076316498 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.093041197 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.078594712 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074072917 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.080312165 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.07883022 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.076534983 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.078285547 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.078234465 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.081114709 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.08079152 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.076617419 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.08066708 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.077234572 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.069051851 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.078584947 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.074362514 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.0688166 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.081393281 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.083520007 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.06761252 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07367234 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.07744254 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.077813353 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.068284654 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074245145 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.067846658 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.074851339 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074628876 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.075853926 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.075172292 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.07732294 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.068432889 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.07862204 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.077017713 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.077942206 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.067858655 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.081383152 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.068378442 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.076172072 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.068882852 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.069292303 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.068047094 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.075172322 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.069067746 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074461561 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.077345315 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.067718162 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.073919487 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.081798641 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.07178548 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.076979831 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.067933843 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.068466368 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.080120424 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.08079948 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.069020481 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074138922 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.06817776 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.075204019 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.067715751 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.068654801 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.068737747 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068840981 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.074062823 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.069322305 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073774294 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.074500002 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.080434999 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.068270968 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073910522 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073778035 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.068543532 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.075355048 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.068709128 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.068445393 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.068145316 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.082017193 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073744068 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.068616134 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.074641047 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073946844 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.077048106 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.068119906 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.077788697 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.074671684 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.073385856 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.21988301 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.067306107 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.080355533 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074016606 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073467013 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.06843966 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.068948239 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.06700512 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.068183478 seconds)
done (took 13.414643886 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067850698 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108367524 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.076615253 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.085208009 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.081367431 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.06998771 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.072999363 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.086355637 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.072442897 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089323528 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.097581191 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.091575782 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.096099554 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.068621321 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.069281294 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.070146723 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.068345166 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.07690454 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.083770096 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.092894573 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.098177332 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.069395659 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.072383995 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086603035 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.080092828 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.085952448 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.070561495 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.070189256 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.112488325 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.084026709 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092920598 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.068725537 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.070099891 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.082908207 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.083712489 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.076821152 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.071082383 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.073351839 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.069639401 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.06875821 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.070700094 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.084047868 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.073455908 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.073958178 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.070857958 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.070520268 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.069509802 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072335774 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.08256649 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.072725064 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077938462 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081659529 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.071406147 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.069873799 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.068177572 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073407023 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.069112699 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.070210017 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.069884476 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.069057046 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.069571311 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.071627859 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070760398 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.069990127 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.073425272 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072004073 seconds)
  done (took 6.795029267 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.081678382 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.098869572 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.082141348 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082111259 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.068748471 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069467133 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.069882099 seconds)
  done (took 2.299046245 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067642318 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.082669816 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.086412512 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.086512071 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.079111883 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.081603892 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.069749838 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.102160762 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.068655999 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.084417823 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.089232288 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.087587637 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.073336216 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.081625532 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.069613584 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.07645581 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.069987314 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.081118393 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077243625 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.088091232 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073992124 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.10019348 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.085209367 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.070768713 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.088401624 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.073868323 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069226078 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.070067163 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.071197062 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.071315461 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.071570299 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.093421524 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073614957 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.082258427 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067614739 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.068505477 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.076511759 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.073495946 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.076123001 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.081965185 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.075112388 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.071151449 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.072161639 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.071025404 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.072331853 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.072892969 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.072139814 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.071174262 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.070939558 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.082323332 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.068337493 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073536962 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.075221814 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.074744233 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.077075965 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074454761 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.080459776 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.07229913 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.082058051 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.07833641 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.071029958 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.077578094 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077331598 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.075752348 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.076790907 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.0726836 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073041844 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.074995102 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.070903268 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.071495781 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.072141628 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.076453305 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069196956 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.071611916 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.073281774 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.07656216 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.072631819 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.08601512 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.087121833 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.082534642 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.071992955 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.071235004 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.07348926 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.087124141 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07412461 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.071564268 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.07381168 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.068250236 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.074139405 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.071259663 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.076459083 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.071156705 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.079062258 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.072003574 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.074970523 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.077656012 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.06949098 seconds)
  done (took 9.127156727 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.07004692 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.068525613 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069813111 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.069743848 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068554286 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069672748 seconds)
  done (took 2.199241272 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.089470936 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.070414293 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.086836466 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.070158376 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.108877979 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.076840653 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.077342135 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.078693245 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.076634899 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.085062516 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.077277564 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.079721456 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.076243676 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.074467807 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.076639527 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.070974359 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.07669305 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073126277 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.083750631 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.074603392 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083489446 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.074624788 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.07476025 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.082329504 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.072826927 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.070806379 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071295178 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.084154448 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.083692397 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.077674685 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.074328633 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.072878129 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.078547986 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.077547567 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.0768063 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.078971363 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.0700175 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.075358128 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.072400932 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.072936523 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.078355942 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.074240831 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.0720767 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.075294212 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.077129194 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07858544 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.075784731 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073663656 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.076068778 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.075091745 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.075225396 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.070712055 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.072916683 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.075434486 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.078285082 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.083537242 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.07534527 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.07676703 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.074276232 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.078891984 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.069881805 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.073086849 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.077616737 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.072916828 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.075007656 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.075704759 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.078998586 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.074351206 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.074427156 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.069993569 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.075331681 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.069906052 seconds)
  done (took 7.259105898 seconds)
done (took 29.406374635 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.552791712 seconds)
  done (took 2.282355846 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.586044993 seconds)
  done (took 2.355388016 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 9.81899918 seconds)
  done (took 11.586545412 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.295982595 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.328615892 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.733888024 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133312546 seconds)
  done (took 3.303894363 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.747248271 seconds)
  done (took 2.527849854 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.228660009 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.224177197 seconds)
  done (took 2.237583585 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.348090861 seconds)
  done (took 2.120821571 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.157720447 seconds)
  done (took 2.923670662 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.225086087 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.162569376 seconds)
  done (took 2.167943814 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.514938284 seconds)
  done (took 2.282575125 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.325761626 seconds)
  done (took 6.106652977 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.23895147 seconds)
  done (took 2.052775715 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.23805171 seconds)
  done (took 2.013956339 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.181594764 seconds)
  done (took 3.94957264 seconds)
done (took 49.686340849 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.087910402 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.093169907 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.089663289 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.08467421 seconds)
  done (took 2.098512805 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.077277124 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.073210048 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.077041762 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.076854997 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.074373418 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.075467504 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.07618783 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071709005 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.074374406 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.073204666 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.072311438 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.073130864 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.07605892 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.073310285 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.075504192 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.07665524 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.073366173 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.073253512 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.075507084 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.07286556 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.075616571 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.072876463 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.071140248 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.072875584 seconds)
  done (took 3.554483242 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.08088773 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.075116323 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.07882208 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.073872046 seconds)
  done (took 2.090043023 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.07845177 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.079374133 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.089527719 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.09444122 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.079926362 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.079940595 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.087509997 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.088027498 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.068669127 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.090285048 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.071123033 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.069607766 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.06954984 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.08873198 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.086397278 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.065307654 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.066877378 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.080038698 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.079693221 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.082898136 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.07155627 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.0684895 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.080289924 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.08063389 seconds)
  done (took 3.677795817 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082847268 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.068348763 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.081250814 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.09389825 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.095799666 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.068471236 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.082607658 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.096018787 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.129786431 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.068322563 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.074563738 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.068562626 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.108314708 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.068421753 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.083800862 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.11185488 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.115477102 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.072469949 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.101906012 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.068761234 seconds)
  done (took 3.529921807 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.077622314 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.072285424 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.073075744 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.068457243 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.079844805 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.076851016 seconds)
  done (took 2.244816996 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.070712456 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.070814605 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.069431561 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.069384034 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.074689607 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.069613627 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.068595374 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.070257819 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.070879173 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.070577399 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.069517283 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.068705543 seconds)
  done (took 2.63348134 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.155884118 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.072339962 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.073629473 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.069109333 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.073864515 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.069060775 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.08430191 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.071598253 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.088550953 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.069458895 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.070251364 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.072454502 seconds)
  done (took 2.757010191 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101998189 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104843463 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149194971 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120730709 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117934958 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100238119 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123294224 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.09760265 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.164240805 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.140743918 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120090846 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127429699 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089942573 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.072929383 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10321257 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104737272 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139888823 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075656428 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116104141 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.200193543 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118817179 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.114791625 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125849253 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119891362 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084450501 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125355154 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097941591 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106306388 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.157960041 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114008612 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120963846 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.099814462 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.075803759 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.073929097 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151399982 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.107169912 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.140745955 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.096787512 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103019388 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091683168 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109399088 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.072448554 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.090039762 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.109998743 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087718075 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120129429 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.090863743 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106548085 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084397091 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.135503261 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110227887 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102337921 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092032067 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107701318 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133665372 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098394276 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11433877 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110540884 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086703557 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.124055903 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.104789867 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.252825213 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098087761 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084540987 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.163818663 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093249927 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.116379851 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116896564 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.085723312 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093468014 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105570216 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.135080357 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111082491 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.111212054 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117813493 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.127952439 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114380517 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.095958293 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.132258689 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096445102 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.075967256 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.10865124 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.132001011 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088927235 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104279599 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133891795 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095993903 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110636922 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.096034622 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.122008867 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083791859 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.099363473 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072710555 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.10212084 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110627358 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10011075 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113393954 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108998314 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081565341 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126418055 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109906295 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075159509 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120576159 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102539825 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154221662 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098952335 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.080065968 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103286908 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095431359 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149786885 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085681918 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081017427 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098444423 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140717954 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094903289 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.172614822 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099524921 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132670475 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100713288 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090921242 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078660487 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.092873677 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104771213 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111551897 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106508088 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092555971 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.080202855 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090403936 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10217653 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.249448138 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085488076 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117626722 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.105957448 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.078773136 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091967553 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.079775087 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129107532 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.080875686 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112063374 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128316774 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.082093658 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109582779 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.131518073 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141939507 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.101415029 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113558856 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142501789 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.119527203 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082743201 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.086815853 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112118643 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.14687018 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.117045495 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08860023 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.080232024 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103884962 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115192324 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101746613 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.140844945 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.130479741 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112495409 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101122237 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14268044 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121339984 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094454575 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098930335 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100091716 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.125325079 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109628914 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158540967 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097982511 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122376992 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11986568 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144935265 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.118147685 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093771979 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087913754 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099228459 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.10827596 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109499402 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146594546 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.099564982 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.075652707 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096944295 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134801365 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079312702 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102824246 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.093646149 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.096583788 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122049606 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.086834162 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08500935 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.07152423 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105472096 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140736813 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.072869287 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118096576 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.275810918 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108435871 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.109044744 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.072643318 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102881529 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.147523149 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10963807 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144456448 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119815029 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104657542 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122360426 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.10293859 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.109413609 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083372987 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.132007198 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.138638993 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099874512 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09373385 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13890154 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122846851 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.137981839 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.100289658 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119163619 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.108891096 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103843041 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106953683 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.103280309 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145502377 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124033059 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.127247908 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119121115 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110295732 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110997467 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139581361 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085985328 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120598575 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.07878226 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114434132 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.080734313 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110310646 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.082163952 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.115253672 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083043898 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103743599 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.073016399 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.077479386 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144243687 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.116048688 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091859629 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089681086 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.139368245 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134715052 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.083477239 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106232734 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.13810422 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105314015 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105558681 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113542532 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.089368984 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098597725 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.302585316 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083334834 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.085915043 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.102588861 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098157344 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111197578 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.087942248 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078607054 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139769685 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108039715 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099014705 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111302124 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098873324 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.125206105 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094420616 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09137982 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109238651 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107016246 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144275298 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.09407538 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.101417292 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121255571 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083931496 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.095678579 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.07270801 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.08789166 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.079298912 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112704253 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079460155 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111498508 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.07173996 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134164511 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090178955 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.096423283 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10666417 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101304524 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131573074 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095930544 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132453636 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092857069 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105439672 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111599635 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098166229 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114218989 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106693644 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099519602 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.1139001 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.099623161 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109443486 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11326093 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097684693 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145222261 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094105896 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125039273 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109486666 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109706808 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107396936 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120608775 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140691688 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116004573 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145245052 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079010083 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086224134 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109073866 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102835383 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148211365 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106724514 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.075538811 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120714527 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094965007 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100427111 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.266340268 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087120222 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146060199 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090571725 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.091433307 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117456804 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.093783081 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101204517 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079659615 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099350868 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.103260057 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098262753 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098456632 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.136948392 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121415673 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116319549 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.136352518 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.102482972 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.096737973 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.122621558 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114782801 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11465979 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089675331 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090041838 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12733491 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105305803 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.131713529 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.104121154 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098005763 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105101503 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094100786 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10351841 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100277259 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.114240393 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084104398 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.079673281 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.071826602 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.075776889 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121156623 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110832137 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103849003 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102216987 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.075652252 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107315884 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102050289 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075431251 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090857841 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097795616 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.129186436 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.087192205 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095599853 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.11765601 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.095043256 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107974141 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.133561147 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131844311 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.104360703 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092333192 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146814467 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132093442 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091710612 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096698502 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.074986834 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082704855 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105764398 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150420199 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122814044 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.081427529 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087452815 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.080752648 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.248373429 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.074921505 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.091378666 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.09368387 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108629991 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123282844 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.116082665 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107907871 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078938217 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107027787 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101115833 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095732642 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09998417 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105199286 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.109879513 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.1278569 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10431745 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099795255 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079822177 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.084016987 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079403986 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083000333 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106212357 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.081276013 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079755142 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134740836 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.095041926 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109059927 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112756963 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088815944 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078622374 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136474058 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.072768857 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137607186 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.074997783 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085911022 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.084013656 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082892138 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097696977 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108245055 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09892526 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116775086 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109792796 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107642506 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114187838 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160301976 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074713895 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.153378212 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079602512 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079066323 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079963649 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115126493 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094042257 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107911253 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144686944 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091335187 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096528456 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080229906 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131835931 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.101279879 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107665189 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086219339 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082200446 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131871574 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083433046 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.074158462 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090265661 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114983606 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.076305132 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.137944115 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118434721 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083545399 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.275754104 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.635713032 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094731519 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.079389516 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093358314 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.152873618 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132953547 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087112003 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112642582 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.12295175 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093978008 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117951098 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112050922 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.189453682 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077705725 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097579443 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.107720035 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102218565 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09627525 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.095176912 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.090609564 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.096680726 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.091280641 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083512318 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111391624 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091661046 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095820492 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127921113 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087285531 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.083580557 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134552593 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.108147208 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.085588878 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09270595 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.104187528 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090527146 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095788219 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.072995568 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.147513032 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.124898396 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105783293 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.094635424 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.112001161 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121802863 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09253531 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116827504 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.092765916 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.114080235 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088895043 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.082142317 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106080448 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.08170593 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081418098 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120485113 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.087172277 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.099070947 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108651247 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.098871708 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117814708 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121434236 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114213867 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101546858 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082534728 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090225534 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.090435435 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079398472 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081868039 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.078050969 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.079664302 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111700806 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.24914907 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120468714 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118015523 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086504784 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107893211 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.104496152 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.113415813 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08724685 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104753296 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113440096 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094227038 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107783327 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10436707 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132382086 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149381268 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103152835 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127891038 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137763382 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.080328015 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.079089553 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.072407036 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.150945225 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083330639 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.084831658 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114928068 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136181526 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.085514304 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098418085 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.237964571 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084175526 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.08510677 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100921794 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.073538446 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086634385 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11231936 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088552832 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084422736 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103214688 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116984554 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120991529 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115213594 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093637611 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086753989 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084487136 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09765717 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.108509032 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.133304773 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095094348 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.079133769 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109366856 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107359283 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127844309 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.076139439 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084240676 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.132022357 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095979074 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107689729 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083773893 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122515 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.13441372 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093281554 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137480879 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074456128 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086694743 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092990076 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.128950216 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077874936 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091596973 seconds)
  done (took 67.945584779 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.152094213 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.146253172 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.082488628 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.101440034 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.187779703 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.197631092 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120020139 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.09724573 seconds)
  done (took 3.047025176 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 0.071525331 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.086953113 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 0.104432478 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.086587699 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 0.070257206 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 0.071637351 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.210721569 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.08545602 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.070132958 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.110587699 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.078685979 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.072378546 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.369306126 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.069025526 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.070703304 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.077321561 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 0.06889344 seconds)
  done (took 3.688976905 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.371601763 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.632745707 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.324854678 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.078314414 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.80733183 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.090079718 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.136284495 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.137624276 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.083766893 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.536756774 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.37000242 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.131511763 seconds)
  done (took 18.63200796 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.079098181 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.07895563 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.081901363 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.081745971 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.077884142 seconds)
  done (took 2.317020737 seconds)
done (took 120.004281224 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.087049253 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.17681653 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.07081832 seconds)
  done (took 2.19768198 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.086992378 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.085430252 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.084274206 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.082272061 seconds)
  done (took 2.259867264 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.078745319 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.07999058 seconds)
  done (took 2.072431299 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.229202313 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.180467386 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.09402862 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084373413 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.083870975 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.084080257 seconds)
  done (took 2.181687014 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.075181765 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.075064468 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.075166645 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.075904722 seconds)
  done (took 2.215674107 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.073557809 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.069586325 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.072207392 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.074791487 seconds)
  done (took 2.206150059 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.089511557 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.088024973 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.116378199 seconds)
  done (took 2.211534387 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.087081356 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.086645155 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.081837417 seconds)
  done (took 2.177231928 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.113331473 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.101187627 seconds)
  done (took 2.132359288 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.083573635 seconds)
  done (took 2.005591207 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.094014077 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.102098785 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.144506902 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.111576678 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.145973493 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.130361631 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.080720879 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.081942956 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.077491094 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.075968515 seconds)
  done (took 2.960840098 seconds)
done (took 27.120692709 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.082040082 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.378712985 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.364070086 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.091163132 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.67788227 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.363584286 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.007907876 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.095097712 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.104055134 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071940507 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.089265752 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.654190377 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.999063744 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.334632709 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.985460241 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.333302731 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.65616735 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072286104 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071434884 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.072383772 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.992807325 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071964915 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072141639 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.072911885 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.653633917 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.378682436 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.0731278 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.333145918 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071862387 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074923998 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.360560201 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07410193 seconds)
  done (took 16.623436852 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.075163089 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.127699365 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.076213804 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088377279 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.074244529 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073083509 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.075237682 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.072859667 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11527695 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.072486618 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.089822168 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.071441531 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.075916539 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.073765084 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.093264331 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.072983727 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074667877 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.074034731 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.073255768 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.073858946 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.092811502 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.073231871 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.073875464 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.074265222 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.073645245 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.087249681 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.074742619 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.073658488 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072823777 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075613368 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.076760564 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074530921 seconds)
  done (took 4.482860577 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.125511985 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.131320392 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.077326132 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.113527582 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.123280133 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.074035271 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.156430255 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.095957516 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11879051 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073009372 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090292035 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.072501216 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.108156335 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.073462336 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.093081715 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.072927144 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074142121 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073635869 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.073204945 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07325296 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.092676105 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072873332 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.073771926 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.074026952 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.074446419 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.088247285 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.074004227 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.07286481 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072873146 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075866311 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.077038768 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07443783 seconds)
  done (took 4.752401638 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.073930282 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.075347641 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.084608311 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.084678133 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.070766302 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.072202293 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.073321521 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.070625692 seconds)
  done (took 2.542610168 seconds)
done (took 30.330787552 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.082556766 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.072192622 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.075206318 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.091279959 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.077676618 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.073984825 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.068345829 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.078290621 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.074913494 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.075283838 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.076915738 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.070453327 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.073538253 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.068037461 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.075434637 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.069883752 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.075846008 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.073855555 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.074538963 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.076111737 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.074786332 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.075166936 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.078462463 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.074160586 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.07460955 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.074790419 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.079414133 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.076286649 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.070192266 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.07303707 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.072476347 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.085418872 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.076676254 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.077047507 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.070308394 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.070314531 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.074914598 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.072316281 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.076887989 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.080150385 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.072506125 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.07916499 seconds)
  done (took 5.062724094 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.09136246 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.09800622 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.090161637 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.086674762 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.109796502 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.085640635 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.094962261 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.083956138 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.081940873 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.093449381 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.078744317 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.083315645 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.084119932 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.07635512 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.082339864 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.078860157 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.083752215 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.077285726 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.082694143 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.08252036 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.093967543 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.075454885 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.08318054 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.084509543 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.078195379 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.083909654 seconds)
  done (took 4.173422845 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.076991417 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.091983393 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.096581921 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.146345635 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.113699998 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.086196577 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.0859534 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.105717346 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.105326386 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.071918062 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.075626069 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.098483133 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100350639 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.078497841 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.110294876 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.090425422 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.084002694 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.073794216 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.077930294 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.106102192 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.094162882 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.090325803 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.104352566 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.092090481 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.070614243 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081055252 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.07850422 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.086630028 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.078636055 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.083814588 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.075885709 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.075247675 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.072145127 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.084746417 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.076144014 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.069173297 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.093303162 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08421325 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.087331254 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.110172708 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.081229407 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.072780771 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.101661866 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.137849597 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.071061523 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.07406676 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.075524792 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.084105429 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.072527581 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.101779608 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.090366287 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.070674735 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.090946844 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.072807902 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.072952787 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08876341 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.072684572 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.07360234 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.083581029 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.07731092 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.092575994 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.076600309 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.092918372 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.071454094 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.082649823 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.07266248 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.072925332 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.070028822 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.107620413 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.078737669 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.124672547 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.072484011 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.069344418 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.083383425 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.082617375 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07835008 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.071198601 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.090796161 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.083353921 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.074699068 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.083245187 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.074104448 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.074436062 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.107245843 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.070481354 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.069542036 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.069248737 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.073891066 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.074287512 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.071983945 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.084969617 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.070526691 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.074859957 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.087013514 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.071070897 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.071734661 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.073454494 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.07219908 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.070465526 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082302444 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.074988475 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.073954207 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.083428297 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.071815918 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.07426599 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.086117802 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.080492307 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.07050667 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.072202093 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.073804909 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.075615823 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.075974015 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.075107336 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.073392458 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.078246782 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.078779176 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.07921714 seconds)
  done (took 11.6567906 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.167878649 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.156458837 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.072833535 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.15287267 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.08028843 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.075892445 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.153239661 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.091509441 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.071959356 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.073004862 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.071393035 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.099987962 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.095449988 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.108756782 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.075896863 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.072738546 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.098209257 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.106284982 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.155510043 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.149250824 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.095518645 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.079987288 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.074189471 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.073435813 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.073153173 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.080805581 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.090992694 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.081008121 seconds)
  done (took 4.762290127 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.080260313 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.115280144 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.07599491 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.096613846 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.091289054 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.071823304 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.074109097 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.072926553 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.089074789 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.079389863 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.07195609 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.076148207 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.07567156 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.074338771 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.072782441 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.078795433 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.07825049 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.070903425 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.075703281 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.076749829 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.083205135 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.098991523 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.076011776 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.071882044 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.074743909 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.072037001 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.079124763 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.082600197 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.071690862 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.102558772 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.069449101 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.075794066 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.086956583 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.073282609 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.072178747 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.07252101 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.07226218 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.071816559 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.07210097 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.07009369 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.069839583 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.080058252 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.070977158 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.078190471 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.085950077 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.07948318 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.073517954 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.074834198 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.074943251 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.068706887 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.075635969 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.075129743 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.074802329 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.08005233 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.075307907 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.074434655 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.073634904 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.101872129 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.078212305 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.071594152 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.070830186 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.070011616 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.074194575 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.080126803 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.089262511 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.073899232 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.06995443 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.072005045 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.076797772 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.086404402 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.07102624 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.076992435 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.068868569 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.072239554 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.074031498 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.074443717 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.073253179 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.070258777 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.071721403 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.071885877 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.072030727 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.071350704 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.071113664 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.074889161 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.06936443 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.070498232 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.072187672 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.073221384 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.078745894 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.071091757 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.074682245 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.072810804 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.070707603 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.074509934 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.077144327 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.074510384 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.090950842 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.080505842 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.07234995 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.069653138 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.086225551 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.073761456 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.071003355 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.07738049 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.075784622 seconds)
  done (took 10.017568351 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092689798 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.073359912 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.09166135 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098637902 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.081628318 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.077451457 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.086214705 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.072854136 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.08796479 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.071456839 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.08094868 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.070382164 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.085147032 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.081086163 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.0735634 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.08209598 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.074380734 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.092388952 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.086709121 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.07361457 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.081686267 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.084505182 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.084521886 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.090035907 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.089561065 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.090217582 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.083888249 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.074423249 seconds)
  done (took 4.303247744 seconds)
done (took 41.896658536 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.007130799 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.166807608 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.994070925 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.198317498 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.303293707 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.016071516 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.212833847 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.989521672 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.058307336 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.041398407 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.301544767 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.407922207 seconds)
done (took 68.685840608 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.059747233 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.158415562 seconds)
    (2/2) benchmarking "String"...
    done (took 2.212373428 seconds)
  done (took 6.292372946 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.588107364 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.990830883 seconds)
    (3/3) benchmarking "different"...
    done (took 2.052939099 seconds)
  done (took 8.553676016 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.124930824 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.004492149 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.248864625 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.990993561 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.001529412 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.337078656 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.791946629 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.451847379 seconds)
  done (took 32.7510877 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.120888079 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.192497017 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.710943659 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.724253801 seconds)
  done (took 16.713355728 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.595677258 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.252889038 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.252395478 seconds)
    (4/4) benchmarking "different"...
    done (took 2.246697747 seconds)
  done (took 11.320063253 seconds)
done (took 87.831251314 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.992907138 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.98943916 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.004659558 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.024597964 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.9962928 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.987465511 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.985575182 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.986442841 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.041196998 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.017428991 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.985185807 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.998128157 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.982717704 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.014173184 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.484457081 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.028904804 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.991712806 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.983413249 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.997854065 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.028129781 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.984494884 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.982028791 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.446884974 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.134613868 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.598339963 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.29244481 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.501226337 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.395004241 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.981770182 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.977018801 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.049512572 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.349746249 seconds)
  done (took 211.136470355 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.977198504 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.76317122 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.831229524 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.021323677 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.250908674 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.172522591 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.115391539 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.321605074 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.982002835 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.984816625 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.106988048 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.977888165 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.136782318 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.916988871 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.968260686 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.974930544 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.122510197 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.138057114 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.969448647 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.149889635 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.995365105 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.948041941 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.885023135 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.08903801 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.99940921 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.975388823 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.177402555 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.98370859 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.161949684 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.095842077 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.020190509 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.987963837 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.197119753 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.838496754 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.984225636 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.992494307 seconds)
  done (took 176.12244529 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.148472273 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.973271759 seconds)
    (2/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.988357723 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.972281942 seconds)
    (4/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.026729184 seconds)
    (5/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.110000415 seconds)
    (6/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.975383022 seconds)
    (7/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.658870775 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.98110072 seconds)
    (9/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.268922062 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.977295308 seconds)
    (11/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.971646415 seconds)
    (12/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.97160334 seconds)
    (13/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.97103112 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.983782966 seconds)
    (15/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.093465861 seconds)
    (16/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.974709708 seconds)
    (17/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.986000879 seconds)
    (18/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.974057427 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.999431879 seconds)
    (20/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.972016799 seconds)
    (21/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.97239629 seconds)
    (22/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.971533931 seconds)
    (23/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.97171093 seconds)
    (24/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.972344884 seconds)
    (25/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.971676269 seconds)
    (26/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.972171527 seconds)
    (27/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.972478117 seconds)
    (28/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.30150838 seconds)
    (29/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.232908559 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.975154357 seconds)
    (31/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.97325382 seconds)
    (32/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.273190528 seconds)
    (33/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.989114662 seconds)
    (34/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.012350979 seconds)
    (35/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.976398842 seconds)
    (36/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.060400781 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.026938277 seconds)
    (38/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.071015596 seconds)
    (39/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.975957541 seconds)
    (40/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.190998146 seconds)
    (41/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.06313767 seconds)
    (42/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.972447545 seconds)
    (43/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.973035317 seconds)
    (44/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.03421493 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.985419311 seconds)
    (46/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.973640302 seconds)
    (47/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.973745359 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.974321499 seconds)
    (49/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.980525042 seconds)
    (50/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.035941151 seconds)
    (51/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.218515947 seconds)
    (52/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.974851991 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.108371083 seconds)
    (54/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.467061261 seconds)
    (55/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.977570756 seconds)
    (56/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.973756326 seconds)
    (57/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.973036758 seconds)
    (58/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.975578188 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.584078244 seconds)
    (60/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.97832267 seconds)
    (61/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.974944321 seconds)
    (62/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.98099915 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.980315324 seconds)
    (64/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.974639394 seconds)
    (65/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.974333059 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.361454986 seconds)
    (67/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.044252025 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.05367936 seconds)
    (69/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.244561873 seconds)
    (70/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.977089989 seconds)
    (71/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.38116824 seconds)
    (72/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.053877336 seconds)
    (73/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.97594201 seconds)
    (74/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.974791621 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.974795141 seconds)
    (76/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.976144402 seconds)
    (77/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.974511566 seconds)
    (78/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.978864165 seconds)
    (79/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.108652201 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.984787289 seconds)
    (81/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.076935248 seconds)
    (82/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.059302994 seconds)
    (83/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.974490911 seconds)
    (84/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.974742531 seconds)
    (85/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.107787622 seconds)
    (86/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.980683541 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.98426361 seconds)
    (88/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.774791699 seconds)
    (89/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.046838333 seconds)
    (90/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.011301201 seconds)
    (91/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.784724317 seconds)
    (92/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.977405016 seconds)
    (93/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.350786427 seconds)
    (94/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.73993776 seconds)
    (95/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.97851134 seconds)
    (96/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.975746555 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.988057662 seconds)
    (98/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.976157669 seconds)
    (99/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.975479928 seconds)
    (100/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.97633622 seconds)
    (101/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.05306192 seconds)
    (102/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.978088926 seconds)
    (103/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.975270835 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.108564993 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.699249795 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.275893359 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.979762572 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.975874875 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.97283708 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.055100265 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.109324713 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.979986719 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.040105662 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.985567004 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.978758764 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.073298197 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.978162971 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.978254194 seconds)
  done (took 431.67762306 seconds)
done (took 823.050628899 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.617019443 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 2.637163301 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.724192612 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 2.582101546 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 2.570849615 seconds)
  done (took 15.04008951 seconds)
done (took 16.947322872 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.006264905 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.994435309 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.982598271 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.032005674 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.002328802 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.988793015 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.023006588 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.021807203 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.007782188 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.991279175 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.029907963 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.993696453 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.008789239 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.011890601 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.052906571 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.016533819 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.99460233 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.986589579 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.032737765 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.994987048 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.995277815 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.992348811 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.991542534 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.030391176 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.062463899 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.00122039 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.99130414 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.029030615 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.00160801 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.016752627 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.047359676 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.011856633 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.024478291 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.055983341 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.024102946 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.060571443 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.000513298 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.048067656 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.997413604 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.063391695 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.035290545 seconds)
  done (took 84.564915008 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.987469065 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.123267688 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.196995972 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.019400399 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.987364817 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.200581188 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.0455321 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.114910627 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.119319504 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.208436136 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.209032999 seconds)
  done (took 25.127539527 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.986819267 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.124030767 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.206635658 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.022637267 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.989546904 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.202187037 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.051527133 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.114296275 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.109705126 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.209090835 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.213196904 seconds)
  done (took 25.152114647 seconds)
done (took 136.753329508 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.360112543 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.009619244 seconds)
  done (took 6.28300497 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.003981671 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.136169423 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.983884743 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.983303515 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.982195643 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.982582298 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.982143724 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.983775214 seconds)
  done (took 17.951575996 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.981604911 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.982904089 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.98252137 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.983640519 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.982835471 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.982827957 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.982438927 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.98300223 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.983555241 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.982801258 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.982418839 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.983803749 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.982664955 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.983688308 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.983830897 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.983156127 seconds)
  done (took 33.642804825 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.985193367 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 1.982381414 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 1.98381668 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 1.983243144 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.983068989 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.983814863 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 1.984015701 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 1.982591325 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 1.983563217 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 1.982562746 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 1.984290676 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 1.983611132 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 1.984604848 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 1.969735523 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.983648679 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 1.983889381 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.983563092 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 1.985217441 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 1.988639165 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 1.98442974 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 1.977452967 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 1.984570765 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 1.985819191 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 1.984721746 seconds)
  done (took 49.513838062 seconds)
done (took 109.312394622 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.180701986 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.476351696 seconds)
  done (took 8.572845405 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.987005917 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.981663336 seconds)
  done (took 5.940589337 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.971919917 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.983600561 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.985078911 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.985434226 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.985582831 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.984449951 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.984131651 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.971777394 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.985530185 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.971177426 seconds)
  done (took 21.723945307 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.986155266 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.986054857 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.987011892 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.985922207 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.985686709 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.985655767 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.985702181 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.985166407 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.986335803 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.985180773 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.987398891 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.986107284 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.985855092 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.986672045 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.985628002 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.985790525 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.986470224 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.985853673 seconds)
  done (took 37.665542954 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.987077896 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.98640676 seconds)
  done (took 5.890826491 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.986516564 seconds)
    (2/7) benchmarking "second"...
    done (took 1.985773913 seconds)
    (3/7) benchmarking "month"...
    done (took 1.986665876 seconds)
    (4/7) benchmarking "year"...
    done (took 1.986839956 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.986846685 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.977854309 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.986939041 seconds)
  done (took 15.815116757 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.987362906 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.126280295 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.186588794 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.601025376 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.988576067 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.989543205 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.86694725 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.990944445 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.992074023 seconds)
  done (took 21.646248593 seconds)
done (took 119.169031594 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.765579029 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.97512163 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.276239917 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.056335171 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.999958127 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.282736211 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.007088016 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.583087406 seconds)
done (took 43.862956561 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.049532628 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.98518923 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.018054204 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.020238189 seconds)
  done (took 22.941650091 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.987544498 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.309246338 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.010820464 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.784684939 seconds)
  done (took 23.029607325 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.384164357 seconds)
    (2/2) benchmarking "read"...
    done (took 2.343364816 seconds)
  done (took 6.649580811 seconds)
done (took 61.589290795 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.988361944 seconds)
    (2/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.988591983 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.989165314 seconds)
    (4/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.989171616 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 1.988260221 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.988563375 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.987576191 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.989255384 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.989140152 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.989603335 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.989855792 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.989018592 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.988760085 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.989907083 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.988685689 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.990069655 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.989289594 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.989373395 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.988616143 seconds)
    (20/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.990244861 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.988716662 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.989840969 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.989113441 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.990337188 seconds)
  done (took 49.657920479 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.990106317 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.989716279 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.989951279 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.989164086 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.991208277 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.989562008 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.989281254 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.989126762 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.98943912 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.990598526 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.991280763 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.990288171 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.991407472 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.989934442 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.991455631 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.990269097 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.992156057 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.990518599 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.991032086 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.976332229 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.990954139 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.990295054 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.991592375 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.991228811 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.992364438 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.991583871 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.990276902 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.9910266 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.99162789 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.992403867 seconds)
  done (took 61.627975969 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.991697453 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.992301265 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.99172547 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.992303719 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.99213375 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.991602447 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.992257827 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.992119701 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.993213848 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.992647952 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.993072115 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.991700616 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.992692071 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.985947483 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.991548635 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.99247658 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.993087679 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.992228933 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.993790042 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.992215297 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.992661378 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.992530678 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.991677824 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.991626005 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.992235999 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.99120535 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.991743603 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.991036457 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.993323437 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.992296325 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.992531614 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.992215537 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.99280296 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.995296832 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.994382289 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.993761561 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.9930581 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.993343911 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.99482683 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.994120146 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.994798578 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.994542714 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.993171506 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.995520931 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.994923554 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.995533486 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.996183443 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.994072438 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.995079598 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.994373662 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.995233079 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.993818851 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.994744016 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.99555829 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.994621857 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.994694862 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.99538912 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.994770229 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.995330625 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.995674625 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.993861138 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.994724881 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.995999819 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.995441027 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.994011483 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.994688404 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.994067078 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.994852311 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.994857487 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.995442571 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.995299266 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.995139473 seconds)
  done (took 145.457545496 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.99477095 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.995441735 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.995606031 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.995011818 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.994620486 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.996078083 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.995645431 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.995546379 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.995508977 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.996351762 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.996304401 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.996052296 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.995902809 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.996600279 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.997093365 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.996877881 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.997393148 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.995972998 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.997589442 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.996838394 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.997415908 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.997442079 seconds)
  done (took 45.841215629 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.996412128 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.996912278 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.997458186 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.996561188 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.996585659 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.996684136 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.996785087 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.997113433 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.996859502 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.997720615 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.997627979 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.996629439 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.999133253 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.997460274 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.99770738 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.998282878 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.997610967 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.99781467 seconds)
  done (took 37.878547369 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.998368472 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.997958032 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.996963681 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.997951214 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.997579199 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.997539074 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.993314375 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.999002823 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.99893023 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.99835867 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.99806221 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.997778088 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.998345069 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.999177551 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.999379316 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.998772351 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.99913603 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.998143862 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.999382032 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.99880692 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.998717539 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.998189024 seconds)
  done (took 45.887719 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.999608653 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.999112092 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.999105711 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.998794584 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.999987426 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.999196321 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.998629362 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.99967803 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.997601646 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.999471419 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.999779176 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.99937359 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.999184275 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.988281938 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.99776666 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.000406422 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.999263549 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.999300726 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.999072526 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.999346086 seconds)
  done (took 41.902360596 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.001123036 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.000130611 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.000708834 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.00105866 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.001509633 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.00250519 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.001451053 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.001320954 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.001530419 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.001123402 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.000653597 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.000564488 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.001013061 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.002121828 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.001814701 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.001453368 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.999721066 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.001227398 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.001340938 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.002407531 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.001837859 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.001860962 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.001427834 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.001239068 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.001891965 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.997040914 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.001106696 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.002134515 seconds)
  done (took 57.96401134 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.002385707 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.002106126 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.000513197 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.001147912 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.001389515 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.002058301 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.002895379 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.003448421 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.001789811 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.000338252 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.004149864 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.001643114 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.002145128 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.992372873 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.000767561 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.00337696 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.002030591 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.001388977 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.002136532 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.00093801 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.003998031 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.001679858 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.002658141 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.002270392 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.002280824 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.003861185 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.003108525 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.003177516 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.001769602 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.002749486 seconds)
  done (took 61.989039713 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.023184299 seconds)
    (2/2) benchmarking "in"...
    done (took 2.02147421 seconds)
  done (took 5.977780871 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.003086797 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.004112319 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.002257641 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.002847322 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.003677336 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.002427511 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.004620977 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.003014113 seconds)
  done (took 17.959008253 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.00423325 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.00728109 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.004391769 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.003968619 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.004489821 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.010852464 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.005023079 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.006509344 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.006531337 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.00648116 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.007900632 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.00752252 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.011470084 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.009410996 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.004703148 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.007144298 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.006932498 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.007933671 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.005185421 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.003706625 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.007650105 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.004671273 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.005214905 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.006544701 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.006473411 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.008158458 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.01643239 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.006314919 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.007166616 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.005582645 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.012084609 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.006145587 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.005238797 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.0069791 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.005458939 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.006054647 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.013026535 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.006667431 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.00720793 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.005850879 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.007421238 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.008809698 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.010686692 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.014569803 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.00567483 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.006505836 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.005616344 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.007703878 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.007816225 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.010494208 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.013875044 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.007887789 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.007927365 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.008305488 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.008934712 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.007572267 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.008493445 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.010109573 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.013405665 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.014868939 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.001396088 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.015521272 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.017206 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.007261979 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.008278839 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.017220541 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.027571613 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.010433516 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.010461432 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.008485835 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.015782019 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.008213839 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.008799124 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.008880234 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.021700957 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.016379401 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.008004989 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.009948293 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.008160137 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.010330963 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.010490286 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.008319388 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.010703732 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.009109161 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.018459549 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.029359574 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.009843682 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.009962743 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.011830649 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.011648392 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.013409201 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.012327504 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.012178447 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.009806544 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.011154088 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.013064134 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.009210903 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.011743472 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.009979372 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.018471682 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.010448977 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.009447518 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.013795136 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.016360602 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.009015749 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.99792608 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.010801623 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.011850982 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.017019677 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.010834956 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.010604743 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.010393783 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.013998796 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.014862606 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.010905904 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.013462709 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.018473638 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.018867001 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.013112604 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.014861373 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.013986536 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.01527778 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.020684309 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.032383295 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.01078598 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.998961801 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.016433409 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.022824014 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.016308926 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.011824782 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.014156723 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.012108759 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.012148919 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.997394642 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.010880871 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.013404846 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.011827639 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.003308471 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.01206229 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.001742393 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.015652658 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.003668427 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.015557385 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.013676173 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.017516692 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.013183108 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.015980264 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.021214099 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.013994626 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.013420109 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.012560951 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.014510028 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.014935322 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.011871721 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.010930765 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.011697024 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.013511645 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.014460568 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.015572512 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.013927066 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.013684929 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.015838014 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.016254962 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.013983408 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.012873711 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.014181003 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.014934154 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.014151347 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.015923938 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.015061761 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.016112261 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.015718408 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.019953543 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.014073001 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.0152204 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.015179324 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.015148569 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.01406793 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.017009734 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.025289218 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.017366531 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.023565167 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.014584112 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.021761717 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.015383538 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.016711274 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.015845307 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.015005217 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.014084243 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.015595821 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.014324426 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.020119198 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.035323133 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.025849664 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.017187064 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.017626838 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.021729682 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.018711572 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.020725817 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.016491225 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.016449243 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.018090395 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.015345967 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.017133234 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.015931939 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.019291104 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.015382437 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.016712039 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.020070573 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.016403883 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.01642204 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.017288328 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.01692708 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.01807189 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.015866339 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.01809395 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.018764791 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.01619973 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.024967287 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.019921343 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.016605904 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.016916001 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.019209216 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.017671869 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.016561007 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.019748655 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.022283604 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.018141973 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.019244534 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.02538601 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.020329407 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.020302288 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.01947618 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.017474746 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.018478883 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.018462316 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.021750361 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.024636922 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.021003323 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.01732152 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.023827376 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.017917419 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.020340448 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.0189085 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.019963149 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.018926005 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.019857882 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.01887128 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.021768359 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.027183259 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.017926557 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.020349149 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.018611132 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.02295975 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.02208236 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.021797881 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.02077188 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.022836133 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.025615174 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.025577223 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.021034404 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.023344223 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.020771701 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.021999223 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.023547897 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.020302393 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.032882279 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.027585783 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.019957486 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.019574191 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.020746689 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.022426419 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.019163222 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.021159049 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.027533347 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.022717366 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.022068293 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.023347386 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.020614086 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.020850019 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.028341146 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.022279377 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.02359588 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.022228427 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.022116597 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.022518533 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.021016848 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.023814695 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.020013923 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.022131638 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.024290592 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.020324955 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.021281127 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.020451499 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.031007487 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.021946082 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.022229683 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.028564362 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.021870792 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.022427068 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.023684948 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.022158427 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.021282076 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.022899961 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.023473576 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.02460512 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.022416081 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.024535907 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.030696602 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.024616679 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.029399959 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.021903621 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.031462759 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.022067931 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.022190354 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.023055896 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.026634211 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.028613392 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.022600321 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.023703503 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.032158796 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.024406694 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.025368446 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.027073987 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.022579451 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.023619869 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.024071928 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.025885948 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.028146276 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.026271694 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.025128138 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.023186977 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.022625923 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.024283135 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.026640641 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.025483745 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.024071047 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.025056895 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.022976453 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.023547292 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.024552236 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.023478759 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.024230721 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.022848439 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.023244597 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.031534698 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.024240519 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.026132738 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.027905179 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.024986462 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.032799753 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.024506017 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.024662768 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.026807812 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.02464086 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.027960617 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.024521726 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.024818049 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.026679663 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.024639453 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.026519935 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.035682107 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.031905125 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.029192768 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.027622987 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.026295174 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.026349597 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.034874257 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.046355386 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.025928548 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.027123752 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.029379157 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.032590549 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.028225782 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.029715897 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.029944048 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.034179833 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.027202029 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.026414774 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.029585199 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.036850906 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.026254092 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.025932862 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.025299774 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.032101638 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.028535916 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.025632671 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.02792207 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.030529764 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.029013314 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.036923044 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.026396147 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.02998062 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.028156383 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.026933044 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.027183257 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.030170739 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.028624923 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.029375021 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.026929277 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.02757659 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.028972561 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.030891033 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.027274618 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.030856592 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.035991241 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.027661538 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.027308364 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.029315197 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.027244295 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.028947508 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.028738943 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.029616376 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.031923914 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.028281834 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.030897819 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.031782313 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.037058945 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.027900539 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.023680386 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.000078918 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.024009906 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.030087018 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.029393474 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.031311117 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.037210413 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.031460652 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.038902162 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.03740956 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.029243406 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.030980418 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.035041134 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.035770576 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.029402046 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.027790945 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.028866938 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.031502882 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.031025575 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.030302861 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.030465685 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.031364427 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.034157498 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.029044541 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.03160759 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.030652222 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.030233112 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.032528144 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.031854268 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.033922506 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.030313412 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.030224352 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.030874079 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.030441618 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.031368515 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.033448981 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.030380584 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.029628138 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.031767555 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.03244972 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.033297231 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.0294872 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.028622606 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.032439954 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.030365439 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.029703783 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.032320294 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.032349738 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.030494963 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.034189598 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.037402301 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.030888744 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.031659311 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.034074457 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.034796862 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.03066416 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.031154054 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.031655404 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.031193073 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.039334687 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.030608729 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.031079373 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.033382463 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.031083957 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.036972383 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.032406657 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.035549188 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.03150732 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.032589959 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.032460803 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.035413363 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.040417331 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.035101948 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.035372817 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.039375061 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.037285513 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.033416476 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.031393177 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.0322908 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.032774806 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.034111097 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.036137819 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.034655225 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.036708825 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.032921721 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.035141097 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.032889484 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.035374685 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.032320944 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.032704188 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.036213376 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.041476719 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.042250084 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.032778853 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.034811293 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.034103619 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.037133961 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.044955384 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.034589646 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.033445612 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.033317771 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.035498017 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.035803184 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.040500734 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.042750275 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.037621699 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.020623945 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.038066007 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.051321922 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.036694493 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.043647732 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.062693039 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.037157425 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.034481343 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.034744927 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.036075127 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.035420861 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.038886166 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.034092087 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.04146567 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.035044836 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.034602815 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.042812187 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.034168341 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.03399474 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.036618624 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.0364074 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.040895277 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.035588977 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.04304922 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.035545842 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.034266828 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.037350607 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.039327548 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.035004874 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.034219628 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.03490602 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.038416965 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.034628277 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.480647845 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.044367834 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.035521375 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.039170166 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.050027615 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.047360715 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.03631906 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.036029736 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.022960184 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.042211808 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.038623961 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.035718618 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.038976141 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.043206948 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.039901382 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.043212483 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.038667495 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.038372916 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.038239486 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.036582075 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.03661851 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.050104844 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.047102214 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.038872608 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.038509167 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.043696071 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.037249899 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.034831483 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.033520979 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.013809475 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.039632774 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.03773655 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.036764922 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.037276918 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.037755501 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.041919201 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.043981742 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.038851041 seconds)
  done (took 1208.368899057 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.037846037 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.037247304 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.037388346 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.038342623 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.037076414 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.03651262 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.027121887 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.037118328 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.037911529 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.013889198 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.028011017 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.038597929 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.038876165 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.039741431 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.03790929 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.038284126 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.039256709 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.039079232 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.038927268 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.038605018 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.039073562 seconds)
  done (took 44.723237254 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.039056156 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.038936386 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.039362579 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.038480394 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.039321079 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.039170368 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.039198938 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.039487389 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.039870357 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.038478096 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.039527134 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.028327585 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.027058037 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.039839217 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.038329345 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.038297259 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.039069122 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.040422114 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.040043432 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.040353933 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.040782501 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.039679905 seconds)
  done (took 46.810049737 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.042235558 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.040787938 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.031542955 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.040813974 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.04057169 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.041506178 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.04157068 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.044278243 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.042897634 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.04309262 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.04721242 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.048762891 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.041487672 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.045043295 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.042096549 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.041007099 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.186906651 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.041915905 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.04321816 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.041673353 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.042201675 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.049705182 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.041166102 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.040386559 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.043176755 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.041788724 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.042135843 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.041465588 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.042129523 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.044656109 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.045268412 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.042893221 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.04419981 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.047327402 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.044161925 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.045562528 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.047651912 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.042813118 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.042468998 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.043592853 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.051731893 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.065064752 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.041734408 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.043292448 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.050727747 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.043222254 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.043646502 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.046147536 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.049973233 seconds)
  done (took 102.26918085 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.042814636 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.043549851 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.040047924 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.043447161 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.041623814 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.043855547 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.043136268 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.043439196 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.044266784 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.043477236 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.044046045 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.044920237 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.045076635 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.043439557 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.043889429 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.044038014 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.040765566 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.044132297 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.045571584 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.04315103 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.044290858 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.044499461 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.044099751 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.044529345 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.044199708 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.044236059 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.044855924 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.043888215 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.045507527 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.044391205 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.045021788 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.044989307 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.044516469 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.044505364 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.045205275 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.046349752 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.046341972 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.045858548 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.04539976 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.045017524 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.045698354 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.045232555 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.044480891 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.045168053 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.045791964 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.045499408 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.046674658 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.045817905 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.044799191 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.045724411 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.046294177 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.045551593 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.045640857 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.046226065 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.04526071 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.045749609 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.046293872 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.045756592 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.046453056 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.045965454 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.045837591 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.046212161 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.046357035 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.046819343 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.046213965 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.046994165 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.047230517 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.046925139 seconds)
  done (took 141.025903279 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.047465971 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.047791283 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.046530387 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.047799366 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.047395842 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.0470284 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.047978354 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.048961344 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.048005776 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.048060404 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.049714054 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.04762573 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.046919856 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.047041081 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.047875841 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.047860147 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.047541011 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.048079217 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.047800579 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.047923546 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.047686094 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.048369236 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.047595361 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.04806909 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.048610454 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.049349206 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.048934204 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.049403447 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.049375713 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.048666498 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.048716037 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.049386978 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.050178815 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.048549644 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.049431548 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.049406811 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.048731842 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.04944498 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.048735761 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.049408811 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.049306807 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.050251971 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.04890564 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.0497843 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.050532529 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.050167678 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.050000923 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.049842563 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.049654084 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.049822221 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.049820454 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.049863509 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.049869839 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.050222987 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.051342863 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.050217533 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.05148987 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.05039588 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.049795836 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.050085887 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.049869764 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.050109969 seconds)
  done (took 129.011023683 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.050016306 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.050030852 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.04983043 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.049831319 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.049600572 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.050094722 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.051070301 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.050625278 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.049591813 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.049372343 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.05156742 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.050966237 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.051730188 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.051398311 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.052242594 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.053042921 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.051637082 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.051417146 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.051841985 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.051150219 seconds)
  done (took 42.994543259 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.051757769 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.050466117 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.051184731 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.052239717 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.051663167 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.050613308 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.050864827 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.051724545 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.051019841 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.050683645 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.050069026 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.052805124 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.052613716 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.052848085 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.052555171 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.052377228 seconds)
  done (took 34.804243271 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.05287477 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.053652545 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.053647839 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.052779244 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.053467459 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.051863458 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.052491318 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.053144616 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.051686396 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.053879772 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.051931032 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.052998255 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.052513835 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.052363649 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.05292361 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.053818747 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.053283125 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.052993329 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.053466542 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.054025237 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.053682146 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.052346334 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.052834255 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.053043943 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.052555044 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.053019396 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.053538787 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.054144651 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.053962885 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.053737572 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.053579753 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.053906829 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.053422937 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.054585271 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.054251292 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.054781691 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.054114186 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.051959028 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.054982104 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.053349073 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.053627877 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.054757707 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.054159934 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.054792918 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.054240979 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.054643568 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.054952695 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.054642594 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.054712769 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.054637837 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.054061099 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.054361437 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.054772684 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.056018178 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.055680015 seconds)
  done (took 114.93317421 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.055749196 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.054611376 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.054821414 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.054099045 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.054140989 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.053715642 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.054997329 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.055023559 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.053771778 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.054219413 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.055748381 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.054217973 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.055021375 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.054718125 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.05548522 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.054823009 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.055901492 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.056486102 seconds)
  done (took 38.969638751 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.056038608 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.056544547 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.055627553 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.055718745 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.055634495 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.057850007 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.055848369 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.056458553 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.056474938 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.056802697 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.057142496 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.056305907 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.056522717 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.056677587 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.058758439 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.057381431 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.056542737 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.05660269 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.05715394 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.056525002 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.056945697 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.057286749 seconds)
  done (took 47.231020789 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.059108466 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.0580281 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.062583594 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.065280726 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.078942228 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.089776744 seconds)
  done (took 14.398484246 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.058344393 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.056758527 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.057413097 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.057187103 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.058498518 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.057813425 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.057741062 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.057581958 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.057652268 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.058142937 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.059650912 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.058577068 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.058857272 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.058434966 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.058179361 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.058732974 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.057574403 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.057425649 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.057997019 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.057505057 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.052392091 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.05732926 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.058007677 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.059118534 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.059055669 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.058266943 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.058074141 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.058415761 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.059907356 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.059609105 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.059233871 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.06064066 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.059436718 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.059390862 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.060128217 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.058971634 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.060067787 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.059920685 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.060169971 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.06050545 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.060543049 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.059397009 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.059725008 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.060558723 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.059941956 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.060709355 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.060124911 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.059441972 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.059678831 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.058798973 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.058055684 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.057927007 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.058297722 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.059664144 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.058517475 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.059900628 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.061503337 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.061574793 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.061778367 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.060856098 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.060980017 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.06155821 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.061327612 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.062098838 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.061702585 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.061069515 seconds)
  done (took 137.891996355 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.061278636 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.061160816 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.062071461 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.061479439 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.062393064 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.062662992 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.061820965 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.061323128 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.062694472 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.061025006 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.062119256 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.062552492 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.062107943 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.062105442 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.06287844 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.06220084 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.062510642 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.062023655 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.060939141 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.06256278 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.062115498 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.062738891 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.062502844 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.062100871 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.063144816 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.062751513 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.063022783 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051552307 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.062620631 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.063269563 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.063865193 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.062087775 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.063360494 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.062528379 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.062335752 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.064384746 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050699874 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.06319223 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.056864334 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.055080028 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.063769494 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.063764464 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.063060328 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.063237423 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051462387 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.061366167 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.06470246 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.062711378 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.062352985 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.063287854 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.064146516 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.064121767 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048774729 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.064041176 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.047900541 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.064959852 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.064061891 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.064361585 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.065320066 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.064721725 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.063744094 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.063832433 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.065089023 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.065866586 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.065427187 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.065331483 seconds)
  done (took 138.072198822 seconds)
done (took 2815.573715219 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.12574777 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.319408015 seconds)
  done (took 16.436126648 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.237224621 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.187538609 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.072926783 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.086714317 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.073087498 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.102539935 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.101397663 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.072221689 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 2.072974741 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 2.072367269 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.07253745 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.258403814 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.102943497 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.073195176 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.0730207 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.167201953 seconds)
  done (took 55.825678716 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.076355667 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.077029294 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.079013859 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.077217065 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.079805178 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.095638543 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 2.110930609 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 2.083856587 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 2.140508665 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.092827614 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.197864573 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.091116108 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 2.07903401 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.130050465 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 2.095531435 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.094716834 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 2.171144225 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.158639339 seconds)
  done (took 39.927858497 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.165027313 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.104222369 seconds)
  done (took 11.27539382 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.080864388 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.09936115 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.108012961 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.0988692 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.099202466 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.103101335 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.097040694 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.080828399 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.10964089 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.085963529 seconds)
  done (took 72.96416937 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.081566703 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.082186959 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.068635248 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.076452205 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.074739796 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.07953174 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.076416983 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.07377835 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.77958303 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 2.118406599 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 2.087421927 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.085447942 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.07751168 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.077818326 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.076446817 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.100789776 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.246645645 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.071869349 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.072268356 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.081057964 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.075283531 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.16176132 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.090271493 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.079050202 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.109139466 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.780367733 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.087921076 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.081150758 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.246586894 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.070327275 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.073023369 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.232026428 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.07923291 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.517889391 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.35283029 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.080965406 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.081472414 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.077087331 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.067031233 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.253179138 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.068461343 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.074108232 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.968582258 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.321790999 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.175358074 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.112647755 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.453753205 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.067403875 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.064519431 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.097410614 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.068021792 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.063890757 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 2.079494512 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.570470145 seconds)
  done (took 144.272548415 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.065311251 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.297837832 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.214517776 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.064182326 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.320248723 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.271467203 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.063011611 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.106007944 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.063814298 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.261506942 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.315578975 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.162172732 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.060883341 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.054930911 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.058008718 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.053434929 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.201501313 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.120675114 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.057424443 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.050663747 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.075069276 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.252347459 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.172998978 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.054561157 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.075370267 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.256889129 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.172643655 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.152340127 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.823830691 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.047675909 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.11079187 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.052436757 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.052717768 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.047330662 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.201608525 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.14277111 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.131985964 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.051467597 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.048346541 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.046734668 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.719771111 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.246128721 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.141401851 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.16918174 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.296862805 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.262814907 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.659174038 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.04531939 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.673860595 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.210031619 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.252016036 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.253946645 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.157557145 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.048948394 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.340478151 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.044121014 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.043334146 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.264998535 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.263331215 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.14390141 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.046052327 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.043930683 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.041414604 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.280134777 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.045524778 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.133172983 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.045485629 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.041983571 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.134565136 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.143653283 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.270285854 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.263631841 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.072411584 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.360904176 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.53118747 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.242958983 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.106638816 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.261159306 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.044314321 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.039213974 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.119198721 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.878172163 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.291270997 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.281296825 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.238883336 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.069946404 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.689753699 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.037918367 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.225109175 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.230175222 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.271934611 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.286956586 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.271995817 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.379791783 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.037855712 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.0372887 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.349291117 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.154153475 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.991610272 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.387240201 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.264903214 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.570953999 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.062650442 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.321314925 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.165928218 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.04020745 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.683716819 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.038821534 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.240225174 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.075275566 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.03780401 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.035911601 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.224443899 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.937257283 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.033479026 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.741181194 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.091695004 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.033863919 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.23492412 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.034461898 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.275283919 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.033305267 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.26124108 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.922997839 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.06102269 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.204382634 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.277721019 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.664381018 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.341693265 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.274016481 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.145181341 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.254053955 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.840761486 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.032897099 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.292610661 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.034059572 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.030192967 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.200861921 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.033312499 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.174310131 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.03376737 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.296214126 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.052988871 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.258263964 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.036224719 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.257405831 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.064257173 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.082187915 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.034217477 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.156012566 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.033454762 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.883706507 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.189249253 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.037074251 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.032550143 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.619155411 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.033681658 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.186210201 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.256259042 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.053363515 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.101054021 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.597630927 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.031097912 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.113531677 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.054428136 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.674096672 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.032197519 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.283509384 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.974715559 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.506625994 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.032573398 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.267047315 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.21937838 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.036594493 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.033475646 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.875037385 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.032607189 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.033066774 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.188918552 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.437406368 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.942821803 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.231533861 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.037576847 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.161148282 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.036946938 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.108622834 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.364171247 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.034567913 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.033447091 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.03415122 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.033939625 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.035731405 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.242674122 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.06211095 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.481843751 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.170593787 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.293562323 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.340555744 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.232501237 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.075600873 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.039538698 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.257008077 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.038598087 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.097402532 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.037426183 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.054283703 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.265258979 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.038215904 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.239184835 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.268656665 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.918986652 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.080657829 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.037477946 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.032620385 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.939754108 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.174839036 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.117650219 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.032922023 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.028260079 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.143791224 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.147780774 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.210782258 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.844412594 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.187643756 seconds)
  done (took 938.982182751 seconds)
done (took 1281.675810995 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.026999457 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.028018827 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.024936095 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.013315942 seconds)
  done (took 30.038821878 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 2.021650993 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.022105258 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.020357307 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.021611818 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 2.021921419 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 2.021853992 seconds)
  done (took 14.080137097 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.019811015 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.020110274 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.020168943 seconds)
  done (took 23.007776152 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 2.089751768 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.447142944 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 2.1563907 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.454148224 seconds)
  done (took 11.090675427 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.013775787 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 2.012902382 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.012258211 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 2.013895995 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.002557064 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.013501469 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 2.012344141 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.009772693 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 2.011588994 seconds)
  done (took 20.046495672 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.097605014 seconds)
done (took 104.316796366 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.222953606 seconds)
    (2/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.228856475 seconds)
    (3/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.300150598 seconds)
    (4/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.10723537 seconds)
    (5/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.102684664 seconds)
    (6/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.476138895 seconds)
    (7/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.203870947 seconds)
    (8/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.104928519 seconds)
    (9/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.063380617 seconds)
    (10/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.95273896 seconds)
    (11/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.874354833 seconds)
    (12/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.198771484 seconds)
    (13/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.428392959 seconds)
    (14/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.186137787 seconds)
    (15/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.344467929 seconds)
    (16/341) benchmarking ("sort", Float32, false)...
    done (took 5.754980329 seconds)
    (17/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.213764118 seconds)
    (18/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.091493793 seconds)
    (19/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.151827075 seconds)
    (20/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.245465713 seconds)
    (21/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.167001058 seconds)
    (22/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.950487737 seconds)
    (23/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.441824747 seconds)
    (24/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.090588019 seconds)
    (25/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.831248392 seconds)
    (26/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.297397811 seconds)
    (27/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.347155947 seconds)
    (28/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.224974583 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.916411347 seconds)
    (30/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.188047955 seconds)
    (31/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.76273316 seconds)
    (32/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.200306674 seconds)
    (33/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.092984612 seconds)
    (34/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.710861148 seconds)
    (35/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.785111917 seconds)
    (36/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.511772478 seconds)
    (37/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.094144783 seconds)
    (38/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 4.657165203 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.183734559 seconds)
    (40/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.05537693 seconds)
    (41/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.09227324 seconds)
    (42/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.459643877 seconds)
    (43/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.967996481 seconds)
    (44/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.989414458 seconds)
    (45/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.227413629 seconds)
    (46/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.088364844 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.033655412 seconds)
    (48/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.308176123 seconds)
    (49/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.100839575 seconds)
    (50/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.097851652 seconds)
    (51/341) benchmarking ("sort", Int8, false)...
    done (took 5.049354627 seconds)
    (52/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.270016469 seconds)
    (53/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.218790488 seconds)
    (54/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.107902551 seconds)
    (55/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.510241366 seconds)
    (56/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.254688532 seconds)
    (57/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.166590622 seconds)
    (58/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.549618258 seconds)
    (59/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.193984347 seconds)
    (60/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.184192391 seconds)
    (61/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.090710283 seconds)
    (62/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.277661715 seconds)
    (63/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.106181037 seconds)
    (64/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.481929131 seconds)
    (65/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.565954256 seconds)
    (66/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.649799224 seconds)
    (67/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.123950187 seconds)
    (68/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.508115794 seconds)
    (69/341) benchmarking ("sort", Bool, false)...
    done (took 2.310984375 seconds)
    (70/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.173628508 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.033095983 seconds)
    (72/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.102261426 seconds)
    (73/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.175480512 seconds)
    (74/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.095437637 seconds)
    (75/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.562937249 seconds)
    (76/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.476897706 seconds)
    (77/341) benchmarking ("sort", Int64, false)...
    done (took 5.739519562 seconds)
    (78/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.264365056 seconds)
    (79/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.108858174 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.481393093 seconds)
    (81/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.345575643 seconds)
    (82/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.202821166 seconds)
    (83/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.112532819 seconds)
    (84/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.348835092 seconds)
    (85/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.542920438 seconds)
    (86/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.229990579 seconds)
    (87/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.186221121 seconds)
    (88/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.50266984 seconds)
    (89/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.095312764 seconds)
    (90/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.272731481 seconds)
    (91/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.365298412 seconds)
    (92/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.367945247 seconds)
    (93/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.191003984 seconds)
    (94/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.162934643 seconds)
    (95/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.111904602 seconds)
    (96/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.403919169 seconds)
    (97/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.104849347 seconds)
    (98/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.328502934 seconds)
    (99/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.850928847 seconds)
    (100/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.094175351 seconds)
    (101/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 4.313753077 seconds)
    (102/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.116080906 seconds)
    (103/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.073020345 seconds)
    (104/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.202488034 seconds)
    (105/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.092391178 seconds)
    (106/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 3.77732583 seconds)
    (107/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.303865695 seconds)
    (108/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.09872354 seconds)
    (109/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.24039406 seconds)
    (110/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.115300212 seconds)
    (111/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.831901239 seconds)
    (112/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.199119891 seconds)
    (113/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.740336657 seconds)
    (114/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.916244853 seconds)
    (115/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.347144706 seconds)
    (116/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.478932929 seconds)
    (117/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.235972158 seconds)
    (118/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.095306804 seconds)
    (119/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.087215729 seconds)
    (120/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.002341855 seconds)
    (121/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.191594321 seconds)
    (122/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.859906669 seconds)
    (123/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.183661838 seconds)
    (124/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.102146727 seconds)
    (125/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.421535744 seconds)
    (126/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.109494316 seconds)
    (127/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.141549968 seconds)
    (128/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.082191288 seconds)
    (129/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.078961274 seconds)
    (130/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.398310845 seconds)
    (131/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.476511344 seconds)
    (132/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.073341034 seconds)
    (133/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 3.857237583 seconds)
    (134/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.08388234 seconds)
    (135/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.1824531 seconds)
    (136/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.379857442 seconds)
    (137/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.228039516 seconds)
    (138/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.180497207 seconds)
    (139/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.818874929 seconds)
    (140/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.451439892 seconds)
    (141/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.146542268 seconds)
    (142/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.364487225 seconds)
    (143/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.382795268 seconds)
    (144/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.335521178 seconds)
    (145/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.081395666 seconds)
    (146/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.342480321 seconds)
    (147/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.07071969 seconds)
    (148/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.817944173 seconds)
    (149/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.213665368 seconds)
    (150/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.333959101 seconds)
    (151/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.202184255 seconds)
    (152/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.223405447 seconds)
    (153/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.197605351 seconds)
    (154/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.367819739 seconds)
    (155/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.868139614 seconds)
    (156/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.424600203 seconds)
    (157/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.079538435 seconds)
    (158/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.761759596 seconds)
    (159/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.067295447 seconds)
    (160/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.670200347 seconds)
    (161/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.320264722 seconds)
    (162/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.157491966 seconds)
    (163/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.375756324 seconds)
    (164/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.067380977 seconds)
    (165/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.507010472 seconds)
    (166/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.355795069 seconds)
    (167/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.260162445 seconds)
    (168/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.193080659 seconds)
    (169/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.138196883 seconds)
    (170/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.159085939 seconds)
    (171/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.170293185 seconds)
    (172/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.074534947 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.188849355 seconds)
    (174/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.06035027 seconds)
    (175/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.938183755 seconds)
    (176/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.039684266 seconds)
    (177/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.064699002 seconds)
    (178/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 4.303751421 seconds)
    (179/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.06186349 seconds)
    (180/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.08843726 seconds)
    (181/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.06211824 seconds)
    (182/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.108963495 seconds)
    (183/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.22640259 seconds)
    (184/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.396438256 seconds)
    (185/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.082705601 seconds)
    (186/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.07008284 seconds)
    (187/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.060462545 seconds)
    (188/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.500011213 seconds)
    (189/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.859842071 seconds)
    (190/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.075038778 seconds)
    (191/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.069266813 seconds)
    (192/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.25875977 seconds)
    (193/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.06828048 seconds)
    (194/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.065239182 seconds)
    (195/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.312749923 seconds)
    (196/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.429272709 seconds)
    (197/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.203236462 seconds)
    (198/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.664826878 seconds)
    (199/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.897951197 seconds)
    (200/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.558018372 seconds)
    (201/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.487270139 seconds)
    (202/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.193313098 seconds)
    (203/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.195187443 seconds)
    (204/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.243919996 seconds)
    (205/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.165910905 seconds)
    (206/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.243460259 seconds)
    (207/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.175459437 seconds)
    (208/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.071709644 seconds)
    (209/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.537542101 seconds)
    (210/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.462284774 seconds)
    (211/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.461938596 seconds)
    (212/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.323940649 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.166162158 seconds)
    (214/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.432723137 seconds)
    (215/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.260902953 seconds)
    (216/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.343053215 seconds)
    (217/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.883679513 seconds)
    (218/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.173449097 seconds)
    (219/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.13199257 seconds)
    (220/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.068083651 seconds)
    (221/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 4.147490532 seconds)
    (222/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.375074348 seconds)
    (223/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.223620295 seconds)
    (224/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.162826115 seconds)
    (225/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.250197125 seconds)
    (226/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.071597309 seconds)
    (227/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.121535677 seconds)
    (228/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.79262978 seconds)
    (229/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.365980727 seconds)
    (230/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.159447853 seconds)
    (231/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.312327383 seconds)
    (232/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.23913727 seconds)
    (233/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.337913403 seconds)
    (234/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.187140567 seconds)
    (235/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.104053822 seconds)
    (236/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.138918963 seconds)
    (237/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.107016759 seconds)
    (238/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.766126226 seconds)
    (239/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.176157581 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.415264365 seconds)
    (241/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.278628227 seconds)
    (242/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.092900824 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.132382148 seconds)
    (244/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.457693501 seconds)
    (245/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.09909847 seconds)
    (246/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.45668051 seconds)
    (247/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.192532113 seconds)
    (248/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.339209691 seconds)
    (249/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.01215606 seconds)
    (250/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.218872215 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.927886168 seconds)
    (252/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.793519221 seconds)
    (253/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.195354711 seconds)
    (254/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.111324768 seconds)
    (255/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.124940106 seconds)
    (256/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.178101917 seconds)
    (257/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.497378472 seconds)
    (258/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.143079953 seconds)
    (259/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.230636853 seconds)
    (260/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.101516254 seconds)
    (261/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 3.661645829 seconds)
    (262/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.1722311 seconds)
    (263/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.187688072 seconds)
    (264/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.235882183 seconds)
    (265/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.18768551 seconds)
    (266/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.695546063 seconds)
    (267/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.582239971 seconds)
    (268/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.30441754 seconds)
    (269/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.110571007 seconds)
    (270/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.393854768 seconds)
    (271/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.500005412 seconds)
    (272/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.383369011 seconds)
    (273/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.943352933 seconds)
    (274/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.521538521 seconds)
    (275/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.75125522 seconds)
    (276/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.201677777 seconds)
    (277/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.099747479 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.124668783 seconds)
    (279/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.240496479 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.770615158 seconds)
    (281/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.42562819 seconds)
    (282/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.498535858 seconds)
    (283/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.322776801 seconds)
    (284/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.163968398 seconds)
    (285/341) benchmarking ("sort", BigInt, false)...
    done (took 7.101855785 seconds)
    (286/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.503220426 seconds)
    (287/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.515919027 seconds)
    (288/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.388929427 seconds)
    (289/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.185409539 seconds)
    (290/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.104399034 seconds)
    (291/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.343948283 seconds)
    (292/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.19205007 seconds)
    (293/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.105860572 seconds)
    (294/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.447048493 seconds)
    (295/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.100203169 seconds)
    (296/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.011749336 seconds)
    (297/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.229487808 seconds)
    (298/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.154131657 seconds)
    (299/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.187530112 seconds)
    (300/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.213155354 seconds)
    (301/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.107185551 seconds)
    (302/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.025160127 seconds)
    (303/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.210536639 seconds)
    (304/341) benchmarking ("sort", Float64, false)...
    done (took 5.794973187 seconds)
    (305/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.490467188 seconds)
    (306/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.931860489 seconds)
    (307/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.24566147 seconds)
    (308/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.381974472 seconds)
    (309/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.318759796 seconds)
    (310/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.331029946 seconds)
    (311/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.371260785 seconds)
    (312/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.266957009 seconds)
    (313/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.088322323 seconds)
    (314/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.123893625 seconds)
    (315/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.840941902 seconds)
    (316/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.305857295 seconds)
    (317/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.60215723 seconds)
    (318/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.444680382 seconds)
    (319/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.270036896 seconds)
    (320/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.379256232 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.028112909 seconds)
    (322/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.174255972 seconds)
    (323/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.336077124 seconds)
    (324/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.394210061 seconds)
    (325/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.228221603 seconds)
    (326/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.269858319 seconds)
    (327/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.091263351 seconds)
    (328/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.522692487 seconds)
    (329/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.162787123 seconds)
    (330/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.161753377 seconds)
    (331/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.350808876 seconds)
    (332/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.539338138 seconds)
    (333/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.265300395 seconds)
    (334/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.083436099 seconds)
    (335/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.435472399 seconds)
    (336/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.233448599 seconds)
    (337/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.384736562 seconds)
    (338/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.298703436 seconds)
    (339/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.338067951 seconds)
    (340/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.093890221 seconds)
    (341/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.360778943 seconds)
  done (took 1164.598112542 seconds)
done (took 1166.718244006 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.108773071 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.098243895 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.084186313 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.103436891 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.195685679 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.133115965 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.095989338 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.085390854 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.135571327 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.134388513 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.081008496 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.133904847 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.079964461 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.083760318 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.085508604 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.100127198 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.488376527 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.128682966 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.102670159 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.096288324 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.103424585 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.08252905 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.133451636 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.131507882 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.088642853 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.087578414 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.086312413 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.103792923 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.196654593 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.081714808 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.085726151 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.097658541 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.485176263 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.127293598 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.081131189 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.103694157 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.100214093 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.096005255 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.089604427 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.117305918 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.646685864 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.092151927 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.08500727 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.084914091 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.08501198 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.091460629 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.088211193 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.094410595 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.096578298 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.096672371 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.628310596 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.103320339 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.083625873 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.074838103 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.090229289 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.078143997 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.079192877 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.088405383 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.094828797 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.079380129 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.440722223 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.128534685 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.078271553 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.092289227 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.073279789 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.655127505 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.080549213 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.080473487 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.632429597 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.079212419 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.656576154 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.093330841 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.078171795 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.089516426 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.096159347 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.476129315 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.117048518 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.074939747 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.084365129 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.073180381 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.089056485 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.089378887 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.081475042 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.074357134 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.092019747 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.122211165 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.090447531 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.077616286 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.087443485 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.095672124 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.086394316 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.088511632 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.082035071 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.077415808 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.090362405 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.082639897 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.080272062 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.081065944 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.081249249 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.091315009 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.63329663 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.101044539 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.0742313 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.074301717 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.07759988 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.092760602 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.631727936 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.085398137 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.099406434 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.130763514 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.06897113 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.455187191 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.126612485 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.095363356 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.091177354 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.080032939 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.076046189 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.455662691 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.66426414 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.100581507 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.077211745 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.065455508 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.082818996 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.080794916 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.065976204 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.474827679 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.124751497 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.094629 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.201371482 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.092820091 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.111813436 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.077510824 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.083284961 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.1258281 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.098315563 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.110319645 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.080955641 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.095112649 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.096920764 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.076917067 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.090307004 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.092478304 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.081239236 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.088775034 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.077328549 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.127605083 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.091345014 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.091188376 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.097257054 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.198687163 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.072286105 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.450884318 seconds)
done (took 327.913102844 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.159135808 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.0685346 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.153677287 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.06599352 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.152246684 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.138536171 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.065468723 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.06908953 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.066348319 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.543055925 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.067550514 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.072796761 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.068384176 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.066586308 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.137696815 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.065379179 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.065942806 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.356384004 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.066508317 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.143561091 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.066904033 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.066399774 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.067140405 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.563748855 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.067034283 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.066950355 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.147098918 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.069641488 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.342897597 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.065745306 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.068353511 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.344000127 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.14623974 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.07973183 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.072864091 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.073387783 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.154490982 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.07727005 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.133155981 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.132445697 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.15669975 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.098652917 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.066411564 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.066049282 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.074136518 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.06907859 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.068588908 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.100384298 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.069242749 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.073562061 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.336077663 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.062328344 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.073871973 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.067176672 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.068237345 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.080801324 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.069021687 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.068946183 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.148695418 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.069717847 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.135883438 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.548394061 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.573616075 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.068501638 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.071735372 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.068400193 seconds)
  done (took 197.745128379 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.174122764 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.142805908 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.17397194 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.07474135 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.121407703 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.177053726 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.073083895 seconds)
  done (took 16.926188719 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.078067983 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.071583247 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.131782691 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.13094304 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.068899832 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.212390252 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.081502217 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.07440164 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.098940954 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.07047949 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.414827876 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.129438411 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.077886722 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.069731282 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.083505132 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.131828814 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.074830253 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.073038478 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.179096422 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.2223913 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.078122033 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.080289431 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.099298369 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.085552004 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.072924259 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.073089345 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.073245512 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.081928096 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.072056938 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.071961323 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.072546215 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.087037477 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.071906519 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.073307124 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.073270664 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.072619787 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.072710553 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.071212896 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.072291493 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.075391525 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.073051011 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.073629462 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.075377826 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.072266616 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.072871756 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.097897165 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.074391867 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.074510512 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.074612933 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.072380639 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.10060082 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.073433268 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.074050712 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.080244692 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.121211552 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.081670281 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.074036012 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.074026441 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.074906583 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.071810514 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.073359359 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.22423474 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.135314632 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.073408963 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.135483972 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.144184954 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.074966584 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.072841404 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.074764022 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.136664127 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.077260746 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.136592081 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.075718677 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.192391001 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.074305318 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.220580419 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.097856155 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.081392528 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.082314438 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.077646767 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.084259145 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.07511004 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.079690476 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.085666075 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.07998108 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.074249125 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.075548075 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.079667074 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.086116185 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.074798471 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.130476518 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.077382832 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.078314148 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.191004911 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.075879883 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.190772272 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.103176189 seconds)
  done (took 225.489979862 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.083094927 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.086171317 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.078931217 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.093803513 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.078993397 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.080004194 seconds)
  done (took 14.496403771 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.082016877 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.082346394 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.076983777 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.076093112 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.076495187 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.078366475 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.077824893 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.081208857 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.083215573 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.079235428 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.078670059 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.077653544 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.078312696 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.078060245 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.078716467 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.078507501 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.077660862 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.07833438 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.078222317 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.07891261 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.210813797 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.077087554 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.079215782 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.080391433 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.084166283 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.079042253 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.092292229 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.077362753 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.076715484 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.088315282 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.084977387 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.080207973 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.083840051 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.089708474 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.084090207 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.082982201 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.084995755 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.081263618 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.078933746 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.08019466 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.074741045 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.077743302 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.073656989 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.072191557 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.073249366 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.084154605 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.080469301 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.086446113 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.073971692 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.066796352 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.073581676 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.075027896 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.073993922 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.076960219 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.072688469 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.083017867 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.065681229 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.073358873 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.075406531 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.077273989 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.079634668 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.04790107 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.076184039 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.081473871 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.080232249 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.078014711 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.079017388 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.080753262 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.068843152 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.075468722 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.076695367 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.073807361 seconds)
  done (took 152.759631119 seconds)
done (took 609.43778799 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.151007334 seconds)
  done (took 9.144417396 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.232406031 seconds)
  done (took 9.325488817 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.128076631 seconds)
  done (took 14.122732271 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.081587787 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.092370679 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.08653186 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.07812975 seconds)
  done (took 30.349739069 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.349340229 seconds)
  done (took 9.345248459 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.089164889 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.059714908 seconds)
  done (took 16.211229014 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.145340599 seconds)
  done (took 9.143508651 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.556621214 seconds)
  done (took 9.574390701 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.08262755 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.091932292 seconds)
  done (took 16.195092363 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.076193818 seconds)
  done (took 9.078584728 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.807789285 seconds)
  done (took 9.899728845 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.09546916 seconds)
  done (took 9.113018148 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.103584629 seconds)
  done (took 9.102547481 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.074861441 seconds)
  done (took 9.073728375 seconds)
done (took 171.672851186 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.088512677 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.076181477 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.074601872 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.076901517 seconds)
  done (took 30.314573478 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.113116014 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.114602384 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.123969821 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.110970335 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.102290896 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.104419458 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.112974108 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.112127073 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.102654318 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.111193612 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.114366828 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.112172114 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.114124025 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.125697308 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.124735954 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.098894306 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.109370138 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.115421224 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.100793244 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.119677862 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.11226414 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.110457451 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.080063832 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.079135467 seconds)
  done (took 52.626761328 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.267299293 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.148697743 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.237633677 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.122823873 seconds)
  done (took 10.779756672 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.078074962 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.141298934 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.131468659 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.123622909 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.163647466 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.178866723 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.128995438 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.288607458 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.193012293 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.200470323 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.086439511 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.098389008 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.102570638 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.122733138 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.185749613 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.077431131 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.079057795 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.194957774 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.143232491 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.286952646 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.075810989 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.132209502 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.171396488 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.131945365 seconds)
  done (took 53.519820507 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.077678939 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.088957989 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.09078433 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.080272503 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.081767836 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.079736232 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.089886858 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.083780125 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.102988649 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.078417032 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.080127783 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.081760336 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.0830987 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.084421137 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.082479167 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.096946753 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.092766205 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.082277372 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.086285127 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.088143225 seconds)
  done (took 43.709580926 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.077966086 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.922234261 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.426847493 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.328115286 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.07993118 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.076445051 seconds)
  done (took 32.915357731 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.090294153 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 2.084961233 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.081108375 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 2.144618526 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.218996518 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.08360215 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.081011206 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 2.094521266 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 2.126832938 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 2.1431802 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.098431239 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 2.102797665 seconds)
  done (took 27.349416077 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.091058686 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.079080882 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.080067049 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.088219209 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.088608037 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.08514991 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.086791237 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.075139877 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.0869443 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.093556829 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.080719019 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.089390236 seconds)
  done (took 47.024323448 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.289300508 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.301091238 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.288556142 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.704814581 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.703383577 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.06165398 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.36100236 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.287759014 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.87483152 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.883056086 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.375657856 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.129748301 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.023372055 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.99518811 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.987621349 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.316580399 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.068017218 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.925979042 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.448792399 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.139955826 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.068073076 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.072630109 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.070695667 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.371678883 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.405058315 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.068488606 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.285989399 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.082218376 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.068397392 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.297404194 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.550425312 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.123934233 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.268471204 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.330468137 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.413189121 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.134053571 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.190087017 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.268700602 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.114624398 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.107512055 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.077122069 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.080713805 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.606603144 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.079813847 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.341696805 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.072481394 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.08048964 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.177872674 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.996633592 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.40105317 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186621619 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.06892972 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.103669253 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.500086654 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.188360818 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.312338188 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.070856056 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.268727782 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12893018 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.349227715 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.185421852 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.184380105 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.279482309 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.992147439 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.487815656 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.198599724 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.071141248 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.072791185 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.771477887 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.311235656 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.151558473 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.412902913 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.839633879 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.07143989 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.074605605 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.087137839 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.162863688 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.066609087 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.373629091 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.058136945 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.995469884 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.167983019 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.464103494 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.072892286 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.071410492 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.082203841 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.915768192 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.104012151 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.166784939 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.352780717 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.398896661 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.070292947 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.073494738 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.094430372 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.073505021 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.014563886 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.642315159 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.138458584 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.997751609 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.637531523 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.539614261 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.04199904 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.529091765 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.117891278 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.347915154 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.210602734 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.477377358 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.279669227 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.31641078 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.604982231 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.077042772 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.686083258 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.155970189 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.14529831 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.070332965 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.628226784 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.252384275 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.398107049 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.191721805 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.069468262 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.998450446 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.084483757 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.274494914 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.517118872 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.130626988 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.070059263 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.080116109 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.070966041 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.074116896 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.183506547 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.08390162 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.3752983 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.147190062 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.075444005 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.010335317 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.077511301 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.364608522 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.692812539 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.133759619 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.337980926 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.347408203 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.773093174 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.095633901 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.102371566 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.345856218 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.157727388 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.150616088 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.650638564 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.202596132 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.172056712 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.076076807 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.220212056 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.082520495 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.078721212 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.420150181 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.489745289 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.500936583 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.11756543 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.108871564 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.098290339 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.23321884 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.315379274 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.19276443 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.096979887 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.080693536 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.163321381 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.30307283 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.075871973 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.105439621 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.320251032 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.315168195 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.374068314 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.1416178 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.185609761 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.149135592 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.088051333 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.291224267 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.157268564 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.7126722 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.623117779 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.295501765 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.599821987 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.038527194 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.714209473 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.368950155 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.462953912 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.091111895 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.528115355 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.222276477 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.721059337 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.105844386 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.604728773 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.002364174 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.08236661 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.411268084 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.030490629 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.707395772 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.146421193 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.114718953 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.078228168 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.077549951 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.085222502 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.082662593 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.179450531 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.147910204 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.150770035 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.006531306 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.675283102 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.118502488 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.081160528 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.078644312 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.516352826 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.989413841 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.033286791 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.078551736 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.156496246 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.821989917 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.625275546 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.08180999 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.082141577 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.677031223 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.718235915 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.986953296 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.062575116 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.994528798 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.107210881 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.374663659 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.213365206 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.375483186 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.804999471 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.158362515 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.082126686 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.089393967 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.767663871 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.091211515 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.781995004 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.374165353 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.360103722 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.532609076 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.155275741 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.288444387 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.096384887 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.079303992 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.626960587 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.105255348 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.076526356 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.281572269 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.593995016 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.445175864 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.731027737 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.165014283 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.097629066 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.354244366 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.091580135 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.494967649 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.777636043 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.099359367 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.099421931 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.32259611 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.765828525 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.082317867 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.058650399 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.087276223 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.293896442 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.284350642 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.350776978 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.388301127 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.533595653 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.091574429 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.086315085 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.106434197 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.324686443 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.080675029 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.117467129 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.526631469 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.208543164 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.509150307 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.372238309 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.517909521 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.721308409 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.355103098 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.156111263 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.094297864 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.748600217 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.22534782 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.017619647 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.200872717 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.008460571 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.814956059 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.373740433 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.103279467 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.360450813 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.068629783 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.428670846 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.382632156 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.388377865 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.135939236 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.110668603 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.084302838 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.144681751 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.107059964 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.22405178 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.197602952 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.089871133 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.55615551 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.124906064 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.130268262 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.089634461 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.657776115 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.106932952 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.09081709 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.778480975 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.750871068 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.205896864 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.158610823 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.897165853 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.509071452 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.119211633 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.971622671 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.914034322 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.360933923 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.147575487 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.531637034 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.124898634 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.491267866 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.104686053 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.297884992 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.091944125 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.593381825 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13075479 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.352085755 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.042534719 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.299064788 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.28434993 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.110704085 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.091279283 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.014723458 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.194266114 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.961099782 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.072220284 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.089365425 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.104330514 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.539885762 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.226254938 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.570130657 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.906346503 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.090068223 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.555828076 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.498173947 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.643469578 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.120481897 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.088170265 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.455702088 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.88218747 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.444296343 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.370101652 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.094965084 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.766840626 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.30292119 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.215750949 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.009625278 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.561379625 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.652700457 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.791617028 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.102435503 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.292742411 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.466621939 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.311710254 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.124328212 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.163059595 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.494442504 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.365853023 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.813572683 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.012598391 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.088983608 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.483745969 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.105084607 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.189857851 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.331340428 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.40254779 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.557233381 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.477695847 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.133656797 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.55295645 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.510021839 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.485196359 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.301722633 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.456440329 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.41194114 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.974083268 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.5035317 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.303304322 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.184701621 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.365744644 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.962037783 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.799919113 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.334094475 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.091561793 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.021261401 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.29526007 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.094272082 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.427094767 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.612022213 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.108944018 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.399138612 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.576173501 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.628573981 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.202791299 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.114955259 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.055378364 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.116309703 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.112290834 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.091415722 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.567392854 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.381036186 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.104549674 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.03384358 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.765442967 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.019928902 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.303526862 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.200555337 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.124192814 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.648769445 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.40309937 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.204058224 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.394502817 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.268226166 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.122218352 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.018721075 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.841943817 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.040056883 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.219070765 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.516065764 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.107351486 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.0966164 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.297165932 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.021186724 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.138272953 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.734235719 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.295640814 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.677178002 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.369207953 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.228076139 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.334348228 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.394116456 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.09687859 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.060269186 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.366541889 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.019914667 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.631012891 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.795928847 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.805870953 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.16244712 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.09211313 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.096108931 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.363045251 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.460687908 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.190972525 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.57694658 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.114438824 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.10208234 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.467205717 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.191940922 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.097065973 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.098389257 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.466920197 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.324748052 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.102582872 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.124082859 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.308892575 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.168426228 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.288293814 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.169054444 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.607888871 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.10100581 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.103066383 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.135317994 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.045690369 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.037019396 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.926138893 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.155596133 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.098409049 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.375200597 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.720542535 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.298580362 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.489841507 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.963186921 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.185695516 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.132093724 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.09625505 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.104064865 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.492567552 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.398010118 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.097269718 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.37603878 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.150232077 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.101908164 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.102720693 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.065025482 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.098194469 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.839636865 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.984753372 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.827287179 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.49221636 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.097794669 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.101249821 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.104029487 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.02390174 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.118432819 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.122744847 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.08159269 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.099516797 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.470997306 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.208521562 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.194160319 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.101176023 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.098300105 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.103265055 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.313705034 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.611112772 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112671164 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.800233742 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.301586024 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.098895016 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.572134744 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.556144571 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.269498571 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.132554216 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.191471941 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.338106755 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.674319016 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.191365012 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.076984045 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.324853874 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.101074643 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.372907107 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.37434652 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.100443835 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.312266196 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.45920972 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.379108545 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.117595353 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.734594112 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.176378379 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.183988219 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.99390026 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.102991247 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.099219619 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.373305702 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.14866532 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.098230125 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.107419474 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.644881682 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.899524882 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.560957767 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.257249105 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.460394174 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.008075193 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.855213516 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.100315229 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.027595962 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.111407305 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.121630259 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.103051671 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.113711537 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.841965363 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.823197863 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.312049033 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.371196877 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.026885449 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.302202946 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.683709437 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.024738873 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.067792257 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.036854422 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.363599112 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.027003458 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.105323851 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.12422648 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.168826536 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.685744096 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.366969155 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.102216667 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.047059166 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.105060534 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.105619869 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.101174715 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.183119389 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.101678413 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.22063561 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.377377741 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.517406091 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.215377136 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.739842779 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.836861776 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.03912142 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.14726165 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.66071692 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.672205197 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.169444051 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.912310189 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.842556842 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.04716475 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.104154305 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115311063 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.337865439 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.105150251 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.09788727 seconds)
  done (took 2292.051555472 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.142389814 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.116315118 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.107808301 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.113574874 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.10928527 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.125252661 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.120886978 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.115757339 seconds)
  done (took 58.97646611 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 7.107457391 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.140986349 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 2.113911373 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.108265746 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 2.110647706 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 7.104867865 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.323753281 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 7.118753699 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.10893671 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 2.114049211 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 7.107072734 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.105115839 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 2.899418583 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 2.162968075 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 7.128575516 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 7.125525856 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 2.127780118 seconds)
  done (took 81.039931472 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.127993232 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.460941398 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.184314769 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.130888387 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.873915226 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.131804377 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.030306545 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.131472978 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.13180333 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.502659309 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.424394497 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.175110396 seconds)
  done (took 93.348787627 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 2.134746041 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 2.128266456 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.128718575 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.131573046 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.129624063 seconds)
  done (took 12.700085798 seconds)
done (took 2838.451015596 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.515296486 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.186939632 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.230448454 seconds)
  done (took 6.461483344 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.275141923 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.321208489 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.433150761 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.442003806 seconds)
  done (took 11.524186686 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.41346136 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.491430628 seconds)
  done (took 6.946451379 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.545424479 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.143161906 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.514340034 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.130635163 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.128669735 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.130539013 seconds)
  done (took 23.440147718 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.12711479 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.126450131 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.129804912 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.129949278 seconds)
  done (took 10.560993745 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.12586173 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.834534186 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.12563522 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.138634706 seconds)
  done (took 22.271251311 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.32866472 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.183106632 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.89964211 seconds)
  done (took 9.45451417 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.751858246 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.575473498 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.738081342 seconds)
  done (took 10.109247326 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.281854929 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.113341513 seconds)
  done (took 8.439067425 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.270638087 seconds)
  done (took 4.317640529 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.99179857 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.446720443 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.603170105 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.65640454 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.722789286 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.357798233 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.461285601 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.409183615 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.519529535 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.541128543 seconds)
  done (took 27.755676204 seconds)
done (took 158.044294491 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.574526481 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.154922958 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.343269437 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.505209356 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.373785327 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.344422165 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.433309214 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.500790871 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.210362371 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.201432585 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.51039702 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.366624058 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.363474005 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.158559973 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.370765901 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.153343517 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.373922757 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.600666453 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.189375506 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.42164256 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.422772202 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.15165748 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.346356079 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.16252363 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.369763999 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.297745779 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.775235854 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.150173584 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.334828393 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.786602604 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.294480613 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.571412623 seconds)
  done (took 177.860719352 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.13310153 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.130297328 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.129356873 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.131652805 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.419286367 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.131750613 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.130818392 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.130797936 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.542164219 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.526336413 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.130578083 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.411898403 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.131951834 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.130028953 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.130908 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.13086946 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.65586243 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.130254595 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.130374335 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.131070746 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.131691984 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.283907694 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.143368589 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.286818374 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.650379148 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.133527819 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.131221618 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.131326336 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.130710496 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.132480786 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.130959013 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.131875189 seconds)
  done (took 216.987775812 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.135969354 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.132907315 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.132981676 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.132986983 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.134904219 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.132951234 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.134034892 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.13039005 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.87649524 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.85689696 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.13497995 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.136106694 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.131558178 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.131734933 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.134180086 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.130803613 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.132400543 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.133044629 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.132566734 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.134028669 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.133643824 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.899623102 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.133084656 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.927137451 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.135310993 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.133641925 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.128129516 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.131569479 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.130578713 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.133198158 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.136958233 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.133571075 seconds)
  done (took 229.342926381 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.376434733 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.132396941 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.138385186 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.140179009 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.137358238 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.13567937 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.131772378 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.383257834 seconds)
  done (took 21.631927334 seconds)
done (took 647.880911375 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.483854144 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.866338018 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.279502836 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.157222235 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.415684434 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.206348094 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.151326424 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.217083266 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.994646087 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.232253627 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.543226394 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.161424932 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.898337604 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.181877437 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.273399285 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.207826927 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.518719743 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.856393363 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.308190569 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.820149621 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.314199111 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.108522888 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.242585943 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.05097936 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.564244676 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.158242005 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.18089886 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.521595102 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.155176698 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.31499959 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.767769674 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.423226554 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.176823883 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.163350048 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.208022141 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.188970588 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.357270469 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.173155076 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.277250174 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.904454442 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.807271458 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.883537219 seconds)
  done (took 111.773529973 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.144081159 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.13945683 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.144398305 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.139193758 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.148644175 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.142380609 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.139834245 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.141040778 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.13990294 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.136296005 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.139047697 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.15283819 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.141140874 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.154329456 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.142101871 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.144064413 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.146542689 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.152645148 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.14322155 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.143107941 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.142840177 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.146254849 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.139810744 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.142915333 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.140604104 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.146371692 seconds)
  done (took 57.802836315 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.138803078 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.32638466 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.377170216 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.163295188 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.141313274 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.145591216 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.16970842 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.146639664 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.143980524 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.143483915 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.237590115 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.14469188 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.156630947 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.381568878 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.157859185 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.141332598 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.141646841 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.147282672 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.336501078 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.153613941 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.173272921 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.150932323 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.174520713 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.155535815 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.146448234 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.143539027 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.150565932 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.573832495 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.154080087 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.242419368 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.205109456 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.172516045 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.497543479 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.394949775 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.196239391 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.145603174 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.142189123 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.24717674 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.150785052 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.147524464 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.173494498 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.148666138 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.385588146 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.654860829 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.154791785 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.141846391 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.570674887 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.250837906 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.18427178 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.152807302 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.392688393 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.158889539 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.141836309 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.147222253 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.180533189 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.15594662 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.144863979 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.409047659 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.156170437 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.175091104 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.149075251 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.145479178 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.34337402 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.155613945 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.32928048 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.155856232 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.150325553 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.147271518 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.387903952 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.160366059 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.670393489 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.1569721 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.144604247 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.245035245 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.338787959 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.601424444 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.154946288 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.343666381 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.514311686 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.184023355 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.155428496 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.558902379 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.179839114 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.158663522 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.141871228 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.141084076 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.140684176 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.187617632 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.169355414 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.580849937 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.671468348 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.423300882 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.187235266 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.154749728 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.146913353 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.407155474 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.150109037 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.149072253 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.375384053 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.678481743 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.162831806 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.154020703 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.645752367 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.163524034 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.173811681 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.152838528 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.39940125 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.160546672 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.191577576 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.1424742 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.151725828 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.147657916 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.176847766 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.153772521 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.144066318 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.642168437 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.262689346 seconds)
  done (took 264.45362938 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.145989975 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.140407024 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.145743614 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.144709174 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.145566633 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.145277019 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.140779764 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.143752884 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.146740856 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.143688143 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.147089609 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.143745498 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.143666818 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.146941633 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.187806999 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.147812345 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.632369514 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.143561162 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.144913958 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.141583231 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.709435232 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.147930239 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.142383331 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.142363046 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.141099769 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.146479826 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.147844724 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.18915093 seconds)
  done (took 175.252551261 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.14616873 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.199282847 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.16041559 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.196073431 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.159701304 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.145635527 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.244457849 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.162280903 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.152990538 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.144174351 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.145299175 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.179191085 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.152467993 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.242914065 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.179691449 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.252134083 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.251124332 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.154560427 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.146004019 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.142362054 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.194036008 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.164039466 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.177501529 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.2073849 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.158469458 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.201408153 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.158536732 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.14833974 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.147515279 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.258743913 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.16430315 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.176507702 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.181730818 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.16886766 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.267415427 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.263595243 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.250451101 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.253036893 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.154403486 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.1483908 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.149998225 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.152822437 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.20858539 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.163247814 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.154967831 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.267032656 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.166349182 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.149713999 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.151450101 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.15541924 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.163259455 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.16969224 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.18266466 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.276904533 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.193476508 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.18106898 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.248421894 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.268001587 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.150473873 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.246972644 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.158462696 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.258921108 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.167090436 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.150467664 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.14806341 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.153426601 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.195492334 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.261889585 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.256896108 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.1569069 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.250660562 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.205122581 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.162251252 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.149205351 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.148066698 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.206090786 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.2645396 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.204584744 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.210067627 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.186598294 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.159396719 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.155181776 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.151924972 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.178334554 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.157709486 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.26426459 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.268315817 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.157213126 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.151709855 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.14897389 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.148907726 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.178414763 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.215659454 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.19425684 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.260012439 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.191830834 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.19143763 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.160133499 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.16370173 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.151601463 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.176798805 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.157990208 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.160133301 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.416359822 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.185234143 seconds)
  done (took 231.907495781 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.534267943 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.196029656 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.211405015 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.408630554 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.540424153 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.007257894 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.187494152 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.198870167 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.214195735 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.327457654 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.266022503 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.243612843 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.193304586 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.173665559 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.190817347 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.216044746 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.228962694 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.495610328 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.41462401 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.70017482 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.184464124 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.497608135 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.545647743 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.573501478 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.245786413 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.585753413 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.784191347 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.294874669 seconds)
  done (took 70.735312805 seconds)
done (took 913.982633792 seconds)
SAVING RESULT...
DONE!

cset: moving following pidspec: 15237
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.81609557 seconds)
loading group "shootout"... done (took 1.199020073 seconds)
loading group "string"... done (took 0.63249565 seconds)
loading group "linalg"... done (took 8.307267592 seconds)
loading group "parallel"... done (took 0.162361683 seconds)
loading group "find"... done (took 2.822032486 seconds)
loading group "tuple"... done (took 2.054924859 seconds)
loading group "union"... done (took 14.377867679 seconds)
loading group "dates"... done (took 1.392180716 seconds)
loading group "micro"... done (took 0.239191694 seconds)
loading group "simd"... done (took 4.596193782 seconds)
loading group "io"... done (took 1.053141393 seconds)
loading group "random"... done (took 9.182799928 seconds)
loading group "problem"... done (took 1.473461391 seconds)
loading group "array"... done (took 24.203056515 seconds)
loading group "misc"... done (took 1.833797761 seconds)
loading group "scalar"... done (took 41.755497941 seconds)
loading group "sort"... done (took 3.198468345 seconds)
loading group "sparse"... done (took 12.307945752 seconds)
loading group "collection"... done (took 17.795060031 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.514818661 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.122201968 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.127111541 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.119527934 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.187042109 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.119420699 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.127183111 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.084314038 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.823136998 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.136725331 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.113655768 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.427826012 seconds)
done (took 5.299915753 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.167120635 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.091217452 seconds)
    (2/2) benchmarking "String"...
    done (took 0.081541315 seconds)
  done (took 1.361089885 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.070389261 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.059706608 seconds)
    (3/3) benchmarking "different"...
    done (took 0.065963541 seconds)
  done (took 1.383843886 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064125398 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.131681206 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.06489805 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065652627 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065977396 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.0649575 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.065381391 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.065493823 seconds)
  done (took 1.714399966 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.07124391 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.066668082 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.064557704 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.066536002 seconds)
  done (took 1.460080808 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066521982 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.119525141 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064053702 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064003263 seconds)
  done (took 1.503102638 seconds)
done (took 8.861003256 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.239545515 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.100621985 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.287792559 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.445483772 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.612658966 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.092133082 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073987546 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069207618 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.128755442 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.366848861 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.103220571 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.179702767 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089505506 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.173719836 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.023118832 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.118602241 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.08466916 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.121955944 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.093679888 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.131476404 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.390544087 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.077180151 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.072405567 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.070228379 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.067599022 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.635000233 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.656792646 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122789433 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.082646825 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.162285359 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.115320392 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.641264988 seconds)
  done (took 10.854628907 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.092191383 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.091765838 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067417538 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122550567 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.093195121 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068621454 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07505836 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067105766 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.086994458 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.122514003 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088592668 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.097767009 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065308128 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067982154 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.073050957 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.200406459 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078387135 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.079626889 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066661007 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079922013 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104443043 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.076871961 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.077250136 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076681887 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.127809158 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.167580048 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.095302053 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.097081713 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064629824 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077879533 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.11374191 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.124098842 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065453565 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.06446003 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.117669908 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093985071 seconds)
  done (took 4.570341796 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.873438195 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.093625563 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.102391011 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.631290897 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065301888 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.148524167 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.237587268 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.07269945 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.284273803 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.151193589 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.140087793 seconds)
    (11/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.145990762 seconds)
    (12/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.115376166 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068332595 seconds)
    (14/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 1.136928409 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.116613784 seconds)
    (16/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.518211223 seconds)
    (17/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067546012 seconds)
    (18/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065618924 seconds)
    (19/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.064648444 seconds)
    (20/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.067216823 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066504969 seconds)
    (22/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062644463 seconds)
    (23/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.090105087 seconds)
    (24/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06774371 seconds)
    (25/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.094277718 seconds)
    (26/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.086692206 seconds)
    (27/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.145294673 seconds)
    (28/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.96726284 seconds)
    (29/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.29940178 seconds)
    (30/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06679585 seconds)
    (31/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.167157356 seconds)
    (32/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.084142268 seconds)
    (33/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.356312287 seconds)
    (34/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068283443 seconds)
    (35/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081341512 seconds)
    (36/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.454988584 seconds)
    (37/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.122648786 seconds)
    (38/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067538551 seconds)
    (39/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.16204767 seconds)
    (40/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.115232914 seconds)
    (41/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063717909 seconds)
    (42/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.119054322 seconds)
    (43/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07741573 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068801592 seconds)
    (45/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068321724 seconds)
    (46/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.483557361 seconds)
    (47/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.068463732 seconds)
    (48/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071158387 seconds)
    (49/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.078225245 seconds)
    (50/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100281464 seconds)
    (51/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067235334 seconds)
    (52/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.064862135 seconds)
    (53/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.169665719 seconds)
    (54/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.064027032 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065346337 seconds)
    (56/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.066577853 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.149310249 seconds)
    (58/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.06398495 seconds)
    (59/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.142039342 seconds)
    (60/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.063753902 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068115664 seconds)
    (62/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.100089629 seconds)
    (63/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.067710542 seconds)
    (64/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.085212361 seconds)
    (65/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.094217997 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.351280035 seconds)
    (67/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.085111469 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.032383158 seconds)
    (69/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066645363 seconds)
    (70/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.223369636 seconds)
    (71/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.074663455 seconds)
    (72/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064909046 seconds)
    (73/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.069483751 seconds)
    (74/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065328171 seconds)
    (75/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.069472164 seconds)
    (76/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.06356566 seconds)
    (77/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066360447 seconds)
    (78/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.070967013 seconds)
    (79/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069785768 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067113543 seconds)
    (81/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107068831 seconds)
    (82/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065503923 seconds)
    (83/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.063093071 seconds)
    (84/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068961117 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.065669123 seconds)
    (86/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071244407 seconds)
    (87/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096213938 seconds)
    (88/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.064222147 seconds)
    (89/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.540867215 seconds)
    (90/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.095797399 seconds)
    (91/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065185782 seconds)
    (92/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.190295073 seconds)
    (93/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104143113 seconds)
    (94/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066354492 seconds)
    (95/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070326988 seconds)
    (96/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.063739064 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.066884071 seconds)
    (98/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.065968971 seconds)
    (99/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065365069 seconds)
    (100/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065909167 seconds)
    (101/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068781851 seconds)
    (102/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.063621583 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.094270865 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069182304 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112330966 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.015498017 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068404435 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065744082 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071369361 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068483408 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069540762 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065828025 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070944551 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067579192 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.063915654 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.1059907 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.119954519 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065436229 seconds)
  done (took 22.71910436 seconds)
done (took 40.211106597 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.321634614 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.077497879 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.077659446 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.078034299 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.077618733 seconds)
  done (took 1.877012372 seconds)
done (took 3.158699982 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.129027671 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.080399453 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.063359212 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.098771956 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.067038831 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.099634977 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.106010562 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.102633224 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.067227479 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.067147746 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.066937203 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.099786799 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.102205465 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.067512399 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.095786225 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.101654073 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.067435628 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.063102704 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.067115241 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.067105382 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.067617653 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064007606 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.067484511 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.067474162 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.096952928 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.067191412 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.066156323 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.096674199 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.067766599 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.096912927 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.068335134 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.067207877 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.067460048 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.097747595 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.067653056 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.097277641 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.063449298 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.067272156 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.0675293 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.067441146 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.06784446 seconds)
  done (took 4.528609336 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07006516 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.080195108 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082617271 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061252424 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070433734 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080695917 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060654144 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080503932 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086156402 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080896362 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080873734 seconds)
  done (took 2.125551951 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.069046816 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081756995 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082786663 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06111572 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072846464 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082162246 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061568641 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081605454 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.084656163 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082108969 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.081881013 seconds)
  done (took 2.11509047 seconds)
done (took 10.034529101 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.094775286 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.068645605 seconds)
  done (took 1.42178415 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.642120231 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.282108567 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067165926 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.08519752 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.188665362 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092246625 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.202600382 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.069989554 seconds)
  done (took 8.073180639 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.101367291 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.067625339 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067003031 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.06728435 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066794461 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.067721108 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.067735656 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.066385471 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.066135113 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.066731919 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.068603653 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.067955034 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.066980062 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067638668 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.068182269 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067360997 seconds)
  done (took 2.479157784 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.09850518 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.097513923 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.071107918 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.071762798 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.07000903 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.06953467 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.072216004 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.072049701 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.069174688 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.070682708 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.072262966 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.07102327 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.070521467 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.061657848 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.07218865 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.07252553 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.068513398 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.071687163 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.071777444 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.072798574 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.071935405 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.061441306 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.069828753 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.070915585 seconds)
  done (took 3.12983793 seconds)
done (took 16.378293334 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.171212826 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.073393526 seconds)
  done (took 1.513119107 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.067538376 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.067948756 seconds)
  done (took 1.420009873 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072817561 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.059671811 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.07809596 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.069666199 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.060608801 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.060232452 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.076757282 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.060357137 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.06005903 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.060392988 seconds)
  done (took 1.943233823 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.062042406 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068213004 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.0660358 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.06392265 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.066211894 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062114642 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.06386689 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.061970776 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.068281533 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061053381 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.06445067 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.081472986 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.064365846 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.08214805 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.064476182 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.065461178 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.066562827 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.064345482 seconds)
  done (took 2.484006 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.060237917 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.060799592 seconds)
  done (took 1.402180255 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.063547916 seconds)
    (2/7) benchmarking "second"...
    done (took 0.060931708 seconds)
    (3/7) benchmarking "month"...
    done (took 0.063710609 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062768842 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.060653327 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.060496556 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060728985 seconds)
  done (took 1.718030674 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.412934369 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.119644336 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.335425426 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.070253282 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.075642821 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.246087611 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062577829 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067163829 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067042341 seconds)
  done (took 2.784717706 seconds)
done (took 14.562075663 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080482974 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.1765511 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.089204004 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.401051839 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.090056952 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065663633 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.11201442 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.166010764 seconds)
done (took 2.487962069 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.212102269 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.390656073 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.757454901 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.065752788 seconds)
  done (took 3.51068151 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.327723326 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.077877067 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077383162 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066405474 seconds)
  done (took 1.860091563 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.064343379 seconds)
    (2/2) benchmarking "read"...
    done (took 0.070818865 seconds)
  done (took 1.435718219 seconds)
done (took 8.325400184 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.063603546 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062760818 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.06329002 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.062905978 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.063484892 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.062769797 seconds)
    (7/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.090965864 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062398682 seconds)
    (9/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.063234287 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.073788967 seconds)
    (11/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.062835734 seconds)
    (12/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062709973 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 0.062265007 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 0.062227725 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062454389 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063169277 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062875004 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062870744 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063058493 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063108446 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062827804 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062254498 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.062812969 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063199177 seconds)
  done (took 2.876477056 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.078506571 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.06446252 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.06574048 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.065456823 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.066336536 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.06595734 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.065686161 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.064141904 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.065846953 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.064380958 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066282584 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.066637078 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.064313506 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.066305332 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064289703 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.066414091 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066118838 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064503291 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063974487 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.066236768 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.065414632 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064781431 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.066405316 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066326934 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065956341 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066115849 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.064233758 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064784494 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065751922 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.066160922 seconds)
  done (took 3.292925408 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06485034 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.058964689 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059887908 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069302327 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.059031103 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.059611596 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.059607144 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.058879212 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.059401648 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.060548594 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060048683 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.059378625 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.05973124 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.058743975 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.059321192 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.059979992 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063834076 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.077863379 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.059166067 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.059547489 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.063433391 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.059611113 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.05888159 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.059064292 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.059683712 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.059183113 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.059301928 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.059651106 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058922203 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059792985 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058903891 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063140752 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.064654081 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.059102056 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068599108 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063883571 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.059447251 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.063638558 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.060768195 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.059036287 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058805652 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.059149136 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.059691788 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.059540289 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.06870422 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.059224865 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.060377092 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.059859124 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.05920203 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.059092573 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058755189 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060773202 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.064379042 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060131369 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058858643 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060100926 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.059098613 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059595918 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.059433375 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058588474 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058578436 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065257461 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061040345 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059759616 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.07858287 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060761542 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.068521352 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059009266 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.060167233 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062713918 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059776951 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077050974 seconds)
  done (took 5.735676708 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.081083655 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.085675624 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.064588957 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.064038664 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.060066627 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060276864 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067219456 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059608576 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064417586 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.079442811 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060291703 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064032387 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06448836 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063790515 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060251983 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.064182214 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067570365 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060149369 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059809606 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063722418 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060193983 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06671523 seconds)
  done (took 2.762338201 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.133542545 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065700837 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.104239129 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.073869394 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067509164 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.073433677 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.065116823 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065025361 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065127526 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065471802 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065742777 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065393938 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067851126 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065964661 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065884109 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065688468 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064834193 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.0653762 seconds)
  done (took 2.626058916 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.075650881 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065145397 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.085845332 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.06522647 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065169467 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064421871 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068233276 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068778671 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.064660072 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.065415101 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.06880077 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064687626 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.064341361 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064719534 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06404408 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064663916 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.064573555 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064790851 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068953307 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068235727 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068157638 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068697308 seconds)
  done (took 2.803989717 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07549086 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063795237 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.0790018 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.065449444 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059909911 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060197681 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064760983 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.064562312 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064274777 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064140137 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064480781 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060113795 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065463722 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06409836 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065711997 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064212798 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063633058 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064107377 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063984899 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059806877 seconds)
  done (took 2.619084852 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.084475776 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062070908 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062164812 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.080772648 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062393279 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.062621189 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.080722117 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.062235925 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.062564052 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.083164298 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062021789 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062202728 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.081298682 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.081386083 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.062417461 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.081268393 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.081356243 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.081115528 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062541179 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062382042 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.083527482 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.062605321 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.081189467 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062178452 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.062700499 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.062498967 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062188192 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.081416957 seconds)
  done (took 3.286929656 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.063124272 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062711307 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063058843 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.062904265 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.062991249 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.062893038 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.063300951 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.062949881 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062618363 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063015492 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.063212892 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.062665278 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062964737 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.062391402 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.062726639 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.062776591 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062348423 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063250142 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063016007 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062871449 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.062559652 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06254594 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.062615302 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063055834 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062908343 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.062465365 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063283709 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062845632 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06284193 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062883795 seconds)
  done (took 3.214973975 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.072191119 seconds)
    (2/2) benchmarking "in"...
    done (took 0.070758895 seconds)
  done (took 1.471718892 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.061899466 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.076355294 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.058895785 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.071650732 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067892937 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065761064 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068088507 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067769538 seconds)
  done (took 1.862092432 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066271415 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.088685051 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.061408954 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.061699184 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.06445503 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.128607047 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.073119733 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072352892 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074356507 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.063837639 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.061723409 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.072634641 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061207869 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.0742321 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062786998 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069374938 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068073718 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.077506326 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073201725 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.059579897 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072854031 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062148734 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060167187 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.062156749 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.06082723 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067313454 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076133472 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.072742565 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068946009 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.059250561 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079409088 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060156245 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.061306326 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069198784 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.064186336 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059842455 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.095902923 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061090323 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.065717515 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.059758412 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071626523 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080566316 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073957962 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.07755514 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061780448 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062222983 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.059624551 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061903701 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063653547 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069452946 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059903789 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06793274 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.059457259 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.061711791 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.069910739 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.060258736 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.065275663 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.068967043 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07290478 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.069969753 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.068844371 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.074768327 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068866861 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068030536 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061400275 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079104578 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062512636 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.072779526 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074423877 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.061464673 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072857943 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060087954 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059413795 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060051944 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.092336146 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061746514 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.06130666 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060514296 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060069044 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.061970211 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069709122 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06582474 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067367245 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064603683 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075679397 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.069178447 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060337338 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.066795387 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.077119595 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.063294266 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060478556 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.076411651 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.063012338 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060005364 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.076808246 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.069167719 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062174583 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061528099 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.063140614 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072973223 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061283288 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.058653415 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067848072 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.061101905 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062013368 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.064259017 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06734224 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.059761826 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069374689 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064567682 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061744237 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.058364109 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063684653 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060843449 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058081482 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068148515 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059019358 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072588617 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.064896337 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.072724818 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.072681701 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069037136 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074604101 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058920911 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057839851 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076090708 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068168167 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.19609516 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.079522163 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.061636513 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.071556644 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.061078008 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.062680744 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.070256069 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060373744 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063131357 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060561383 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065764476 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061845789 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061870321 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.065097514 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068797889 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.072313584 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.061745484 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069136664 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.060820916 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.075427208 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069997698 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.064848987 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063806757 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061337044 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072148668 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066690372 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069852623 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.060208174 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060929659 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.0630863 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070477654 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069642965 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062571156 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068051004 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064685168 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061199551 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060344944 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.061860666 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063448382 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063965561 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061584413 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068215112 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068553434 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074747756 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067917303 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069476457 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059648012 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060243205 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061979691 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.059946198 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064330239 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069604026 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075417939 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071642735 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.080723368 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060623553 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069700244 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062063168 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076471866 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073496318 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.061723721 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064907864 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058972937 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061935126 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069666673 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071750231 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.073157987 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074473477 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.064545634 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064598197 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.05962073 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074671142 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061082206 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068429052 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.069648652 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.06459501 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060314734 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.061786668 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.06899085 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.064695211 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060238458 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.075294485 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.066594947 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.059613561 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.074016287 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060730074 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.070686147 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.059612683 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.063563712 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.064925193 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.062404919 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.06963719 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075526545 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059050688 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061469081 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.075412272 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.061976492 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061407281 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067838398 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.075077705 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.064576787 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.06772783 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07030058 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.068945191 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063774085 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.069172057 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.060865432 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068398077 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.062418697 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070487901 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.059304843 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076676071 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.058231094 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073524947 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.059993175 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069915595 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059976636 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068233214 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.05978752 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.074947847 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060656584 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059422755 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070209293 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057707787 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.067865553 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058757916 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063825583 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065025791 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068674635 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.060720362 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068409302 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.199907812 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.0701274 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.065991443 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.069072925 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.070120847 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.065740784 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.060263229 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.069029909 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071112562 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.06903549 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.061856818 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.062059367 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.061073584 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.069393538 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062283887 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.061416592 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.0683808 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064373141 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.066506972 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062179328 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.062406083 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062202471 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068608515 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069803103 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078432789 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068829516 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067797756 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.06943401 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.059972208 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075368803 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.060578333 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.067560617 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.059258168 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067469666 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069439737 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060572808 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078536815 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062344889 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.068219242 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072470687 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068844939 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063798375 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078011637 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.063874734 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068350038 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068335114 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064391141 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067337561 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062546385 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068282262 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069844444 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.070824699 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061170433 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.067513858 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069169831 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061924645 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.06844633 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064615094 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.06833602 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062257116 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059725188 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.064773439 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.071225067 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.06443672 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064782736 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.060896299 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059065974 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.060487306 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.067292393 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.064525267 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.068572634 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07537417 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.059365606 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.061397941 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.059910967 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.063684413 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077578629 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069882462 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068205272 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064775506 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059272231 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.061995058 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062323007 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.060854852 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.063827717 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060048871 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.060096604 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070795636 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.062319988 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.064285981 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060646643 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061432062 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.069724074 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065089603 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061216057 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.066548811 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060052955 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064854493 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.059269836 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.061905328 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.064466704 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.059427112 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.063225036 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069922626 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.076007076 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.066509826 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.068578878 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.061216915 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067741319 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074873998 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067180567 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061039824 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.06888486 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058778062 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077386442 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068845717 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068127511 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068947702 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.06108522 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075266781 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063278657 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.068933596 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074195702 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060553031 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065844033 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058509553 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073650906 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063116288 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058465226 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.066601941 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066937945 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.064813943 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.070489424 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.203234018 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.069253929 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.066922067 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.064780926 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.062645679 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.062260477 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.069381396 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076469002 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.061616788 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.064531908 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.06850101 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068514283 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.065219302 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072734035 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068456063 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062170387 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.062393958 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063428179 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.061807775 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.07211127 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061102556 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064487858 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064222176 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060030429 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066716562 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076635174 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.070038 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070155558 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060640049 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.059646468 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.07769699 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.063872277 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.06396021 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068042465 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070097952 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072383085 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.069619037 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.076751605 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.0610933 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.065094681 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072063967 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061217824 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060205435 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.063952622 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.061851918 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.069380704 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070041634 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.067618629 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062670458 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.066958542 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.073294236 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.061943822 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.064581071 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.065105502 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061469039 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.070479464 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.067995503 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.068723197 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.061960796 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.059598333 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.06364458 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.069248125 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.067700324 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.069012753 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061206021 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.067231654 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.073568752 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.067865375 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063552687 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.059766146 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063507968 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.06892908 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.065112076 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.06006014 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.064741914 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.063585062 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067368804 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.069395189 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.064712033 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.059984263 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.07702602 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.068223584 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.069184134 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.065013066 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.062253349 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061272612 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.059812057 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071175904 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.059934562 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062055836 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.064694754 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062141261 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.077118405 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.068365328 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075484428 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061224353 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.064709092 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060101254 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069545365 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.064963603 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.060550329 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.070177134 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.059597474 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074932155 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.071906133 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065557507 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.059800283 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.085594025 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068097229 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074583737 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069541277 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068791835 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.063640729 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.068893601 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.06182651 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070216203 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.059179155 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058554367 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069042066 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.067747772 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.070801847 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.058867413 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.068459539 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.060604095 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.066576969 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.066658552 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061014804 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06063503 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.060557635 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.067721551 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.063012741 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.067306442 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.20303989 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.07779215 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.062149682 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.071788823 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069864424 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071668454 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074026341 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072370686 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.067754331 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.061504783 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067733528 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.067917699 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.06184354 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065118565 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.064016383 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082011025 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.062095556 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061624341 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074313841 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.066974203 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060286692 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067350341 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.065316723 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070611525 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.061585497 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.07036707 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065021206 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.060927864 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.064528368 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.064732214 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.059610796 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.05995743 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.059987826 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070047357 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.064834794 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060195216 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078207059 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062172926 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.068416766 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07111704 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.06642057 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.061991069 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.059321308 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.061442179 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.07295135 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076202112 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064104885 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068730428 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062187826 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.069040213 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059517289 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068718459 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.068000324 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068447078 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.059856977 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061190645 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.074576586 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075818014 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.064345145 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.069461235 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.069044563 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.061607264 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081197219 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068822532 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061322545 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.070884799 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063127312 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.059486313 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.059342822 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.062326481 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.072135456 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.060156848 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063256116 seconds)
  done (took 41.457823917 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.097748871 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060655669 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.059968704 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.059910818 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071170452 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060859472 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060524489 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060842543 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061014534 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063070425 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.06034869 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060357216 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071242461 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073389485 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070345457 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064121193 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060370808 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061288127 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.059984671 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060971151 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.070132646 seconds)
  done (took 2.81759828 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.066385563 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.075427945 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.071270925 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.076602627 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068301762 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.064152088 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.07070687 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064536313 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.072038638 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069320723 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.071616887 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064348316 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.069608319 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.069907533 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069649141 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064646479 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.074554573 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067818916 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.063807021 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.071442683 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06428335 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.071287179 seconds)
  done (took 2.936522765 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062111629 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.060413834 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.068724687 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.059780537 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.059822611 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.063437816 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059298085 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063737456 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064254732 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063745932 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.069048893 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.06042812 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059145783 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064798702 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.059351046 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.060847057 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103104639 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.060596689 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.060721017 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.059183843 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.062349621 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068629449 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060001557 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.05946983 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.06378753 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.06354499 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.059869252 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062133457 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.060523968 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063996274 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.061097231 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059344079 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068307758 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067984191 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063964104 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.064132941 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.061388432 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.060463433 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.059662502 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.059594841 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067909153 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.061353616 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.059677077 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.061112328 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068270796 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.059621693 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.059851007 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.06844555 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.059659739 seconds)
  done (took 4.526521511 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.070397576 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.110514206 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066556831 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.091119873 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.072778025 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066485822 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.065260861 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.092645029 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.061117443 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.061432858 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.073483849 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.073729785 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062816566 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064175079 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.064986812 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062629085 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.0627409 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061327698 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064666493 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062356044 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.065516326 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066532111 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.072363823 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.072406087 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063500633 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062056097 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062066963 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.063758014 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073188471 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066187836 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064110219 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065155346 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.073136531 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067246762 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062371157 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.062550812 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074490561 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062852806 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.062786051 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.06128851 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.062449932 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064008274 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066885572 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074230919 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.06300782 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.067617625 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062878318 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063308236 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.073958666 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.062737959 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.066530553 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.073978354 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063912344 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.062917888 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064996306 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.073419985 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063084554 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.061224031 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063385483 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073239274 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061504049 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063555964 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.073848222 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062444714 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066688312 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.07402056 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067619335 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064017637 seconds)
  done (took 6.137776555 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069967699 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.094631624 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071210525 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071140125 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070736904 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.070897908 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.070606865 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.070348724 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.070146202 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.070886742 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070568231 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.110422584 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066895688 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.075530295 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07060836 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070258329 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.070619471 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070187627 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.070389786 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.070798333 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.070458796 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071062207 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.070787586 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.070662296 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072851083 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067028644 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.070362099 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.070365731 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071180579 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.070371678 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.072995389 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.070407186 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.070388426 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071068267 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.07308296 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.070413898 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063930894 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070359858 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071405798 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070740303 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067042644 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070957564 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.070392685 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066441691 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070758248 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.070396867 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071271539 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.072955033 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.077337219 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071207134 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.070645334 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071078719 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07065477 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071076305 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071134561 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.077322284 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071171178 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070925434 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070471865 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071292905 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070982784 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.077260281 seconds)
  done (took 5.922392252 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073718877 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066703078 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079431518 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.060096154 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060216772 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069222164 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059955181 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.060204916 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06730363 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067280344 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068799768 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069555429 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071573274 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068622068 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069098985 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07102236 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069578812 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069043927 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066658992 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069328577 seconds)
  done (took 2.813677454 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.075049718 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.078753521 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.065849474 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069154325 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.065973623 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069075758 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.064728762 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065346843 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065908719 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065701624 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.070978388 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.070266847 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066103888 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069749293 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.070731744 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069880119 seconds)
  done (took 2.547130183 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.067199571 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.067485289 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.066887727 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.061239071 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064934806 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.060645818 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.061330523 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.059923242 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.060244529 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.074263174 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.061296242 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.072856043 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.061308017 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060650912 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.061316146 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.06688017 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.060364889 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060863168 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.060972526 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.065770747 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.067144628 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062165178 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.065213128 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060973437 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.066175147 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.067858341 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.062584187 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064822227 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061182984 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.06173896 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.067003558 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.067554035 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.060669269 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.061885436 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.060401312 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.060816921 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.06092854 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.06166873 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.066606259 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.061004786 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059905007 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.065707523 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060982001 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.062188274 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.060072115 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.06140701 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.06027371 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.066413786 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.061265035 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.066155482 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.061010215 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062686801 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061673965 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.067788406 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.063056466 seconds)
  done (took 4.931328397 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076962037 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065620336 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060220547 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060104453 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.065146521 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.06573009 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.065214085 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.065331822 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066081036 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060285984 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065280868 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.064513531 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065537695 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065356833 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066230614 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065116913 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060171221 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065065378 seconds)
  done (took 2.627215647 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.071768351 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065022809 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.070333325 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.065058943 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.065415352 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064386747 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059998256 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060373362 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060441627 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064996264 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06484643 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.064395454 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060379851 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.064094538 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064632638 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065126707 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.064363735 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060333089 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.065016745 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060252932 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065122714 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060480412 seconds)
  done (took 2.858515928 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.086693971 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.085706644 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.124942244 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078714839 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.087331323 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070858862 seconds)
  done (took 1.986121482 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.092613684 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.103020623 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064326216 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064598342 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073639301 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068472994 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067943777 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06797892 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073568664 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072347822 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068250842 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074063555 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07359907 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069657967 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074063871 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075745515 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068270429 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068184858 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065672795 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076214603 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068154693 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073472323 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068108622 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067922346 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068251493 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070015085 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076152256 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072328902 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067997612 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073909059 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076536171 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068221562 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07372837 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072168075 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06572356 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07396736 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068061184 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075803512 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073479244 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069946603 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064679532 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07349359 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073929466 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069654529 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076073399 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0686185 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069664965 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06814749 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068418982 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078298734 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073947488 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07041895 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073876118 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076397834 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076263452 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078493064 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072266723 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069996689 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073727431 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072468399 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070442518 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073964273 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070661714 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072088529 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076601862 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070126676 seconds)
  done (took 6.226286545 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.099215195 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06548889 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068476557 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072524036 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069981492 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067971012 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068642134 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0681533 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068503977 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065323401 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104040811 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068776593 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070117188 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070726145 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068491142 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067930922 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067879611 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069938533 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06563545 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077755758 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068518717 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069827454 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069682767 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069664835 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072164639 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07610884 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068375957 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068246463 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068028856 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068030254 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069627244 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068331711 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070090851 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065483717 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069702406 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068121333 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067966421 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069399861 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068203906 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073775782 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069819518 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076161985 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068173813 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067920254 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072066156 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06838458 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068101762 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065715516 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068427983 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065497429 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072348546 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072430766 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072555463 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069889238 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068359068 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069100925 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068674734 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068371336 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06862887 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076528235 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06990521 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068450004 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078232737 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068541365 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068092083 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070277931 seconds)
  done (took 6.137301032 seconds)
done (took 127.783727373 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.216329486 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.18820849 seconds)
  done (took 1.8463408 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.073401689 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.096668397 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.074965578 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.137433028 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.071387754 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.107153398 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105769905 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.074594311 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.070742506 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070763712 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070960304 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.073860968 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.140736448 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.071520217 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.070750059 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.073496236 seconds)
  done (took 2.846855771 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.10542101 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.182135713 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.111779993 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068823259 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108309479 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.075729814 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.068739543 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.079678382 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.072374287 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.080842621 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.075346612 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074182931 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.070801209 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074152809 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.072503757 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.075129521 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.070742629 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075358385 seconds)
  done (took 3.008769183 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.096377924 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.084917463 seconds)
  done (took 1.652825783 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.152899859 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.103671123 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.142999853 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.324124155 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.129806506 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.12664771 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.128138843 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.12383953 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110557809 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.120534543 seconds)
  done (took 2.928152946 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.103636865 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.173590146 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.30633265 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.119863551 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.075192747 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.098000197 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122129523 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.081430705 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.078839075 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.078454719 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078382258 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076094176 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100303563 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.075214005 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.073782652 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075507064 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.102923303 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.073010347 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073573767 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.074199974 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.103713737 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069891062 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.07518043 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072877362 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076282801 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.076851889 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070965051 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069550273 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.07488822 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073830993 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076856601 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.096052648 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.07695809 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.097950339 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073385959 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.098834186 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.073694654 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072544119 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073709135 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073200258 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.075832314 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.076071325 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.079176975 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.075822482 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070699883 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073997675 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071233745 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069471424 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.077855261 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.070840917 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077748073 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.077191954 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098401124 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070375426 seconds)
  done (took 6.16275484 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106631974 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.10419642 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069387409 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.111705689 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.103800381 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068829144 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.102751356 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.098730696 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.106577557 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068442295 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067741979 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068333814 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074978466 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.078286962 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.114292807 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.106198173 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070650187 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068601537 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.105669629 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.106119165 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067635803 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.099984523 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.097668885 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104103687 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.067213673 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068313095 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067474529 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067758194 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072954067 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.074096021 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067628233 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.074848024 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.07987161 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074502658 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06675004 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067759144 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067065273 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.074333456 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075362661 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.075595478 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.073925012 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067040969 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067507114 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067737496 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068318447 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.0670768 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.073725975 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.074242902 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.073957351 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067563082 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067639078 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067281408 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068464449 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074429167 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.073279852 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075108881 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.074865978 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067521694 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067702156 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069554313 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076318793 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075814701 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075194844 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068422534 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.075599086 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067585867 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076436293 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080169282 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067471648 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068844937 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067755434 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067678967 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068761786 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07365272 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.073720579 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068440369 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070685235 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067639358 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075922697 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074265804 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067597174 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.072919619 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067139292 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067740389 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06876876 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068080596 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.072839056 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075054903 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067746636 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067114603 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067475064 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067496837 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.066430923 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.073087956 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073858922 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.073836132 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.073252627 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067602745 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.072999337 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072846436 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067411679 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.071994744 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066753904 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06648841 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066398046 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072347739 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.071026709 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074048567 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066313097 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065960414 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.07251423 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.211213081 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068966238 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.074674801 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077082082 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.074742281 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067652222 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077410252 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068207104 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075643681 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068379884 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076568974 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068289274 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074331779 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067802702 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.06709701 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067706527 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.074088651 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068423888 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06771307 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067890136 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067717612 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.074425787 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077488084 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068284194 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074107763 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074004533 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.06849501 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.074061342 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068181664 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074924203 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068233244 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.299810416 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.0672297 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076497714 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067518944 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06742763 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067314808 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075916181 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067674596 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076111569 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073336321 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067588689 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07719555 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076167953 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.073382856 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.076041911 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068517995 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068018788 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067610586 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067971954 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.073323991 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075124038 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068392395 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067783009 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073470952 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.076016036 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067940857 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.073479823 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073579323 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.073418846 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067875022 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067704184 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076640337 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.075787253 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.073703069 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074144952 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.074003196 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.06770811 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073393626 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073468684 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067866204 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079278365 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06756721 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07804761 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073991323 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073261929 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.074312665 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.075377667 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.075995953 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.076234015 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.078453414 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067492164 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067453669 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.073769552 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067756337 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067757411 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.073531451 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068516596 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068120009 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.078576218 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067583684 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.076233614 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.067222822 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.074513526 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066883436 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068044985 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078392922 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067564312 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068011038 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073675223 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067419286 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.073566193 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075908163 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073251771 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067081416 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067282918 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073069728 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073560043 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06657492 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.065855496 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066634939 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.071693335 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.070835325 seconds)
  done (took 18.283199053 seconds)
done (took 38.211040995 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207075647 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.166074046 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.193413215 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.114954063 seconds)
  done (took 2.258152844 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.09166452 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.098339461 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.076128781 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.064069035 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.083065255 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.064135352 seconds)
  done (took 1.995303312 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.248538097 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.186619561 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.170267195 seconds)
  done (took 2.115942691 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.214572757 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.191066079 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.475672854 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.298881874 seconds)
  done (took 2.793685344 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.128001961 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.076823848 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.063170199 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.073265887 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.104310359 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.13206112 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.085733996 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.106820606 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.073951655 seconds)
  done (took 2.417927623 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.12842882 seconds)
done (took 13.254284314 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.231835935 seconds)
    (2/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.204764483 seconds)
    (3/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.091874349 seconds)
    (4/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.161846791 seconds)
    (5/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.25236499 seconds)
    (6/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.099074334 seconds)
    (7/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.075083805 seconds)
    (8/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.090483947 seconds)
    (9/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.072233438 seconds)
    (10/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.118833002 seconds)
    (11/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.192123614 seconds)
    (12/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.089674783 seconds)
    (13/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.200793873 seconds)
    (14/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.075258412 seconds)
    (15/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.251681061 seconds)
    (16/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.199974533 seconds)
    (17/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.226991214 seconds)
    (18/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.072915601 seconds)
    (19/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.236774595 seconds)
    (20/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.218626073 seconds)
    (21/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.226093306 seconds)
    (22/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.090270349 seconds)
    (23/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.073060895 seconds)
    (24/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.123525631 seconds)
    (25/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.183316762 seconds)
    (26/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.198495009 seconds)
    (27/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.147561091 seconds)
    (28/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.197586025 seconds)
    (29/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.079328936 seconds)
    (30/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.098030853 seconds)
    (31/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074923703 seconds)
    (32/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.140545579 seconds)
    (33/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.075483377 seconds)
    (34/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.072000838 seconds)
    (35/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.168831339 seconds)
    (36/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.136951254 seconds)
    (37/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.067212962 seconds)
    (38/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.143723643 seconds)
    (39/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.074166847 seconds)
    (40/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.073650056 seconds)
    (41/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.06313686 seconds)
    (42/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.180518023 seconds)
    (43/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.113873524 seconds)
    (44/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.063899481 seconds)
    (45/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.084354818 seconds)
    (46/341) benchmarking ("sort", Bool, false)...
    done (took 0.143674717 seconds)
    (47/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.078260079 seconds)
    (48/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.164156119 seconds)
    (49/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.185700028 seconds)
    (50/341) benchmarking ("sort", Int64, false)...
    done (took 0.065920088 seconds)
    (51/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.076447511 seconds)
    (52/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.080803494 seconds)
    (53/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.071985797 seconds)
    (54/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.063889462 seconds)
    (55/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.209235909 seconds)
    (56/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.064737487 seconds)
    (57/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073742415 seconds)
    (58/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.071614644 seconds)
    (59/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.078592493 seconds)
    (60/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.08680153 seconds)
    (61/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.063612126 seconds)
    (62/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.226198707 seconds)
    (63/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.153627007 seconds)
    (64/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.142939037 seconds)
    (65/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.074408952 seconds)
    (66/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.074387932 seconds)
    (67/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.074822356 seconds)
    (68/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.071333839 seconds)
    (69/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.16048776 seconds)
    (70/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067458707 seconds)
    (71/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.171161451 seconds)
    (72/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.134094909 seconds)
    (73/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.081489709 seconds)
    (74/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.072160066 seconds)
    (75/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.15435982 seconds)
    (76/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.071962355 seconds)
    (77/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.074649382 seconds)
    (78/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.220738492 seconds)
    (79/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.1585774 seconds)
    (80/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.069741719 seconds)
    (81/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.076075249 seconds)
    (82/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.078217139 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153717995 seconds)
    (84/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.072735673 seconds)
    (85/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.08655852 seconds)
    (86/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.073509581 seconds)
    (87/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.064436125 seconds)
    (88/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.218544603 seconds)
    (89/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.066024079 seconds)
    (90/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.07452449 seconds)
    (91/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.173821656 seconds)
    (92/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.064335945 seconds)
    (93/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.069561327 seconds)
    (94/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073961035 seconds)
    (95/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.072111765 seconds)
    (96/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.141357293 seconds)
    (97/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.083667828 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.122817591 seconds)
    (99/341) benchmarking ("sort", Int8, false)...
    done (took 0.146625533 seconds)
    (100/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.072560008 seconds)
    (101/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.06875949 seconds)
    (102/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.138427371 seconds)
    (103/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.151677275 seconds)
    (104/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.064811169 seconds)
    (105/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.06658672 seconds)
    (106/341) benchmarking ("sort", Float64, false)...
    done (took 0.135182745 seconds)
    (107/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.065173689 seconds)
    (108/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.065654558 seconds)
    (109/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.225309385 seconds)
    (110/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.092584617 seconds)
    (111/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.155919297 seconds)
    (112/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.06530045 seconds)
    (113/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.074312273 seconds)
    (114/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.144946224 seconds)
    (115/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.07320951 seconds)
    (116/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.08560881 seconds)
    (117/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.088586516 seconds)
    (118/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.06380847 seconds)
    (119/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.067660959 seconds)
    (120/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.086712126 seconds)
    (121/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.064546343 seconds)
    (122/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.076131363 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.089416499 seconds)
    (124/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.14862988 seconds)
    (125/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.071530021 seconds)
    (126/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.10968776 seconds)
    (127/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.076628779 seconds)
    (128/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.074688622 seconds)
    (129/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.064450723 seconds)
    (130/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.08624444 seconds)
    (131/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.074269972 seconds)
    (132/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.064770032 seconds)
    (133/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.201916225 seconds)
    (134/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.168768512 seconds)
    (135/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.066026403 seconds)
    (136/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.063811482 seconds)
    (137/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.14603458 seconds)
    (138/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.074880641 seconds)
    (139/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.065055136 seconds)
    (140/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.077209793 seconds)
    (141/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.18991959 seconds)
    (142/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.066044456 seconds)
    (143/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.065210003 seconds)
    (144/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.073447942 seconds)
    (145/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.081687904 seconds)
    (146/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.072395023 seconds)
    (147/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.071631567 seconds)
    (148/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.127131507 seconds)
    (149/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064661352 seconds)
    (150/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.065679552 seconds)
    (151/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.148547139 seconds)
    (152/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.064329693 seconds)
    (153/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.065549661 seconds)
    (154/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.081910934 seconds)
    (155/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.223678366 seconds)
    (156/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.182268678 seconds)
    (157/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.063374224 seconds)
    (158/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.138272918 seconds)
    (159/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.139120113 seconds)
    (160/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.082806781 seconds)
    (161/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073189096 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.064763767 seconds)
    (163/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.065140659 seconds)
    (164/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.066980191 seconds)
    (165/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.064302292 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084125636 seconds)
    (167/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.066987343 seconds)
    (168/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.07478485 seconds)
    (169/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.064435381 seconds)
    (170/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.066065613 seconds)
    (171/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.067361376 seconds)
    (172/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.06385554 seconds)
    (173/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.064909044 seconds)
    (174/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.147458754 seconds)
    (175/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.143665557 seconds)
    (176/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.172732841 seconds)
    (177/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073331974 seconds)
    (178/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.141119072 seconds)
    (179/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.067244589 seconds)
    (180/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.064804013 seconds)
    (181/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.20738587 seconds)
    (182/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.120567448 seconds)
    (183/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.072874939 seconds)
    (184/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.063919327 seconds)
    (185/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.092417179 seconds)
    (186/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.17236306 seconds)
    (187/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.088288789 seconds)
    (188/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.316696755 seconds)
    (189/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.143856482 seconds)
    (190/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.066890888 seconds)
    (191/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.092911126 seconds)
    (192/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.160815162 seconds)
    (193/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.066017087 seconds)
    (194/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.0663843 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091353253 seconds)
    (196/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.143017877 seconds)
    (197/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.080800463 seconds)
    (198/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.07404367 seconds)
    (199/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.065936076 seconds)
    (200/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.135149641 seconds)
    (201/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.066354184 seconds)
    (202/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.188851186 seconds)
    (203/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.066116304 seconds)
    (204/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.068574115 seconds)
    (205/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.068614174 seconds)
    (206/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.064827923 seconds)
    (207/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.066168533 seconds)
    (208/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.07997426 seconds)
    (209/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.06464754 seconds)
    (210/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.066177022 seconds)
    (211/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.073925059 seconds)
    (212/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065068544 seconds)
    (213/341) benchmarking ("sort", Float32, false)...
    done (took 0.136333539 seconds)
    (214/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066032189 seconds)
    (215/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.092539679 seconds)
    (216/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076637861 seconds)
    (217/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.076948293 seconds)
    (218/341) benchmarking ("sort", BigInt, false)...
    done (took 0.259629842 seconds)
    (219/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.073062555 seconds)
    (220/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.15765739 seconds)
    (221/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.064452994 seconds)
    (222/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.06502849 seconds)
    (223/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.120512175 seconds)
    (224/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072187345 seconds)
    (225/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.064185912 seconds)
    (226/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.071830267 seconds)
    (227/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.065002525 seconds)
    (228/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.064480183 seconds)
    (229/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.06384226 seconds)
    (230/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.064020992 seconds)
    (231/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.07337666 seconds)
    (232/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.0769552 seconds)
    (233/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075133358 seconds)
    (234/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.13891942 seconds)
    (235/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.144217243 seconds)
    (236/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.128744914 seconds)
    (237/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.064597595 seconds)
    (238/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.064193805 seconds)
    (239/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.072013209 seconds)
    (240/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.065578651 seconds)
    (241/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.081784176 seconds)
    (242/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.066106082 seconds)
    (243/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.158080745 seconds)
    (244/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072819911 seconds)
    (245/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.063689014 seconds)
    (246/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.072203066 seconds)
    (247/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.06431284 seconds)
    (248/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.065573793 seconds)
    (249/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.083385978 seconds)
    (250/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.063855502 seconds)
    (251/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.065297966 seconds)
    (252/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.065459156 seconds)
    (253/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.073035056 seconds)
    (254/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.065129821 seconds)
    (255/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.06687184 seconds)
    (256/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.064072067 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087408741 seconds)
    (258/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.064147208 seconds)
    (259/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.065767577 seconds)
    (260/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.070059829 seconds)
    (261/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.071664218 seconds)
    (262/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.064093804 seconds)
    (263/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.063580266 seconds)
    (264/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.081606654 seconds)
    (265/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.076223474 seconds)
    (266/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.135396453 seconds)
    (267/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.073815705 seconds)
    (268/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.066243183 seconds)
    (269/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.064079941 seconds)
    (270/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.064014254 seconds)
    (271/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.122205559 seconds)
    (272/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068336365 seconds)
    (273/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.068306991 seconds)
    (274/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.152425691 seconds)
    (275/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073356326 seconds)
    (276/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066253266 seconds)
    (277/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.064065616 seconds)
    (278/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.130123108 seconds)
    (279/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.069678736 seconds)
    (280/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.067089508 seconds)
    (281/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.066050135 seconds)
    (282/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.114614657 seconds)
    (283/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.192012614 seconds)
    (284/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.128691159 seconds)
    (285/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.065766073 seconds)
    (286/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.184605632 seconds)
    (287/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.068662158 seconds)
    (288/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.065015784 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090950217 seconds)
    (290/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.082989637 seconds)
    (291/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.064498989 seconds)
    (292/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.06834754 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.149487621 seconds)
    (294/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.072638804 seconds)
    (295/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.063998781 seconds)
    (296/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.082490365 seconds)
    (297/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.064979096 seconds)
    (298/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.145503219 seconds)
    (299/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.089380083 seconds)
    (300/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.066542326 seconds)
    (301/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.065351027 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.121116451 seconds)
    (303/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.063270436 seconds)
    (304/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.086363748 seconds)
    (305/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.082911305 seconds)
    (306/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075524551 seconds)
    (307/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.063405918 seconds)
    (308/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067333475 seconds)
    (309/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.158539382 seconds)
    (310/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.062916392 seconds)
    (311/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.233916985 seconds)
    (312/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.069231743 seconds)
    (313/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.170770705 seconds)
    (314/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.066640399 seconds)
    (315/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091552004 seconds)
    (316/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.06990837 seconds)
    (317/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.065866767 seconds)
    (318/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068620491 seconds)
    (319/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.066689922 seconds)
    (320/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.067663125 seconds)
    (321/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.064755712 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076606883 seconds)
    (323/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.064140159 seconds)
    (324/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.148385201 seconds)
    (325/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.064354023 seconds)
    (326/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.064024658 seconds)
    (327/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.066501331 seconds)
    (328/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.065703639 seconds)
    (329/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072688305 seconds)
    (330/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.067365528 seconds)
    (331/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.065657777 seconds)
    (332/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.065822133 seconds)
    (333/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.065397428 seconds)
    (334/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.065675649 seconds)
    (335/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.069927526 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.084599655 seconds)
    (337/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.06473746 seconds)
    (338/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.06911811 seconds)
    (339/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.06560711 seconds)
    (340/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.078374499 seconds)
    (341/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.066066909 seconds)
  done (took 35.908131223 seconds)
done (took 37.442526209 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.083493274 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.089037461 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.072863355 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.083457063 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.079759714 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.098679029 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072614449 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.077455983 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.080333963 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.079409147 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.07812821 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.071834838 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.074836497 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.075287459 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.072605995 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.088344582 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.080704041 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.073954812 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073893886 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.064539942 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.073506602 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.065522474 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.064243048 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.071006441 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.076655505 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072692086 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.074163034 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074446675 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.065255339 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.065207378 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.070800008 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073832489 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.065065683 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.076681579 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.074000661 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.073700577 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075521634 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.078123653 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064327928 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.065310202 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075785491 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.065316505 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.07320417 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071824345 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.070174382 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.072224119 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.07332748 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076922226 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.087120153 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069946427 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075826011 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.075847015 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.076045782 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.070764994 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.070779971 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073323977 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.071921196 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.087305133 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074189227 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070039841 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076058821 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074346816 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.072172882 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.073290006 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073220456 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076701877 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.07646212 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072093562 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076910496 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.072758561 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064556402 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.073711728 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069796457 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.064860822 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.076429436 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.078937647 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.064023852 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.069387381 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.073076263 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.073452377 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.064856459 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069713575 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.064420286 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.070272174 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069214837 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.07150407 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.070755848 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072651029 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.064447642 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.074015209 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.072620758 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.073061334 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.064256997 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076689611 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.064630117 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.071997667 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.06563823 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.06514013 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.06416291 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.070846468 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064551982 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069789867 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.073174004 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.063667676 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.07004878 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.077702417 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.067965093 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072578626 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.064242805 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.064340124 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076092783 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.075845612 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.06540192 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069599296 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.064508272 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.070861867 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.064139248 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.064552977 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064496263 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.065203619 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.070376177 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.065071563 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069569603 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.070629996 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076650061 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.064610642 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.069757495 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069326161 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.065536975 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.071472769 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.065121328 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.064929916 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.063566986 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077358773 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068679678 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.064593903 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070016725 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069067788 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.072203546 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062631546 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073107395 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070069383 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.068357162 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.217490714 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.064934677 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.076776696 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070608147 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069815375 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064640185 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.06547117 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.064153507 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.065522954 seconds)
done (took 12.661823705 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.066212169 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.103698091 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.072904664 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.081269378 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077047181 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.066845953 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.069332531 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.082311624 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.069459507 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.085238018 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.092982565 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.086708648 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.091693613 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.064584487 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.065824878 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.066502856 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.064504732 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.072762677 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.079784666 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088292865 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.093476831 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.065892717 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.067675918 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.081510843 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.075745881 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.081246905 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066493826 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.066304309 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.109574589 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082361172 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090155268 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064971881 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.066062248 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.078471906 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.079530288 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.072076597 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.066585315 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.069437793 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.066947443 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.065080147 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.067404623 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.078893151 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.069041655 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.069286909 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.066729919 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.066448671 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065859291 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.068555507 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.078278544 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.069066406 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.073179095 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.077281292 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066742529 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.065750897 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.064080104 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.069272886 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065539905 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.066252246 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.066277549 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.065667714 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.066317899 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.068377959 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.066488099 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.066246536 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.069014801 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.068334105 seconds)
  done (took 6.439384902 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.080280987 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093821357 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078096698 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078238972 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.065586162 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.066129488 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.065809126 seconds)
  done (took 2.175250841 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.066375548 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.07903656 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.081774788 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.081940027 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.075318707 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.083963961 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.066086139 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.096490955 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.065254154 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.080027508 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.110974208 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.082884953 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068973481 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077471405 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.066550022 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.073338445 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.066367626 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.076325073 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07343042 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.083422438 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069677326 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.094771797 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080098757 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.06604918 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.085872964 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.069547837 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.065354705 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066477973 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067575926 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067230179 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067404196 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.103915583 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.069846249 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.077410633 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.063665181 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.065994238 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.072416456 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069639121 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.068307847 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.077308546 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.07093865 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067436157 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.064539153 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067356172 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068723427 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.069688978 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.064870696 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067889391 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067478895 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077939282 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.065327682 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.069170989 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.07119311 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070752965 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072146291 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070088241 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.076297381 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068326904 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077722267 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.074468837 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067642412 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.073846332 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.073506533 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071607786 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.073497215 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.070020685 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.069869467 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071212506 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067135552 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.06786543 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068845165 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.07389347 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.066189589 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068306083 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.069951105 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.068226469 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.069970386 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082886513 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082768751 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.078677428 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.06822767 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067753924 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.069976592 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082434416 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070707766 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067848331 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.069901054 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.065482843 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.07051654 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067924473 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.073081104 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.068249784 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.075132864 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.068559234 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.070908185 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073899683 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.066083883 seconds)
  done (took 8.689233399 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068173325 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.067203202 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.068402314 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.066754467 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.066983966 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.067273538 seconds)
  done (took 2.090853516 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.089312932 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.067268533 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.082641458 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.067251393 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.103801464 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.073391977 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.073320418 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.074159357 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.072603848 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.079883847 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.072997179 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.075917716 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073082677 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.071127216 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.072586803 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.067390678 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.072843645 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069554256 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.079577095 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071340728 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.079672868 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.071176876 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071182121 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.078291217 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.069628794 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.067796971 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067737739 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.07995387 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.079664532 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.074159932 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.070765879 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.069472979 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.074077573 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.073991628 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.072548945 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.074244344 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067012586 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.071629783 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068701167 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.069473151 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.075355923 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070870023 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.068648441 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.071948561 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.073824061 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.074807814 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.072060492 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070006195 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.072971409 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072189769 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.071822151 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.067127673 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.073905521 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.071596859 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.074568295 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.074107109 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.071794548 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.072574406 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.070539069 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.074741441 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066527182 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.069717256 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.07369505 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.069424286 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071409744 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.072018161 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.074221764 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070616768 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071385057 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066553629 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071631543 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066680307 seconds)
  done (took 6.896734482 seconds)
done (took 27.922055554 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.558638599 seconds)
  done (took 2.186266973 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.577490857 seconds)
  done (took 2.248382299 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 9.778731911 seconds)
  done (took 11.445703171 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.303767163 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.326092916 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.718894763 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.131727385 seconds)
  done (took 3.187612214 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.740136368 seconds)
  done (took 2.418593668 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.227138688 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.217138193 seconds)
  done (took 2.132934567 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.343806955 seconds)
  done (took 2.012075119 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.126111402 seconds)
  done (took 2.788035523 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.225458582 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.157420495 seconds)
  done (took 2.057062873 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.491426572 seconds)
  done (took 2.159449438 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.297040372 seconds)
  done (took 5.970868345 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.231301874 seconds)
  done (took 1.943736472 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.230374346 seconds)
  done (took 1.911220236 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.175414491 seconds)
  done (took 3.850636741 seconds)
done (took 47.990820425 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.082835936 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.088467453 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.085704137 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.081225593 seconds)
  done (took 1.969160457 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.073879835 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.070047722 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.073385836 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.073493637 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.07128193 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.072002443 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073059278 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.068743682 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.070563803 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.069570249 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.06801536 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.069813193 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.07219335 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.06954662 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.071903323 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074005867 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.069673769 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.070006342 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.071937942 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.069741471 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.072444592 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.069888509 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.067825235 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.069292709 seconds)
  done (took 3.369953456 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.077716782 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.071941344 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.074861558 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.070557259 seconds)
  done (took 1.971475471 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.076014349 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.076105609 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.08514929 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.090294121 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.076898775 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.076978585 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.083964131 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.083999611 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.06502433 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.086754851 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068432467 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.066577574 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.066111828 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.085216536 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.082421523 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.062419747 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064142313 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.076735955 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.076045925 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.079071619 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.068125453 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.065065953 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.076255615 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.076289225 seconds)
  done (took 3.490079322 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.078625737 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.065092614 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.077703821 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.090488019 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.09170755 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.065056593 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.078976449 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.092302884 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.125797893 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.065546043 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.071240188 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.064945824 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102779568 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.065119305 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.080358278 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.107459851 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111119244 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.069302736 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.097711995 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.065298744 seconds)
  done (took 3.350542896 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076211382 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068896316 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.069315175 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.064765448 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.075995969 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.072338804 seconds)
  done (took 2.114203258 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.067576466 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.067231702 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.066414084 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.066279755 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.071931134 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.066492376 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.065447663 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.067832642 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.067297693 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.066684717 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.0666394 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.065900085 seconds)
  done (took 2.485092486 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.153794405 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.068658341 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070139824 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.065443737 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.070625852 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.066160084 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.080753665 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.067911379 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.08419485 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.066832175 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.066363876 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.068313581 seconds)
  done (took 2.610616999 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099525154 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100755547 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145736266 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117057721 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115116345 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096309935 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117948449 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.093130372 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.158186055 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.135275427 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115304644 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123098938 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086052683 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.069154143 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099487774 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101024806 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134793517 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072100112 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111868773 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.19414253 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11436754 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.111809687 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121500769 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115672191 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080680651 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121534791 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094327568 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102344701 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.153449245 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109625894 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119498143 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.096847517 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.071422891 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.070856038 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147942801 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.100759559 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135952798 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092390387 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098613741 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087141647 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106369529 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.068757424 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.085150722 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.104969411 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083659842 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115894057 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.08717834 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102566556 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080696638 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129381388 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105682186 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098206472 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087184484 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103217918 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129063533 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095009483 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110719919 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104972039 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081078103 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.115560233 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.098229642 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.251024118 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094447441 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080864896 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.159712503 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089390065 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.111479653 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112788803 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.082475173 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08930244 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10195155 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.129435047 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106304527 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.10686787 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11374517 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.123601542 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108905156 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.091705654 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.127569287 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092853056 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.072612527 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.103988102 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.127384896 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084806714 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099791268 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12987638 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091645187 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107161838 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.092219557 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.116843355 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080235353 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.096155683 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.069377373 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.09716876 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106431232 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097202827 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111476066 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106313055 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077658442 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124096941 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107706222 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072099007 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.116256035 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098649392 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151928873 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095586341 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.075444677 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098904286 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093788632 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.145644417 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08424754 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079130252 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09739061 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141112856 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093816339 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.168258744 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095519372 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127433659 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096324715 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08668075 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074312151 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.087806545 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100391841 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105734641 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099111451 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087278709 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.075568285 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085111699 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093600701 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089876154 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07904697 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.109898603 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098161033 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.073150812 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085707666 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.074433491 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120418144 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.075471213 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104864076 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120607842 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076510316 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101774882 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124848252 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134377323 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.09478837 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103713113 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134262792 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.109536602 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.0765014 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.080095434 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101890772 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.132064579 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108583084 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081380712 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.073071211 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094964255 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105049751 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.093224231 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.130987431 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121566818 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10214712 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092885492 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131103707 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110969422 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086192597 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.090158166 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090928013 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.11506089 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103801221 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143087776 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088765877 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111217794 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110381418 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129230526 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.107636258 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.085409867 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081284051 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090674732 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.097785573 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100604436 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132298275 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.091317997 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.070334726 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087118451 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122376172 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072811848 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094596129 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.087154562 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.088409484 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111619148 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.079242443 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078108353 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.066082932 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096157404 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126689268 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.067545978 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106894901 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.385635397 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104927672 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.108056866 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.072613096 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103099828 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.147191053 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107494422 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143620198 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118757353 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102803436 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120768793 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.100928103 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.107238273 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081501902 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.129528295 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135232997 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098561983 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092243406 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136138134 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118596494 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.135375588 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097600619 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115819666 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105921485 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100456742 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103949029 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.098802623 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142930631 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11975695 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.124406491 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114992822 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106489439 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107689829 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137242059 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082364304 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116840366 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.075502344 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111944889 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.0778765 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107020866 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.078814924 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.111217709 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08007637 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099452275 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.069612275 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.074128953 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.140545602 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.111794826 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089250571 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086164273 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.135128909 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131221235 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081065249 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101407618 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.134856453 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100644524 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101228298 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108271887 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085457185 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094836964 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.303634824 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079724056 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.081837897 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.098779381 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094218343 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106966714 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084076337 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075119971 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135857751 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104005999 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095874328 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108048631 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095487605 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.120965604 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089978884 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087985503 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105679033 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103160209 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139142413 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.089916093 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.097590417 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.116994577 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080158342 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.091733723 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.069502815 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.084200737 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.075554481 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.108395826 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075725855 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108249885 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.068491495 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.128348284 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086569215 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.091805333 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101964642 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096952234 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126871187 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092353746 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127530967 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090133842 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101589991 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107945942 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094132651 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110258368 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103286901 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09469508 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109255525 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.09570142 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106028989 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109191365 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094043517 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.140163308 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08936082 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119313409 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104969851 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105704704 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10367828 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117445302 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136235826 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112403811 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141548923 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074922428 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082423943 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104607322 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099659346 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144448814 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102665386 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072089527 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116257562 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090487633 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09536228 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.266598002 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083072437 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142212965 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087212187 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.086780081 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113106707 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089748447 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096561069 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076645136 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094852541 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.100569026 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094942139 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093844377 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.132658315 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11600543 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113501998 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.131769307 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.098490924 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.09261268 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.117601797 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109268062 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109964042 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085649921 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086402187 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12216552 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099950877 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.12676655 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.099672884 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094604076 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099870164 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090473553 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098459354 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096371828 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.109176453 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08003414 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.075929176 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.06861755 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.072176623 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.117023855 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108624719 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10159902 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098416154 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.072863573 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102665171 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097126099 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072166573 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087296147 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095149072 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125643247 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.084249383 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092316965 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.113044583 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.091447094 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102973652 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129738265 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128112022 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.099605483 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088737143 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142227657 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12794294 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088414661 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09313274 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.071388063 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078941735 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100630499 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145552663 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117733044 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077436336 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083576974 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.076619114 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.242660698 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.072435499 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088104605 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.089479695 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103743938 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119115121 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.111812864 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102803199 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075409017 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102374767 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096985198 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091970473 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095764043 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101291521 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104768141 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.123088664 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100133946 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096737136 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075896317 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.085212966 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076182598 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079693465 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.101572073 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.077205222 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076162198 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128365059 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.091007452 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103977188 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108311126 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084504548 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075842818 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131496142 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.06911467 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133131602 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.070860785 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081812764 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.080510934 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078836739 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093999842 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104267564 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095003331 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113345983 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104834392 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104182596 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110469153 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154373189 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070653022 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.148660111 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075679257 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075612731 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075996612 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111466837 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090468096 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103031076 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14115867 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089770101 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092131823 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077045633 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127548932 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.09754185 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.1022899 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082079863 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078170542 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127408251 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07943096 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.070948146 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086782867 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110943094 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072242416 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.135107889 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114456755 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.237462254 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112879419 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631153787 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089911327 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075652825 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088564497 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.147343174 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128834691 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083110872 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108648998 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.117964989 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08936975 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114080909 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107623191 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.180722508 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073929921 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09425776 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.103736786 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.0985695 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092016056 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.091615437 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086998097 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.091892009 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.085041112 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079623746 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106807489 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086995763 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091403446 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122956113 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082727023 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.079665593 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.129369007 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.103875357 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.082403708 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088708835 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.099805682 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087451281 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091010671 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.069468398 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143737604 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121016268 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102007533 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.090984544 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107413633 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117553981 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088656062 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112466881 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.088253375 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109467978 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084351217 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.078538718 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101807867 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.078204003 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078070773 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117021251 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.084137456 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.095060087 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104850789 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.09493896 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113355243 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117641658 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110052988 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097352034 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078503215 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08589637 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.087745135 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075035662 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077939108 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.07426261 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.075929291 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106435172 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.243712032 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113535262 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113361569 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081971928 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103336143 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.100986787 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108883772 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08323904 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10098464 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108039557 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090530259 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103703054 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099995056 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.127040567 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143936388 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099350814 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.122509074 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131994944 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.076576737 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.075453291 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.068513742 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.14503364 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078960604 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.08036511 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11053516 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131211708 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082034266 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094655007 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.228126718 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080173121 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081807697 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096596698 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069740544 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083085931 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108014961 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084544169 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08049383 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098431296 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113124732 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116967338 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11140906 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089177513 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082416291 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081201824 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093522713 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.103961601 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.127670537 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089860038 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.075480002 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10683929 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102851072 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123132794 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.072817816 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080962119 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128294899 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09206586 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103181725 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080335163 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119432356 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.131006632 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08978321 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132568441 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070715128 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082713671 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089042091 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.124715238 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07514872 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088283488 seconds)
  done (took 65.069759375 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.149306469 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143288308 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.082235784 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.097151902 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.186839521 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.197082142 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.118825834 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.09591812 seconds)
  done (took 2.978313314 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 0.06753706 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.082111603 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 0.099859377 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.082794865 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 0.066804202 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 0.06767763 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.20166731 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.081092254 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.065914189 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.106940774 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.074913114 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.067901977 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.354557388 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.065887692 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.067146653 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.074313934 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 0.066856804 seconds)
  done (took 3.563443389 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.360270526 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.626218684 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.322850903 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074694085 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.751256322 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.091096131 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.10567361 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.137654772 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.081794981 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.530354098 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.369757042 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.131096632 seconds)
  done (took 18.461386444 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.075429373 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.074893585 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.077651987 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.077992578 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.074153565 seconds)
  done (took 2.253124964 seconds)
done (took 115.380049321 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.082357321 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.168477357 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.067082883 seconds)
  done (took 2.143185569 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.082426092 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.080473361 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.080252629 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.07764828 seconds)
  done (took 2.197998711 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.074131089 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.075791883 seconds)
  done (took 2.021434618 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.222800422 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.173486589 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090582562 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.082710418 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.079082808 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.07975567 seconds)
  done (took 2.126973082 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072437158 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.071433117 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.071905192 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.07193589 seconds)
  done (took 2.15819814 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.071124274 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.066137717 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.068420113 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.070756338 seconds)
  done (took 2.147847857 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086252642 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.082857855 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.111264953 seconds)
  done (took 2.149918013 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.083727137 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.08268251 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077672615 seconds)
  done (took 2.120983183 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.108826503 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.096660804 seconds)
  done (took 2.077284175 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080853112 seconds)
  done (took 1.955635067 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091033036 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.097508985 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.141372898 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.107483425 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.140710585 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.12701754 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.076916183 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078493669 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.073515389 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.072354563 seconds)
  done (took 2.878535343 seconds)
done (took 26.417611345 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079310913 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.372291611 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.359406912 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086448398 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.673047393 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.356514454 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.999413014 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.08972479 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098592037 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068203904 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084436887 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.649267718 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.991010411 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.326186663 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.974680528 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.328030239 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.650030023 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068506657 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067643036 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06782247 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.984210463 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067219193 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067675314 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068464756 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.649036898 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.373934037 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068884425 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.328611303 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067709693 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070048863 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.356651543 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069571833 seconds)
  done (took 16.405603543 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071227906 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.121095381 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071886751 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.083614617 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.069824108 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.06963197 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070719723 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.068465456 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109217525 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067888963 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085101674 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06762705 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071460327 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.06927322 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087807756 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068881424 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070125123 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069314135 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068937398 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069197173 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087039043 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06859513 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068972555 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069743826 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069139284 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082153728 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069786415 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068666378 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068799989 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070969145 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071933606 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069541896 seconds)
  done (took 4.289237885 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.120750469 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124888617 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072499232 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.108202586 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.117163173 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069858037 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.149541033 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.090518187 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112920793 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068102928 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085387563 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068412676 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.10311851 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069068838 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087739964 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068319338 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070163013 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069587869 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068445727 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069138633 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087613905 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068293108 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069414943 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069587446 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069703052 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083817445 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069936652 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.06862777 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068830567 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.0708053 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072694294 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070194727 seconds)
  done (took 4.556709162 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070321025 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.071350149 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.080019638 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.080746055 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.066979416 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.068940474 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.070094135 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.066725846 seconds)
  done (took 2.472530201 seconds)
done (took 29.611683155 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.079932004 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.067832243 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.070801352 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.086722134 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.073300369 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.070392998 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.064336347 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.074160753 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.071609751 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.071190386 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.073095245 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.066609287 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.069571312 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.064828969 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.071504392 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.065523651 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.07224065 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.069808062 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.070916251 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.072213735 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.071218926 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.07172705 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.075270448 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.07119132 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.071519305 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.071345228 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.075425534 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072110258 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.066491371 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069140931 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.06837743 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.08004228 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.072999851 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.073214623 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066981007 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.06657631 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.070607679 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.068582419 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.07289568 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.075363821 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.068639553 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.074984624 seconds)
  done (took 4.857807149 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.087894256 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.093148608 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.085407894 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.081344168 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.105281814 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.081615838 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.089525266 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078710592 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.077594091 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.088733433 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.074078125 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.078459267 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.079686526 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.071910227 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.077781631 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.07441714 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.079159993 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.073089896 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.077751862 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.078042932 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.089423101 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.071286756 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.07915094 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.080052037 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.073867645 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.079419861 seconds)
  done (took 4.015026524 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.073414864 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087985 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091424453 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.140148647 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.108116807 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081348329 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.081051662 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.101580512 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.099562252 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.068585415 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.071625047 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.094670543 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095953368 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.074881432 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106189731 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.085280069 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.080443739 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.069534208 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.074204074 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100858308 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089660056 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.085697652 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099481129 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086761876 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.067015398 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.076472319 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073700678 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.08245597 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.074214676 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.07958121 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.07147848 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.070664085 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.068449333 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.079657789 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.071290177 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.06533607 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.088993457 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079967632 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.08263203 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.105259426 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.076993837 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068596973 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.09715645 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.130537465 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.067552846 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.070032313 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.071492961 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079431605 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068985499 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09690411 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.085679483 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.067008457 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086089574 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068533877 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.069201999 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08364515 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068792651 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.069452827 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.079066453 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073656251 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088006279 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072354181 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.088068965 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.067394147 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078399881 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068950116 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.069111482 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.066233809 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.102475687 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.07446145 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.119527964 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068472965 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.0659311 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079811431 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078553301 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.074365934 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.067527012 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08641698 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079343434 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.07089777 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078730154 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.07078509 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070158558 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.101464129 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.066515827 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.066177159 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.06584209 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.070096929 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070536903 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.068240777 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080338858 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066733026 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070426538 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082587144 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067518808 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067991815 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069897629 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068834051 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066732925 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078248865 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071212551 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069577275 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080174786 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068675451 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070746447 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.081812626 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.077116321 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.067010898 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068363177 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.069587591 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.072100056 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.071950105 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.070328793 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.069501348 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074611344 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.074739155 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.073069707 seconds)
  done (took 11.11536293 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.162588246 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.149775458 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.069004714 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.144639958 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.076012928 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.072255259 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.146074915 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.08746761 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.0683103 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.069678907 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.06757933 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.095879624 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.091233847 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.102617601 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.072006128 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.068547743 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.092868681 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.10117374 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.148663935 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.143450568 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.090551887 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.076145232 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070391029 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070134856 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.069977248 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.077122339 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.084777129 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076118944 seconds)
  done (took 4.594651755 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076233868 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.109741424 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.072460868 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.092399959 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.087806443 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.068361857 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.070083932 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.069565346 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.084811949 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.075749374 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.068384318 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.072432681 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.071953921 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070474871 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.068996235 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.07456952 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.074752871 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.067141403 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.071904261 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.073246736 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.078490996 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.094494964 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.072688434 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.067937499 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.070898488 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.068058919 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075547894 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.078589044 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.068010009 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.09798562 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.065499648 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.072183294 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.08187652 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.068915237 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.067889094 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.068563684 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067807224 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.068071627 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.068105425 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.066241029 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.066073172 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.072860745 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066822643 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.074421615 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.082035064 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.075170186 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.069570138 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.070572749 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.070576351 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.065408742 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.071020502 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.07099909 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070352563 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.0764219 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071784197 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.070566287 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068971991 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096490912 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.074183921 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.067232971 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067219473 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.06635997 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.070109961 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075818428 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.083647771 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069821554 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.066799259 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.068324365 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.073052583 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081570536 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.067432847 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.073034431 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.065484437 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.068113483 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.070607322 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070629496 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.069429196 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06673184 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.068027871 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.068300978 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068039244 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067890601 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067561284 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070487572 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.06600712 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.066825246 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068718443 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.069466407 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075314851 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.067245915 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.071205482 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069446552 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066841073 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070516428 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073211972 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070157797 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.086555904 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.077064062 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068378884 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.066039832 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.081951615 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069888941 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.067328658 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.073563298 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072333235 seconds)
  done (took 9.567276799 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.091168394 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.069752563 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.087038812 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.093528227 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.077906639 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.073481124 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081987804 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.069773352 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.084629213 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.0679133 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.077526628 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.066413837 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.08143676 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.077162049 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.069435844 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.078743379 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.071211187 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087888861 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.082986298 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069841789 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.076851927 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080032675 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.080343065 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085259791 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.085152612 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085749577 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.080018158 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.070375209 seconds)
  done (took 4.153214678 seconds)
done (took 40.191809406 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.977628072 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.126362037 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.968946537 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.170163609 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.199270859 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.088896264 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.083219422 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.968637572 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.261600713 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.997989744 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.293078737 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.390336981 seconds)
done (took 69.488307659 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.029266718 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.115872593 seconds)
    (2/2) benchmarking "String"...
    done (took 2.18996207 seconds)
  done (took 6.20986845 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.567834462 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.974912074 seconds)
    (3/3) benchmarking "different"...
    done (took 2.023456294 seconds)
  done (took 8.466546406 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.100606195 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.983460157 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.226953389 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.971400639 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.977981988 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.36209389 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.783053503 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.429296631 seconds)
  done (took 32.637069735 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.129579974 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.169178057 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.707434861 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.738373217 seconds)
  done (took 16.695574607 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.576809009 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.235220033 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.234908584 seconds)
    (4/4) benchmarking "different"...
    done (took 2.229813361 seconds)
  done (took 11.2353368 seconds)
done (took 87.373404455 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.007071009 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.973389959 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.998186485 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.004891995 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.982615338 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.975152177 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.976944713 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.976053793 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.000517486 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.028886805 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.972650047 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.985010553 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.973287898 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.039976662 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.533403804 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.019286923 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.980505216 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.975816878 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.972703066 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.982378936 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.975306555 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.141478797 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.475598818 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.169791945 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.595184544 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.423497994 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.043115821 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.415224006 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.978702326 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.969984132 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.031202246 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.362638376 seconds)
  done (took 210.842612492 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.97080802 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.967083221 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.009733761 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.995131919 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.411927312 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.169633551 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.122728659 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.460813336 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.975306464 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.001530864 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.18097535 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.974125794 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.210026618 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.983480765 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.968197965 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.979219452 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.21768525 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.217107885 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.971240881 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.152782774 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.000532593 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.05350656 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.985726257 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.165314797 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.0143711 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.991796334 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.997076194 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.986623504 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.161168914 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.179462657 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.985165055 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.013343122 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.141783842 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.835057098 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.987992918 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.972444709 seconds)
  done (took 177.316438945 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.15889547 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.976555227 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.972540345 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.026486532 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.105610293 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.96951032 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.648753751 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.980442595 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.476830049 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.971463151 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.968468649 seconds)
    (11/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.972535219 seconds)
    (12/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.967793381 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.97928887 seconds)
    (14/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.054558554 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.974760423 seconds)
    (16/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.978609014 seconds)
    (17/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.95831412 seconds)
    (18/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.99075681 seconds)
    (19/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.965897375 seconds)
    (20/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.96567124 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.963444799 seconds)
    (22/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.963590215 seconds)
    (23/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.96479827 seconds)
    (24/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.966359771 seconds)
    (25/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.965329847 seconds)
    (26/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.965082712 seconds)
    (27/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.521954228 seconds)
    (28/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.208841223 seconds)
    (29/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.968885803 seconds)
    (30/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.967576672 seconds)
    (31/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.251475487 seconds)
    (32/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.978259792 seconds)
    (33/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.20926106 seconds)
    (34/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.970245923 seconds)
    (35/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.057212569 seconds)
    (36/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.021104516 seconds)
    (37/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.057951961 seconds)
    (38/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.963986659 seconds)
    (39/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.184986044 seconds)
    (40/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.031008403 seconds)
    (41/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.963959128 seconds)
    (42/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.966720358 seconds)
    (43/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.025400069 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.976479418 seconds)
    (45/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.967035695 seconds)
    (46/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.963854329 seconds)
    (47/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.96755706 seconds)
    (48/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.968651032 seconds)
    (49/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.022918997 seconds)
    (50/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.17787113 seconds)
    (51/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.965314818 seconds)
    (52/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.094856952 seconds)
    (53/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.443101547 seconds)
    (54/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.956861482 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.963884018 seconds)
    (56/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.958550096 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.572585538 seconds)
    (58/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.959364404 seconds)
    (59/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.958208549 seconds)
    (60/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.965234881 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.965719645 seconds)
    (62/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.958663363 seconds)
    (63/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.959658247 seconds)
    (64/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.345168688 seconds)
    (65/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.029670748 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.188251599 seconds)
    (67/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.95888139 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.487339352 seconds)
    (69/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.960240864 seconds)
    (70/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.075740132 seconds)
    (71/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.048847105 seconds)
    (72/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.958474463 seconds)
    (73/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.957608509 seconds)
    (74/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.958584408 seconds)
    (75/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.965255276 seconds)
    (76/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.960737634 seconds)
    (77/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.959278624 seconds)
    (78/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.963140023 seconds)
    (79/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.093804255 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.970954852 seconds)
    (81/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.058328933 seconds)
    (82/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.040947547 seconds)
    (83/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.961673323 seconds)
    (84/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.092971449 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.959838064 seconds)
    (86/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.9695121 seconds)
    (87/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.76770169 seconds)
    (88/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.029887753 seconds)
    (89/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.99556072 seconds)
    (90/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.774305547 seconds)
    (91/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.958846186 seconds)
    (92/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.331253851 seconds)
    (93/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.693008081 seconds)
    (94/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.959409949 seconds)
    (95/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.957402383 seconds)
    (96/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.957261099 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.970615694 seconds)
    (98/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.959289489 seconds)
    (99/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.961488523 seconds)
    (100/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.950464975 seconds)
    (101/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.028659703 seconds)
    (102/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.949766833 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.948495886 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.087003547 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.678664952 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.595056283 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.949880093 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.947019948 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.954848756 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.025322483 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.081499448 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.950560043 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.011304801 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.953646338 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.949736647 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.035370206 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.946462425 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.948969456 seconds)
  done (took 431.005344338 seconds)
done (took 823.274954891 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.66444751 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 2.56618328 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.708581809 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 2.58653566 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 2.555360167 seconds)
  done (took 14.960179927 seconds)
done (took 16.840881969 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.976503274 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.966852545 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.955879339 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.004064222 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.973649624 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.962530778 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.995491841 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.993051072 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.97988391 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.960300893 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.999594682 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.967229316 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.979441874 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.980822031 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.022681427 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.991007411 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.967495506 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.947966646 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.995405798 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.968953383 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.966805671 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.9648547 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.964130223 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.003640696 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.03553657 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.973940099 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.962645945 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.002037994 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.974113887 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.000351708 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.021006615 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.984258756 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.983640425 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.026274415 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.010683216 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.034529057 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.974875571 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.022595585 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.972498152 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.038868033 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.010928065 seconds)
  done (took 83.398458612 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.963494181 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.094694425 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.167936267 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.989534749 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.962065171 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.192633458 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.015531791 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.084308623 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.095084172 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.169836365 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.176378385 seconds)
  done (took 24.799927756 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.961665093 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.09682779 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.178513535 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.9938239 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.963060959 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.174372791 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.020455606 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.090143648 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.094947467 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.173362385 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.181635129 seconds)
  done (took 24.821244465 seconds)
done (took 134.901831509 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.335383822 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.981763657 seconds)
  done (took 6.201674576 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.972117235 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.10533939 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.954616664 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.956282674 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.957855198 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.95804428 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.958120484 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.957404809 seconds)
  done (took 17.704562237 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.960690353 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.957919219 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.957385214 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.959650164 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.95840106 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.960895083 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.958079584 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.958477263 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.960689737 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.957234982 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.959430555 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.959499461 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.957534362 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.959625793 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.958760166 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.960318724 seconds)
  done (took 33.231906225 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.962461801 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 1.959009712 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 1.960107197 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 1.960687299 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.959679801 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.959569654 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 1.961942603 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 1.960082803 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 1.960562014 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 1.945845906 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 1.960227144 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 1.947397372 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 1.96039502 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 1.960238371 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.96158992 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 1.960700201 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.959526023 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 1.960282165 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 1.964901747 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 1.960579339 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 1.964926535 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 1.960191219 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 1.948659431 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 1.949614822 seconds)
  done (took 48.898797407 seconds)
done (took 107.929839198 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.138467096 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.718991047 seconds)
  done (took 8.745284154 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.963824752 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.96172702 seconds)
  done (took 5.881988541 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.963221495 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.961858935 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.962477093 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.963804008 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.96401674 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.962646392 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.963011989 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.961708726 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.963185357 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.964222437 seconds)
  done (took 21.518648988 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.964407402 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.965016345 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.965013205 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.962235449 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.962413868 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.963681321 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.961550064 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.962479777 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.962784622 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.962086382 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.96249618 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.962633603 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.965883025 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.959238635 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.961762082 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.959382248 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.959609708 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.962546299 seconds)
  done (took 37.215565932 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.959171577 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.960022639 seconds)
  done (took 5.805258072 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.964925246 seconds)
    (2/7) benchmarking "second"...
    done (took 1.958445766 seconds)
    (3/7) benchmarking "month"...
    done (took 1.959693739 seconds)
    (4/7) benchmarking "year"...
    done (took 1.958215121 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.957945135 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.960261188 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.958615779 seconds)
  done (took 15.604985442 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.958991537 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.101434681 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.155738293 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.560243128 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.960006915 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.959872781 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.811620977 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.962366704 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.962110972 seconds)
  done (took 21.315938907 seconds)
done (took 117.976010688 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.81882097 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.958452896 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.227447119 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.030437825 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.024716011 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.295606987 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.95694927 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.548440195 seconds)
done (took 43.747046524 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.034162291 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.954560401 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.981765588 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.980761016 seconds)
  done (took 22.800241271 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.955604024 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.267132931 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.975092022 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.808056407 seconds)
  done (took 22.910062504 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.331388933 seconds)
    (2/2) benchmarking "read"...
    done (took 2.307414565 seconds)
  done (took 6.525576682 seconds)
done (took 61.155735518 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.956931756 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.953702097 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.955232041 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.958960094 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.952534645 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.954796274 seconds)
    (7/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.955612535 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.931879205 seconds)
    (9/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.940286159 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.955407415 seconds)
    (11/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.955280656 seconds)
    (12/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.954219296 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 1.95461582 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 1.953297434 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.954906025 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.955925341 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.95409654 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.955753903 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.954702207 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.9547074 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.945889158 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.952420492 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.954958239 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.95447969 seconds)
  done (took 48.752778364 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.953731897 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.953715638 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.953775807 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.953877741 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.956228393 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.955067716 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.953592287 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.953951354 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.954013848 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.958609427 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.953983107 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.953191309 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.95418381 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.954781737 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.954696615 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.95425037 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.952639106 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.953679271 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.953672489 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.957651642 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.952956189 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.953722583 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.953288453 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.952359571 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.953874308 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.955502476 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.952590717 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.952444271 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.953471855 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.953400722 seconds)
  done (took 60.511375563 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.954442769 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.954543196 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.952924315 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.9543127 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.955824161 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.953088686 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.952340483 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.953363446 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.952995912 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.956416412 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.953786156 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.954604823 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.953452412 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.95314676 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.953157879 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.951081431 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.952981484 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.953689403 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.953642356 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.955125071 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.953672609 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.952513663 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.953803723 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.953372542 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.955288857 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.95185973 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.951910747 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.953239797 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.953707711 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.95458497 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.952292972 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.955109991 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.95348701 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.953810955 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.955814638 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.953184243 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.948663087 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.950795582 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.951782372 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.951463139 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.954400791 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.951965329 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.950863096 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.951923246 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.951562046 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.953144015 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.953702619 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.952500883 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.951483405 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.951611809 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.955162868 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.952842013 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.95107972 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.951626505 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.950996281 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.952457557 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.942659413 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.950302958 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.951322505 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.952641646 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.955551431 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.953031651 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.95310897 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.95414631 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.951463295 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.954155608 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.942229394 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.951836289 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.953447197 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.951998937 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.954053749 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.952307489 seconds)
  done (took 142.48393964 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.952610094 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.952699034 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.953598292 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.951059032 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.952813591 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.952015925 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.952602791 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.951535534 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.952923087 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.951308168 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.951175403 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.951430702 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.951955889 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.952230682 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.952377006 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.950001287 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.951390356 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.95202341 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.956086561 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.952713671 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.951703776 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.95198248 seconds)
  done (took 44.827810976 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.95181399 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.951160063 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.95128649 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.949296343 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.95263563 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.956154658 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.950961547 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.949814448 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.952320357 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.951821493 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.952769172 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.951335435 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.952607247 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.950686258 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.953008047 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.954787359 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.95055281 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.954252346 seconds)
  done (took 37.015338588 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.95326103 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.951987168 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.952437587 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.953509713 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.952734947 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.95373825 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.952899242 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.955165095 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.954066573 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.952902778 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.953411466 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.945015195 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.946584357 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.953894227 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.953685755 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.954351684 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.952992656 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.958489602 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.952856213 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.954652357 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.954335915 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.953730832 seconds)
  done (took 44.845466252 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.954823279 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.952757648 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.955118011 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.954083449 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.954580944 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.95414621 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.955033171 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.955235514 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.955217196 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.957197834 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.954014184 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.955579975 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.956338034 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.955441731 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.955493736 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.956109949 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.95458353 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.955751858 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.956590532 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.95559806 seconds)
  done (took 40.989460276 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.953063212 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.954558803 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.953480168 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.954461536 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.957030072 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.951790158 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.943259796 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.952422725 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.953619517 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.953543562 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.953808472 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.953249531 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.954531587 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.953329834 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.957680432 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.955687911 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.954885161 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.95651934 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.954654092 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.954629308 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.957344824 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.9554555 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.954536033 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.956776472 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.958382365 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.954397599 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.954409107 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.954026365 seconds)
  done (took 56.605764118 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.959103045 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.957541442 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.958415647 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.956484293 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.956661248 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.957057687 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.956691677 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.955102479 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.955949628 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.956750085 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.955126775 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.95501493 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.958140594 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.956792916 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.957981016 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.956784185 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.959989577 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.959199264 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.957827151 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.957523203 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.958166225 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.959051974 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.95631269 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.955952004 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.958499911 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.959672412 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.961202401 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.958337015 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.956515111 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.958425159 seconds)
  done (took 60.611263497 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.982532317 seconds)
    (2/2) benchmarking "in"...
    done (took 1.976823334 seconds)
  done (took 5.843910659 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.95886092 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.958208989 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.962703254 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.956208104 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.959704548 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.959367195 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.958087663 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.96060979 seconds)
  done (took 17.559169575 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.957659267 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.964597385 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.958641887 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.96031713 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.956360025 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.965913464 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.959837221 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.958575391 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.959556904 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.959453987 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.959464468 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.961504007 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.962801569 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.962497429 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.963576474 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.958295652 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.95936633 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.961770357 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.958263904 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.960219436 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.961979828 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.959632996 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.960352046 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.959576124 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.958410209 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.960823812 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.969128107 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.959895361 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.960562826 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.960273583 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.966506427 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.961821455 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.957938565 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.961744685 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.957906937 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.961264128 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.966027034 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.959617826 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.957764995 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.961999823 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.962611066 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.962945311 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.96412546 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.965454398 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.960009087 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.963321471 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.962024072 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.960007567 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.95999689 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.96260739 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.969877852 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.961235614 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.9626411 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.963686033 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.962553212 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.961340144 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.960304508 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.962358598 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.968406717 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.967845673 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.964957037 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.980192402 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.965883475 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.961915513 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.960876307 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.969147245 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.982430338 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.961709209 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.962214298 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.963641846 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.968913185 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.962859986 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.963706069 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.96366139 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.973657493 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.967858753 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.961788319 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.962469121 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.965421583 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.961610606 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.963052157 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.961553107 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.960315958 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.961908222 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.970184742 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.984103773 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.962062951 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.963074405 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.964189257 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.963784385 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.965153025 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.965675949 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.963692352 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.962437002 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.963424038 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.96559835 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.963824048 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.963758911 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.964112545 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.971542933 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.965128754 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.966455015 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.963989382 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.96948289 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.96613865 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.96237146 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.964478707 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.962437394 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.959348356 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.964198896 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.963583325 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.965551772 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.964284497 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.96649549 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.964097818 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.966787635 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.971122075 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.959693774 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.964882778 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.969354206 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.96817142 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.966902415 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.971605613 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.982604193 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.965078357 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.967679317 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.969165363 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.973306803 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.966992416 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.966318735 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.964228577 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.965814744 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.964307704 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.966944296 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.964429058 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.963489387 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.966244155 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.962327321 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.96505693 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.963729131 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.967611517 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.967237407 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.966029493 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.965714521 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.96883787 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.964896088 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.96944586 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.9740591 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.96659272 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.965807275 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.966952999 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.969838378 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.965726499 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.968550417 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.967866631 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.969134656 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.966293583 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.967057747 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.968645908 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.96696376 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.970871355 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.967701543 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.973056589 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.966756108 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.965841895 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.966840978 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.966817209 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.967651482 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.969513943 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.968364185 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.970206125 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.967438645 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.97126077 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.968864366 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.968490905 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.968245028 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.970282368 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.96793425 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.969506912 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.977117867 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.971054167 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.973630656 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.969596069 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.976843162 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.970347653 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.970041621 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.969459949 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.967921161 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.968939279 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.972363965 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.972013209 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.971245612 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.987349012 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.976752801 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.970751044 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.969610549 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.972792224 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.972853335 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.973106904 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.971655865 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.970179502 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.971026673 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.969278588 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.970061985 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.969820743 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.971546308 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.97063269 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.971717819 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.971717757 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.97132612 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.971162228 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.966694236 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.966855669 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.970806066 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.971709733 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.969456158 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.969677967 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.971614101 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.977484588 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.970778619 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.974713695 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.969947547 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.971392118 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.97004007 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.969757001 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.971141029 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.974385388 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.971330584 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.971116372 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.977884181 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.971135798 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.97061708 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.970023674 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.973595731 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.971412665 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.970637767 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.974820468 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.981469342 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.974840379 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.973727095 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.977066631 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.972190188 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.973880165 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.973509036 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.973326902 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.968521805 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.973512436 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.975652498 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.974512795 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.978846911 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.974086471 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.972866301 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.972822416 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.974082823 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.973873544 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.973992225 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.971618834 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.97522298 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.976423598 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.976234058 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.972054334 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.975782272 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.971524926 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.97183026 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.964557304 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.972739242 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.985601522 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.979392113 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.973998878 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.974846316 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.970264721 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.975582527 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.97597681 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.972018152 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.979954984 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.972797675 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.971715244 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.978435608 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.972411853 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.973251747 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.979747012 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.974212531 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.975912934 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.973410187 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.973717649 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.974069931 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.9758166 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.976343204 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.975111638 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.975270264 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.97811912 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.978631797 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.971519472 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.974583876 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.982755696 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.976512773 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.973093743 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.98011315 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.973932817 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.972970616 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.974202324 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.97546735 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.975922485 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.974147799 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.974899065 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.975067336 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.975482606 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.976249022 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.981737407 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.978774577 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.980331509 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.976843411 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.983935536 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.973141402 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.978139781 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.973811069 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.977179843 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.980442763 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.975965663 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.974429363 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.983736337 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.976414522 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.974930704 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.976752395 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.978118431 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.975837288 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.972745434 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.974930565 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.979532824 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.977533793 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.977663767 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.975122532 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.976264755 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.974998468 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.977732096 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.978101886 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.978326526 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.977851109 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.978724071 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.975321162 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.976217031 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.976164099 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.97745932 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.977917884 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.977411321 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.984768424 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.977317003 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.978142517 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.978468507 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.980074755 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.984106283 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.975855185 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.977122619 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.977786078 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.981114236 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.982967042 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.978149846 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.976997067 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.978291387 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.97955339 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.977624524 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.986279165 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.985485706 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.98159627 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.979534168 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.977373715 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.977015478 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.98666736 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.999555564 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.976854551 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.979908031 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.982367629 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.983540237 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.980461944 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.981479354 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.978437029 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.982800152 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.979548385 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.978675458 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.980733582 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.990192341 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.979771639 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.981227823 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.980555965 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.982584353 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.980409236 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.979463746 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.979518755 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.983973923 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.978745399 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.990461037 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.98169978 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.979070868 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.978914323 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.979611476 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.978580997 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.982101723 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.98141961 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.979236772 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.977487682 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.979151109 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.982399232 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.981934277 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.979950593 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.980761406 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.986072717 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.978089953 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.979912747 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.980527542 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.97772696 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.980653724 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.978325722 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.97873709 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.979911364 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.982086266 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.981238908 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.982962424 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.987293467 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.981954798 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.981788221 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.980188559 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.983162069 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.978636831 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.979269891 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.980673864 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.988595878 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.984587926 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.989472241 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.988910117 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.980809601 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.980674968 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.98697638 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.986349066 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.981168168 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.983482534 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.977851648 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.981560459 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.982305981 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.982954941 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.980072223 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.982620289 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.984962169 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.983305123 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.980992074 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.980314186 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.983827668 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.984419319 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.984792082 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.971785311 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.985137529 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.974712916 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.981215904 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.982790445 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.985014387 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.985425348 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.982506864 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.984696365 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.984168434 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.970023544 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.987545969 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.983719615 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.985623674 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.983341336 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.984471676 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.984822949 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.980266088 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.980586944 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.987053377 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.986548185 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.988527235 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.985536413 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.984199078 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.983969594 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.988708796 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.98318672 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.982520007 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.982937764 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.987481902 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.989921415 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.985508598 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.984298729 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.981283533 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.985291012 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.988121943 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.987103944 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.988935557 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.984336289 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.983928726 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.98698057 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.988633006 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.993475779 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.988309328 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.985988055 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.993298435 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.988517814 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.988255805 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.986966998 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.986793431 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.985406087 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.986306311 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.987571214 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.986917563 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.985784784 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.985092757 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.429139255 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.986673603 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.987441889 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.985830987 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.989049776 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.98876234 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.991857569 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.992805117 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.98618434 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.985509858 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.98364925 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.986856813 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.99344288 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.986212796 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.983356048 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.98460949 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.992406167 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.985121716 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.991384067 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.991807909 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.989594464 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.989628391 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.990394548 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.00149103 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.989557673 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.995594038 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.019458151 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.98658582 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.984531019 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.986956445 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.987900064 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.994733208 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.991295621 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.985117711 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.995592991 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.9861864 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.997419805 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.995096232 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.991473543 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.991987489 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.990792576 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.996920474 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.996774454 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.989050878 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.997031216 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.989282614 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.993337959 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.99019092 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.991281043 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.991913563 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.993137246 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.994237522 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.991553091 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.992474808 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.991241792 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.999282124 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.993154302 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.989862473 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.001570641 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.000750557 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.990635915 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.995409838 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.989302938 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.996123087 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.99340788 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.992614099 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.998075536 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.00107994 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.994342478 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.999000952 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.990842289 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.994171941 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.992158586 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.994682599 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.991253426 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.00440392 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.005249212 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.992773074 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.992685045 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.997446738 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.992569197 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.001990133 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.998929328 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.989021768 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.993486466 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.991936698 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.999241191 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.994315823 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.996413591 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.997620342 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.001954878 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.998854563 seconds)
  done (took 1180.41593124 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.995109359 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.995892352 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.993640088 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.001550567 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.995962275 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.995315393 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.995313746 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.995934326 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.995794102 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.995375526 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.99618112 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.995777201 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.995263709 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.000766794 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.995984063 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.995754608 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.996079494 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.995297412 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.998017939 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.993770361 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.995947867 seconds)
  done (took 43.837236714 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.983287004 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.999380427 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.985301344 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.993418841 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.994884976 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.995386944 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.996254361 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.99500255 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.993634268 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.99565918 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.994283108 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.996161064 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.996072208 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.993946067 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.994588178 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.993659455 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.997428564 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.994807834 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.9965288 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.9952925 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.994711106 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.997106565 seconds)
  done (took 45.795884005 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.993259602 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.992727256 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.995753719 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.999969668 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.995432157 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.994874857 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.998725994 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.99883146 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.998402172 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.997478009 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.001615807 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.005061731 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.997506175 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.003941435 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.997184915 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.99532268 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.142910999 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.995154293 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.999947341 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.99622191 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.996819272 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.002795644 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.999359704 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.002235477 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.994792726 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.997734599 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.998851994 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.998689914 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.002714544 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.997741083 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.999286312 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.998246738 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.99615738 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.004858763 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.994673777 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.995951838 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.996737757 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.995971202 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.003218673 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.00036199 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.00402897 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.021384725 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.996754039 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.999532593 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.003087698 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.000567321 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.999584313 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.998113117 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.007380129 seconds)
  done (took 100.03017966 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.999696856 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.999880561 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.998396754 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.999146283 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.998076581 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.000831411 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.998702174 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.00071829 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.005755736 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.002312988 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.005079027 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.001786548 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.000740542 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.003230266 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.001562304 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.002548142 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.000466813 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.003916534 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.007138268 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.002253372 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.001930562 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.002732485 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.00298527 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.005762229 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.000448521 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.000979384 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.003368053 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.004169926 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.00179069 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.001083451 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.999272638 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.001416463 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.004205774 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.005612258 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.005562469 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.003351362 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.004468954 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.002470044 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.00648214 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.002581931 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.003396266 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.006295157 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.004471511 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.006360258 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.99959046 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.003885066 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.001757313 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.004775498 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.006465781 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.003963149 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.003899944 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.004006278 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.003161847 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.005706211 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.003132976 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.004115777 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.004714871 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.00362188 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.004365784 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.005508651 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.003303044 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.003285638 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.005131611 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.006534554 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.001702313 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.004296748 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.004280186 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.003432317 seconds)
  done (took 138.134333512 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.00168667 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.003544537 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.003419487 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.002005723 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.003551688 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.000178251 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.002127182 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.001420312 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.003071654 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.005112445 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.993521774 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.00559349 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.004817786 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.003334546 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.004062359 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.002490234 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.002901061 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.003795573 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.005489987 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.005047388 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.003747198 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.002900666 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.003018734 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.001118087 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.004059733 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.000839364 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.000975779 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.9998503 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.002352914 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.003539293 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.003141758 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.00202687 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.003215567 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.002514065 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.007009754 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.004641838 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.002836677 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.002585629 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.005577297 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.004320768 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.003247029 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.002512255 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.002598591 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.002866938 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.00417807 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.003980732 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.004046825 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.003130226 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.005310103 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.002628266 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.004087037 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.004903995 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.002865298 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.003979115 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.003129108 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.005942847 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.00310831 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.00285837 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.003614283 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.005137912 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.003112296 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.00711 seconds)
  done (took 126.137467019 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.004653943 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.009139756 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.008665772 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.002398785 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.009071268 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.995915051 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.011853756 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.995800784 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.007665872 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.997126697 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.009464319 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.010352459 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.012713876 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.008780263 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.996679401 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.010138195 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.010049058 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.008583383 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.010790156 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.998585141 seconds)
  done (took 42.039312557 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.008629811 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.009792657 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.010110068 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.012045748 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.01381281 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.009874655 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.009342125 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.009715308 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.00900199 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.010685665 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.015554512 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.009795254 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.009780421 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.010877681 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.011367192 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.013814201 seconds)
  done (took 34.109811241 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.011006726 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.012620512 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.009492604 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.013160232 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.012640319 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.012508011 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.011730959 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.011232666 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.018056282 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.011904517 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.013419799 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.012429001 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.013500412 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.011441 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.015378941 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.014586932 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.014349218 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.013366743 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.017047894 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.012325463 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.012924611 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.013939328 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.013923383 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.016724315 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.012488068 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.0130496 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.012130045 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.010702406 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.01651474 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.012235654 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.012943351 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.013369464 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.011255063 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.015516632 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.009845854 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.010671555 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.009916787 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.011366972 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.014059756 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.012121699 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.011417083 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.012257207 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.009675335 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.016839707 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.003262016 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.00944237 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.012151631 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.012146894 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.017962729 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.013800422 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.000857007 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.009623287 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.012841553 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.017150511 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.012871356 seconds)
  done (took 112.627173763 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.01353267 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.013409203 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.015898043 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.01146422 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.013558562 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.013574283 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.013793033 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.016985447 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.013797226 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.012921672 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.011612469 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.013338399 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.015483193 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.012136283 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.013158407 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.011805674 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.013832081 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.0143599 seconds)
  done (took 38.184050347 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.013006007 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.012973568 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.013708108 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.016699055 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.013728114 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.012417525 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.012350596 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.013697694 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.016388265 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.014711847 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.01359575 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.014887356 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.014850119 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.016831671 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.014322899 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.014323021 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.012801364 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.014282079 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.015642759 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.014913157 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.014765147 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.01580817 seconds)
  done (took 46.251933247 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.009361768 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.011885252 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.025530536 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.035185822 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.031516381 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.046106823 seconds)
  done (took 14.100759555 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.0156697 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.016993864 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.016577936 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.017950233 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.016662351 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.015687092 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.017816266 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.015078076 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.018381192 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.018042127 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.017294583 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.017050557 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.016167703 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.016795044 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.017439751 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.015636311 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.01620479 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.017683696 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.016521465 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.016089647 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.016124473 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.015954428 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.016959079 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.016953014 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.017150052 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.017776808 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.018088299 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.019684512 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.017105434 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.018194273 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.018151502 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.01751711 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.021039874 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.017327951 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.021641804 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.019681595 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.01889162 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.024155579 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.02199136 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.022259138 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.021079734 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.019602936 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.024572656 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.01022364 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.018138298 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.022131486 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.020519952 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.018598419 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.017899784 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.018257271 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.021185033 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.018533917 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.019323353 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.018648735 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.018530142 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.019877841 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.019203565 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.02603477 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.022613494 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.020102926 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.022354448 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.024031142 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.027507547 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.023047276 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.022498243 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.022292314 seconds)
  done (took 135.194326473 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.025371357 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.02133767 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.022689719 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.022449034 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.02454685 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.028532908 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.019198502 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.021050388 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.022552662 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023714085 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.02627978 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.020160543 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.020533046 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.022505852 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.021500337 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.025643993 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.02149693 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.02091455 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.022123256 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.021556051 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.026663052 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023346486 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.023084801 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.022511956 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.020930572 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.022012848 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.022576905 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.021034787 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.021650085 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.021546031 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.022321857 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.02357892 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.022184773 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.022287156 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.024215401 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023420321 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.023095145 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.021891284 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.02320675 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.02345337 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.022762558 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.024015624 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.024203379 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.025165527 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.023851204 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.020826667 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.021864872 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023152954 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.02529327 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.022994628 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.024287837 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.024207305 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.023103999 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.024639828 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.022605173 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.024456653 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.022825657 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.023462172 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.023589794 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.025198619 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.023518202 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.023942091 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.024553568 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.026765206 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.025051767 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.022656983 seconds)
  done (took 135.477671989 seconds)
done (took 2754.273240542 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.092036658 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.05484202 seconds)
  done (took 16.096471891 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.188993561 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.145562953 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.027699351 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.047592644 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.028941194 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.056691767 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.048646114 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.029506869 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 2.029033003 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 2.026094775 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.029098072 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.215995702 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.052616009 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.028892564 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.028249476 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.117088965 seconds)
  done (took 55.071935219 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.031622567 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.032245228 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.041195403 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.031622435 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.031843572 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.043758397 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 2.059342256 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 2.036295239 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 2.06608919 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.044502819 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.100529838 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.044100833 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 2.032307808 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.084069163 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 2.043246645 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.048157386 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 2.12376174 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.10883041 seconds)
  done (took 38.958262977 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.110388085 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.035634957 seconds)
  done (took 11.108418453 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.027303143 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.048764577 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.059189582 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.054000108 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.033921218 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.025746611 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.040234371 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.032794401 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.064619136 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.046146392 seconds)
  done (took 72.424597079 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.037833467 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.037895367 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.034045324 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.032116229 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.028868252 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.033162438 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.030769181 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.032117179 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.720691667 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 2.069570934 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 2.040072271 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.040978991 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.031934749 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.033020478 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.031913309 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.058430974 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.166952581 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.03335018 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.031220548 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.037905474 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.033103558 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.088075856 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.046367745 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.034592557 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.064584173 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.717251703 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.042421387 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.039184615 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.194988284 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.030372512 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.032095581 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.192527614 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.036136687 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.484965881 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.308714261 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.038811443 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.043173396 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.037635235 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.034311932 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.205490162 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.03332926 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.039182352 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.952758372 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.284364352 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.130550538 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.075918034 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.391278587 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.035472722 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.034161545 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.064144452 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.033505016 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.034740682 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 2.04936033 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.544221134 seconds)
  done (took 141.930619261 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.030568877 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.265561345 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.183517627 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.032771714 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.284157833 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.238432541 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.031592202 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.07697944 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.031389153 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.23257912 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.284352569 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.130625929 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.034045087 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.031974565 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.033331296 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.03053468 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.177573759 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.097204466 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.030540342 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.031579572 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.055434208 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.229202282 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.152079144 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.033637636 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.053905717 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.229072813 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.154890008 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.132354349 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.837802862 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.031977485 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.093997475 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.034653071 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.032076287 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.031332359 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.18533456 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.123889033 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.115835898 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.034125437 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.033146135 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.032466669 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.708104146 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.230377241 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.126825149 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.153676037 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.280080524 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.245995606 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.644215748 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.032619241 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.658696934 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.197408068 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.236408651 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.228822627 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.150673788 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.033452855 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.568454438 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.021785448 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.019658772 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.254531253 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.248889808 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.105418672 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.037021125 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.034649312 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.034155845 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.269641721 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.036057814 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.112881079 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.036252366 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.036961879 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.12361729 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.133960833 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.256146391 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.253807277 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.064488685 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.354411607 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.522603666 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.236107874 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.100382135 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.256818263 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.037042095 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.031968608 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.118321873 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.867754763 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.286457835 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.273960279 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.23265928 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.064863886 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.680002862 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.034398668 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.220712879 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.225677956 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.269620308 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.272766258 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.273104213 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.417371062 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.036476287 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.034775541 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.348399744 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.151323826 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.038456823 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.391511905 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.262575837 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.555808755 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.060904081 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.360557832 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.163591977 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.039528741 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.683792943 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.03803176 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.240769435 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.074675168 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.039352203 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.037548523 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.225524588 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.94151015 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.035693046 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.982731551 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.095516 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.041147064 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.240965906 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.037599385 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.281714261 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.040560536 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.268252169 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.668057572 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.068252259 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.260131049 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.27718577 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.674852515 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.277113353 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.278450166 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.149353645 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.309130823 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.039904784 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.036949743 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.298825641 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.038900981 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.038591034 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.204160714 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.038819309 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.178553823 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.039037246 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.303211615 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.056375956 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.266860422 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.040356874 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.276114028 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.069070925 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.086565704 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.041348002 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.168010926 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.037854054 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.876696071 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.194213707 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.040156319 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.038691361 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.814252901 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.039880145 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.185154087 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.260460947 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.058863561 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.108506779 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.6068118 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.029418411 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.121528066 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.062143348 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.301924933 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.039937164 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.288644366 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.003013415 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.519558611 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.039325126 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.273492801 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.276214466 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.044016417 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.041981586 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.881942842 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.040372695 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.038531585 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.195156788 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.007794562 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.942551242 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.236464277 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.044874646 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.165688832 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.044198386 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.1121296 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.384606191 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.041518516 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.039471152 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.041388255 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.041038177 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.041531821 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.302559267 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.066384183 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.482546584 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.177167681 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.294127556 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.346274456 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.237133732 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.080502182 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.0455405 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.263387595 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.042222149 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.103843554 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.04324716 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.060495467 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.265093302 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.047750165 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.247254747 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.273363245 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.924408758 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.087793408 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.043700885 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.043490901 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.042387101 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.186614819 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.128145495 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.043847509 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.043870424 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.156642735 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.162258476 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.223067136 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.86310987 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.213222293 seconds)
  done (took 939.317988157 seconds)
done (took 1276.860651785 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.044860501 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.044529498 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.047172677 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.044607427 seconds)
  done (took 30.152440152 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 2.043953654 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.044213768 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.045687403 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.044562112 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 2.044826957 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 2.045151216 seconds)
  done (took 14.240146872 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.044910381 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.047829711 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.042933995 seconds)
  done (took 23.107107768 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 2.119017819 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.450045621 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 2.184040254 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.47589119 seconds)
  done (took 11.199832508 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.045521775 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 2.04572893 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.044194287 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 2.047848301 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.045053157 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.046854876 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 2.047092852 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.04522522 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 2.048416289 seconds)
  done (took 20.388444304 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.149753195 seconds)
done (took 105.211519308 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.427111232 seconds)
    (2/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.558427602 seconds)
    (3/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.046744483 seconds)
    (4/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 3.892282261 seconds)
    (5/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.349822085 seconds)
    (6/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.131835231 seconds)
    (7/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.063654269 seconds)
    (8/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.332253948 seconds)
    (9/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.065371434 seconds)
    (10/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.059106162 seconds)
    (11/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.41499476 seconds)
    (12/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.352921841 seconds)
    (13/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.354962836 seconds)
    (14/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.069019102 seconds)
    (15/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.046739587 seconds)
    (16/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.460490972 seconds)
    (17/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.402363826 seconds)
    (18/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.200884599 seconds)
    (19/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.453346347 seconds)
    (20/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.680263769 seconds)
    (21/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.36383741 seconds)
    (22/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.441289471 seconds)
    (23/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.063562065 seconds)
    (24/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.65643095 seconds)
    (25/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.774729713 seconds)
    (26/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.053749337 seconds)
    (27/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.128856476 seconds)
    (28/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.359401028 seconds)
    (29/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.052819596 seconds)
    (30/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.054234548 seconds)
    (31/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.072638015 seconds)
    (32/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.180716375 seconds)
    (33/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.249857602 seconds)
    (34/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.132955373 seconds)
    (35/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.30499011 seconds)
    (36/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.179144737 seconds)
    (37/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.181628371 seconds)
    (38/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.538803468 seconds)
    (39/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.154321035 seconds)
    (40/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.210300155 seconds)
    (41/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.14127148 seconds)
    (42/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.234959787 seconds)
    (43/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.802105821 seconds)
    (44/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.140381582 seconds)
    (45/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.468023434 seconds)
    (46/341) benchmarking ("sort", Bool, false)...
    done (took 2.263574034 seconds)
    (47/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.520512574 seconds)
    (48/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.13246016 seconds)
    (49/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.051666727 seconds)
    (50/341) benchmarking ("sort", Int64, false)...
    done (took 5.674377649 seconds)
    (51/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.574331847 seconds)
    (52/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.412884683 seconds)
    (53/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.148417842 seconds)
    (54/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.276375507 seconds)
    (55/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.337518591 seconds)
    (56/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.161425569 seconds)
    (57/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.068782637 seconds)
    (58/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.342464293 seconds)
    (59/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.057668522 seconds)
    (60/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.060475192 seconds)
    (61/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.136405674 seconds)
    (62/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.431632584 seconds)
    (63/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.189078267 seconds)
    (64/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.069036222 seconds)
    (65/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.051493607 seconds)
    (66/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.10696694 seconds)
    (67/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.116736744 seconds)
    (68/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.068495162 seconds)
    (69/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.477057039 seconds)
    (70/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.114981194 seconds)
    (71/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.048030744 seconds)
    (72/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.19922637 seconds)
    (73/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.35775454 seconds)
    (74/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.803562844 seconds)
    (75/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.381841321 seconds)
    (76/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.132440188 seconds)
    (77/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.05384049 seconds)
    (78/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.241306349 seconds)
    (79/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.316964001 seconds)
    (80/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.255852367 seconds)
    (81/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.311356334 seconds)
    (82/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.051993328 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.147982737 seconds)
    (84/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.186677322 seconds)
    (85/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.68348438 seconds)
    (86/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.131457668 seconds)
    (87/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.330362989 seconds)
    (88/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.348909893 seconds)
    (89/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.052449642 seconds)
    (90/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.141088042 seconds)
    (91/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.920944927 seconds)
    (92/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.163094793 seconds)
    (93/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.15252372 seconds)
    (94/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.064158785 seconds)
    (95/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.069574156 seconds)
    (96/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.320272388 seconds)
    (97/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.528178625 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.182432017 seconds)
    (99/341) benchmarking ("sort", Int8, false)...
    done (took 5.003908742 seconds)
    (100/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.147391566 seconds)
    (101/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.127275341 seconds)
    (102/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.155619334 seconds)
    (103/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.066794451 seconds)
    (104/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.402729287 seconds)
    (105/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.053875739 seconds)
    (106/341) benchmarking ("sort", Float64, false)...
    done (took 7.32799555 seconds)
    (107/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.271183531 seconds)
    (108/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.377710903 seconds)
    (109/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.119611205 seconds)
    (110/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.065037729 seconds)
    (111/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.280333482 seconds)
    (112/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.213764833 seconds)
    (113/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.351354598 seconds)
    (114/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.415914447 seconds)
    (115/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.064747179 seconds)
    (116/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.918210615 seconds)
    (117/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.927705079 seconds)
    (118/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.272409943 seconds)
    (119/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.153815984 seconds)
    (120/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.386550573 seconds)
    (121/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.365062308 seconds)
    (122/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.187551004 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.814710314 seconds)
    (124/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.06145506 seconds)
    (125/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.060148221 seconds)
    (126/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.174906592 seconds)
    (127/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.595101662 seconds)
    (128/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.085157951 seconds)
    (129/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.355439994 seconds)
    (130/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.175513421 seconds)
    (131/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.307193825 seconds)
    (132/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.994666023 seconds)
    (133/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.553718554 seconds)
    (134/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.973532439 seconds)
    (135/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.288516582 seconds)
    (136/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.136833879 seconds)
    (137/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.076506847 seconds)
    (138/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.350836643 seconds)
    (139/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.153964906 seconds)
    (140/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.187220322 seconds)
    (141/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.221638735 seconds)
    (142/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.828696933 seconds)
    (143/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.437484511 seconds)
    (144/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.068998615 seconds)
    (145/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.255283085 seconds)
    (146/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.191146694 seconds)
    (147/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.446815058 seconds)
    (148/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.173674497 seconds)
    (149/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.444660605 seconds)
    (150/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.468370796 seconds)
    (151/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.939343584 seconds)
    (152/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.312748428 seconds)
    (153/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.370360362 seconds)
    (154/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.334843814 seconds)
    (155/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.055273528 seconds)
    (156/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.077235887 seconds)
    (157/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.073841824 seconds)
    (158/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.179199341 seconds)
    (159/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.16011896 seconds)
    (160/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.438876368 seconds)
    (161/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.069709869 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.443194186 seconds)
    (163/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.217137766 seconds)
    (164/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.057280458 seconds)
    (165/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.469495413 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.920209212 seconds)
    (167/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.023458872 seconds)
    (168/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.893731704 seconds)
    (169/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.3215801 seconds)
    (170/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.060622709 seconds)
    (171/341) benchmarking ("perf_sum", Float32, false)...
    done (took 3.691610334 seconds)
    (172/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.153604519 seconds)
    (173/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.295686765 seconds)
    (174/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.057147577 seconds)
    (175/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.04784576 seconds)
    (176/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.20061979 seconds)
    (177/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.075236418 seconds)
    (178/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.175002941 seconds)
    (179/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.819526732 seconds)
    (180/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.926682561 seconds)
    (181/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.404022033 seconds)
    (182/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.14991894 seconds)
    (183/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.112362515 seconds)
    (184/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.185418734 seconds)
    (185/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.093465209 seconds)
    (186/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.053753897 seconds)
    (187/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.079302786 seconds)
    (188/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.06094533 seconds)
    (189/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.238305197 seconds)
    (190/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.064091123 seconds)
    (191/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.669458352 seconds)
    (192/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.192377929 seconds)
    (193/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.298599843 seconds)
    (194/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.259206828 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.718084605 seconds)
    (196/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.400270269 seconds)
    (197/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.964407112 seconds)
    (198/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.084970854 seconds)
    (199/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.747408532 seconds)
    (200/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.535216261 seconds)
    (201/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.059708512 seconds)
    (202/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.192764 seconds)
    (203/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.459418523 seconds)
    (204/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.174026962 seconds)
    (205/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.321968464 seconds)
    (206/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.454660853 seconds)
    (207/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.319383392 seconds)
    (208/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.57913445 seconds)
    (209/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.237688489 seconds)
    (210/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.059134245 seconds)
    (211/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.984747067 seconds)
    (212/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.544613933 seconds)
    (213/341) benchmarking ("sort", Float32, false)...
    done (took 5.741374711 seconds)
    (214/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.832164937 seconds)
    (215/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.058366848 seconds)
    (216/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.752581818 seconds)
    (217/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.085324357 seconds)
    (218/341) benchmarking ("sort", BigInt, false)...
    done (took 7.057559032 seconds)
    (219/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.149828336 seconds)
    (220/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.309663046 seconds)
    (221/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.368412192 seconds)
    (222/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.806057705 seconds)
    (223/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.057914315 seconds)
    (224/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.112352781 seconds)
    (225/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.138320658 seconds)
    (226/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.284454204 seconds)
    (227/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.059175166 seconds)
    (228/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.353165127 seconds)
    (229/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.240646164 seconds)
    (230/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.377509441 seconds)
    (231/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.077729942 seconds)
    (232/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.751285028 seconds)
    (233/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.365616887 seconds)
    (234/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.161504616 seconds)
    (235/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.062434231 seconds)
    (236/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.063925697 seconds)
    (237/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.359611952 seconds)
    (238/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.529635599 seconds)
    (239/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.142501187 seconds)
    (240/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.06356827 seconds)
    (241/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.18773703 seconds)
    (242/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.306011789 seconds)
    (243/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.164563943 seconds)
    (244/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.07873562 seconds)
    (245/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.202518072 seconds)
    (246/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.078280345 seconds)
    (247/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.376627759 seconds)
    (248/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.067116497 seconds)
    (249/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.335476075 seconds)
    (250/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.172079331 seconds)
    (251/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.150660812 seconds)
    (252/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.414877161 seconds)
    (253/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.077914786 seconds)
    (254/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.753708472 seconds)
    (255/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.651953209 seconds)
    (256/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.262209803 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.195595902 seconds)
    (258/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.166261941 seconds)
    (259/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.290526889 seconds)
    (260/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.146953172 seconds)
    (261/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.064390738 seconds)
    (262/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.807821725 seconds)
    (263/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.078457771 seconds)
    (264/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.213141359 seconds)
    (265/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.535638329 seconds)
    (266/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.220103975 seconds)
    (267/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.084246116 seconds)
    (268/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.139128643 seconds)
    (269/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.251980862 seconds)
    (270/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.244587487 seconds)
    (271/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.983566351 seconds)
    (272/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.232598241 seconds)
    (273/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.141313568 seconds)
    (274/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.106344057 seconds)
    (275/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.084855428 seconds)
    (276/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.073197836 seconds)
    (277/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.447171639 seconds)
    (278/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.191929333 seconds)
    (279/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.207608117 seconds)
    (280/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.656405427 seconds)
    (281/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.291666612 seconds)
    (282/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.194446577 seconds)
    (283/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.329011073 seconds)
    (284/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.191583857 seconds)
    (285/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.316833506 seconds)
    (286/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.063837383 seconds)
    (287/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.142852193 seconds)
    (288/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.360738215 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.93713425 seconds)
    (290/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.991758342 seconds)
    (291/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.379215414 seconds)
    (292/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.130008139 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.059828598 seconds)
    (294/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.086398356 seconds)
    (295/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.464530883 seconds)
    (296/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.166371119 seconds)
    (297/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.398949428 seconds)
    (298/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.091744055 seconds)
    (299/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.078792373 seconds)
    (300/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.06532278 seconds)
    (301/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 8.81976439 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.126041849 seconds)
    (303/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.368922382 seconds)
    (304/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.414326211 seconds)
    (305/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.083945109 seconds)
    (306/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.735870422 seconds)
    (307/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.189354246 seconds)
    (308/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.131322252 seconds)
    (309/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.042776219 seconds)
    (310/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.209844412 seconds)
    (311/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.881491052 seconds)
    (312/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.442175482 seconds)
    (313/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.065453503 seconds)
    (314/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.351833044 seconds)
    (315/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.818990813 seconds)
    (316/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.359328567 seconds)
    (317/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.066816578 seconds)
    (318/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 8.721007204 seconds)
    (319/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 8.26613711 seconds)
    (320/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 4.473527086 seconds)
    (321/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.069871139 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.017638109 seconds)
    (323/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.251201716 seconds)
    (324/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.066976999 seconds)
    (325/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.073998653 seconds)
    (326/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.162724262 seconds)
    (327/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.069176902 seconds)
    (328/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.214164286 seconds)
    (329/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.08950894 seconds)
    (330/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.166761179 seconds)
    (331/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.981883858 seconds)
    (332/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.080396233 seconds)
    (333/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.387457159 seconds)
    (334/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.332184165 seconds)
    (335/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.082010673 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.984212187 seconds)
    (337/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.28866169 seconds)
    (338/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.434789998 seconds)
    (339/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.146897325 seconds)
    (340/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.95162246 seconds)
    (341/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.477397829 seconds)
  done (took 1152.76726268 seconds)
done (took 1154.828027974 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.091480722 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.086056825 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.067369693 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.088328793 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.181296818 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.118154682 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.082689234 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.075548084 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.120438638 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.119518817 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.0658721 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.118652926 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.070685229 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.069514438 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.069379406 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.085933419 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.461893068 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.106459619 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.086684827 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.082375104 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.090892133 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.071416122 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.121198491 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.119792422 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.075771338 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.075408546 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.075090959 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.09128846 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.183875279 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.073198918 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.074606763 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.085376149 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.461431032 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.106590958 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.068964981 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.089655254 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.085021225 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.084126074 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.075949309 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.1044224 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.608547267 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.077739915 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.0716222 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.069763535 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.07356881 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.077665341 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.074768087 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.079676783 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.087663364 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.087478229 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.597285059 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.095630337 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.073952231 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.071251458 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.086357526 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.073676619 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.075788971 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.087822858 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.092433636 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.088511407 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.445716321 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.117696984 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.078704032 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.091730584 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.081067294 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.630348862 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.078188116 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.079899492 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.607607084 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.085065541 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.631635279 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.089677194 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.074703778 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.090256026 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.10651569 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.466500106 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.105170718 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.072976789 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.081141732 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.071164096 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.084549792 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.088631018 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.079046949 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.074017989 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.090802084 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.122722455 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.087569303 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.073550248 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.08795202 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.09145396 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.085131083 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.084796488 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.078641988 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.073272952 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.086761299 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.080248192 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.077230132 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.076474993 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.079586794 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.087100626 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.608097373 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.098492187 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.071741519 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.070030821 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.07199342 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.074988416 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.599344693 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.083315291 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.097717337 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.125273841 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.073980412 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.44454716 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.115029826 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.094986691 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.086271813 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.078693832 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.073697087 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.447512798 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.635487715 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.096095209 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.074686256 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.073587881 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.093709419 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.077265703 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.072621055 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.466216655 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.112588257 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.091992943 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.198069041 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.089132544 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.109493084 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.074060877 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.079119842 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.12624833 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.090837802 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.107945515 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.082142321 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.091804227 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.095489219 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.075197987 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.086351239 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.08959361 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.075521087 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.082810634 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.074228376 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.126462018 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.091703689 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.090727101 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.097225839 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.200470008 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.075657518 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.446310764 seconds)
done (took 326.754556209 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.155071512 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.071226584 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.15985564 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.063099961 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.159299264 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.143898913 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.075643664 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.076401505 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.077398372 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.576139188 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.074039877 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.079385991 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.071696615 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.077612198 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.141555283 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.076243117 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.076182936 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.346940691 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.07363125 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.151098415 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.073657326 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.076932292 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.076389016 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.574395037 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.071611797 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.069211969 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.152984365 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.074647455 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.397375788 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.073960498 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.073209794 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.346558533 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.15006697 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.088920254 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.084199644 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.084713376 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.161568859 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.085591638 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.137465854 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.137969371 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.161029975 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.108410714 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.075033743 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.074249451 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.079979589 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.07660194 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.077088039 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.111774278 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.072299694 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.083500927 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.354858694 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.083244006 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.082196134 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.077036657 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.076933847 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.09169156 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.078824051 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.075430373 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.152661257 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.077948302 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.143582031 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.624177132 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.55797301 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.079751266 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.074631421 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.081159592 seconds)
  done (took 198.348264425 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.180339463 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.146716126 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.180064807 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.081102485 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.125934921 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.181060239 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.078489305 seconds)
  done (took 16.973356825 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.082513746 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.079254412 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.136511698 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.137690859 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.078224872 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.256029878 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.090452126 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.085709157 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.104297277 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.077049196 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.737296178 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.136693017 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.087338879 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.078050922 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.08903113 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.139725685 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.079689294 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.078877764 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.188238232 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.228174272 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.08574255 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.089350871 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.104450154 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.093367471 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.080162844 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.065252488 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.048701405 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.084870518 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.079699526 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.078304485 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.080358989 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.143356503 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.078923488 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.0749641 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.081170226 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.079795122 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.081141188 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.078943073 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.078997179 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.076912583 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.081521143 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.082100531 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.081914379 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.078311516 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.080638297 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.10131591 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.08210603 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.08098643 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.07997426 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.081562588 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.104378797 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.080412319 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.081650955 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.086894954 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.121258508 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.088133198 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.079284659 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.080925844 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.081848645 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.082098717 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.082737863 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.226759945 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.137566778 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.081693778 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.138051255 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.235138908 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.084023925 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.081514747 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.081218626 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.14010563 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.081394854 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.141005773 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.082194866 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.195533347 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.082670853 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.260445969 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.103567742 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.083035089 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.083201463 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.078310528 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.086958922 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.082281432 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.083200466 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.0857985 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.088823775 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.081490423 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.083649245 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.08232808 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.085693894 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.081770067 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.130278846 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.083369693 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.080851922 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.196365319 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.083876529 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.194079306 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.106947514 seconds)
  done (took 226.553173901 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.087550078 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.086850304 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.081715017 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.095515113 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.079914827 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.079490509 seconds)
  done (took 14.515485911 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.082618254 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.086198464 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.084686642 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.082966882 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.079055135 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.08068391 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.083437816 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.082710611 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.084826076 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.083664042 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.080221599 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.082183173 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.080714844 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.080580196 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.084315565 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.083164209 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.084562367 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.085271217 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.085266719 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.080065876 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.212725426 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.082461623 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.084945544 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.085894172 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.086371281 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.085311124 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.092538743 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.086168288 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.084137411 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.090086719 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.085059589 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.082288866 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.085221419 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.086355841 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.088788983 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.084807654 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.08808302 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.081080449 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.084514933 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.082424604 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.082638732 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.082792137 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.085370124 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.083872268 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.084311524 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.088743991 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.086463637 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.094344322 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.085892365 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.08567787 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.083555864 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.086292343 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.084889414 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.0840956 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.087975366 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.089337502 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.088542696 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.088044083 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.083916763 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.087044033 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.090404358 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.083498654 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.087554963 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.092316694 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.092868893 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.08432431 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.087310796 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.089271138 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.073502103 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.087816568 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.086220993 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.088410049 seconds)
  done (took 153.269572557 seconds)
done (took 611.645515147 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.129626755 seconds)
  done (took 9.1410207 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.284967981 seconds)
  done (took 9.379033795 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 11.737893368 seconds)
  done (took 13.750166964 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.115561315 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.112684693 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.100083867 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.092445336 seconds)
  done (took 30.440597524 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.229695983 seconds)
  done (took 9.241155257 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.095129496 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.084436931 seconds)
  done (took 16.249573211 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.196056455 seconds)
  done (took 9.206898669 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.544281919 seconds)
  done (took 9.574377616 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.111097774 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.096904663 seconds)
  done (took 16.240643257 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.087155415 seconds)
  done (took 9.096895185 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.820941609 seconds)
  done (took 9.911709432 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.093884385 seconds)
  done (took 9.122090174 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.147537533 seconds)
  done (took 9.156608093 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.518811507 seconds)
  done (took 10.529885706 seconds)
done (took 173.049777849 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.090474332 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.085258806 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.087817202 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.084658373 seconds)
  done (took 30.358118386 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.123634833 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.125262152 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.132575376 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.123172636 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.115158756 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.113687004 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.12423242 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.124645043 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.114497245 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.121645687 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.12466851 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.121829123 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.122747006 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.133614292 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.133114204 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.121370409 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.123837363 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.125698156 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.116169389 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.134166899 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.121731331 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.125379971 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.090124156 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.090154812 seconds)
  done (took 52.914483429 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.277019426 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.15344907 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.240994338 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.132793184 seconds)
  done (took 10.813653443 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.090000983 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.154714027 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.142393052 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.136561115 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.175937258 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.192663277 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.142451514 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.299435119 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.204856835 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.217633121 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.092861811 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.111001092 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.112248739 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.137388991 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.194199503 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.089968212 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.090462967 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.206692532 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.152380237 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.304587014 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.090948295 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.144242954 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.175858034 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.14451339 seconds)
  done (took 53.814889135 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.091703574 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.101416261 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.098735459 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.092453725 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.092168049 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.091422076 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.097873667 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.094186388 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.10209913 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.093249181 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.091584306 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.091699594 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.099294325 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.091768118 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.092425296 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.105813065 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.105494853 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.093018527 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.096268029 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.098850376 seconds)
  done (took 43.935174124 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.085855041 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.934359735 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.43434614 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.339308599 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.087357251 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.07964941 seconds)
  done (took 32.974040226 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.102981864 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 2.094574159 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.091821611 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 2.145841911 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.226930013 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.09848528 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.090915043 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 2.098955028 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 2.13312781 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 2.157044744 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.108637023 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 2.11721562 seconds)
  done (took 27.479718202 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.100427952 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.089173457 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.09839581 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.105580679 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.102889831 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.099230516 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.102307873 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.091910746 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.105209374 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.108569088 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.099756402 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.103244071 seconds)
  done (took 47.225467667 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.309907343 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.321115526 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.306491333 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.554533556 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.727840585 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.073391683 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.382074767 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.306226296 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.775645618 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.830839084 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.385563976 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.141502236 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.050610119 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.02184018 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.012639793 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.339160508 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.095238883 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.954428291 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.3477024 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.16716698 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.098186678 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.097250219 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.095790132 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.383809309 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.419184931 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.096414063 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.309561004 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112833768 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.09998366 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.322282125 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.444001058 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.14409133 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.301047271 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.353768971 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.42908565 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.144624995 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.133023592 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.139271387 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.135041982 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.133584255 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.108242291 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.107883444 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.63562253 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.107531427 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.371915836 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.100079014 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.111215687 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.082782868 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.024672181 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.315504726 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.200018433 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.095845618 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.133602866 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.526948916 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.217793128 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.341051515 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.104534548 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.141456251 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.150293589 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.249010445 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.197248474 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.104774679 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.312374953 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.02656666 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.398392291 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.2097912 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.100710011 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.104276606 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.801181967 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.341789884 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.183516015 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.320543135 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.847728078 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.101867662 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.102943086 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.103574883 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.190001396 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.099793756 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.389868516 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.10312396 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.027584295 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.199841613 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.494109582 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.104053975 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.097356969 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.106241872 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.945353259 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.112995101 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.198676533 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.257537633 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.409754479 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.103149988 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.102803859 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.125897327 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.104336398 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.046700665 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.526584878 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.161054901 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.027097759 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.665069224 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.45042121 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.060624969 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.451065001 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.138550282 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.365853949 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.255482175 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.50747077 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.307296225 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.346381552 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.668442198 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.106893061 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.714354118 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.183956345 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.177285478 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.102329153 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.655029783 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.14683984 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.283491578 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.20198998 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.101667107 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.028058182 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.112642415 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.306294003 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.445936929 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.151841966 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.102420973 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.109260452 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.102203616 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.105605295 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.215043561 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.11851954 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.391193963 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.164401074 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.102858308 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.039248667 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.110311748 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.38222551 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.525765809 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.158348315 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.354500941 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.360164301 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.798915518 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.129271524 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.125544643 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.367283921 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.168858423 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.17842859 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.673255234 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.233701401 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.200021943 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.034883266 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.241790504 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.110556284 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.108399832 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.288864649 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.509984996 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.526090732 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.145543604 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.115976966 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.10691821 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.154145069 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.339281147 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.130837426 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.128079968 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.109070753 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.186278003 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.330118759 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.101920771 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.109999097 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.345986411 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.345994203 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.393070452 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.162611925 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.119340553 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.174189741 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.115716745 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.318648643 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.186987376 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.756178494 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.649887197 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.318515607 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.538834792 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.063815154 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.769831706 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.260568797 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.47237572 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.12277456 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.557029778 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.153201522 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.665181904 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.131593273 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.624474083 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.033660811 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112434882 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.436397424 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.059669245 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.71164619 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.166561348 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.181134268 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.107008361 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.105556514 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.114212059 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.111637008 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.207137969 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.174661671 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.179008218 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.034046537 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.625648155 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.140167922 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.108075468 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.107196613 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.398213273 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.91326661 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058987994 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.10653293 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.184651576 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.853685749 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.654836658 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.099659983 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.109890939 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.707885496 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.737273239 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.0210317 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.116806921 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.824120993 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.130020175 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.270256893 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.200795902 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.397987923 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.809935546 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.183193337 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.105694129 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.118063149 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.807692893 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.117740162 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.810077242 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.391535959 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.372100684 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.539417093 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.16462919 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.315039302 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.122633095 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.110497274 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.545272457 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.133611962 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.111161388 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.312869597 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.623502605 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.331468963 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.054382287 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.195343957 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.134080933 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.374558083 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.106145082 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.463502765 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.779191063 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.105943391 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.119644044 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.350559439 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.795614056 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.111757172 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.087526552 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117464762 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.321712094 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.313807483 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.378557357 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.402810352 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.554068634 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.138622896 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.115839472 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.130016127 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.353990866 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.10955767 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.145443781 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.554794977 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.124779218 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.540428759 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.391990891 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.387829579 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.732101158 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.374118334 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.169957638 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.123820909 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.751832842 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.233635391 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.04560024 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.230852154 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.036825933 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.822285584 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.402344148 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.130042847 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.377558525 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.086748755 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.431261755 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.402938033 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.26490949 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.146418131 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.141720468 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.058815436 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.168607227 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.140252968 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.173676128 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.223517191 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.120992419 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.525995323 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148375684 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.159154461 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.117539812 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.561338255 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.136003383 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.114149657 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.803418923 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.770697576 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232997229 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.185232021 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.820036696 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.540721735 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.161381164 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.000767083 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.765685856 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.379622447 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.163389512 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.557482195 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.150861393 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.517541512 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.117357392 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.325820214 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.11876754 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.554710165 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.155007755 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.380556415 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.069349239 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.326801357 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.309182309 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.137328981 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.118741643 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.041062882 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.218074974 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.988380179 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.095760772 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.118240896 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.141856082 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.473361577 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.195754259 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.505815803 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.930683665 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.118717952 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.372295906 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.495241919 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.59834196 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.144177082 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.105599753 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.324538425 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.889751621 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.320625029 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.390405265 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.124987595 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.791019621 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.328134511 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.241184585 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.03543436 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.593306972 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.701321013 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.816666529 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.128115967 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.318780596 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.338179294 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.262687037 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.146148337 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.194522512 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.520453076 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.382550596 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.826639654 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.045486155 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.117266553 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.512822868 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.118153246 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.214143143 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.358276981 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.420487711 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.51684694 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.468209404 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.155478187 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.440838568 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.513762065 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.51161291 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.326363773 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.477916045 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.425796071 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.707301887 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.529397956 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.330782562 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.208697322 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.393674633 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.98744207 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.831014001 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.361187632 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.123776 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.047242611 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.325140013 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.166813401 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.29493016 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.635077941 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.141527658 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.275220433 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.57926325 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.652182101 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.164612698 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.141618114 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.083674546 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.142690536 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.138689464 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.120105948 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.596585438 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.405536158 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.132376128 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.057514237 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.79204742 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.044583989 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.33220249 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.176499663 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.151151309 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.675905917 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.280656585 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.21395052 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.408638275 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.227924734 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.151793302 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.04600601 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.7671836 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.068523107 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.140904094 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.544128809 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.137159536 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.122429134 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.32396708 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.050080127 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.166581783 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.754064864 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.316778706 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.6978401 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.39069567 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.240350002 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.361076189 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.421288882 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.126581765 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.081239022 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.39300495 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.046699576 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.629292366 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.820874564 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.828481322 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193125057 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.121998988 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.124726218 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.394015284 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.349689642 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.244699609 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.479931174 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.149497223 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.144039031 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.333207841 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.198597629 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.124178668 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.125965722 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.525874531 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.349035219 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.138053086 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.162276992 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.336253247 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.198191866 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.316590594 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.196513532 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.636488988 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.12767589 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.123669862 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.155977901 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.071162432 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.067230525 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.851981399 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.184396046 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.14616918 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.390405594 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.785620782 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.327181238 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.51915577 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.989702598 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.172592869 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.161557263 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.126449628 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.179349593 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.40722184 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.419882768 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.12303822 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.392225204 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.166536493 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.128802612 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.154466379 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.091206532 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.123693959 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.767157427 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.008164474 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.855546578 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.51829473 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.133100108 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.178435068 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.126262128 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.051133661 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.129272252 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.161286433 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.107742719 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.161976252 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.392887562 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.050484449 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.200361809 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.130753208 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.127005746 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.130834028 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.33719711 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.638408574 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.142428334 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.825767627 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.329724259 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.13471739 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.602997886 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.562577663 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.249775537 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.146035146 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.182846017 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.361438406 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.659825509 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.187378992 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.104728516 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.353381611 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.127043926 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.397958342 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.399724292 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.125975211 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.338154639 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.487868739 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.407280782 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.142702302 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.69845043 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.184045137 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.201089782 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.023507669 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.136128412 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.124876875 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.374897567 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.1714491 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.125313923 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.13841876 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.6767715 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.826361811 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.587695814 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.280543002 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.355939618 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.923993727 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.883599021 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.129039148 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.053216895 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.132962107 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.151981854 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.129618155 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.139272765 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.770950182 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.849085217 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.339806521 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.396301384 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.054139704 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.331661812 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.710620118 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.05519359 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.096378737 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.088047042 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.393914874 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.055678359 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.131507438 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.130222718 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.014695713 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.714317316 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.396096345 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.128623734 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.074096584 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.134034508 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.128180169 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.127192426 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.21299026 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.130119017 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.244625205 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.391636594 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.38877453 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.223682414 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.767883508 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.778759627 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.066216141 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.173416362 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.686147555 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.699790233 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.024545613 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.910198739 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.781638228 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.075587202 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.131539992 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.145864429 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.363779916 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.134237916 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.132184281 seconds)
  done (took 2297.630064552 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.159706258 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.211824678 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.183165518 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.172650191 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.258775785 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.231113795 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.196893928 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.18891143 seconds)
  done (took 59.65226667 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 7.127775136 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.076905875 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 2.134808819 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.12719013 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 2.133140007 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 7.129786947 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.343421573 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 7.142519109 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.159107398 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 2.133031156 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 7.129225108 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.128769451 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 2.467276693 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 2.616360952 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 7.147121633 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 7.151326549 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 2.150168854 seconds)
  done (took 81.35690931 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.148306931 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.459918561 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.152042198 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.148204782 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.054348134 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.151776343 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.200854582 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.175921741 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.156448937 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.521958159 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.448005865 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.160160089 seconds)
  done (took 93.847714134 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 2.154128134 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 2.151927273 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.146497315 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.146957382 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.148228694 seconds)
  done (took 12.823017119 seconds)
done (took 2846.893182342 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.398567187 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.209727005 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.253988263 seconds)
  done (took 6.532259461 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.295050645 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.340124312 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.44931551 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.475061251 seconds)
  done (took 11.638441451 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.431662781 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.512223061 seconds)
  done (took 7.01539482 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.554350905 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.168240476 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.538103794 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.15106607 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.161294123 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.154072976 seconds)
  done (took 23.544987574 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.150702401 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.151287486 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.156313823 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.150804699 seconds)
  done (took 10.679259409 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.135944049 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.854181165 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.152070505 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.162924262 seconds)
  done (took 22.373680793 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.29013568 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.210856026 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.914761962 seconds)
  done (took 9.48564147 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.774383653 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.599849155 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.771405749 seconds)
  done (took 10.21684843 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.98758598 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.967529245 seconds)
  done (took 8.024618426 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.294190997 seconds)
  done (took 4.364038062 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.015490949 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.464546244 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.622117709 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.674723774 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.739047322 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.36871939 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.479437728 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.429700451 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.546604982 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.558735307 seconds)
  done (took 27.971205456 seconds)
done (took 158.57647317 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.61152326 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.178578825 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.359625772 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.537690892 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.397780092 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.366414579 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.455119318 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.527004059 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.211523581 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.189805272 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.530331891 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.396475298 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.402813424 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.169666783 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.407841494 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.174275116 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.405390681 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.627598204 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.21297679 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.458157392 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.43896895 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.172681074 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.373709668 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.190380094 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.405421375 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.320580919 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.782607115 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.179710762 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.361415541 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.797267056 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.322424522 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.608227679 seconds)
  done (took 178.646428887 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.159288903 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.156964956 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.158395937 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.160622036 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.428605097 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.156495659 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.161888606 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.157932541 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.395832121 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.375608952 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.157171054 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.417904497 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.160052319 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.158816254 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.159691826 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.160821543 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.58856537 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.012328395 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.017302563 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.014603165 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.011294939 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.107219254 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.010217158 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.11401271 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.306871468 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.009270284 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.013675278 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.999347797 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.009234555 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.015254999 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.012718798 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.004389531 seconds)
  done (took 214.847346612 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.960877984 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.015846427 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.01435319 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.013775916 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.015100629 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.016806035 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.015308284 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.014730976 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.760603453 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.75444902 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.015223944 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.017243183 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.01333111 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.013006389 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.01333357 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.012654416 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.012478288 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.001609639 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.016534749 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.012387062 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.01545808 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.597988507 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.005815848 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.602402629 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.017967081 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.016721861 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.00409117 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.015290627 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.014498982 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.015776966 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.017108749 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.017765451 seconds)
  done (took 224.993409139 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.248341697 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.020998427 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.020155928 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.930909031 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.019726758 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.019475906 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.924610554 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.251165733 seconds)
  done (took 20.379762825 seconds)
done (took 640.953175392 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.369643865 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.759003887 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.155463259 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.044431194 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.272694148 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.086255796 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.034951492 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.097506887 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.864192099 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.112170434 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.414982209 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.044415428 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.779563338 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.064107985 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.154457717 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.093850684 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.379677404 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.692266485 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.175648091 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.683336719 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.200550495 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.958984885 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.116024838 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.907838726 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.43844996 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.997696042 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.0610128 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.375255371 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.044237996 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.190272869 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.636730255 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.312268371 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.195377575 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.18131402 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.233232822 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.210871308 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.398978359 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.191922559 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.294717755 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.898697061 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.829325984 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.905714299 seconds)
  done (took 107.803960953 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.1753716 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.167001934 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.166500258 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.167289994 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.176589611 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.168796415 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.166795724 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.167394422 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.166886639 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.166655125 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.171183468 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.177376004 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.166618092 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.175771119 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.170151208 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.167408371 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.168722767 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.176772546 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.167678749 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.16967771 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.167631668 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.168299767 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.163759461 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.168224678 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.16944496 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.168322944 seconds)
  done (took 58.506659186 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.165484484 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.352332257 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.400994452 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.184224907 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.16340059 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.165767892 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.196704854 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.175388425 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.166324167 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.165969273 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.262145071 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.172044728 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.177209247 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.400789446 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.181538204 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.169753466 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.167639195 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.16497111 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.359625848 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.184289172 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.195248773 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.17557865 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.193773188 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.181522459 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.168425733 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.164698734 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.167920027 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.635357253 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.179882996 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.262133512 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.221239375 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.184929281 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.561499218 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.421861528 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.222537788 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.174749701 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.168747733 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.269693001 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.172243208 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.165431904 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.194111703 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.175007152 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.408915709 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.690502432 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.181489537 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.1691001 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.632666568 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.280105602 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.208719247 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.177974323 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.414634127 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.185843763 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.169866187 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.168287248 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.203954315 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.179789837 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.166842286 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.46516104 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.184193376 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.196091892 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.176609182 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.168001754 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.367625659 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.176846152 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.355896162 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.177999146 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.175552727 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.167494351 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.408660646 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.190278915 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.71815553 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.183363674 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.171282351 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.266535309 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.360971749 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.663502104 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.183194335 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.373403326 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.580457638 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.206919525 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.180472536 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.627623624 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.210965969 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.178925456 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.171386528 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.175498941 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.172569163 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.21959239 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.195064426 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.629004224 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.71970535 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.484811155 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.210409127 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.182839948 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.172740335 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.465798618 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.183934758 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.172883126 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.403225333 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.730031305 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.185363194 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.176544881 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.700134193 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.186469556 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.187570798 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.182298923 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.42179606 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.192344702 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.222357002 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.174131983 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.177199246 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.176428623 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.200752327 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.180937119 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.173006283 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.68841504 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.290666913 seconds)
  done (took 267.883230939 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.171108009 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.169827754 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.175226271 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.171493244 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.171539075 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.173731345 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.170169648 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.17293041 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.172035459 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.170895511 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.170291854 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.170586792 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.172193315 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.176113819 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.219577517 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.17279397 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.661532713 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.171113217 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.170806349 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.173036745 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.718445322 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.176745362 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.171761292 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.172694828 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.17095033 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.170770083 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.174134486 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.215764614 seconds)
  done (took 176.044897853 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.176479436 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.227597752 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.184533912 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.21935926 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.187807949 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.17498489 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.26062698 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.190410856 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.177966436 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.176424441 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.175630233 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.190293091 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.184512621 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.263006656 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.204234676 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.279326672 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.260614543 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.17257904 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.177361431 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.176379802 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.221147401 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.189828562 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.204425573 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.236742169 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.189071775 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.213779955 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.189499614 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.17745676 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.173695745 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.272177636 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.194980749 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.208246158 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.208488661 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.184399986 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.291496316 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.278690427 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.262948704 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.279314341 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.179921327 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.178194653 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.177472805 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.177938945 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.230574403 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.18980632 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.176240723 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.282015647 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.193616205 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.176723239 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.178033816 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.177714915 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.188862236 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.193382966 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.210765756 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.300026439 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.224146199 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.20481099 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.271676848 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.292006793 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.176102291 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.271515407 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.185058158 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.29194676 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.196943005 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.179905907 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.179903715 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.182764029 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.226842966 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.288884883 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.277703648 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.181723066 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.270448881 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.232529092 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.192382529 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.18051809 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.18097699 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.231928767 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.28509221 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.232553691 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.23629252 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.21406974 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.189001831 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.176845172 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.181682326 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.20577961 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.1887147 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.292184573 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.288700349 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.186235056 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.180651423 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.18085317 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.181895841 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.201690433 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.241775714 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.218043533 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.288716152 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.213266707 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.216371366 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.189271337 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.194867041 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.186496559 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.212290408 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.190321265 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.19329104 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.454595647 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.210023926 seconds)
  done (took 234.699125836 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.527394046 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.224468743 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.250084943 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.466936921 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.540419003 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.056999474 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.218784959 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.229453527 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.239159015 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.354811241 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.285445803 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.268657751 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.21648676 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.201307817 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.222474108 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.239661833 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.256198223 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.541396292 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.427319209 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.696700683 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.220760886 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.50407087 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.56282053 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.583661674 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.26838286 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.628716149 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.809837004 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.325693472 seconds)
  done (took 71.473599929 seconds)
done (took 918.357588952 seconds)
SAVING RESULT...
DONE!

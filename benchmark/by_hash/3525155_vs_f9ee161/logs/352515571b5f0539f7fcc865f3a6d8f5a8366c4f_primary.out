cset: moving following pidspec: 30334
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.855699271 seconds)
loading group "shootout"... done (took 1.128198911 seconds)
loading group "string"... done (took 0.62984963 seconds)
loading group "linalg"... done (took 8.293300709 seconds)
loading group "parallel"... done (took 0.163439728 seconds)
loading group "find"... done (took 2.757955758 seconds)
loading group "tuple"... done (took 1.997795463 seconds)
loading group "union"... done (took 14.626380145 seconds)
loading group "dates"... done (took 1.416996191 seconds)
loading group "micro"... done (took 0.21110035 seconds)
loading group "simd"... done (took 4.625041809 seconds)
loading group "io"... done (took 1.030662229 seconds)
loading group "random"... done (took 9.116421419 seconds)
loading group "problem"... done (took 1.393789508 seconds)
loading group "array"... done (took 24.334283083 seconds)
loading group "misc"... done (took 1.820585515 seconds)
loading group "scalar"... done (took 41.744550398 seconds)
loading group "sort"... done (took 3.231647271 seconds)
loading group "sparse"... done (took 12.455045159 seconds)
loading group "collection"... done (took 18.172745977 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.519646426 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.120867788 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.126213039 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.118899643 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.184998187 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.118953056 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130361079 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.083929472 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.824603588 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.137044637 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.113503318 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.422957473 seconds)
done (took 5.369706392 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166667004 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.09292618 seconds)
    (2/2) benchmarking "String"...
    done (took 0.08311868 seconds)
  done (took 1.435859042 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.07226093 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.060416537 seconds)
    (3/3) benchmarking "different"...
    done (took 0.066836076 seconds)
  done (took 1.451583932 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064865134 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135021111 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.065943344 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065674302 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065747782 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064518225 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064677331 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064829418 seconds)
  done (took 1.781198916 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072569952 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067654242 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065053472 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067351574 seconds)
  done (took 1.522922422 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065770503 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.120636673 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.06459594 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064587859 seconds)
  done (took 1.564257931 seconds)
done (took 9.260603914 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.240762757 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.099567121 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.285277939 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.445893057 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.607583417 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.091481289 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073265471 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.068614739 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.126589419 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.318973677 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.101818199 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.178934699 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.088569493 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.172691804 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.005290245 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.118043558 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085196097 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.121855012 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.093701626 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.131858155 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.392596049 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076209031 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.071737393 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.068847205 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.066790795 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.636932958 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.673859403 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121870575 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.082261728 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.16168316 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.115050338 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.646300952 seconds)
  done (took 10.85257499 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.09407144 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088813725 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.06708931 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.121710335 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092132986 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068448309 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07358075 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066406007 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.086520396 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.121508474 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.087458217 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.096282581 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.064894438 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067871287 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.075553978 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.199995263 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078151061 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.078649172 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066330821 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.078820741 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.10375662 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.07610905 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076486418 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.07611224 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.127003688 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.168130812 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096788815 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096303929 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066474012 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078207189 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.113875188 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126129865 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066765828 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.063854977 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.118882003 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.09474367 seconds)
  done (took 4.647520425 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.873417371 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.09448733 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.0999625 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.630441038 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064889828 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.147292159 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.237303884 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071696085 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.266359188 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.151130902 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.138258827 seconds)
    (11/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.144049763 seconds)
    (12/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.114619251 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068095642 seconds)
    (14/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.063410694 seconds)
    (15/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 1.128126024 seconds)
    (16/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.114953621 seconds)
    (17/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.50942943 seconds)
    (18/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066709813 seconds)
    (19/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.083351464 seconds)
    (20/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065261023 seconds)
    (21/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.064324894 seconds)
    (22/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.062583218 seconds)
    (23/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.066450978 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065778041 seconds)
    (25/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062500492 seconds)
    (26/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.089680879 seconds)
    (27/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067593042 seconds)
    (28/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.093505468 seconds)
    (29/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.086223944 seconds)
    (30/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.155994586 seconds)
    (31/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.783959888 seconds)
    (32/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.292703954 seconds)
    (33/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065233557 seconds)
    (34/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.165870069 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.080525957 seconds)
    (36/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.35950622 seconds)
    (37/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068146098 seconds)
    (38/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079435535 seconds)
    (39/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.437786027 seconds)
    (40/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.119459363 seconds)
    (41/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064507951 seconds)
    (42/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.157024794 seconds)
    (43/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.112240049 seconds)
    (44/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.061364961 seconds)
    (45/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.114809298 seconds)
    (46/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.074732911 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066120114 seconds)
    (48/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.066373052 seconds)
    (49/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.465886919 seconds)
    (50/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.065713173 seconds)
    (51/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070814913 seconds)
    (52/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.075225808 seconds)
    (53/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098192697 seconds)
    (54/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.064567042 seconds)
    (55/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.062973081 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.165004355 seconds)
    (57/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.061665474 seconds)
    (58/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.063365747 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.063571122 seconds)
    (60/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.147219728 seconds)
    (61/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063951652 seconds)
    (62/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.134934711 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.061630637 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.065411436 seconds)
    (65/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.098037845 seconds)
    (66/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.065893637 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.081409314 seconds)
    (68/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.088068627 seconds)
    (69/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.061136248 seconds)
    (70/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.327434982 seconds)
    (71/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.027889108 seconds)
    (72/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.065755142 seconds)
    (73/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.988476115 seconds)
    (74/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.075455119 seconds)
    (75/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.063957225 seconds)
    (76/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066200086 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.063353168 seconds)
    (78/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.064642124 seconds)
    (79/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.063741506 seconds)
    (80/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.067414263 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.067534457 seconds)
    (82/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.064894845 seconds)
    (83/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.103568561 seconds)
    (84/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.062845356 seconds)
    (85/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.061082405 seconds)
    (86/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.066677075 seconds)
    (87/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06269041 seconds)
    (88/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.0686179 seconds)
    (89/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.095734623 seconds)
    (90/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.063725691 seconds)
    (91/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.516028809 seconds)
    (92/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.092537701 seconds)
    (93/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.063972561 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.070930161 seconds)
    (95/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.100169986 seconds)
    (96/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.063318493 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.065948932 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.311387506 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067817192 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067073503 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067939403 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070808011 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.098800318 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071589888 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113812996 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.033010511 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071506849 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067555334 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.073234713 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069240336 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069881069 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066996357 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068997662 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.06875075 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064656208 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.105738732 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.120048323 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065954429 seconds)
  done (took 22.256788725 seconds)
done (took 39.881873963 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.314048553 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.079459901 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.07792862 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.077723824 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.078358745 seconds)
  done (took 1.966281565 seconds)
done (took 3.357810406 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.133400747 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.082956741 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066253661 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.099541403 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.06787863 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.100086979 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.106842763 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.103006779 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.067774201 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.06799472 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.068130301 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.100573594 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.103005581 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.068047446 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.096639788 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.102441093 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.068375174 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.06391482 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.068037878 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.067813814 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.068223887 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064153778 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.067897245 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.068040115 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.098108762 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.067835314 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063618422 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.096728895 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.067916356 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.09737566 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.067947419 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.067761519 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.067820747 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.09823521 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.06774339 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.097582696 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.063740148 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.068296105 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.067603046 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.067767309 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.070664381 seconds)
  done (took 4.652637476 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072874014 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08249627 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084504202 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063071423 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072586638 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083214632 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06274967 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082298697 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.089339738 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083958238 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083474123 seconds)
  done (took 2.23903092 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071752565 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084332995 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085056475 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062638797 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074451537 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08489702 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061325378 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082917941 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.084957384 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082639048 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082559085 seconds)
  done (took 2.215113578 seconds)
done (took 10.462452395 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.098689728 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.065620239 seconds)
  done (took 1.505637658 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.648646487 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.203664011 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067875407 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085143315 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.191378498 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.09250073 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.199699802 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.07067034 seconds)
  done (took 8.088166543 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.09889855 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070557931 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068497547 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.072941958 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067541007 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.066629881 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.067060431 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068294649 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.067919135 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.068695076 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068017062 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.068301406 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.068675215 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067130304 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067556128 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.068633321 seconds)
  done (took 2.572527895 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.10121842 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.099560343 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072932236 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.074066769 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072241572 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071585581 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074089998 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.073069005 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.070474677 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.072136584 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.072449084 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.070640909 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.070316604 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.061889527 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.07216179 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.072596599 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.069260393 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072039193 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073035083 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.073278273 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.072036695 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.062032087 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.070321561 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.070973538 seconds)
  done (took 3.241091321 seconds)
done (took 16.764981457 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.176916392 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074415485 seconds)
  done (took 1.600120805 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.069450425 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069397673 seconds)
  done (took 1.511139027 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.074419646 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.060180384 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.077102682 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.069318916 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.060856625 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.060639641 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.075563846 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.060496618 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.060837798 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.060648374 seconds)
  done (took 2.027256955 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.064225959 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069791743 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067623747 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.06500108 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.066283196 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.061700468 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.064740937 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.062753557 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.068604539 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061308416 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.065320157 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.082003002 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.064853735 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.08278359 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.064726853 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.065985327 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067010318 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.064372686 seconds)
  done (took 2.578861702 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062225329 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061094504 seconds)
  done (took 1.499620068 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065291849 seconds)
    (2/7) benchmarking "second"...
    done (took 0.061196056 seconds)
    (3/7) benchmarking "month"...
    done (took 0.063189235 seconds)
    (4/7) benchmarking "year"...
    done (took 0.063289823 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.061442751 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.060479141 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.061323579 seconds)
  done (took 1.805832203 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.42252492 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121002255 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.336531909 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068016168 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.075418208 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.251444613 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063496079 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067979808 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068000414 seconds)
  done (took 2.888946694 seconds)
done (took 15.291216225 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.084019366 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.179348567 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.089982333 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.402780445 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.090910965 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.066956288 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113193924 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.167128175 seconds)
done (took 2.587543715 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.236115291 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.414913652 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.770187413 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.065796395 seconds)
  done (took 3.634156604 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.33840429 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.079472077 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.07890325 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067931924 seconds)
  done (took 1.959378647 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.067005091 seconds)
    (2/2) benchmarking "read"...
    done (took 0.073427774 seconds)
  done (took 1.527561012 seconds)
done (took 8.750067695 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.067996797 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.094646367 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064611301 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.065350354 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064941249 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.064959011 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.065404821 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.065198177 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.064430461 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.075863827 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.064459176 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.064547618 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064522006 seconds)
    (14/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.06482536 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065424719 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065124303 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064313822 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065015091 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065305509 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06522375 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064882403 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.064594181 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.065081039 seconds)
    (24/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.064909144 seconds)
  done (took 3.020086798 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.081712396 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.06700601 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068012749 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067863897 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.068384741 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067564346 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067626779 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.06648186 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067981906 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.066381849 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068330725 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.0683866 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.066469809 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.068514195 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066241928 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.068736883 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067820379 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066269834 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066286652 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.068523182 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067669853 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066453859 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068759033 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067475237 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.068211242 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067840615 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065007768 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.06510859 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065875461 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.066360114 seconds)
  done (took 3.438574894 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067873139 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.059248032 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059508716 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069401046 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.059426402 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.05980826 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.060123026 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.05935861 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.059462022 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.06050594 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060124957 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.059282424 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060333974 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.059374451 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.059558565 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.06014588 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064150056 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078866636 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.059548064 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.059384586 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064157315 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.059602001 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.05922188 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.059283698 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.059933905 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.059614383 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.059240066 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.059839782 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060313716 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061546714 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060733888 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064922137 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065622402 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060534475 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070440743 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065110945 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.06072015 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064955802 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062019578 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060605021 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061263293 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060718809 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060925622 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060569562 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070809959 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060206384 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.060645641 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.0599857 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.06105269 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.06089467 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.061086857 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062910139 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.066377779 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062287009 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060492696 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062319496 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.059978425 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061180708 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061079369 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060554169 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060453134 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063671607 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062279723 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061333513 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081093687 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062383903 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070648595 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.063497128 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061624319 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064229477 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061482612 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.07840439 seconds)
  done (took 5.901575226 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.082863027 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.085751768 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.064681556 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.064742981 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061285449 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060144716 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066825642 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060079955 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064592091 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.080096288 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060325132 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064104332 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064337234 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065436238 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061286505 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.066039487 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.068091307 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060700312 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059378213 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063841173 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059946232 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066973642 seconds)
  done (took 2.871919537 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.137807923 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067100388 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105365091 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.073516525 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067619679 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.073190416 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.065138158 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065207516 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065537845 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065683964 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065947962 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065648006 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067617911 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06604029 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065880878 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065572147 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065601032 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065562197 seconds)
  done (took 2.721803517 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.078094122 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066991649 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.088083276 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066638833 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066674716 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065994914 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070036708 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071141387 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.06672996 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066569611 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070408116 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066405458 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.066349798 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066461274 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066796128 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066642583 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066173862 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066207113 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070669625 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070184082 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069804773 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070481127 seconds)
  done (took 2.932307925 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078543881 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065143962 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.081386914 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066743316 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060845797 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061610139 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066340625 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066303435 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066184306 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065566202 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066071798 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06099988 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067508522 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066030633 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.0675578 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065681831 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065575 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066143526 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065439158 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061170827 seconds)
  done (took 2.742533385 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.088103305 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064067342 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063998473 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.08324813 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063878001 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063439552 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.083665617 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.064444697 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063936684 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085836377 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063944305 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063887081 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.084018841 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.083314282 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064143076 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.083694376 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.083020833 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.083933806 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063982507 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064042968 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085689377 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063907344 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.083510871 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064121973 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063897154 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063918376 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06329786 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.081373763 seconds)
  done (took 3.445379421 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.066348427 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06429999 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064711112 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064465652 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064533637 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064385139 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064805009 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.06491804 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.064809756 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06506806 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.06425559 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064730438 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065220308 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064810598 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064429959 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064094818 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06386336 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064544424 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064509302 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065181816 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064850942 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064561808 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064594952 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065092494 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064840746 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064296468 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064003355 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.063274173 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062575787 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.063161687 seconds)
  done (took 3.351973649 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.075367744 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071112387 seconds)
  done (took 1.563835414 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.063332028 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.076736067 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.059311175 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.07182509 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.06763538 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063242264 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068451039 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067428511 seconds)
  done (took 1.948336367 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.068036834 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091972787 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062760699 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062032606 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.067972665 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.128736597 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.073536563 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072318349 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074702352 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064049377 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.061763011 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.072879426 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.060885084 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.074343718 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062998691 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.07002765 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068484664 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07815244 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073735604 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060336575 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073447381 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062534092 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059670625 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.062644311 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063179515 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069558097 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.078090203 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.075061777 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071208432 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.059857278 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081344529 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061574381 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.063003122 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071319747 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.066158069 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.060328518 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.095975868 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061665517 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.065482133 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.059813032 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.072193123 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080421021 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073967283 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077501525 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061620179 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062001351 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.059680147 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062164397 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063623822 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069455195 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059873683 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067652124 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.059293883 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.061464971 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070597596 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.060954475 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.065289779 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069385157 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073813389 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070660179 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.068885925 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075573433 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.06894099 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.067694329 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.06102415 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079436932 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061915482 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074256619 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07623302 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062649557 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072840368 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060086 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060571775 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.061140347 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.095217241 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.063729084 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.06283617 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061116225 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.06034466 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.06173659 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069514223 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065764587 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067745475 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063704116 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076332112 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.069392681 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060401191 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.066494933 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078081775 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.063620812 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060559597 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.076006028 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.063328341 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.059848472 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.077172154 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.069697397 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.061824329 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061560656 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.063293441 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073047566 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061534989 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.058908305 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068590442 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062020111 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062543962 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.064718679 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06805451 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.059875827 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069467203 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064942693 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061789512 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.058548547 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064246386 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061026756 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058506545 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069151221 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061061943 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075422654 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.067846255 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074462925 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.075752852 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071770113 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077269913 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061417948 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059476107 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.078342196 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.070083346 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.063007589 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.078470267 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.060733147 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.070903895 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.060053721 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.201086639 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.070758414 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060354587 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062752392 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060650636 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066124473 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062178915 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062484753 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.0663703 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.069213773 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.072667804 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062272802 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069469536 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.060808817 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076009615 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.070404377 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065099526 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064210001 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062653465 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.074055466 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.06822013 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.07182564 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061174693 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061545072 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061057967 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070859569 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069926735 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062171037 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067205494 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064751432 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060880744 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060861583 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064748001 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063842353 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063954439 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061854471 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068576539 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068892285 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.07368748 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067312555 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069333819 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059444265 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059830821 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.062382132 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.059954944 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064561181 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070073905 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075140278 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072860119 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082630854 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061143916 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.070115857 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062368338 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077703103 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074542935 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.06184013 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064811241 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058959783 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06307643 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070150946 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071535542 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075488603 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077204017 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066666092 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066509561 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061345325 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076606822 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.062073774 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068664439 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.069598072 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065111832 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060619753 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062467566 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.069685347 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.064945972 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060481281 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.075790232 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.066130651 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.05986328 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.07404427 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060456905 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.070649619 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060262705 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.063670417 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.065521395 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.062116011 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.069587683 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075328177 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059224304 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.060966825 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.075652307 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062052303 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06195125 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.068232956 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074949409 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.064811759 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067825474 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071031739 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069962464 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.064536365 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070147988 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061335247 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.069411216 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063202585 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.07194217 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.059992398 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076928994 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059405379 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074715211 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060350756 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070827955 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061237364 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068757163 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.06120103 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.076458884 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061360071 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060580076 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070574354 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.058753808 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068170721 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059245263 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063988884 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065307975 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.06921694 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061680553 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069035732 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.06135235 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067941112 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063967253 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067479882 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068845629 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063560318 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058873336 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068120127 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070136695 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.067851679 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.06197399 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.204900009 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.061730041 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070890349 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064308039 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064072175 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070247013 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066450205 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.06785873 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063987864 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.06429372 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063889034 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070781724 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071619912 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08056167 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070590202 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069525685 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071555535 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.06165565 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077475611 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061844027 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069798627 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.062100743 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067739812 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069623946 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060590553 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078570591 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.06203427 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.068262949 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072337905 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069105412 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.064218022 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078401102 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.063631605 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068652691 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.067975047 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064467435 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067462788 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.06260199 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069213395 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070021246 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071066832 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061340915 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.067903335 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069643357 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061984366 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068054411 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062295027 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069113588 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.061972172 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059530116 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.064822651 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.071302255 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.064474646 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064868801 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063251085 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059195469 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.060513878 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.06651922 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.064506454 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.068587592 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075035875 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.059378332 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.06136126 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.060290609 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.063657872 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077449145 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070037918 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068614395 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064643004 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059774938 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.061820941 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062381459 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.060773653 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.063485365 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.05948889 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.05975819 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070535987 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.062535734 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.064459713 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060858156 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061499704 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070052966 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065714995 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.060959809 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.066548047 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060132751 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.065374813 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.059194312 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.061958663 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.064671067 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.059918871 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.063796209 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071014462 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.076229165 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.066561737 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.068790028 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.06108824 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067684442 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075174517 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067001722 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061337369 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.069404398 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.059425284 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078325463 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.069462915 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068540341 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069632759 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061211078 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076434735 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.06428723 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069526575 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075115638 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061507167 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066112239 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059727332 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075082728 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063907707 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059605736 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067168968 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067521743 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.064920051 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071015568 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060303739 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.066954947 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065494204 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.06392019 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.062585722 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.062978075 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.067981742 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.074975245 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060374048 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.063632074 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067442478 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068058538 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064179982 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071172556 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.067594894 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.205324213 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063130442 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.064547993 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.061726469 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072051123 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061331261 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064999563 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.065816972 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060791048 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066829664 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075915657 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.06995396 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071458283 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.06069169 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.059641916 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.077707365 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.06396681 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.063885779 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.06833274 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070037824 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072769015 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071515309 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077707546 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062344361 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067060753 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073081906 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062206001 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060680943 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064447502 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062136896 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.069102164 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069583168 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.067836974 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062364775 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.066839949 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074000108 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.061970779 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065291924 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.065364332 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061156404 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.070642709 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.068637901 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.068538625 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.061929329 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060314437 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.063100612 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068674884 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.067753775 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.069516851 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061122497 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.0659946 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.073899554 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.067698701 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06322192 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.060326024 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06563902 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070869696 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.066476375 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061277315 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066161218 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.064744043 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066557653 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.069327051 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.064279951 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.059829141 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.076578353 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.067729708 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.069222393 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.062147198 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.061870043 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060652641 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.059858977 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071192696 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.060030718 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.061741685 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.064374368 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.061737027 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080036401 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.068062245 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075656268 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061173128 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.064240943 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.05965243 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069661664 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.064510159 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.06082725 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.070254074 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.059501944 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075186684 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073779426 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.067421371 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060097315 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.086453798 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068394873 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074770056 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069363875 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069013982 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.063472875 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070006855 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062927914 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070720027 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060896389 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.05995561 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069748118 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068491966 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072202609 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.06029872 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069894977 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061671228 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067850497 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067679019 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061513687 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061627813 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061780728 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069234806 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064539683 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069102327 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064744739 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076279771 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.061160774 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.070341136 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.068575684 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.070118604 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072998105 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071228848 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.066832639 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060064306 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06652674 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.067189037 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.0604191 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.063929162 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.062454175 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079679152 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.060934389 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.060705764 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072648272 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.206983722 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060604197 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.066975298 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.065036641 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070093651 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.061548126 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.071024056 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.064064161 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.061170687 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.064694796 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.064436649 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.059282078 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060071272 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.059892704 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069612011 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.064467057 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060497314 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078557132 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.061500852 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.068863155 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070985502 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.066538785 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.06205088 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.059560458 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.06157806 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.073322323 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075204082 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.063775887 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06865398 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.061975958 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.069280365 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059612302 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068830852 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.068066276 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068260116 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.059668381 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060519074 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.074749249 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075538875 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.064880381 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.069366957 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.069051837 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.061497266 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081344608 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068899133 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061850547 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.070830969 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063357063 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.059609314 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.059394773 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.061637501 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.071415763 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.059364517 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.062081297 seconds)
  done (took 41.758300535 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099470747 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06078335 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.059695874 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060323715 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070834688 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060807015 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060125696 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061234211 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.060687074 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062367064 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.060159278 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059726789 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.070850076 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072861654 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069890263 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063226249 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059954571 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060666244 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060388265 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061212476 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.069590513 seconds)
  done (took 2.878001204 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.068566788 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.075819015 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.071661677 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.077802975 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069852841 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.065108699 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.070697233 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063859623 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.070869148 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068949578 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.071016204 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06365835 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.069512207 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.068843639 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068904007 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064239001 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.071337298 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068121652 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.065526716 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.070421198 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063968888 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.070765588 seconds)
  done (took 3.014858071 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.06370883 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.061465061 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.068864458 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.063285901 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.059845202 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.06298874 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059529644 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063795561 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063925762 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063856939 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068659017 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060266936 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059562445 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.065428894 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.06046937 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061840824 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.102221142 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061930601 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062981598 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.061091011 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.064072941 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070883809 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060849899 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061577693 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.06515915 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064504773 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060997261 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063684234 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061555166 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.06427212 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.060659011 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059088858 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068331403 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067568523 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063684561 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.064161598 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.061368097 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.060891214 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.059549394 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.059117665 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067532515 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062350451 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060100574 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.061020856 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068385091 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.059935257 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061074214 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.069696461 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060818612 seconds)
  done (took 4.628290812 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071533831 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.11145329 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.065854936 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.092936677 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073192901 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.065610337 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.065747663 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.092781821 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.060681987 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.061415362 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.0732589 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.07281709 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062536098 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.063397195 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.06658604 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062395948 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06345854 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061501007 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064720277 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061869659 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064909701 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066158884 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071729078 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071943709 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063088525 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061523998 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062266563 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.06295527 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071950575 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066035566 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064435035 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065729591 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.073302355 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066962214 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062754557 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.062124415 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072671489 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062506318 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063921622 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.063018423 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063135115 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063617626 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066414063 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.073375044 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062374806 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066991685 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062788974 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.060844855 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072478696 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.062336005 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.066278197 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.073191256 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063013669 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063157552 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063595383 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072394167 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.062511396 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.061132432 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.062560483 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.07220804 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.06086136 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063029887 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072658548 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061922579 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.065609397 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072846524 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066845466 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06373256 seconds)
  done (took 6.193229593 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071353611 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093976593 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.0703398 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.070138498 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069675117 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069997928 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069978217 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.070083325 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.070025022 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.070456154 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070416276 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.108936755 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066596755 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.074189431 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07007751 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069727137 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.06997222 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070381857 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071677908 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071749808 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071736062 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072409213 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071762367 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072267117 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074328545 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068483285 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071590568 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071763155 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07218372 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071637819 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074955597 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.07080964 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.070614902 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072308318 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074228895 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.07182106 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062488578 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071394933 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071660286 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071797949 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.06816138 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072202584 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071434395 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067966826 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071612139 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074332311 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072109708 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.07447006 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078364338 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072834193 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071629164 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072291997 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072043933 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071046581 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071939771 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.0782739 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071709085 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071218444 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069993774 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.070108478 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070084152 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.07652658 seconds)
  done (took 6.023898764 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075420183 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067974823 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079887354 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061244028 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061275379 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070351915 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061012286 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.059975297 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065904279 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.066381293 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067680865 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068839118 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070928349 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067803394 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068862219 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072798859 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068686882 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068934348 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065924026 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068094071 seconds)
  done (took 2.887726709 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076290022 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.079807071 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067053282 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070638625 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.067033851 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070437821 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.06648976 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066728207 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067204858 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066915276 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072306981 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071651921 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067246101 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070548056 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071765257 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070492736 seconds)
  done (took 2.637098525 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.068236376 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068162046 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068145011 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063304455 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.066221101 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.06162666 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.061929012 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.060826244 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061531366 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075265092 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062020264 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.074399646 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062447498 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061555929 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062237271 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.067783184 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.061484964 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062130454 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062288115 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.067120873 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068539707 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062143354 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064638065 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061099398 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.06632808 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.06862073 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063569042 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.065255085 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061859002 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.061950606 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.066604976 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.069076292 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.061974888 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.06335647 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.060874106 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062290042 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.06150873 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.061178483 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.067333204 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.061574812 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059223285 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.065773851 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.06184659 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063230707 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061791118 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062817562 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061530217 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.06793352 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062562599 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.066889658 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060674901 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062267491 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061327453 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.0676581 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.065715764 seconds)
  done (took 5.046913749 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078794295 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066799262 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.06089417 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061063788 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.0656987 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.065509269 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.065604483 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.065167532 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065906871 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059423323 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065274531 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.064060922 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065589122 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066661308 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066835828 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066923882 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061091337 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067278959 seconds)
  done (took 2.710625912 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.073496182 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06633805 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.071218471 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.067124227 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.066497714 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065367861 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061520038 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061433891 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061307442 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066218359 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066455587 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.065726298 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061644249 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.065544611 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066351141 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066067982 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.065485955 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061436012 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.065809038 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061731452 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06582172 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061820554 seconds)
  done (took 2.95786632 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089029651 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084133053 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.127970935 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080667668 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088576698 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072317731 seconds)
  done (took 2.065289518 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095416125 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.103434485 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066418089 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066064658 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074741747 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070911491 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067957987 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067613171 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072723422 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071235809 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067622438 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07324232 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072976332 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069379765 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072833892 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07493437 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0675333 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067466968 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064786829 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074928827 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067559496 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072530572 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067532591 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067428528 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067600311 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069181026 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075068989 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07149389 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067679677 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07467307 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076765495 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067684072 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072795611 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071642728 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065445243 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074765878 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069815563 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077381825 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074892938 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071511993 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066549055 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075064033 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075210711 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071056246 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077473385 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069569844 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071472669 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069644028 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070298326 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079656167 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075567924 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071363292 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073952359 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07529886 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075279432 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077156252 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071623439 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069508996 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073105518 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071518522 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069409789 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072924806 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069386308 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071402099 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075132962 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069312351 seconds)
  done (took 6.306274365 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101530847 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066173886 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069720736 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073937308 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071500344 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069877252 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068566137 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067862492 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068135558 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065403896 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102916932 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068561147 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069642923 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071039319 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070290729 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070749781 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06977572 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07183839 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067104082 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079519041 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070174034 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072050224 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070855145 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070685265 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071737221 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075746811 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069564269 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06958445 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069525891 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069593684 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07156503 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068964331 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069698195 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06559727 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071385505 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068704476 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069814016 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071705573 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069767306 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075253773 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071895809 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077643598 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069756753 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069784086 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072981908 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068012531 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069099196 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066128896 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069053432 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067428098 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074076839 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073308752 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073894033 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071571789 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068943984 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068664001 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068127782 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068601224 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06837639 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076315922 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07117276 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070148954 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0782943 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067590161 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067909405 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069353479 seconds)
  done (took 6.265207597 seconds)
done (took 130.703427835 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.220097074 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.188293669 seconds)
  done (took 1.920541058 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.07592593 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.098485898 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.076606343 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139241483 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.07117989 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.107548943 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105916871 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.074634212 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.070779265 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070811598 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070774811 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.073129861 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.140553791 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.0712266 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.070933593 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.073619124 seconds)
  done (took 2.925439036 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.109017955 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.186299742 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.114600669 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070356062 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108070151 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077782267 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.070702707 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.079836421 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.071987543 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.08121317 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.075589138 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.073647246 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.071033564 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.073539365 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.071944411 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.078028486 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.070218314 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075039498 seconds)
  done (took 3.098838753 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.097970341 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.087546746 seconds)
  done (took 1.724474637 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.165099792 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105024627 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.143624762 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.323923613 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.128319996 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.127736014 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.132647992 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.126202015 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111901678 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.121870329 seconds)
  done (took 3.021586626 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.108209852 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.176122553 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.313604029 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.123970912 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077573887 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100143732 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.12584757 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083140686 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080851468 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.078672589 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078021561 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075811064 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.099557461 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.074650308 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.073468105 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075414001 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.103100441 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072800534 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073523447 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.074343367 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104084439 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069862289 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074845312 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.073165228 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076398984 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.076479844 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.071186475 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069523023 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076332499 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075543914 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078883683 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.096855766 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078941787 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098935257 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073894665 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.097616859 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.07366 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073294088 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075962327 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074997557 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.078129319 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.07791726 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.080702471 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.07750241 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072400249 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.074991058 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.072750947 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.070198354 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076799399 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.069972559 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079273343 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.078765913 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098065347 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070011754 seconds)
  done (took 6.292773563 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108739462 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.104432779 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068724722 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.110853198 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.103719518 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068873972 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.102194344 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.098252397 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.106203324 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068493918 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067617912 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068326525 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074967545 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.077799086 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.114280831 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.105629453 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070224842 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068362109 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.10573356 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.105153464 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067513201 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.099628817 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.097648226 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.103761245 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.06766118 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068381598 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067401487 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068004583 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072430783 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.073628046 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067431388 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073635246 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.078841767 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073461371 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066810735 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066952232 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067427934 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.073657969 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074465765 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074398359 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.072495894 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066868822 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066725789 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067156878 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067832429 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066448265 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072701434 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.074065327 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.072736836 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067044072 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067422113 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066759302 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067611755 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.073079694 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.072386924 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.073975321 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.074095204 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066945648 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067249088 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068496704 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074509387 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074384262 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074172524 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067581674 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074692037 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066963121 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07547336 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077946357 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066818674 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067315039 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066963375 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066754714 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.06728629 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.072235027 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.072391349 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067298007 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067355053 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067212876 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.075110463 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07293272 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066880166 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.0719362 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066368193 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066820929 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067203351 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067412808 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.072192473 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076644961 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068172233 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067023299 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067208958 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066916294 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.066087122 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.072030173 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073272028 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.073165835 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.072809139 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067178565 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.072657232 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072982962 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067456626 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073194243 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066617417 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067900838 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066968653 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07227478 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.071774432 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074017154 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066818987 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066214229 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.071962726 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074549858 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066601489 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.071864785 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074491133 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.209274916 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.0674835 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076900635 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06764848 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076298799 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067864341 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076019982 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067678795 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073498161 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068077962 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.06689116 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068051921 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.074246799 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067923443 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067943121 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068323705 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067561736 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073868781 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077379672 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06837689 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07365589 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.073718698 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068029997 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073108374 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068062454 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074710551 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.307354666 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068023219 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066785029 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07667514 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067781812 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067774677 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067578392 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075030118 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067507456 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075359208 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072557325 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067127976 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077063067 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075138611 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.073115461 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.075738331 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068422587 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067722677 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067548206 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067397912 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072276228 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07349404 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068026956 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06740511 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.0725882 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.075359459 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066835248 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.07279875 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072862601 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.072930813 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067632418 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067690623 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076483195 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.075135741 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.072623464 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.072689605 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073486757 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066896618 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07259306 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072681189 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067064162 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07873583 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067451426 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.077196368 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073033449 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07234459 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.074031856 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.074455731 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.075159131 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074967379 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077012798 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067067085 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066752877 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.07290295 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067727813 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067076671 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072944759 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067842083 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067507983 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.078196023 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068066887 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075502258 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066906388 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073777385 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066622247 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067510317 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077483876 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067304377 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06787563 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07318272 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067122445 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072802618 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075884301 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073252466 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067367565 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067881411 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073904348 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073938284 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066794589 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067192848 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06744761 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.072220049 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072012338 seconds)
  done (took 18.259658 seconds)
done (took 38.795224366 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.204705675 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.164048726 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.191662984 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.113641199 seconds)
  done (took 2.316834143 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.092693341 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.096851961 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.074375229 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.063679567 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.079388001 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.064069697 seconds)
  done (took 2.058874345 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.251174193 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.184427747 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.168955908 seconds)
  done (took 2.18920616 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.217891285 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.194560603 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.479712902 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.298571964 seconds)
  done (took 2.879933099 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.129772172 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.078627359 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.062186519 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.075485919 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.101535173 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.12929149 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.08361473 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.104608571 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.073598795 seconds)
  done (took 2.485938481 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.126945182 seconds)
done (took 13.655038539 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.226808478 seconds)
    (2/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.105943396 seconds)
    (3/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.228788563 seconds)
    (4/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.074481874 seconds)
    (5/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.178659493 seconds)
    (6/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.073779332 seconds)
    (7/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.0720714 seconds)
    (8/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.146559497 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.114434702 seconds)
    (10/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.204694548 seconds)
    (11/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.155726138 seconds)
    (12/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.080331624 seconds)
    (13/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074760092 seconds)
    (14/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.089292463 seconds)
    (15/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068877921 seconds)
    (16/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.14082331 seconds)
    (17/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.110024342 seconds)
    (18/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.205602914 seconds)
    (19/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.07253373 seconds)
    (20/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.091665551 seconds)
    (21/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.073830736 seconds)
    (22/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.130519611 seconds)
    (23/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.123430929 seconds)
    (24/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.152376829 seconds)
    (25/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.071794038 seconds)
    (26/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.072794566 seconds)
    (27/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.167841666 seconds)
    (28/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.171202523 seconds)
    (29/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.185699315 seconds)
    (30/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.233004823 seconds)
    (31/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.16118151 seconds)
    (32/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072832525 seconds)
    (33/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.186300282 seconds)
    (34/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.163443202 seconds)
    (35/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.139653188 seconds)
    (36/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.199016554 seconds)
    (37/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.156019098 seconds)
    (38/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.185018939 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.077469755 seconds)
    (40/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066579482 seconds)
    (41/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.150498749 seconds)
    (42/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.077518848 seconds)
    (43/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.154880296 seconds)
    (44/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.243123694 seconds)
    (45/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.073375361 seconds)
    (46/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072233899 seconds)
    (47/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.149380782 seconds)
    (48/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.063454486 seconds)
    (49/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.141039 seconds)
    (50/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.152822564 seconds)
    (51/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.091144027 seconds)
    (52/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072869771 seconds)
    (53/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.145965148 seconds)
    (54/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.107061251 seconds)
    (55/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.089583683 seconds)
    (56/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.182627971 seconds)
    (57/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.068419735 seconds)
    (58/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.076842481 seconds)
    (59/341) benchmarking ("sort", Bool, false)...
    done (took 0.141997926 seconds)
    (60/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.065050328 seconds)
    (61/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.178551208 seconds)
    (62/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.067407868 seconds)
    (63/341) benchmarking ("sort", Int64, false)...
    done (took 0.065421446 seconds)
    (64/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.06571541 seconds)
    (65/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.087801485 seconds)
    (66/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.217645543 seconds)
    (67/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.083366116 seconds)
    (68/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.194826643 seconds)
    (69/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066098846 seconds)
    (70/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.06555854 seconds)
    (71/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075181014 seconds)
    (72/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.198248456 seconds)
    (73/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.135587214 seconds)
    (74/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.188480227 seconds)
    (75/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.208020828 seconds)
    (76/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.062993264 seconds)
    (77/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.065029896 seconds)
    (78/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.188321238 seconds)
    (79/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.222437423 seconds)
    (80/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.075628781 seconds)
    (81/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068162469 seconds)
    (82/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.281380287 seconds)
    (83/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.166218418 seconds)
    (84/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.065126198 seconds)
    (85/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.23387561 seconds)
    (86/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.07739244 seconds)
    (87/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.116304727 seconds)
    (88/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.175573253 seconds)
    (89/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.067517248 seconds)
    (90/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.074388443 seconds)
    (91/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.083066436 seconds)
    (92/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.197088288 seconds)
    (93/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.068717062 seconds)
    (94/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.085483169 seconds)
    (95/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.074145854 seconds)
    (96/341) benchmarking ("sort", Int8, false)...
    done (took 0.150723388 seconds)
    (97/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.073123874 seconds)
    (98/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.066688691 seconds)
    (99/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.148772624 seconds)
    (100/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.07148056 seconds)
    (101/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.074544461 seconds)
    (102/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.165125418 seconds)
    (103/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.08779824 seconds)
    (104/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.159550649 seconds)
    (105/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.067697545 seconds)
    (106/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.073741848 seconds)
    (107/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.172289484 seconds)
    (108/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.077586483 seconds)
    (109/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.071523727 seconds)
    (110/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.067034532 seconds)
    (111/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.068860227 seconds)
    (112/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.074003881 seconds)
    (113/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.124095479 seconds)
    (114/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090600221 seconds)
    (115/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.141862133 seconds)
    (116/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.070917761 seconds)
    (117/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074534117 seconds)
    (118/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.08089287 seconds)
    (119/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.066415558 seconds)
    (120/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.081131269 seconds)
    (121/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.080311488 seconds)
    (122/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.192205267 seconds)
    (123/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.074342956 seconds)
    (124/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.084166227 seconds)
    (125/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.078427764 seconds)
    (126/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.147614276 seconds)
    (127/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.144187523 seconds)
    (128/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.065948891 seconds)
    (129/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.154737515 seconds)
    (130/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.160632787 seconds)
    (131/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.065456355 seconds)
    (132/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.065440088 seconds)
    (133/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076676002 seconds)
    (134/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074782985 seconds)
    (135/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.143912107 seconds)
    (136/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.077971939 seconds)
    (137/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.065586847 seconds)
    (138/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.159829419 seconds)
    (139/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.078565173 seconds)
    (140/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.138216097 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091673305 seconds)
    (142/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.066391052 seconds)
    (143/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.079595362 seconds)
    (144/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075759178 seconds)
    (145/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.117102332 seconds)
    (146/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.175881253 seconds)
    (147/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091301822 seconds)
    (148/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069340309 seconds)
    (149/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.084945943 seconds)
    (150/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.166223005 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.084158432 seconds)
    (152/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.193940897 seconds)
    (153/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073102786 seconds)
    (154/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.067463835 seconds)
    (155/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075779612 seconds)
    (156/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.07344427 seconds)
    (157/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071096718 seconds)
    (158/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.191266965 seconds)
    (159/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.066247265 seconds)
    (160/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075259904 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.086875989 seconds)
    (162/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.065271505 seconds)
    (163/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.080517759 seconds)
    (164/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.129139835 seconds)
    (165/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.064916096 seconds)
    (166/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.066194804 seconds)
    (167/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.088077483 seconds)
    (168/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.072330715 seconds)
    (169/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.139657356 seconds)
    (170/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.072089366 seconds)
    (171/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.13862543 seconds)
    (172/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072208539 seconds)
    (173/341) benchmarking ("sort", Float32, false)...
    done (took 0.134253468 seconds)
    (174/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.063899239 seconds)
    (175/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.064087675 seconds)
    (176/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.0660043 seconds)
    (177/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.064222496 seconds)
    (178/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.090143022 seconds)
    (179/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.078201935 seconds)
    (180/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.062600198 seconds)
    (181/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.074532929 seconds)
    (182/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.065110574 seconds)
    (183/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071555818 seconds)
    (184/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.063148622 seconds)
    (185/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.067921588 seconds)
    (186/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.064951682 seconds)
    (187/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.138672024 seconds)
    (188/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066535732 seconds)
    (189/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.067463534 seconds)
    (190/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.066780536 seconds)
    (191/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.065176545 seconds)
    (192/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.077877805 seconds)
    (193/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.079664572 seconds)
    (194/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.068168573 seconds)
    (195/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.062716153 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.310930369 seconds)
    (197/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.066597684 seconds)
    (198/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.065892817 seconds)
    (199/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.06597586 seconds)
    (200/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.219640767 seconds)
    (201/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.066402793 seconds)
    (202/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.087962579 seconds)
    (203/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.072167342 seconds)
    (204/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.066998378 seconds)
    (205/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.186297692 seconds)
    (206/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.064157652 seconds)
    (207/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.064111866 seconds)
    (208/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.066927389 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064749723 seconds)
    (210/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.166872025 seconds)
    (211/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.138563478 seconds)
    (212/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.08298241 seconds)
    (213/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073363634 seconds)
    (214/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073010957 seconds)
    (215/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072778479 seconds)
    (216/341) benchmarking ("sort", Float64, false)...
    done (took 0.135222818 seconds)
    (217/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.077747339 seconds)
    (218/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.063823048 seconds)
    (219/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.066458274 seconds)
    (220/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.128565876 seconds)
    (221/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.065760306 seconds)
    (222/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.169479327 seconds)
    (223/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.063851237 seconds)
    (224/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.128216771 seconds)
    (225/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.064998643 seconds)
    (226/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.071943348 seconds)
    (227/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.128890056 seconds)
    (228/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.151616369 seconds)
    (229/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.064401426 seconds)
    (230/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.089037438 seconds)
    (231/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.078497577 seconds)
    (232/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.065261197 seconds)
    (233/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.065772774 seconds)
    (234/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.08632644 seconds)
    (235/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067359824 seconds)
    (236/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067223943 seconds)
    (237/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.068415179 seconds)
    (238/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.089604597 seconds)
    (239/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.071116315 seconds)
    (240/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.064014722 seconds)
    (241/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.065472091 seconds)
    (242/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.071472951 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.122486885 seconds)
    (244/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.213775724 seconds)
    (245/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.096898787 seconds)
    (246/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.161604485 seconds)
    (247/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.065606796 seconds)
    (248/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.067352369 seconds)
    (249/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.089406862 seconds)
    (250/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.063707875 seconds)
    (251/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.07633759 seconds)
    (252/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.064228549 seconds)
    (253/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.06463311 seconds)
    (254/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.074260918 seconds)
    (255/341) benchmarking ("sort", BigInt, false)...
    done (took 0.25867123 seconds)
    (256/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.142795009 seconds)
    (257/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.084931467 seconds)
    (258/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067454034 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.078888688 seconds)
    (260/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.06707737 seconds)
    (261/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072492584 seconds)
    (262/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.064884299 seconds)
    (263/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.083716885 seconds)
    (264/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.063749125 seconds)
    (265/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.065289446 seconds)
    (266/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.065099074 seconds)
    (267/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.09156853 seconds)
    (268/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.071733561 seconds)
    (269/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.067475835 seconds)
    (270/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.06671413 seconds)
    (271/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.064593869 seconds)
    (272/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.063409658 seconds)
    (273/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.066904877 seconds)
    (274/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.065232551 seconds)
    (275/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.063672306 seconds)
    (276/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.064878091 seconds)
    (277/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.065212818 seconds)
    (278/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.172357301 seconds)
    (279/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.081591499 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.144504045 seconds)
    (281/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.064513557 seconds)
    (282/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.063070684 seconds)
    (283/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.080806781 seconds)
    (284/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.065395188 seconds)
    (285/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.082125686 seconds)
    (286/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.064880761 seconds)
    (287/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.064633935 seconds)
    (288/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.090512636 seconds)
    (289/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.092949281 seconds)
    (290/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.076897252 seconds)
    (291/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070608979 seconds)
    (292/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.06789316 seconds)
    (293/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.153397042 seconds)
    (294/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.06378644 seconds)
    (295/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.064256492 seconds)
    (296/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.064298975 seconds)
    (297/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.063330504 seconds)
    (298/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.067697727 seconds)
    (299/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.064318132 seconds)
    (300/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.064403343 seconds)
    (301/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.065122184 seconds)
    (302/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.065646832 seconds)
    (303/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.06837182 seconds)
    (304/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.066918282 seconds)
    (305/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.216128714 seconds)
    (306/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.062911011 seconds)
    (307/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.07140666 seconds)
    (308/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.064535132 seconds)
    (309/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.080680395 seconds)
    (310/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.067709931 seconds)
    (311/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.065882983 seconds)
    (312/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07218813 seconds)
    (313/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.064667626 seconds)
    (314/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.14520366 seconds)
    (315/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.063097292 seconds)
    (316/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.062892626 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.118567864 seconds)
    (318/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.065796711 seconds)
    (319/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.064763389 seconds)
    (320/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.063200654 seconds)
    (321/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.064855565 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.063826492 seconds)
    (323/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.0646164 seconds)
    (324/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.246832271 seconds)
    (325/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.072630661 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077880078 seconds)
    (327/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.069628947 seconds)
    (328/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070414695 seconds)
    (329/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.066231263 seconds)
    (330/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077029816 seconds)
    (331/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.06572668 seconds)
    (332/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.064771198 seconds)
    (333/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.063802421 seconds)
    (334/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072627724 seconds)
    (335/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.0634761 seconds)
    (336/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.06415384 seconds)
    (337/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.079918987 seconds)
    (338/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.064216093 seconds)
    (339/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.064005719 seconds)
    (340/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.064553596 seconds)
    (341/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.06417203 seconds)
  done (took 36.077283741 seconds)
done (took 37.678167403 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.083492242 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.090724252 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073571788 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.08286015 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.079330758 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.096946811 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072347666 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.07642454 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.079068215 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.07839039 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.076883658 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.071070368 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.074403309 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074208397 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071707409 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.086876465 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.079657541 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.073213148 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.07354701 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063523967 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.073261962 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064934992 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.063345106 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070940185 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.076116496 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072531241 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.076142982 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.076259542 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.06689903 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.067041248 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.072097028 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075839267 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066423157 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.078771447 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075367483 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.075207807 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.074380774 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.077880537 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.06409763 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.064800953 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075201297 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064787339 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.075292912 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.073777545 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.072441624 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074679679 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.0757302 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.07876144 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.090309569 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071766431 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078183096 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.078000904 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.078178586 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072575009 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.072571767 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075076146 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073758215 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.089661664 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.076363539 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071614984 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077743724 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.075851942 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073508021 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075110421 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.074737839 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078190246 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078853647 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.073863642 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.07722147 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.074190329 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.065879825 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075298271 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.07154704 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.066397487 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.07811276 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.080663267 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065347195 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07117846 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075083779 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.075117636 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066030788 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071680752 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065498233 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071562567 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071309119 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.07215265 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.06988348 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.071749252 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063532633 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073355067 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071979848 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072723609 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.063475625 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076369445 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.064728797 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.071352964 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.064533199 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064532714 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.064075955 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.070141285 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064255904 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069185506 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.07408722 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064915954 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071481666 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.079474291 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066476898 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.073878489 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.065373503 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.06570924 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077473095 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.0777963 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066470511 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070797406 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.06401515 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.070419641 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063591872 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.064910823 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.065847041 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.067067736 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.074281271 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.066227937 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07168518 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072568551 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.07854996 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.06589766 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071945898 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071921237 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.066278903 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.073930769 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066782486 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.067056144 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.065560867 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.079637044 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.06976255 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.064901049 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070943594 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068863695 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.07247088 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062851494 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073132048 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070734904 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069076176 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071445862 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063509696 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.07610968 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070553731 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069653723 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.063300509 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.208831066 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.064149902 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066519458 seconds)
done (took 12.815667814 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068935139 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.1059801 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.074530136 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082730235 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079379099 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.067821079 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070737268 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083721251 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071074869 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086618294 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095152262 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088903537 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094502796 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066750502 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067518723 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.06907613 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.066327704 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075118495 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.082404847 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.091083031 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.096141078 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.067256737 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.06987358 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083839111 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077912523 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.086118467 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068651827 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068505355 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.113507741 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082369323 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092393963 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066892717 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068431032 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.081525737 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081317898 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.07430424 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067275075 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.069433604 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.066249613 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067413671 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069593601 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.082099973 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071393656 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071412561 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068648777 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068527874 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.06754968 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070950241 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.08047497 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070923493 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075220743 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.079427445 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.069600013 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067642243 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065919702 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070685836 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067237775 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.066532763 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067238863 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067048183 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067043951 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069446707 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068004469 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067656104 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070865085 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069947667 seconds)
  done (took 6.619042652 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.082983977 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.096306994 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.07994872 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.080482521 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067000039 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067897009 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067825179 seconds)
  done (took 2.246945603 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.06868269 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.080843054 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.083325409 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.086577764 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.076962415 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.084765308 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.066222725 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.096676195 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064606303 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078710327 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.109301498 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.081829316 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.06864779 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076601623 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065548949 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.0722844 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065911827 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075533277 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072611956 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.082606266 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069148818 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.094035312 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.079413139 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066268731 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.085451605 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.069115676 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.064380217 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065651612 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067187994 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.068142818 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06818836 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.104814634 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.071461447 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.081381289 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065593561 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.06704091 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.074085723 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070421089 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.067795733 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.071453768 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071320907 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.066636778 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.064074257 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.066759238 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.067943544 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.068637023 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.064281254 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067239773 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066832982 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077080164 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064527165 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.069189945 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.070192567 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.069747606 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.075051058 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071659236 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.077362006 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.069030448 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078654189 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.074105011 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067648335 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.073290769 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.072462603 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.070212698 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.072245249 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.069599171 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.068642006 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.070118517 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.06640112 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.067215256 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067485303 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.073039147 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.064574094 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.067253794 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068945387 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.06680731 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.068707574 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.081773611 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.081730811 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.077706962 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.067222416 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067052184 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.069189273 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.081564033 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069692325 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066829806 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068806906 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064388978 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.070050562 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067356765 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071884163 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067044628 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.07419141 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067783404 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.070186924 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07301029 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.065025102 seconds)
  done (took 8.71419784 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.069984644 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.068665045 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.068936035 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.069387952 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.066851402 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.066932912 seconds)
  done (took 2.150052105 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.088585851 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.066787048 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.082846254 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.067959075 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.10527871 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.075175571 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074929847 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.076062738 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.074568683 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.081968792 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.073060202 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.07479577 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.071768694 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.070091773 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.07221471 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066822698 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.071946137 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.06880516 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.078641039 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070496134 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.078405386 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069655805 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070435209 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.077330605 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068415833 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.06644723 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066521226 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078716753 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.078103901 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.073002561 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069688243 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068289438 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.073610972 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.072912576 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.071763842 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075068873 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067259643 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.07264157 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069920994 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.0713695 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076486979 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072323896 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070172496 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073602417 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.075498015 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.075641014 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073026116 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071469853 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.074001525 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073285397 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073394418 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.075031557 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.069863946 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.071837497 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.073735199 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072568739 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.071372401 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.071986207 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069532128 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.073998466 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.065926902 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068300963 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072359638 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068091316 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.070143548 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070981481 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.074127719 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.0702016 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.0700711 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066636722 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073427895 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067789833 seconds)
  done (took 6.965223294 seconds)
done (took 28.379459247 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.543927705 seconds)
  done (took 2.228667225 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.580134892 seconds)
  done (took 2.309863726 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 9.757091356 seconds)
  done (took 11.483395191 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.291249489 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.315905242 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.711540496 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.128924292 seconds)
  done (took 3.210846083 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.73687246 seconds)
  done (took 2.474151271 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.225744416 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.213262821 seconds)
  done (took 2.184307396 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.344391972 seconds)
  done (took 2.064415142 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.12676345 seconds)
  done (took 2.854672321 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.220128087 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.155008482 seconds)
  done (took 2.113728956 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.483446032 seconds)
  done (took 2.21501387 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.383671918 seconds)
  done (took 6.120167143 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.226574127 seconds)
  done (took 2.003771638 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.229944718 seconds)
  done (took 1.967876523 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.174475134 seconds)
  done (took 3.897309603 seconds)
done (took 48.861544924 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.081843617 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084310137 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083894087 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079702031 seconds)
  done (took 2.040203137 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.072608542 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068720005 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.072098259 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.072383363 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069908764 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.071041578 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071219883 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067835016 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069897099 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068997637 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.067387423 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068227014 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073559824 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.068262108 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.0711978 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.072191407 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068887493 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068570599 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070944764 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.068985551 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.071450122 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068935554 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066958601 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.068375452 seconds)
  done (took 3.414712015 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.076779455 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070305962 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073727193 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.069268234 seconds)
  done (took 2.032753736 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.075330358 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.075244794 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.084073065 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.088746762 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.076141202 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.075464278 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.082445223 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.082753092 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063975846 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.085103599 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.066519141 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.065359588 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.065061015 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083524115 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081220785 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.061514114 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.062746323 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075718524 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.0747733 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.078519054 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066861809 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.064190213 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.075352151 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075356261 seconds)
  done (took 3.530982233 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.077927043 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.064214577 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.076767733 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.089035598 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.090449276 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.064534537 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.077642052 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090550868 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.124665769 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.06573325 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069852171 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.064251322 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.101737617 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.064655961 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.079070654 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.106580893 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.108929868 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067959567 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096400901 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.0642058 seconds)
  done (took 3.393154166 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.074193704 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068111603 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068784715 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.064324803 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.075068574 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.071436971 seconds)
  done (took 2.172572165 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.066594658 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.066563838 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.065734203 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.06530405 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.070454965 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.065920575 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064514044 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.066293544 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.066260269 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.065633851 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.065267304 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.064847094 seconds)
  done (took 2.537626736 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.152208343 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.067650556 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.069130055 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064716028 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.069320637 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.065457166 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.079321967 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.067491377 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082746833 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.065481692 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065942051 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067875931 seconds)
  done (took 2.662246254 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0977999 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09877487 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142080711 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113804444 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111770242 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094260324 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116373336 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.091590912 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.155794662 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133297963 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113102105 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121287836 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084812349 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068090008 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097578332 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099276808 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132432002 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07085821 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110461162 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.190897198 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111912149 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.109242047 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119367084 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112845479 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079427715 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119070743 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.092037573 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099664121 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.150386992 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106840339 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116374768 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.09492729 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070255733 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069639669 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143819136 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.097622918 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.132789216 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.090151744 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096666211 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085455991 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103569781 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.067442704 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.084058827 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.103335209 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081627408 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11262121 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.085099338 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100270782 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078517582 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.126748666 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102630741 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095677133 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082855543 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100497978 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125392515 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092841203 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107556248 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103748937 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080449805 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.11499153 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.098441588 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096367848 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090390065 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.228833157 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.157259474 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088317143 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109657013 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110700459 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.081364159 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091034603 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099898805 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.126850287 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10459399 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.104864462 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112246434 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122041368 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106664566 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.090379392 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.126113961 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091170811 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071835266 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102350524 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124972445 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083081274 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097916857 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126325653 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090199816 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105469587 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.089960835 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.115056031 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078907832 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.094245304 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.067921345 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.095381536 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104126258 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098118097 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108556173 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103872533 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076289711 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121064327 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10592115 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071225183 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114295966 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096339883 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148677019 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092982372 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074944523 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097823137 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091200572 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.145894829 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082910866 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078397847 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095644801 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137539733 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091762496 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.165169473 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093630509 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125178567 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093836559 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084935912 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073374599 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.086875552 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098717443 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104814557 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099088031 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087020462 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.075911266 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084942846 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094215153 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090287892 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078450655 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10974722 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.097116057 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.071680212 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.240939667 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.076013772 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122229187 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077052277 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10659249 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121866973 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077311899 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102891333 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125485046 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135512018 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.095242308 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104265454 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13782768 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.113205447 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078628591 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.081835874 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105837679 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.138441396 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.111488547 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083595602 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075499397 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097876879 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108500972 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095653515 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.134928545 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124460259 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106002227 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095173235 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135948266 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115797863 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08985828 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092348917 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094284456 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.120227447 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104373489 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150962928 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092032118 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11519934 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111980268 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135975942 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111023618 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087629369 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083065808 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.092893305 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.101747462 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102899975 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139089187 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.09416147 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071242556 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091100086 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127230722 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074328512 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09738731 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.088558498 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090686665 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115665298 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.081596989 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08055033 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067023364 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099888175 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1325629 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.068287046 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109825594 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110359983 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098817005 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.099726651 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.067190802 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095234786 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.299761507 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103370717 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138518998 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114396342 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099370905 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116123464 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.096925804 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.102681978 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078352749 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122332715 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.130752885 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094853287 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088940927 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132642789 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115295992 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.131006803 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.094488526 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112180421 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.103500828 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097268122 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100751637 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.100489493 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14167335 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120817159 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.124505324 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112708297 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10587226 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105041886 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133058567 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080726125 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113292975 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.073480805 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109558214 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.075876572 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105408701 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.078089561 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.10871937 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078000881 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097523699 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068116463 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.072486505 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137616379 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.109100857 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086888575 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084004329 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.132233861 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.127623801 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.07933913 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098995044 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.131654954 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098155216 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099353688 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107070079 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.083663214 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092918436 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.135683415 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077527348 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.07941384 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.096155347 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092369035 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104320073 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082581884 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073163434 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133043756 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101459077 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.253733235 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106565852 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093797209 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119358794 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088433349 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085990293 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10294236 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102207126 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136738438 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088117793 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.095523299 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.114602164 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07904555 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.091069782 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.068618569 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.083177695 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.074966957 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106591338 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075151501 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106216472 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.068751462 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.1273815 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084756771 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.090677251 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099696 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096363686 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124255546 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090741698 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125247111 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088117094 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099563202 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10531418 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092569299 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108935937 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101446597 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093329585 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107702143 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.094091132 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102989305 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106939913 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092145264 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.13731075 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088172918 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117439138 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103300404 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103960235 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105349114 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115709628 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133434941 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109441444 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138182608 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073254049 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081024761 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103175481 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098359746 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141636134 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10016852 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070931603 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114359175 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088867844 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094355921 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102302708 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080225431 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137628761 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085307359 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.085362857 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110241088 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.087488271 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094742456 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074733895 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092901082 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.096871791 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090532413 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.248755756 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.131480395 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115213295 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111941556 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129071707 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.097465659 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091846319 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.115637345 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108371348 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10881981 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084788689 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084900492 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120680553 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099030738 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.124425108 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.09809342 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09297929 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098563735 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08841723 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096965092 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094929685 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.106815076 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078772292 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.074445574 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.067267258 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071053512 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.115136612 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106133791 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096619 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095777422 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.071049927 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101453206 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095328526 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070974148 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08712499 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094002823 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.123886092 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.082195666 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09093577 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.112090046 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089796094 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101571722 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127925795 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127876127 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.097986265 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08747492 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139369507 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124412971 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086059422 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09031701 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070412652 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077635604 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098998466 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14150723 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115048028 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.076368562 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082262373 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.075961659 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084759735 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.069974112 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.087133838 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.08734824 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101526596 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117242648 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.109806334 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101147459 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074298684 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100870263 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095356726 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090917729 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.094531255 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099177996 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102588782 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.280866592 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099901569 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095794297 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075709475 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.079838734 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074413684 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078250367 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.101172804 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.076483725 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075486392 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12659018 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089569798 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102189011 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10676356 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083100979 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074477876 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129130008 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.068255735 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130614478 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.070223142 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081566261 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.079537215 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07787702 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092236396 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102656139 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093479235 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110590791 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103685117 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102205927 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108819717 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149483331 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.069512353 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.145594687 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074369789 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074288401 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074911234 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109255819 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088158694 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101267056 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137404658 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088215132 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091150453 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076032362 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125229592 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.095842539 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101345092 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081418422 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077452097 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124546039 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077666531 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.069919332 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084922208 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10882559 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.070963241 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.131703329 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112187713 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077871555 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11052259 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.628696201 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088232348 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.074340141 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086903293 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143963265 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124705175 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081325969 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105756771 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.11570486 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087959605 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111993475 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105752963 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.180627627 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073725865 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09248443 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.26129455 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097184183 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091163682 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.090600553 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086538157 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090360755 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084494197 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078767233 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105090299 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086517942 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.089569303 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121032175 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081219635 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.078651083 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.127164815 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101540062 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080083703 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086665175 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.098902374 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08623114 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089135232 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068265824 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140697769 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119062244 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099564981 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.089739147 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105195388 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115335522 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087244634 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109727309 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.087171089 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107613543 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085338562 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079348254 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101607781 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.076652215 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076284034 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115017761 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.08275572 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091495887 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102494411 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.095444451 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112362047 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116070944 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110206373 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098642194 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080936075 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086336168 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.085897313 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074416379 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076684404 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.073538385 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.075000315 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10489991 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08360334 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111225477 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110415529 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082837961 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100320973 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.097631735 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.106735371 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081169336 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098392588 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106448187 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088242456 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101488322 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097318188 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125058347 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141918761 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096875222 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.119684591 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128384576 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.074789852 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.235092346 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.069180259 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143842304 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078637323 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.080142672 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109538659 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12904308 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.080845264 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093397366 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.227250728 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079420248 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.080670053 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095169051 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068786315 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081690172 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105327618 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08394484 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07952245 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097026455 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111203601 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114616578 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10901041 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088246769 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081506518 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080010487 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092210549 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.102692361 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.126693684 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087493924 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.074044195 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103571874 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101426881 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1206534 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071915572 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079450812 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127135527 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090885945 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101487927 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078918395 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117663175 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.128594533 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093767971 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130136736 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069842441 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082067519 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087894357 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.123090219 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073907665 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086969402 seconds)
  done (took 64.339350834 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.150940745 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.140423427 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.081065463 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.096067581 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.185671134 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.194977059 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.116974103 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.094677043 seconds)
  done (took 2.947654863 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 0.067001144 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.08144086 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 0.098460666 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.082714143 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 0.06558827 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 0.067766234 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.200608576 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.084310465 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.065832168 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.106018814 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.075885108 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.067859699 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.350832024 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.065166158 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.066627234 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.074819616 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 0.065959255 seconds)
  done (took 3.546945102 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.358052652 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.629031687 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.320120729 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074678396 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.787011669 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088307379 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.148268777 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.135189002 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.080744396 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.528869639 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.372773095 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.132210649 seconds)
  done (took 18.523519183 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.074890749 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.073418362 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.076573163 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.076634969 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.073453041 seconds)
  done (took 2.238857779 seconds)
done (took 115.141591966 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.081987195 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.168060172 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.06818602 seconds)
  done (took 2.133033105 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.080710889 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.079885605 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.079351802 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.076845144 seconds)
  done (took 2.190461936 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.07334198 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.075029984 seconds)
  done (took 2.012460852 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.219222565 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.171536703 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.087886223 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.081089216 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078900791 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078813502 seconds)
  done (took 2.115448836 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.070983227 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.070497567 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.07142509 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.071044629 seconds)
  done (took 2.14566276 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.066540191 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065361929 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067608131 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.070021064 seconds)
  done (took 2.133639905 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.084276515 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.08182538 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.110434831 seconds)
  done (took 2.140565411 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.082030892 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.081356441 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077159442 seconds)
  done (took 2.108796366 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.107567824 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.095440549 seconds)
  done (took 2.066928024 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081610171 seconds)
  done (took 1.949032852 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.088513368 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096604586 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.138061246 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.104912948 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.137934167 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.123297428 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.07502136 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076557954 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.072060304 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.071306209 seconds)
  done (took 2.849332612 seconds)
done (took 26.264073147 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077528975 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.370778461 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.35888441 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085365032 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.669828867 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.355998412 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.008511169 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089755611 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.09806136 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067151249 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08372927 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.649530193 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.996689801 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.329695886 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.983675224 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.327756359 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651251037 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067347645 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066316364 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067118082 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.992737687 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066497663 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067149822 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067550001 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650457292 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.37347981 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068844441 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.330066386 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067782368 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069754347 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.355993721 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068515816 seconds)
  done (took 16.423327925 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.068839699 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.120170395 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.07106934 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082655046 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.069321061 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068786702 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070424938 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.068388901 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.108289847 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067371931 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083822204 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066639965 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.070717029 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068258888 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086393115 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067573795 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069260142 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068580683 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068071887 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06833236 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086009909 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067533274 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068919062 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071893159 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071861003 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083955615 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071839971 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070991752 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070894521 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072482637 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074076155 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.072705185 seconds)
  done (took 4.273226646 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.119401447 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124547121 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071730947 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.106807064 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.11602365 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.07025597 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.14803515 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.08963041 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112016644 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067332567 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083955315 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067029737 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.101416007 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068793052 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087343332 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068125633 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.06929104 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068659717 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067877063 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068076893 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086271237 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067511377 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068361548 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068312006 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069244693 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08287205 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068601652 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068021556 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067631685 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070239893 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071945883 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069250493 seconds)
  done (took 4.524113164 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.069387153 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.070659151 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.078765882 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.07993885 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.066070949 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.068149242 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.069513482 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.066281909 seconds)
  done (took 2.455325179 seconds)
done (took 29.553148982 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.077558099 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.067420609 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.070451356 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.086287029 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072547729 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.069257991 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063960766 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073152584 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.070769275 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.070203316 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071882198 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065579686 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.068780036 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.064076274 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.07097098 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064805276 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.071232102 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.069264112 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.069392846 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.07232523 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069830886 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.074324609 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076528304 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.073234235 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.073258256 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.073453113 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.077832613 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074692434 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068755606 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070843456 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.071107301 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.083490978 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.0748537 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074713081 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.0691153 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068350819 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072586268 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070633295 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074875052 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.077189867 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.072776687 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076939502 seconds)
  done (took 4.878688665 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.086106087 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.091684069 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.083855655 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080617815 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.104270163 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.080664298 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.088264679 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078364784 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076666237 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.087964825 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.0726958 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.077579079 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.078215122 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.071363827 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.077114559 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.074113496 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.079049115 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.072486875 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.077634557 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.077632527 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.090296966 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073530961 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080458574 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.082404727 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075923898 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.08192553 seconds)
  done (took 3.994166165 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.071629842 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.086439743 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090750311 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.1405755 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.110192998 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.083521532 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084311703 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.104136477 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102180474 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070102454 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073248609 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096872622 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097476225 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.07491992 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.104743502 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084845455 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.079404152 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068408482 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.07419588 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.099539878 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.088767813 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084648474 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.098242574 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086386005 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066643593 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075185847 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073501101 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.081278983 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073965192 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.0787206 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070628254 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.06994139 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067791929 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078851593 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.070720109 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064745291 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.088299395 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.078900972 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081546135 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.104284248 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.076135677 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068438131 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.096473395 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.130126649 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068826943 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.071782964 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072783585 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081576723 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068992185 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096436408 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084739121 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.069445393 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087554036 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070743531 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068846264 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082448559 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068177915 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.068920657 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078110162 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073076828 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.08712609 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.071921385 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.087411307 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.06638966 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078418946 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.067761461 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.067947834 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065385606 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.101766302 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.073878134 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117975478 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.067854015 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064748577 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.078590919 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.077963715 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.073345007 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066416267 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085123252 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.07873417 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070325993 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078541826 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071744466 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.071228213 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.10065088 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.06639872 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.065183983 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.065084941 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068896897 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.069837978 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067028076 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.079667207 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.065945962 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.069507886 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081563999 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.066357521 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067224718 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.068922732 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.067800865 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.065962664 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.076903997 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.070303815 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.068030568 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.078580259 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.067343402 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.06935974 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.080389076 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.075329452 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066508264 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068236824 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.068970788 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.068080921 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.070809514 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.069626832 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.068651835 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.07352102 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.073384864 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.071688751 seconds)
  done (took 11.051460309 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.157764754 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.149587631 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070417504 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.144221984 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077665057 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073535641 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.146916307 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.087265472 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067354042 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068468243 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.067074555 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.094572801 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.089573396 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.103868072 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.071416038 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067744635 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.091662448 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.099871418 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.145975708 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.141679594 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.090082256 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.075143058 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069816343 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069139772 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068939128 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.075793491 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.08401757 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.075123704 seconds)
  done (took 4.556442759 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.074718249 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.109491061 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.071349077 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.091375987 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.085498514 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.068016231 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.06975074 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.068548019 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083659668 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.074748772 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.067024779 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071295259 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.070877314 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.069759608 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067895946 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073503838 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073525282 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.066117802 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.071300705 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071480964 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.07710157 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.091801588 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071388085 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.067049189 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.07015881 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067069307 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073741992 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.076747563 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066786744 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.096486839 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.06475434 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071289999 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081018668 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.068123325 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.067139647 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067777944 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067456449 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.06778942 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067754077 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.06552687 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065220324 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.07231222 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.06601042 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.073394283 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081009705 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.074701982 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068430541 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069995352 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069698401 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064342199 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070409709 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.0704663 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.069736392 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075552724 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070459373 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069945899 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068758246 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.095637796 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073408312 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066953242 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066137559 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.066240561 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069500304 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075179953 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.083445744 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069215006 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065577405 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067451018 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.072195303 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.080974903 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066715193 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072549239 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064079318 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067405954 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069467827 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070002449 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068658716 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065696754 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067373145 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067200498 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067625321 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066496799 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.066700951 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070250794 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.06503848 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065857874 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.067506454 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.06840533 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.073327196 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.065913353 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069732433 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068573238 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066141812 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.069878644 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.072052561 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070216531 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.086068716 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075894141 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.067804344 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065222572 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.081005012 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.068992568 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.0661331 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.072300676 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.071132885 seconds)
  done (took 9.452239971 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.089116733 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.06901239 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086629811 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.093060445 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.077515831 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.072662262 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081129059 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067929838 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.083081004 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.066705443 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.076063722 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.065906673 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080466184 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.0763936 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068751219 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077424943 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.069563361 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.0867241 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081258759 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.06599941 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075995829 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.079302415 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.078965707 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.084926885 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084038885 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.084753835 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078913175 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.06959706 seconds)
  done (took 4.114087203 seconds)
done (took 39.919032116 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.948235577 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.121232265 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.950479694 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.16120395 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.194682251 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.069202807 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.073041012 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.948645363 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.072772044 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.978236716 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.27441157 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.366623486 seconds)
done (took 69.104868418 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.978618566 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.091979412 seconds)
    (2/2) benchmarking "String"...
    done (took 2.165262623 seconds)
  done (took 6.140372837 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.550903969 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.94976985 seconds)
    (3/3) benchmarking "different"...
    done (took 1.999555232 seconds)
  done (took 8.381462753 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.086440548 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.971971714 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.202079447 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.946211284 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.950600212 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.345271093 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.750111541 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.412115351 seconds)
  done (took 32.461669133 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.078922857 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.143092667 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.648703274 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.675216513 seconds)
  done (took 16.466945569 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.551180454 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.204864203 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.206421444 seconds)
    (4/4) benchmarking "different"...
    done (took 2.205070559 seconds)
  done (took 11.095256604 seconds)
done (took 86.586163295 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.976943514 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.939232574 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.967379758 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.966795615 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.93882165 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.941397063 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.944714333 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.9399854 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.969799252 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.963358466 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.937093797 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.953109616 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.937795233 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.948618332 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.525457808 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.984003211 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.946471826 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.93883083 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.94440549 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.976101132 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.940800429 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.091116303 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.436634933 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.133419205 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.549952719 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.424237862 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.05185991 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.370205472 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.942234031 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.932396216 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.994207146 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.369593801 seconds)
  done (took 209.751095538 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.932640641 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.75780353 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.859820968 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.936392807 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.19347734 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.124130645 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.0726213 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.289717863 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.937212324 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.942591682 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.067013932 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.946800367 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.088938818 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.874249542 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.92863631 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.967265726 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.087349933 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.104169644 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.932339562 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.107143211 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.945522152 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.927422204 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.879605629 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.05348331 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.963614648 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.995826562 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.932963653 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.942567013 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.119191835 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.04723256 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.93365039 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.949891204 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.093090199 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.792897086 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.948882783 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.957900437 seconds)
  done (took 174.500383671 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.101972548 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.938065296 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.930282798 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.984460302 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.066418174 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.932264282 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.608885771 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.940244379 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.226054725 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.932395427 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.929283084 seconds)
    (11/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.929672021 seconds)
    (12/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.930202779 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.941043716 seconds)
    (14/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.929659222 seconds)
    (15/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.021981804 seconds)
    (16/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.933654136 seconds)
    (17/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.944920896 seconds)
    (18/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.93285659 seconds)
    (19/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.929978039 seconds)
    (20/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.954766069 seconds)
    (21/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.929527982 seconds)
    (22/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.928599848 seconds)
    (23/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.929640093 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.930388303 seconds)
    (25/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.93150519 seconds)
    (26/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.930331778 seconds)
    (27/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.931344517 seconds)
    (28/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.932778606 seconds)
    (29/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.930531934 seconds)
    (30/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.19732579 seconds)
    (31/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.174059937 seconds)
    (32/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.932357141 seconds)
    (33/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.931503028 seconds)
    (34/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.185224434 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.945977234 seconds)
    (36/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.074021462 seconds)
    (37/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.936745174 seconds)
    (38/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.021643965 seconds)
    (39/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.987290225 seconds)
    (40/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.03353307 seconds)
    (41/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.934456727 seconds)
    (42/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.150212766 seconds)
    (43/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.012279479 seconds)
    (44/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.933020918 seconds)
    (45/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.932417128 seconds)
    (46/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.993869793 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.945388849 seconds)
    (48/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.932450163 seconds)
    (49/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.931582677 seconds)
    (50/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.933866976 seconds)
    (51/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.940895089 seconds)
    (52/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.994224198 seconds)
    (53/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.18231086 seconds)
    (54/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.935837853 seconds)
    (55/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.067847902 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.437107443 seconds)
    (57/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.933914724 seconds)
    (58/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.931911085 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.931752684 seconds)
    (60/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.562754634 seconds)
    (61/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.935644915 seconds)
    (62/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.932431282 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.939620031 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.942573742 seconds)
    (65/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.933218061 seconds)
    (66/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.93448711 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.322804264 seconds)
    (68/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.00440184 seconds)
    (69/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.933409706 seconds)
    (70/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.371589998 seconds)
    (71/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.169933724 seconds)
    (72/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.935336255 seconds)
    (73/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.488375927 seconds)
    (74/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.003816452 seconds)
    (75/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.933608391 seconds)
    (76/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.932458918 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.931660072 seconds)
    (78/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.934342613 seconds)
    (79/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.932302811 seconds)
    (80/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.936142198 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.067530537 seconds)
    (82/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.942378083 seconds)
    (83/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.045058405 seconds)
    (84/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.01607843 seconds)
    (85/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.932941107 seconds)
    (86/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.068252549 seconds)
    (87/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.934925241 seconds)
    (88/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.943971589 seconds)
    (89/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.735161276 seconds)
    (90/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.004757115 seconds)
    (91/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.970399547 seconds)
    (92/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.750398865 seconds)
    (93/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.935739519 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.309022895 seconds)
    (95/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.698605122 seconds)
    (96/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.936687627 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.933777529 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.945449617 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.933826172 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.935499752 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.934761069 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.012820932 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.934251098 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.069152871 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.654762194 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.21997978 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.937118076 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.934411172 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.942053698 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.014255618 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.068779751 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.936231425 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.99727294 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.942007679 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.938084942 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.021687594 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.934929359 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.935755411 seconds)
  done (took 427.149066311 seconds)
done (took 815.421485638 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.663519722 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 2.555548573 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.696621455 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 2.566904444 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 2.541821234 seconds)
  done (took 14.893995308 seconds)
done (took 16.764697229 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.964212886 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.951071659 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.940862578 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.988805776 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.957225934 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.944802138 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.976576499 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.974780513 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.963810251 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.943932659 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.983787046 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.947117495 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.963932364 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.966058673 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.008250959 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.970836794 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.948926782 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.941877306 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.988044744 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.947865878 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.950017177 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.946299216 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.946427077 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.980943123 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.016169414 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.954048793 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.944704332 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.97996703 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.95426191 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.980265667 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.000960148 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.966336106 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.980381093 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.009080081 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.99234675 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.013386777 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.954432425 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.000424131 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.95263203 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.016846013 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.990973997 seconds)
  done (took 82.675400747 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.945657824 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.077459049 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.154205691 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.976812499 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.943964771 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.15689614 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.001382761 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.071482701 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.078662776 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.161105996 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.177453823 seconds)
  done (took 24.614397321 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.944938641 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.091762934 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.162452396 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.978715723 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.968667559 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.161850905 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.008805907 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.077986257 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.083067334 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.161748018 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.169898628 seconds)
  done (took 24.689643577 seconds)
done (took 133.849321893 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.315786318 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.16201339 seconds)
  done (took 6.346593188 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.961598127 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.095238488 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.945076524 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.942975777 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.944957745 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.942222585 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.945408326 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.942639816 seconds)
  done (took 17.593495312 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.942411005 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.947951023 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.943795381 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.943404604 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.942398921 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.944812492 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.943543071 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.943257373 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.944423751 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.943201528 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.943723225 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.943018852 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.944727335 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.94383943 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.942885178 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.943319002 seconds)
  done (took 32.97452751 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.946517502 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 1.944138517 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 1.943223509 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 1.943401207 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.94434832 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.945898856 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 1.946296311 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 1.943801843 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 1.943524103 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 1.94459418 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 1.946988252 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 1.943956577 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 1.943712476 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 1.944620538 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.944543506 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 1.945135481 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.944123186 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 1.943886408 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 1.947398334 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 1.944177444 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 1.944757817 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 1.945189922 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 1.943527844 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 1.944401686 seconds)
  done (took 48.546388503 seconds)
done (took 107.339510223 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.188123608 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.515008939 seconds)
  done (took 8.578228198 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.946705109 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.947647466 seconds)
  done (took 5.836326791 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.945680463 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.94584694 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.94622995 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.946061911 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.947335215 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.94427881 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.945384687 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.950029864 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.945515785 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.947326758 seconds)
  done (took 21.337975852 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.945634969 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.944997188 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.944894303 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.947568575 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.946712954 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.946029504 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.947615664 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.946196303 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.947850202 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.946424492 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.94791378 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.949128382 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.94847733 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.948735219 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.94801037 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.947994461 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.947655387 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.947282201 seconds)
  done (took 36.927254733 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.947292119 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.947966743 seconds)
  done (took 5.772447314 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.946489585 seconds)
    (2/7) benchmarking "second"...
    done (took 1.94662447 seconds)
    (3/7) benchmarking "month"...
    done (took 1.947939708 seconds)
    (4/7) benchmarking "year"...
    done (took 1.949508765 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.949284726 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.947531879 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.948848305 seconds)
  done (took 15.513733441 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.94707244 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.09175001 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.143374232 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.550017989 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.948137385 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.952879071 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.844384009 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.95174037 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.952010525 seconds)
  done (took 21.259259481 seconds)
done (took 117.100898713 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.805805005 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.94924181 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.211029325 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.093286298 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.97045822 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.243686121 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.959922898 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.554176254 seconds)
done (took 43.665366508 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.014951318 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.949857069 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.980219449 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.980401058 seconds)
  done (took 22.788320221 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.948924037 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.264912959 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.971992447 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.859446539 seconds)
  done (took 22.937272809 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.327604284 seconds)
    (2/2) benchmarking "read"...
    done (took 2.299065153 seconds)
  done (took 6.510512414 seconds)
done (took 61.132065036 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.949119112 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.951110694 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.949653743 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.952066988 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.949248132 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.948387493 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.951100942 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.950911661 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.949071571 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.951308401 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.951701817 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.949792277 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.951533703 seconds)
    (14/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.950584843 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.950999098 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.949760668 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.950632427 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.950121545 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.950477485 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.949884631 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.949832474 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.951270758 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.950873666 seconds)
    (24/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.950562185 seconds)
  done (took 48.688444375 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.949568095 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.951545273 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.950274777 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.953978061 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.951107596 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.951896051 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.953236839 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.95039357 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.951121676 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.950424027 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.952842674 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.952568578 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.949834247 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.952091089 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.950847556 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.952236309 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.95692855 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.952533177 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.950590545 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.952141201 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.950457725 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.951848129 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.954067112 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.954268885 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.952603383 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.953082004 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.951270031 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.95397548 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.951743201 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.95255956 seconds)
  done (took 60.443774228 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.952326527 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.953522859 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.951711986 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.9528728 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.955443439 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.95161646 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.951350815 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.953933196 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.952557802 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.953422126 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.956048819 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.953333634 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.954328667 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.957275743 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.954636343 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.953368777 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.954669181 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.953090847 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.954301966 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.955745833 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.953686281 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.953997928 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.956759898 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.953308487 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.956451986 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.953099286 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.955922259 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.953578636 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.953390394 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.954149468 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.957201863 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.955185737 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.9555176 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.955154774 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.953488412 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.954385571 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.955584342 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.955783969 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.959411601 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.954649287 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.958534625 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.955041513 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.956264225 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.95516477 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.956398872 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.956729017 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.95610436 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.955998598 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.956078454 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.954605016 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.955055022 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.955778303 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.956545047 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.955751003 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.954994295 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.955381556 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.956011536 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.956328364 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.956549473 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.955442263 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.955972447 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.955551618 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.957155978 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.955483787 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.956259215 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.957287682 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.955575487 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.956250453 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.958340667 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.95709825 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.956937727 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.955049122 seconds)
  done (took 142.65739769 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.956462833 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.957560199 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.958346396 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.957450258 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.957836964 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.957065161 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.958782757 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.956019426 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.956499516 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.958479445 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.955959582 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.957201947 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.957306137 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.956816428 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.956502301 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.959530853 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.960300114 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.956372747 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.955172015 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.956694422 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.957446243 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.958520029 seconds)
  done (took 44.947787849 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.958112008 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.957507433 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.95652673 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.957832914 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.957478715 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.959571273 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.956641168 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.958170299 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.957185383 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.96027309 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.958026134 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.961050136 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.960392314 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.95751258 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.959867934 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.960859236 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.959710459 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.959454963 seconds)
  done (took 37.142669369 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.960580168 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.96049734 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.959594205 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.959149225 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.959377969 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.959907253 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.959299666 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.959982559 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.959969427 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.96056863 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.962104407 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.960125965 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.960866302 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.959345521 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.959393591 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.962561379 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.959843355 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.96008621 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.960415841 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.957676419 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.962172017 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.961538509 seconds)
  done (took 45.012439689 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.960119196 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.961249346 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.961682573 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.961613759 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.961201388 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.962613468 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.959191073 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.96371365 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.960210448 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.960083074 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.961285517 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.963409563 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.96056815 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.959799256 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.96416255 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.962083549 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.960237495 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.961792935 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.960337689 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.960585045 seconds)
  done (took 41.114555041 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.965546549 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.96281419 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.964673553 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.965554527 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.966309992 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.96514077 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.963710993 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.96656797 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.963609735 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.964388881 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.966312965 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.964499973 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.964308006 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.964713736 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.96393194 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.965247437 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.963258018 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.964982581 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.965324723 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.964980535 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.96422427 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.965039926 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.965310235 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.965900606 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.964559263 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.964355739 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.964713652 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.965176102 seconds)
  done (took 56.907090126 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.965201481 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.965284092 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.964878101 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.961397231 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.96158281 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.964799249 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.963005348 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.963271757 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.96645063 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.962469428 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.966216645 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.96356995 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.962797267 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.962476507 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.965550045 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.964299774 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.963281382 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.964409815 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.96300199 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.963087396 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.965764941 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.96327658 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.962698787 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.963004307 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.96338669 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.964514408 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.963945606 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.963977627 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.965426466 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.967597491 seconds)
  done (took 60.81037713 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.98204289 seconds)
    (2/2) benchmarking "in"...
    done (took 1.985405635 seconds)
  done (took 5.863627425 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.96666169 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.965954022 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.968735907 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.964204051 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.965722831 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.968528502 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.967446381 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.964210831 seconds)
  done (took 17.626256957 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.965116822 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.967363488 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.96301735 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.969074859 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.969612479 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.973495092 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.968051291 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.969388548 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.968350105 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.967244444 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.971608022 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.971766385 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.978227794 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.972728966 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.969706018 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.966807575 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.968245646 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.968119744 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.967786913 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.966213336 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.967978878 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.969316343 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.965052153 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.969133712 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.965621479 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.969443926 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.978688215 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.971369622 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.969800361 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.968868376 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.977216988 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.966680056 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.969707345 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.970578438 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.9727168 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.968614877 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.976136965 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.972205328 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.969842557 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.9682377 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.970285861 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.969479958 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.969893632 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.981190279 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.972062405 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.969750343 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.970411365 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.971334611 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.968814799 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.97316569 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.978326501 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.968440252 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.968900737 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.970914018 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.972433284 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.971620926 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.970893569 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.97199033 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.979830818 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.981595197 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.974933139 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.99068301 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.981475955 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.972538325 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.971500704 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.982379739 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.994351609 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.972677105 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.973099344 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.970133993 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.979748628 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.97202328 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.968431125 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.970089754 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.98712757 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.980085553 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.973184962 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.972687946 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.972720357 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.976575707 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.972014728 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.972358543 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.969414476 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.972990925 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.98232796 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.993362827 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.974340689 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.976520958 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.971853848 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.972368501 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.979224383 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.971728652 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.971600129 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.971568484 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.97377578 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.975326328 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.974697798 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.975630014 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.971011501 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.983521003 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.974476523 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.972364309 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.975763463 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.985385982 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.972778136 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.975439357 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.973847158 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.972990815 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.980422667 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.975320078 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.976794769 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.974311115 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.974402647 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.982578139 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.974216666 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.979852893 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.982520687 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.980887479 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.97620535 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.977537917 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.979470815 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.975807185 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.985378675 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.999933559 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.973464155 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.978465963 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.981564871 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.990062156 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.977326581 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.976793342 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.976058253 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.977409992 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.975216009 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.975083412 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.976047182 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.975921592 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.974029194 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.97616668 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.975095419 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.975858279 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.976575316 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.976851975 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.975735683 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.978200631 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.978502695 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.977065403 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.976550844 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.982231005 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.974317885 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.97949334 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.975173334 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.975832792 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.978589861 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.978154443 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.97550889 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.975337318 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.978654817 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.975227239 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.97792711 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.980103503 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.97688678 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.975589084 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.979269149 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.979526599 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.977273858 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.97746058 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.978790759 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.978268188 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.978022841 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.976333777 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.977628288 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.976298901 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.980851729 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.976747089 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.978505776 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.979419154 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.975000919 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.972790597 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.979835095 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.98697395 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.978382171 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.983777144 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.974825994 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.982043501 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.979000038 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.975791812 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.975866553 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.980928616 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.977817012 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.974281241 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.978467904 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.981574743 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.999698518 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.988876593 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.980459452 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.981240298 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.983506527 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.981816833 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.983626375 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.978859796 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.977780054 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.981272537 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.978938022 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.978941994 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.977128866 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.982208163 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.978266719 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.97793032 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.980128797 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.979305358 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.978963812 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.978591765 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.979167156 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.979612061 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.976943055 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.978459396 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.976892905 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.978508281 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.987172538 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.98168698 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.977237422 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.980264765 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.980204089 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.983163503 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.978357926 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.980926485 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.983535136 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.98144426 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.979750509 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.988108978 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.97868317 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.978079856 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.978618407 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.977495037 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.980370168 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.980795635 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.981381359 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.990541502 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.981699304 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.980077354 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.985498653 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.978267823 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.980889222 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.981403654 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.981901651 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.982070059 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.984181395 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.983386768 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.981121166 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.986250552 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.979619709 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.979597107 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.98082519 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.980357448 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.98175419 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.982496089 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.982902107 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.984740482 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.992496279 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.986129008 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.980660562 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.98281169 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.983205803 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.980750412 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.985246684 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.980870272 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.994135731 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.990526297 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.979893738 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.9797179 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.984273373 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.985813838 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.981734157 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.985537274 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.988015936 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.981167396 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.983986869 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.987056253 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.982988802 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.985603484 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.988598037 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.984256679 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.983701167 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.983753639 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.982161111 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.981221953 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.982139378 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.98439098 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.984208274 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.983483376 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.985325543 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.981852116 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.980933716 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.983220367 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.990399291 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.981821381 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.983373615 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.989344434 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.984437193 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.98210503 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.982527843 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.983828342 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.983101134 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.984115446 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.98218822 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.984625953 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.984864293 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.985726238 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.99274377 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.985719987 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.993938607 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.984871035 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.993446377 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.98502285 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.982429558 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.986240592 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.985696667 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.997011834 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.983109482 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.982157433 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.990562681 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.982881966 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.98111995 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.989133213 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.983742035 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.983440188 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.985527547 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.983394672 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.987452716 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.986716473 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.98200286 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.985778615 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.982684876 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.983620017 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.985589103 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.984072979 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.98517372 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.984010262 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.983473718 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.986422912 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.985578044 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.986850405 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.986348265 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.982958792 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.983525544 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.992830068 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.986727184 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.984255984 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.991347562 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.984918189 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.993775129 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.987798625 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.986559874 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.984650026 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.985488907 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.987321394 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.986024972 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.985772945 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.985025135 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.985466692 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.987992362 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.998858974 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.991761731 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.988882799 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.986357153 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.98789908 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.986657444 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.994205016 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.00922462 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.987567094 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.986594776 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.991758219 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.991737191 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.989221212 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.990720376 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.989436321 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.998055023 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.988077258 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.984756784 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.989483362 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.999108131 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.989244016 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.988142305 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.98684893 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.99107834 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.988403806 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.98569234 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.987126948 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.989145949 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.987297719 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.998149078 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.986553229 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.987087332 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.988883831 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.986970022 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.988225956 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.987932232 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.987730395 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.988874613 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.987848623 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.989440071 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.988053613 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.992553965 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.986638603 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.989906186 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.997048431 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.989191648 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.990182445 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.988855175 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.990786867 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.989182124 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.990656539 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.987744204 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.99012505 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.9870124 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.988981966 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.992108248 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.995733238 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.988952909 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.987813685 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.987709547 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.99227526 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.987691258 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.989247541 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.990660645 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.996254389 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.992018096 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.0012984 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.99760274 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.990611673 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.99043692 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.99587691 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.999367115 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.991601238 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.989681332 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.991320042 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.991224883 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.992406546 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.989424325 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.990889378 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.990174756 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.994734456 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.991576746 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.989814191 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.992495628 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.990311094 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.992709276 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.992184282 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.994141441 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.991714509 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.988965601 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.988307008 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.990397646 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.99176266 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.992280527 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.993860991 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.991174285 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.993409806 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.99152487 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.994911531 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.989234718 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.989910685 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.99238239 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.991151219 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.991383074 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.991208983 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.991009411 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.991364083 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.994041169 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.000283375 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.990909566 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.99294599 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.992955943 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.994611524 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.994157723 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.993149699 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.992766351 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.992682874 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.000707138 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.991698636 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.993001959 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.991575831 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.991990044 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.997974598 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.993369837 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.99771728 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.992507817 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.9920398 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.991890564 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.99518043 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.001097221 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.000425918 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.99623429 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.000774407 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.996335756 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.994228632 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.99193951 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.99207787 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.992801789 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.993315008 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.996174434 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.992695022 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.996195194 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.457635316 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.995134422 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.996467878 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.993663601 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.993566824 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.993921982 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.99938209 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.004281045 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.002704957 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.993391801 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.995186392 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.998636401 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.996977505 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.00766485 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.997052987 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.996492374 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.99981823 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.995540529 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.992691616 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.002531612 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.002372965 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.999666165 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.996162821 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.999828898 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.013949422 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.995700564 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.005166617 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.024428265 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.997027127 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.998622942 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.994258918 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.995732218 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.996906601 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.999116539 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.998075612 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.002770084 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.997478704 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.996029626 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.002273873 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.996507739 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.99493196 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.997789416 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.995720392 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.001179181 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.995639323 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.002178795 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.997678913 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.99588355 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.995229396 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.999469714 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.995564534 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.997862542 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.996596823 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.998425969 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.996187674 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.997590727 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.005503093 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.996683722 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.998501028 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.009525846 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.008651116 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.998808169 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.997864077 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.000066228 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.002413743 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.999666361 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.996985812 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.999298414 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.005408889 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.002845802 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.00648314 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.999661652 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.997638822 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.998189528 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.997076206 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.999522519 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.009610977 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.010225905 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.997524027 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.997510541 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.002893172 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.999190828 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.003726927 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.005950137 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.000300616 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.999286575 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.999775028 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.997399759 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.997731358 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.998402242 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.002485881 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.007907627 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.002405418 seconds)
  done (took 1185.683866159 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.998848268 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.997312395 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.99741546 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.998848869 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.998223198 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.998353916 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.998665876 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.00088278 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.997686379 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.999681653 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.001192668 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.99953603 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.998651067 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.998641412 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.999597343 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.000206805 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.998405118 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.998162332 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.998921661 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.998541899 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.998523414 seconds)
  done (took 43.902406041 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.998448748 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.999197461 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.999839521 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.999172556 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.998930296 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.998592996 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.00011696 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.998305436 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.999512426 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.001947695 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.001673992 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.000287553 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.000855666 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.000787077 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.000384407 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.000250547 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.999757413 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.000964196 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.001217342 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.0009307 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.001877533 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.001081838 seconds)
  done (took 45.931365794 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.003292917 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.00316174 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.00067652 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.002950347 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.001381051 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.003896845 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.001366186 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.005122894 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.001447371 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.002429766 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.011630109 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.012538375 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.001120519 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.004067721 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.003326894 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.003650758 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.145949461 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.003588803 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.003920193 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.001755064 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.004537988 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.01028768 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.003401103 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.001820142 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.001995525 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.004733746 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.002192092 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.001719595 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.002680315 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.003598594 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.010259874 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.002295105 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.006186147 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.007170631 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.003239931 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.004768012 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.009773081 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.004858987 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.001783226 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.003134798 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.012517621 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.027498095 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.003171151 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.00645835 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.010182631 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.004012324 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.00283632 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.005258694 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.012501022 seconds)
  done (took 100.321472418 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.00259912 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.004710683 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.003177325 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.003238372 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.00448403 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.002519027 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.005507731 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.003426086 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.003012694 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.003500825 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.003974797 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.003573786 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.004796076 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.003761301 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.004305275 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.004537326 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.004800451 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.003531495 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.005342983 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.004978259 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.004477711 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.004915999 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.005579768 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.006116719 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.005582322 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.004620094 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.003622037 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.004886837 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.004386172 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.004325503 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.00496048 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.004046777 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.005075231 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.006208579 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.004596416 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.005622695 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.005388973 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.005647637 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.005046375 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.004166463 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.005351664 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.005969316 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.005344698 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.008853929 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.006375519 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.00901619 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.005840048 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.006463903 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.006632011 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.00562031 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.005119677 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.005973757 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.005300223 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.007375504 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.006544578 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.00657352 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.007784673 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.006499065 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.006057626 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.006402117 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.006640667 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.006543379 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.006621209 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.006630983 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.006992875 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.006623576 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.008233246 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.006674915 seconds)
  done (took 138.296926349 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.010163527 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.009964792 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.00947081 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.010305327 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.010361771 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.00997411 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.009780542 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.012550421 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.010404433 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.010255808 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.00845899 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.006828798 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.008898439 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.007504199 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.009928521 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.009799626 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.010024105 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.009851931 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.009431839 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.009341058 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.010230379 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.01026605 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.009584922 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.011005788 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.011006565 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.010572408 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.0107953 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.009732183 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.011532772 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.010446779 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.010319282 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.010938 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.010935587 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.010507273 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.011980021 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.010975523 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.010917152 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.010955637 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.011558985 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.011950978 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.011034521 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.011539241 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.011834827 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.010896578 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.012006628 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.011678246 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.011919802 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.011620263 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.009383128 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.013098751 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.011959517 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.012426341 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.01177037 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.011740353 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.012440434 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.009185682 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.013023355 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.012619042 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.012285633 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.012050671 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.011513187 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.010352913 seconds)
  done (took 126.602413097 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.010572548 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.009652881 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.010515777 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.012992923 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.009794818 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.010245463 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.010770253 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.010352342 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.010913983 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.010664619 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.011688604 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.011500518 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.012849859 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.010906732 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.011532492 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.012569563 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.010844524 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.011602431 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.011597247 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.011813091 seconds)
  done (took 42.160976645 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.011469655 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.011452297 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.011730988 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.011394602 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.012620441 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.012028107 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.011302697 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.012384807 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.011522674 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.012798806 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.011975539 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.011142913 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.012565008 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.012214348 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.010481702 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.011142857 seconds)
  done (took 34.127353961 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.012139505 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.012959208 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.014428469 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.014356353 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.012947114 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.012853662 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.012767161 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.013252569 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.012519216 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.013895472 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.012517434 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.012192535 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.013454555 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.014193898 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.014294727 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.013044032 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.012701576 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.012867538 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.012701407 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.015335969 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.014405197 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.013377439 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.013211332 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.013105785 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.014069941 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.013996119 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.012822156 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.01337819 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.013438083 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.013896008 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.013653071 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.014511437 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.014699811 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.014812758 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.015843647 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.014109743 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.013931714 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.014538956 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.014216521 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.013776237 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.014285816 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.015042894 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.014573916 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.014048963 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.014094009 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.0153851 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.01458196 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.014395437 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.014384333 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.015927144 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.01421953 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.016798229 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.014914772 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.013975743 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.015301494 seconds)
  done (took 112.708085456 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.014672961 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.01366717 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.015213945 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.01503704 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.015362883 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.014311427 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.014331569 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.014882053 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.014918019 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.015326026 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.015560306 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.014919797 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.014363845 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.015744113 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.016437785 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.015973063 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.015426408 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.016070283 seconds)
  done (took 38.214723162 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.017059258 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.016268343 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.016405389 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.014590505 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.015895021 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.015619483 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.016602051 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.015632812 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.016174049 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.015736921 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.014933814 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.016759959 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.01601331 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.015567444 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.017376158 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.01552982 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.016677174 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.015896678 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.016868192 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.015934844 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.017347987 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.016474524 seconds)
  done (took 46.300452757 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.018843305 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.016769642 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.03223038 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.037255092 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.037098298 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.050677141 seconds)
  done (took 14.136586026 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.017636453 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.017704341 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.017362763 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.016960551 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.017586245 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.018081442 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.017770872 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.017722063 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.018046103 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.018237183 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.018384677 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.017971578 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.017983698 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.018142955 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.019303769 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.018769515 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.018671257 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.018737098 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.017786148 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.017655883 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.018699305 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.018113387 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.019047748 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.018774896 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.019017708 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.019281655 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.019148388 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.019630759 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.019177328 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.019554674 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.020755048 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.020512632 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.019507746 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.019737082 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.020070037 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.020080429 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.020472303 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.019989402 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.020116173 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.021378256 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.02024653 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.020516747 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.021486877 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.021314522 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.02102483 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.020948184 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.020151543 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.020493995 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.019680342 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.020748867 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.021032425 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.020603482 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.021084041 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.020161159 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.020177611 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.020397355 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.021468433 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.020162588 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.021435053 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.020982282 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.020327918 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.02065377 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.020881183 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.021480949 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.021517693 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.021673453 seconds)
  done (took 135.241583365 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.020141273 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.020763334 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.021374383 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.022077158 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.021443361 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.020893986 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.022529491 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.021886578 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.02162246 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.022365731 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.022527797 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.021129328 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.02229643 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.022678294 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.022693086 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023127214 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.022375059 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.023190809 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.021795071 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.02310681 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023239253 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.02240787 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.022958605 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.022199318 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.023031005 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.022835804 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.022889963 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.022308912 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.023980738 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.025437435 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023459435 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.022799826 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.024190248 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.022389045 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.023770012 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023444767 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.023242157 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.023778545 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023540628 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.024220825 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.022828179 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023234669 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.024835978 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023589691 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.02417049 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.024351105 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.024062344 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.024684672 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023283333 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.023402781 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.025359776 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.024316141 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.024546934 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.024972339 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.025132805 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.024922073 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.023463985 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.024841489 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.02421741 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.025094257 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.025063906 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.024427628 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.025081673 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.024652034 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.024804364 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.026150422 seconds)
  done (took 135.493205398 seconds)
done (took 2762.224729133 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.093278214 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.091552959 seconds)
  done (took 16.136491442 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.187724542 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.14135485 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.025983137 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.072168976 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.028212649 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.035710745 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.034798618 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.027180653 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 2.027436391 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 2.028025137 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.02789606 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.212765032 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.069869898 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.027102506 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.028686604 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.119052985 seconds)
  done (took 55.049368537 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.032178606 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.031764486 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.042178155 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.032624315 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.032260287 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.043948806 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 2.063645564 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 2.036968327 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 2.068978689 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.045678766 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.10384343 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.042858998 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 2.032416045 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.083505921 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 2.046214085 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.047560459 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 2.13005625 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.109733217 seconds)
  done (took 38.979472774 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.1118472 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.04950853 seconds)
  done (took 11.122956376 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.050336364 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.05882074 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.061269079 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.06055866 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.040653271 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.057461991 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.044967951 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.025609027 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.0290845 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.045057072 seconds)
  done (took 72.430210927 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.033872722 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.033494166 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.034562207 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.030164508 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.026719824 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.032901344 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.029847381 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.027709166 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.715699808 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 2.068899337 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 2.040652978 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.039424841 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.030605544 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.032011144 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.031168445 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.059703712 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.198438997 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.031724176 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.030189929 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.040566097 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.032522722 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.110630792 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.0451653 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.03475996 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.06483972 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.719502217 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.044922902 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.039603321 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.253662605 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.030784857 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.034226024 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.192269791 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.037634136 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.404062799 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.357487259 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.037282876 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.044277102 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.041896505 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.033827981 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.205190183 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.033753875 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.039416036 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.955661051 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.325875826 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.120942508 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.081711556 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.403704169 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.034424139 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.033551564 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.064397419 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.03905991 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.033036577 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 2.050610644 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.542941439 seconds)
  done (took 142.049520034 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.03088696 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.264238835 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.180478167 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.03012308 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.2872383 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.237574079 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.030309748 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.068640571 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.025586776 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.223968157 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.271739896 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.127512959 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.023723107 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.02217488 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.017612871 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.017763974 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.162310388 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.083547053 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.022412843 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.014603136 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.041022746 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.217440083 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.135063089 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.01660285 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.038351071 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.2192869 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.12965902 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.111820426 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.787776071 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.006851357 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.069949741 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.007630028 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.006411071 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.00359829 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.155940715 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.095610672 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.090316221 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.004636219 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.001821211 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.001496057 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.676679465 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.198966701 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.097360494 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.124825729 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.250271121 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.21662899 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.610813798 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.997999201 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.618856696 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.162446173 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.201335696 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.206445097 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.114176573 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.995420775 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.285856524 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.994612124 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.992930265 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.210929999 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.210992754 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.088137456 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.993736322 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.989709047 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.986372377 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.228665285 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.991074353 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.079048956 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.992618004 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.986999955 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.080844763 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.091010215 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.215925423 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.209240021 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.021231374 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.308558013 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.482321013 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.194155186 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.055266427 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.209365129 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.993590756 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.986688297 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.069065752 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.830938946 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.242239442 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.23158608 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.19105849 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.020109313 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.640262652 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.990227034 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.178154311 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.181285578 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.225929448 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.234011949 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.22413691 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.336471633 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.990413864 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.991225843 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.292034221 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.10496234 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.944109421 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.340952919 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.218675129 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.481879497 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.018045356 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.276017954 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.120772665 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.991967825 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.639743047 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.991727835 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.194968267 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.032760138 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.993778694 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.993130107 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.180960409 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.914786701 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.993625922 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.690998785 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.052088652 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.99763769 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.196608394 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.99415052 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.234940236 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.994659161 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.225742835 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.62509464 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.020824213 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.1655936 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.234012545 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.626749439 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.283357118 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.235116851 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.105763414 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.212708438 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.80404917 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.991836437 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.254592963 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.995562946 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.993342749 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.162402785 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.99437096 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.135240901 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.993727301 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.262395557 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.01369177 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.221095271 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.993350529 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.233870823 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.023099654 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.042142036 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.998693923 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.116965 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.994283731 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.932865835 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.151020896 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.996006517 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.99488745 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.585886341 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.99418536 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.14648838 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.219803175 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.01392362 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.063623523 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.559334357 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.991152689 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.081836298 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.013479415 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.260304501 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.992811326 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.240080984 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.964532544 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.462787943 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.990794444 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.22402921 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.170996505 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.988459443 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.985085839 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.828780348 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.9845448 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.980940985 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.136240528 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.436230262 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.87881992 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.17643976 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.981768732 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.102746108 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.977213153 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.051017353 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.320052315 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.971664851 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.975128097 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.973651354 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.971692307 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.972391475 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.18275828 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.995497956 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.401956753 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.104044822 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.223451536 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.27657335 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.167892919 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.00601018 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.971590448 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.189319455 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.968762529 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.025655433 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.968113338 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.986009329 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.199885859 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.968689716 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.171678757 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.201898566 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.025757663 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.013885738 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.969032586 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.968665845 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.874631669 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.111985857 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.050944099 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.969042836 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.96834774 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.08326464 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.083651212 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.148126239 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.787693226 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.096073773 seconds)
  done (took 927.933278965 seconds)
done (took 1265.656743278 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.963746332 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.960843406 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.968332874 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.964078377 seconds)
  done (took 29.749807419 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 1.963841223 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 1.960817273 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 1.965437118 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 1.961071707 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 1.961368329 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 1.960796545 seconds)
  done (took 13.66349001 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.958520271 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.951094522 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.956131166 seconds)
  done (took 22.751144288 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 2.028957512 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.359299658 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 2.100239799 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.384855601 seconds)
  done (took 10.755738612 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.956537778 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 1.959769929 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 1.95483737 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 1.952917797 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 1.952332226 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.953552499 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 1.950863857 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.948493689 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 1.950556635 seconds)
  done (took 19.4606262 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.063105641 seconds)
done (took 102.3366987 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.140848417 seconds)
    (2/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.310560685 seconds)
    (3/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.3595449 seconds)
    (4/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.066318039 seconds)
    (5/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.037055064 seconds)
    (6/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.853753755 seconds)
    (7/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.165694654 seconds)
    (8/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.165702707 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.168316138 seconds)
    (10/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.163752486 seconds)
    (11/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.066112431 seconds)
    (12/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.040114219 seconds)
    (13/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.053647841 seconds)
    (14/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.425648903 seconds)
    (15/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.096549771 seconds)
    (16/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.410077147 seconds)
    (17/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.164076803 seconds)
    (18/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.035633834 seconds)
    (19/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.110959245 seconds)
    (20/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.663564843 seconds)
    (21/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.046664655 seconds)
    (22/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.130629039 seconds)
    (23/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.029828646 seconds)
    (24/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.094997252 seconds)
    (25/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.280937146 seconds)
    (26/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.189103956 seconds)
    (27/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.113451949 seconds)
    (28/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.406202065 seconds)
    (29/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.036591009 seconds)
    (30/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 3.751230116 seconds)
    (31/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.133902104 seconds)
    (32/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.053069219 seconds)
    (33/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.772789115 seconds)
    (34/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.30989125 seconds)
    (35/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.139405059 seconds)
    (36/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.270785662 seconds)
    (37/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.130672662 seconds)
    (38/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.035440647 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.116618618 seconds)
    (40/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.367890572 seconds)
    (41/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.062699522 seconds)
    (42/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.047247926 seconds)
    (43/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.051262425 seconds)
    (44/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.804570059 seconds)
    (45/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.121816464 seconds)
    (46/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.182299236 seconds)
    (47/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.901385443 seconds)
    (48/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.148040742 seconds)
    (49/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.148942791 seconds)
    (50/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.039443718 seconds)
    (51/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.056492937 seconds)
    (52/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.132292189 seconds)
    (53/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.042370882 seconds)
    (54/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.707311803 seconds)
    (55/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.45439723 seconds)
    (56/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.047597945 seconds)
    (57/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.126178481 seconds)
    (58/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.46583593 seconds)
    (59/341) benchmarking ("sort", Bool, false)...
    done (took 2.264293273 seconds)
    (60/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.991420359 seconds)
    (61/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.348154068 seconds)
    (62/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.18195265 seconds)
    (63/341) benchmarking ("sort", Int64, false)...
    done (took 5.668762108 seconds)
    (64/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.06131944 seconds)
    (65/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.343014533 seconds)
    (66/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.217685689 seconds)
    (67/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.406946346 seconds)
    (68/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.25875824 seconds)
    (69/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.437173254 seconds)
    (70/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.165944336 seconds)
    (71/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.07159547 seconds)
    (72/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.797749279 seconds)
    (73/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.17779374 seconds)
    (74/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.235619433 seconds)
    (75/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.300410457 seconds)
    (76/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.128640265 seconds)
    (77/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.263745883 seconds)
    (78/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.357504934 seconds)
    (79/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.928365683 seconds)
    (80/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.938529979 seconds)
    (81/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.47996125 seconds)
    (82/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.052378928 seconds)
    (83/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.643406552 seconds)
    (84/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.841062756 seconds)
    (85/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.048897499 seconds)
    (86/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.076876364 seconds)
    (87/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.274467718 seconds)
    (88/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.271258404 seconds)
    (89/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.151787084 seconds)
    (90/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.050323506 seconds)
    (91/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.138098845 seconds)
    (92/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.266923769 seconds)
    (93/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.119049573 seconds)
    (94/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.994955997 seconds)
    (95/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.16857116 seconds)
    (96/341) benchmarking ("sort", Int8, false)...
    done (took 4.991952602 seconds)
    (97/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.791738952 seconds)
    (98/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.408236622 seconds)
    (99/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.953086463 seconds)
    (100/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.146015752 seconds)
    (101/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.058448089 seconds)
    (102/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.184891187 seconds)
    (103/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.845206619 seconds)
    (104/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.198033555 seconds)
    (105/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.235074272 seconds)
    (106/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.549436829 seconds)
    (107/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.001290981 seconds)
    (108/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.188513831 seconds)
    (109/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.252785107 seconds)
    (110/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.753152007 seconds)
    (111/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.696217209 seconds)
    (112/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.086729166 seconds)
    (113/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.176892861 seconds)
    (114/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.016675337 seconds)
    (115/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.19254824 seconds)
    (116/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.127352332 seconds)
    (117/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.065571507 seconds)
    (118/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.599538662 seconds)
    (119/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.202553409 seconds)
    (120/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.287545911 seconds)
    (121/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.526063458 seconds)
    (122/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.370355068 seconds)
    (123/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.077969264 seconds)
    (124/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.177460522 seconds)
    (125/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.052394607 seconds)
    (126/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.331770802 seconds)
    (127/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.329332262 seconds)
    (128/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.431666587 seconds)
    (129/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.087799464 seconds)
    (130/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.163400021 seconds)
    (131/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.188148983 seconds)
    (132/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.239342854 seconds)
    (133/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.360182709 seconds)
    (134/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.061127992 seconds)
    (135/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.141160318 seconds)
    (136/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.054690194 seconds)
    (137/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.493047008 seconds)
    (138/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.309395882 seconds)
    (139/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.71225911 seconds)
    (140/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.537793689 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.826722228 seconds)
    (142/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.179980714 seconds)
    (143/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.09328885 seconds)
    (144/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.168537423 seconds)
    (145/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.188887786 seconds)
    (146/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.253894417 seconds)
    (147/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.858305819 seconds)
    (148/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.127165212 seconds)
    (149/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.26125887 seconds)
    (150/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.569922534 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.976036899 seconds)
    (152/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.896543596 seconds)
    (153/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.071137583 seconds)
    (154/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.286522648 seconds)
    (155/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.309339096 seconds)
    (156/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.259884119 seconds)
    (157/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.186533219 seconds)
    (158/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.236704184 seconds)
    (159/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.290282204 seconds)
    (160/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.067246453 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.417392901 seconds)
    (162/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.05579689 seconds)
    (163/341) benchmarking ("perf_countequals", "Bool")...
    done (took 3.829819735 seconds)
    (164/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.150728053 seconds)
    (165/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.353205961 seconds)
    (166/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.343171411 seconds)
    (167/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.060817332 seconds)
    (168/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 3.568478158 seconds)
    (169/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.191021952 seconds)
    (170/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.130730258 seconds)
    (171/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.15708208 seconds)
    (172/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.070516256 seconds)
    (173/341) benchmarking ("sort", Float32, false)...
    done (took 5.724058932 seconds)
    (174/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.506556928 seconds)
    (175/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.395181923 seconds)
    (176/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.028742459 seconds)
    (177/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.366209582 seconds)
    (178/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.678544108 seconds)
    (179/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.887353852 seconds)
    (180/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.084677048 seconds)
    (181/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.053870538 seconds)
    (182/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.392679714 seconds)
    (183/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.145670438 seconds)
    (184/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.449791485 seconds)
    (185/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.023978908 seconds)
    (186/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.244016064 seconds)
    (187/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.214592737 seconds)
    (188/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.396558058 seconds)
    (189/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.472340771 seconds)
    (190/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.326464873 seconds)
    (191/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.438666172 seconds)
    (192/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.048572308 seconds)
    (193/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.381390978 seconds)
    (194/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.20171991 seconds)
    (195/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.445312698 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.041849679 seconds)
    (197/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.396301999 seconds)
    (198/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.050232987 seconds)
    (199/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.145763243 seconds)
    (200/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.326578875 seconds)
    (201/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.120382021 seconds)
    (202/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.922217313 seconds)
    (203/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.230728458 seconds)
    (204/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.056431082 seconds)
    (205/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.144053441 seconds)
    (206/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.116585967 seconds)
    (207/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.141543997 seconds)
    (208/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.034007856 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.441984786 seconds)
    (210/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.034511072 seconds)
    (211/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.316050032 seconds)
    (212/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.924283635 seconds)
    (213/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.056541001 seconds)
    (214/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.041502128 seconds)
    (215/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.043179097 seconds)
    (216/341) benchmarking ("sort", Float64, false)...
    done (took 5.722101901 seconds)
    (217/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.163491937 seconds)
    (218/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.422232824 seconds)
    (219/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.027327574 seconds)
    (220/341) benchmarking ("sort", BigFloat, false)...
    done (took 8.352710271 seconds)
    (221/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.409858555 seconds)
    (222/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.024660091 seconds)
    (223/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.341921121 seconds)
    (224/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.161390819 seconds)
    (225/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.022603722 seconds)
    (226/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.148937015 seconds)
    (227/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.141847381 seconds)
    (228/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.015190931 seconds)
    (229/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.323219837 seconds)
    (230/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.036497084 seconds)
    (231/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.030289701 seconds)
    (232/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.18893356 seconds)
    (233/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.394763739 seconds)
    (234/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.046153833 seconds)
    (235/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.018997921 seconds)
    (236/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.349267019 seconds)
    (237/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.483572811 seconds)
    (238/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.671088672 seconds)
    (239/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.034541248 seconds)
    (240/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.142754791 seconds)
    (241/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.132349877 seconds)
    (242/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.340387365 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.243782877 seconds)
    (244/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.108224144 seconds)
    (245/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.021855141 seconds)
    (246/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 2.998157633 seconds)
    (247/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.11097429 seconds)
    (248/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.594673281 seconds)
    (249/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.613825464 seconds)
    (250/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.110252991 seconds)
    (251/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.75200659 seconds)
    (252/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.138480644 seconds)
    (253/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.348528478 seconds)
    (254/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.298274605 seconds)
    (255/341) benchmarking ("sort", BigInt, false)...
    done (took 6.995396007 seconds)
    (256/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 6.997322442 seconds)
    (257/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.013133131 seconds)
    (258/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.051708934 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.229805825 seconds)
    (260/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.386672003 seconds)
    (261/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.003735064 seconds)
    (262/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.450753702 seconds)
    (263/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.9166545 seconds)
    (264/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.154313478 seconds)
    (265/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.319751566 seconds)
    (266/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 6.997997447 seconds)
    (267/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 3.783321546 seconds)
    (268/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.020177778 seconds)
    (269/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 6.988129415 seconds)
    (270/341) benchmarking ("map", abs, BigInt, false)...
    done (took 8.390723587 seconds)
    (271/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 3.982646977 seconds)
    (272/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.184980696 seconds)
    (273/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.583296931 seconds)
    (274/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.080747204 seconds)
    (275/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.30349153 seconds)
    (276/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 6.987698357 seconds)
    (277/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.848378364 seconds)
    (278/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.090824721 seconds)
    (279/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.261758993 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.00618837 seconds)
    (281/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.681626123 seconds)
    (282/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 1.993213155 seconds)
    (283/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.108693049 seconds)
    (284/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.395778189 seconds)
    (285/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.348126947 seconds)
    (286/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.116017909 seconds)
    (287/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.259501392 seconds)
    (288/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 6.978442958 seconds)
    (289/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.087554942 seconds)
    (290/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.882637013 seconds)
    (291/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 1.997614663 seconds)
    (292/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.212369976 seconds)
    (293/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.08461656 seconds)
    (294/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 6.978516629 seconds)
    (295/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.338100659 seconds)
    (296/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 6.983743581 seconds)
    (297/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.280450886 seconds)
    (298/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.058118799 seconds)
    (299/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 6.980452322 seconds)
    (300/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.391627086 seconds)
    (301/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.308951272 seconds)
    (302/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.395940314 seconds)
    (303/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 6.97814799 seconds)
    (304/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 10.415641912 seconds)
    (305/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.604487318 seconds)
    (306/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.195517935 seconds)
    (307/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.079172608 seconds)
    (308/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.356555947 seconds)
    (309/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.16085273 seconds)
    (310/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.317600984 seconds)
    (311/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.054567448 seconds)
    (312/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.073043776 seconds)
    (313/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.485451974 seconds)
    (314/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.048372187 seconds)
    (315/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.058384558 seconds)
    (316/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.344462803 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.029508046 seconds)
    (318/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.25731189 seconds)
    (319/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.808418461 seconds)
    (320/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.353482666 seconds)
    (321/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.463172228 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.362809334 seconds)
    (323/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.048634932 seconds)
    (324/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.081489452 seconds)
    (325/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.327200918 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.871520778 seconds)
    (327/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.146134464 seconds)
    (328/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.064386742 seconds)
    (329/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.225340903 seconds)
    (330/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.531373296 seconds)
    (331/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.053480531 seconds)
    (332/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.325127263 seconds)
    (333/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.167434081 seconds)
    (334/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.060827942 seconds)
    (335/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.180643894 seconds)
    (336/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.434680824 seconds)
    (337/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.570802044 seconds)
    (338/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.179714819 seconds)
    (339/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.333911739 seconds)
    (340/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.260420583 seconds)
    (341/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.214332715 seconds)
  done (took 1148.162692432 seconds)
done (took 1150.240260132 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.080058568 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.068639275 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.049631127 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.072142326 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.161655393 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.099612748 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.062645939 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.05274862 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.101548413 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.098346653 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.04895304 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.098252709 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.052493752 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.049349394 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.050004929 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.06753537 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.454793926 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.098426973 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.068011003 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.062758432 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.068878873 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.049806756 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.100382171 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.099852938 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.054918104 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.055262631 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.05514641 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.070494444 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.16463186 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.055720472 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.055525689 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.063057492 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.457757635 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.095522659 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.04735512 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.06973613 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.062348506 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.064201187 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.055692227 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.083170267 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.629405933 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.059045018 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.052000528 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.054030674 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.053214743 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.059815389 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.054942255 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.059006739 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.067263509 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.069676134 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.609143325 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.075880589 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.055035295 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.052981218 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.063874355 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.053971222 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.057539518 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.070707052 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.071818569 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.071382772 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.43744031 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.112397649 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.055364996 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.07062289 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.060449906 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.638610017 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.054471166 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.056811498 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.613280364 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.06383356 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.634182854 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.066198826 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.048593079 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.060404703 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.081831728 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.447725123 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.091738043 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.044401761 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.054311129 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.045623232 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.056227657 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.062749585 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.049695275 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.047769795 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.065420936 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.096403589 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.057755464 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.046488382 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.056127972 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.063750512 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.055201825 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.059663035 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.049829152 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.0435608 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.059734253 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.049781197 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.050263819 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.047428794 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.050990259 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.059880725 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.607888616 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.071129257 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.044843725 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.044916413 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.045594533 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.060064919 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.608858653 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.057006351 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.070075633 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.096496843 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.04642383 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.431032042 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.097339157 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.065790699 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.058678749 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.050298137 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.047899585 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.431983516 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.642338455 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.070197193 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.047908029 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.045968102 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.069169165 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.051202702 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.047156752 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.453592367 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.09864701 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.06583988 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.172208271 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.064986095 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.081945745 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.046560581 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.052911867 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.099388151 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.069391673 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.082683908 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.052660213 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.068413729 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.068389927 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.048000751 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.061122954 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.062763167 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.051152633 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.058214218 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.046447896 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.099412463 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.066169355 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.065985344 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.073346968 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.172854447 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.046456362 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.43195786 seconds)
done (took 323.586283852 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.12759363 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.044019991 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.13111051 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.049348463 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.133156119 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.121004926 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.045900204 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.04641716 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.047124951 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.524360385 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.048999856 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.052037927 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.044664142 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.046172682 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.115099024 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.049134342 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.046782892 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.316819834 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.049628719 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.124044179 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.046269592 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.04701128 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.047663585 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.528514471 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.047259028 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.046656158 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.122982778 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.047470472 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.322533939 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.047506783 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.046781256 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.320571943 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.126975377 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.05893087 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.057515513 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.050766522 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.137444833 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.05724399 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.113814916 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.114210264 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.132220972 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.085165304 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.047149099 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.04638161 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.054259185 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.050642092 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.04802199 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.079361491 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.049165633 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.051473833 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.316467923 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.053842212 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.057543128 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.051081889 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.050173093 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.06536383 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.050457771 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.052970903 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.125742531 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.052748487 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.115705662 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.531439823 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.528331181 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.047784473 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.047642757 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.051356319 seconds)
  done (took 196.363528232 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.151710595 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.121813807 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.154952631 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.054020656 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.099686683 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.156159015 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.055166981 seconds)
  done (took 16.762187058 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.054130739 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.049303587 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.108081624 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.107049223 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.053876707 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.229182499 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.05943392 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.055297794 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.07534016 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.051658224 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.710377148 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.109928316 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.055976777 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.049210033 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.060121305 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.111453706 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.051199855 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.053717494 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.164195504 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.198316774 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.054600565 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.05803287 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.077049561 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.061613435 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.051785941 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.053013487 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.052363124 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.056710524 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.051921551 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.049686923 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.048311254 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.115077778 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.05293026 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.048183512 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.051808336 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.049732241 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.054757717 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.050937636 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.051656916 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.049440405 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.052145961 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.050871776 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.052625889 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.052424903 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.048823753 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.074275662 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.053016635 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.053299243 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.053597041 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.051877475 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.078293094 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.052314351 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.055342288 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.060154523 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.095833602 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.060530726 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.055567977 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.056362557 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.054448345 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.052637928 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.053267464 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.199980641 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.11198169 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.055584538 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.114539583 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.21015368 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.054739642 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.053779212 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.052493128 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.114739653 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.052466981 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.113775721 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.055365029 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.169421486 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.05588104 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.231311143 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.075318257 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.058993434 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.058380996 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.052693871 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.062356775 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.054240904 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.056313377 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.060824894 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.059090441 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.055200099 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.056675788 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.057979073 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.064628733 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.057539216 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.108902612 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.057546057 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.059252342 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.170158447 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.058423581 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.170932038 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.086474006 seconds)
  done (took 223.925101391 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.064270162 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.065546308 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.059627093 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.073395982 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.060026541 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.05938969 seconds)
  done (took 14.361174988 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.060185253 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.062165007 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.057734841 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.057398041 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.059691648 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.060657319 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.057537832 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.060752959 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.065142991 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.056845671 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.059665241 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.058695059 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.061485257 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.060349802 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.057961381 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.057694772 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.060656919 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.058894469 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.058349464 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.060961107 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.190262989 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.059194495 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.060870265 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.062454692 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.068300062 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.060784715 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.069644143 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.059099436 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.059116792 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.066777467 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.066410855 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.062713541 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.061655484 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.06619257 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.065715045 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.061661846 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.064321539 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.059197917 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.060401713 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.062326494 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.058506257 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.062973064 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.059165854 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.060128606 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.060166122 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.067377952 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.065012185 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.072013363 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.060261616 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.060751062 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.059934848 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.060515773 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.062006246 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.05991044 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.064217551 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.066975815 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.065778669 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.062724627 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.062031348 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.063159703 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.065627134 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.062148661 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.062005938 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.065659284 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.065348038 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.060095243 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.062853431 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.067224293 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.061920601 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.061795357 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.061306306 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.060839884 seconds)
  done (took 151.571939055 seconds)
done (took 604.984999353 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.138593249 seconds)
  done (took 9.119957036 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.229096024 seconds)
  done (took 9.300995997 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.152742251 seconds)
  done (took 14.134886053 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.096144649 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.076978012 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.075666412 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.066871709 seconds)
  done (took 30.313213018 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.29095825 seconds)
  done (took 9.274855954 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.077885087 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.058890196 seconds)
  done (took 16.184522406 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.09249941 seconds)
  done (took 9.07495477 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.073565589 seconds)
  done (took 9.069673603 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.082889133 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.07950198 seconds)
  done (took 16.161729425 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.061681535 seconds)
  done (took 9.040122016 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.11002773 seconds)
  done (took 10.177600493 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.068318151 seconds)
  done (took 9.066480399 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.0604035 seconds)
  done (took 9.040602954 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.728123133 seconds)
  done (took 10.707604036 seconds)
done (took 172.649677028 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.066031988 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.055350075 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.057636082 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.054588244 seconds)
  done (took 30.209930283 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.09169585 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.092941541 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.100246359 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.092908838 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.083236516 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.082755 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.092768596 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.09312003 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.080606658 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.087902745 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.093468403 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.088304396 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.092965542 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.099866189 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.099473492 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.090497162 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.089880655 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.092943349 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.080930047 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.099727946 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.085957939 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.09138173 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.054544735 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.056029844 seconds)
  done (took 52.09204823 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.245241404 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.121224805 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.209231968 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.099663265 seconds)
  done (took 10.650735154 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.055136697 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.118397445 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.105163594 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.102534983 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.140970856 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.15994255 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.107784403 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.248315428 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.170126657 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.183155511 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.067428758 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.075597553 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.077702992 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.099935307 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.158347407 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.057319239 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.054440179 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.183473927 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.117499593 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.264916311 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.055373967 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.108080324 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.141394743 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.107362617 seconds)
  done (took 52.938492362 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.05274847 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.062394864 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.062652967 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.056727453 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.056715927 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.05566324 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.062073155 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.056127718 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.078072587 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.055704247 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.055427246 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.056408819 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.062271667 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.055122106 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.055476174 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.067596069 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.069818425 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.055070679 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.060144983 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.064875555 seconds)
  done (took 43.180852898 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.052575002 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.899187952 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.399456134 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.303415793 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.05259295 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.050682213 seconds)
  done (took 32.73239327 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.067588894 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 2.063306948 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.053075402 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 2.110459869 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.192146533 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.062025169 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.05896373 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 2.064960092 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 2.101385425 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 2.121954313 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.074741063 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 2.084953387 seconds)
  done (took 27.030267022 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.053547031 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.057036364 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.059777727 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.066178228 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.067482224 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.064425074 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.064936282 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.056397565 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.067491674 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.074963556 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.062216592 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.068804091 seconds)
  done (took 46.741881365 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.271437154 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.284264217 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.274536118 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.685030209 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.650159276 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.036324038 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.344969168 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.272130605 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.792639501 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.819002659 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.347092864 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.1331588 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.00605371 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.980183986 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.977525485 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.300305432 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.057044263 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.91456028 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.305017392 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.104965287 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.057242515 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.058284395 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.061168765 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.355104348 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.384131332 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.060856881 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.271670077 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.073416127 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.070014157 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.289328518 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.547662855 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.122177417 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.261253819 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.316193609 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.390908052 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.162867574 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.083255916 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.24893809 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.112800528 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.093746725 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.069933083 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.070165819 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.603546409 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.073316435 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.331284358 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.060729264 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.138528519 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.077462191 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.986935009 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.42810992 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17449725 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.059553168 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.093531073 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.492245853 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.186667793 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.301647834 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.064438592 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.247666337 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.122906786 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.367745999 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.276005678 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.065771209 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.278619663 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.989347797 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.462893132 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186864933 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.065299252 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.065763168 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.766056973 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.309189821 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.144043357 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.45783434 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.821484081 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.06360135 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.063727568 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.065245638 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.161323498 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.063461059 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.362708801 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.044626379 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.989896351 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.157835733 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.459761937 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.065117817 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.064522058 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.073057615 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.909263589 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.07273397 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.168270219 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.393875745 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.391145774 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.062251508 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.065358913 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.089737284 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.068843734 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.010454215 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.620140119 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.131706358 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.992188539 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.627446975 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.52478779 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.03296436 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.510284855 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.107214944 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.350398675 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.224599151 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.470977592 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.272419847 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.3146938 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.598632107 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.071919798 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.679764675 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.149679257 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.141551733 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.067918621 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.620450851 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.221719637 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.421932845 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.178150709 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.067392919 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.989236138 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.076207362 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.267220494 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.502986799 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.122606996 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.066695261 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.075068379 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.06249248 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.073950749 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.174148284 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.085386275 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.366675181 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.146740629 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.069986807 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.004563183 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.07202622 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.361311303 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.675655628 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.132736126 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.329636036 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.338737313 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.775665113 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.089701403 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.093327523 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.340421268 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.150020159 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.14322466 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.657788228 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.203863141 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.167513901 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.068148651 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.206870622 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.076138191 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.069680249 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.40986758 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.481970468 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.497753052 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.113334326 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.09069446 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.072664429 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.217030252 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.308911608 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.17115933 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.094582653 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.072098522 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.149991702 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.296398398 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.072184345 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.078785933 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.327257798 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.317262523 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.367594453 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.14356737 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.179142629 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.145901581 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.080029932 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.284288131 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.150153188 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.719582997 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.616053659 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.303057693 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.597368626 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.034842265 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.710673623 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.43414748 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.456842639 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.091113295 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.520902714 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.210217844 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.708380668 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.098411432 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.597005994 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.995345214 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.073066343 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.415739105 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.030546866 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.672746137 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.13880859 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.124526916 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.068821969 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.072758348 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.078428539 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.074000888 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.169217091 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.135496152 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.14058997 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.996960389 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.666308789 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.108456212 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.073449482 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.070320202 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.482167715 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.966050344 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.026218414 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.071992218 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.14551847 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.813605167 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.620288578 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.073786645 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.071700539 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.666152562 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.698067754 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.983829229 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.075596164 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.985557987 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.09905779 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.434735277 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.190852757 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.389956747 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.780559695 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.144188213 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.069974378 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.080682254 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.773495179 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.079907902 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.770371117 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.370013632 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.349180076 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.525882603 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.140178215 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.279207658 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.08833496 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.069775999 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.600561171 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.094354789 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.078941848 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.274047734 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.589675931 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.50112776 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.727053975 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.15558346 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.087230088 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.352650485 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.077858034 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.48016984 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.763961265 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.094178984 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.098956649 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.314082068 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.758984638 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.075649802 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.987426768 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.079904496 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.285817332 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.281285747 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.351068911 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.382962425 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.524465394 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.083902875 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.083224205 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.134883796 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.317709127 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.07330231 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.111144886 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.522175418 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.213856283 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.500660519 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.367425353 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.575990474 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.712052993 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.350778104 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.146359208 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.085494915 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.734415512 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.220008879 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.005987836 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192095924 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.001865845 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.820181958 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.363838659 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.096629937 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.354272553 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058273836 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.423329633 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.380140365 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.460721507 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.135482233 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.102562406 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.078393749 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.132481637 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.09532268 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.197696052 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.192752141 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.084373549 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.551184368 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.11372592 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.125928907 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.08228744 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.628437018 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.098013945 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.078502241 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.777607043 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.724986737 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.204499156 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.150990668 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.894900385 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.4974532 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.109478048 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.966561745 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.908112199 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.363284292 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.142106575 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.539868737 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121226764 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.488196685 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.091408546 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.292488 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.085582866 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.574266157 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127159369 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.359615805 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.038844249 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.296290812 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.288407433 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.106801602 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.086143751 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.007835087 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.186854281 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.956083299 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.062915397 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.083857612 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.08273061 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.591276293 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.212084554 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.608273525 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.90468339 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.085545352 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.522752221 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.502769314 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.629702124 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.110773795 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.08305481 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.524533125 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.864531094 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.533622371 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.35758502 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.090641142 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.738307387 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.297066528 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.210319762 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.00282485 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.570391237 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.667388094 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.783947171 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.096685944 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.284336158 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.541061682 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.304774386 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.11600295 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.165961725 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.490336787 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.363501327 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.800817833 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.012963561 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.084328932 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.480095127 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.101658504 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.181691871 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.325265614 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.409346671 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.575807795 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.487047151 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.13191399 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.578355271 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.501919571 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.478638201 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.306101559 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.464528475 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.412255362 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.96976567 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.496494821 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.296735585 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.174436434 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.368391369 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.964958931 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.79418214 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.330531593 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.090135048 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.014675345 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.291706135 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.09275233 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.427124599 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.608650647 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.089579403 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.495336869 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.55977607 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.623303973 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.188677784 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.109544038 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.05364437 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.108534055 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.106650145 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.085645252 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.572991897 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.378341216 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.098425667 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.026698757 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.757711166 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.01312338 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.297781109 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.188443846 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.119513073 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.641284043 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.488863792 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.197091901 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.399228588 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.237657961 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.117883223 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.012004771 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.900572242 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.03110009 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.212601205 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.510007246 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.101008871 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.087445667 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.288066932 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.014934148 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.132244536 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.711086069 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.292610041 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.663886194 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.367317389 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.212955817 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.338972141 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.388788125 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.088891228 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.050805953 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.358409603 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.013539548 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.658595259 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.764618327 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.781521428 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.159386538 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.086412263 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.090817191 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.359551329 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.553598278 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.197472428 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.56861431 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.119023202 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.110901404 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.539376082 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.187038824 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.089879488 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.093476785 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.469934278 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.317574387 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.116183533 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.115483029 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.302858583 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.162025223 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.283515793 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.162703193 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.602438469 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.093563265 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.094128142 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.127014471 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.03626329 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.053647546 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.917908369 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.149811126 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.106254945 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.37129193 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.71702944 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.292403773 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.483808621 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.957715304 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.168379445 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.129859066 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.091263355 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.093084498 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.482790072 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.395976073 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.089468104 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.37096469 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.141803448 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.095577694 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.100928929 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.058562379 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.090200707 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.901911218 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.974575644 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.82078993 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.485521343 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.098741083 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.107452943 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.092617233 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.017135385 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.091817404 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.12558004 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.088023446 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.092921393 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.469301675 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.275485469 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.192165942 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.097500975 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.094034432 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.097207719 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.304414996 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.605455963 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.107870825 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.793978742 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.296189473 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.095952937 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.581314476 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.552633063 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.240653375 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.128350608 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.165251337 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.344922997 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.634366702 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.165990718 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.065637892 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.320602816 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.094762268 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.366295205 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.365293824 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.093284723 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.304937489 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.449786567 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.374569345 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.101835639 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.690199385 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.161406098 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.168623208 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.999277033 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.095415314 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.098155735 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.372818912 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.15214558 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.0952035 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.104258702 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.648503737 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.902738112 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.570612509 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.254028943 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.55901233 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.946274256 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.851411661 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.097318508 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.020773756 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.108760909 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.118540498 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.100493245 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.117091718 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.904128041 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.820820525 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.30957231 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.369987856 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.024840077 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.30013528 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.699236894 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.025818057 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.064202043 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.04895528 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.364471928 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.025563801 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.099831536 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.123225057 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.255685578 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.739016633 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.362655764 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.098227998 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.046098614 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.102824179 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.102657195 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.09495665 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.182068311 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.099149264 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.212592844 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.37380995 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.60049198 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.211458343 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.736491136 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.845248172 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.037503348 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.14399056 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.657971816 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.668169226 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.302070327 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.896287813 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.901979213 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.045778024 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.102367818 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117172816 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.357054526 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.103417873 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.10253317 seconds)
  done (took 2289.526107504 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.099998385 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.120370693 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.103608951 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.132971766 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.108077554 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.149853666 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.113942351 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.113552121 seconds)
  done (took 58.966742231 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 7.098756622 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.147736045 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 2.110860943 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.099517648 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 2.104496171 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 7.110352783 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.315493998 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 7.114956658 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.106359579 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 2.106761937 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 7.102123651 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.100791092 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 2.448254336 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 2.128818635 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 7.101907983 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 7.102773109 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 2.103611755 seconds)
  done (took 80.433031083 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.102879174 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.170536177 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.160848344 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.105152526 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.718010598 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.1204246 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.915385107 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.126109597 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.108821375 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.453037293 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.405336515 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.122590198 seconds)
  done (took 92.534663477 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 2.106386306 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 2.102523076 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.100705788 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.101737731 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.102220741 seconds)
  done (took 12.543685168 seconds)
done (took 2831.622068573 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.342873148 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.158177395 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.198688356 seconds)
  done (took 6.382319595 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.248903779 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.293765709 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.408010225 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.417244967 seconds)
  done (took 11.398763019 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.386987412 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.466536161 seconds)
  done (took 6.879696876 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.461484425 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.111068101 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.49063008 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.102547682 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.10647908 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.108216936 seconds)
  done (took 23.349630634 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.104028969 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.110122319 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.104168956 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.104639098 seconds)
  done (took 10.449240631 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.104438247 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.789829808 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.106802488 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.118024463 seconds)
  done (took 22.147526186 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.30538663 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.155166525 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.873976133 seconds)
  done (took 9.362158131 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.734432956 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.560294205 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.710475025 seconds)
  done (took 10.033468658 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.258671079 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.091450692 seconds)
  done (took 8.37722129 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.249900466 seconds)
  done (took 4.279767239 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.972050328 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.420479487 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.585165019 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.645814444 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.717823329 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.329000014 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.40430862 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.353435441 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.520944642 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.495762113 seconds)
  done (took 27.474321569 seconds)
done (took 156.566165892 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.536535082 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.124868317 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.31019489 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.471333356 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.339991546 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.308893098 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.409323228 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.458072101 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.135943203 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.124298667 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.467900321 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.336729736 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.356895561 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.120293505 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.360071125 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.117350436 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.337211523 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.544762358 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.14840635 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.390828778 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.41715924 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.111589701 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.313975512 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.126378847 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.338648128 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.264838367 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.731262719 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.121031398 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.302248807 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.743246464 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.263497067 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.533189145 seconds)
  done (took 176.697020659 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.104207882 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.106143503 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.108509529 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.110352786 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.405733106 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.108720735 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.11066678 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.10774113 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.348764987 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.34330206 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.108093304 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.391064187 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.10836294 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.107872189 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.112386413 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.109264778 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.467885574 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.10919544 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.107936872 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.107698608 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.108522155 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.272334025 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.115527684 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.279978867 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.461227918 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.108902727 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.109213742 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.107140391 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.108314385 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.108048836 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.111493947 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.108546922 seconds)
  done (took 215.617296205 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.10929458 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.109401501 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.110963037 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.109150256 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.109324365 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.109354057 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.111093934 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.109706254 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.826635727 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.818871745 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.110984779 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.110545407 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.112217515 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.109752693 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.109408682 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.109962179 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.109955336 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.109541939 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.10940458 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.114707547 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.111184058 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.959746853 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.111223463 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.009501969 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.111425939 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.118957627 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.111718629 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.120372243 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.111456175 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.110819477 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.112475186 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.110569424 seconds)
  done (took 228.76453221 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.35339119 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.113001539 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.113428173 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.124475216 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.113523764 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.112891446 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.114021516 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.359680961 seconds)
  done (took 21.440165938 seconds)
done (took 644.5571554 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.446836904 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.826607661 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.253720871 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.138678927 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.371321823 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.178653938 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.134027389 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.192614217 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.963917769 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.20466428 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.541464165 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.136293813 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.92729078 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.155299369 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.252091332 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.190202901 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.49556366 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.835983626 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.264840914 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.787444044 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.291496299 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.106461289 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.206738064 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.991082818 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.564268554 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.109802066 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.154736217 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.503101117 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.137927704 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.285585357 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.743963204 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.39999335 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.145736204 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.131542521 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.185099911 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.164630826 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.344050232 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.140512454 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.251918726 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.890277651 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.788469563 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.851961415 seconds)
  done (took 110.722971528 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.126066843 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.124267205 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.122071511 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.122666599 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.132407563 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.123530314 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.124489917 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.122359031 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.123488544 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.12395423 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.125109591 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.13270012 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.124154579 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.13174717 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.123829315 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.123803861 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.12419238 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.131502305 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.124498765 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.125511606 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.123864446 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.123634191 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.120442893 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.124069802 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.124314819 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.124200518 seconds)
  done (took 57.304166881 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.117045798 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.275409942 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.346888577 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.13457681 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.118461252 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.120994283 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.143546993 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.121264375 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.120193332 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.118456636 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.212524133 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.120676733 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.130619485 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.349807005 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.130716646 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.117821905 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.118806674 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.119271896 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.285120253 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.131765513 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.146929368 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.124013067 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.145492018 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.131002464 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.122134718 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.119589474 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.122931425 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.538625322 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.127585371 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.216347967 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.163045858 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.150382743 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.461174234 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.36015229 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.171554848 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.126174543 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.119504025 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.221966767 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.124270121 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.120406268 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.146411075 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.125318136 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.353272182 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.63881146 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.131611951 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.119500481 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.536307757 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.228165199 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.161217081 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.128678064 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.361141544 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.135431617 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.120610756 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.121260199 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.157890222 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.131024368 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.120550704 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.38585759 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.133040154 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.148359183 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.12630179 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.121816479 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.293063022 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.128064256 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.283455653 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.128794056 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.128282003 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.123896468 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.355292053 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.134620168 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.655329103 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.133156242 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.1201809 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.21810657 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.285356759 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.560274343 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.131727223 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.293896363 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.478511048 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.154775991 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.130099615 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.519958951 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.158179551 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.130062702 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.123290709 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.122876124 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.12327431 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.169496739 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.147647706 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.567614648 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.650692625 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.403100948 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.15592487 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.133539945 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.124214059 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.38802131 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.129432833 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.123483128 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.347308363 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.663773445 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.134480996 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.129786515 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.632845496 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.135222508 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.153421221 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.132262268 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.370252774 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.13769297 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.169646509 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.124572038 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.131374235 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.125785365 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.152023052 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.131282488 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.124569537 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.630700673 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.234600097 seconds)
  done (took 261.394322392 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.124141299 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.12324041 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.122759143 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.12254032 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.123928867 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.123175004 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.122990886 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.123406927 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.125649476 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.123267131 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.123931184 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.124277868 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.124475089 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.130267027 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.17294517 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.125637316 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.615521881 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.123918104 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.12574564 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.125440024 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.682285774 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.127697141 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.125070768 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.126413572 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.125353587 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.125147697 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.132378103 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.170806247 seconds)
  done (took 174.693465503 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.125723536 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.177788765 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.135941855 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.169801334 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.134964643 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.126315726 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.219286433 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.142066521 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.129898801 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.127034054 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.125613046 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.155555538 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.131722081 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.221315011 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.156596734 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.22623248 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.226189938 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.134166403 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.126762165 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.127025991 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.170613078 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.136262607 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.154508654 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.18259308 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.135266206 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.177986053 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.136051353 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.127590757 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.126787164 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.23464532 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.140253849 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.155776946 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.156657305 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.144092906 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.237746122 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.233847623 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.229515553 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.229216931 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.132555786 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.126700759 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.129478487 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.128309325 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.180569633 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.136919484 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.129002171 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.239019145 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.141459619 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.12905954 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.129426269 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.128648575 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.140386782 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.141890264 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.160215402 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.24370131 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.166327911 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.150568429 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.221797853 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.251711631 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.132843828 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.222430679 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.137598303 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.237671229 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.143047007 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.128475249 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.130062004 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.132783431 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.173430513 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.23154876 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.228279071 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.137118024 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.222465187 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.181203237 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.13693849 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.129912562 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.129429153 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.18236281 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.231002915 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.182112998 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.181869244 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.157890026 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.135044403 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.128546394 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.131751806 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.154863955 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.135490433 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.239479335 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.237055671 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.137395546 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.129099259 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.130246166 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.129893095 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.152075993 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.186912865 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.162914147 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.231519387 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.164720703 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.163193295 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.134471954 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.142843404 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.133207639 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.159830448 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.135028179 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.1398854 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.410639157 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.158088121 seconds)
  done (took 229.424672679 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.509883448 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.176196075 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.198360659 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.393219837 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.506891618 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.972601827 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.167179774 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.178422136 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.186573266 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.30875746 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.236403504 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.225902169 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.163967134 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.149676173 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.175987714 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.188454899 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.207986482 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.479192792 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.376732457 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.650020336 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.165718307 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.471218742 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.513067378 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.5519756 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.215129443 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.569354961 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.792339055 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.271291288 seconds)
  done (took 70.058126231 seconds)
done (took 905.636294086 seconds)
SAVING RESULT...
DONE!

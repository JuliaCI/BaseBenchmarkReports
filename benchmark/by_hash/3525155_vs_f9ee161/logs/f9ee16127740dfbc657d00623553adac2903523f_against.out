cset: moving following pidspec: 24425
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.946162613 seconds)
loading group "shootout"... done (took 1.092515084 seconds)
loading group "string"... done (took 0.634573044 seconds)
loading group "linalg"... done (took 8.397675045 seconds)
loading group "parallel"... done (took 0.162949136 seconds)
loading group "find"... done (took 2.929477009 seconds)
loading group "tuple"... done (took 2.06653186 seconds)
loading group "union"... done (took 14.416707809 seconds)
loading group "dates"... done (took 1.425225157 seconds)
loading group "micro"... done (took 0.212253803 seconds)
loading group "simd"... done (took 4.638368375 seconds)
loading group "io"... done (took 1.059663463 seconds)
loading group "random"... done (took 9.201348535 seconds)
loading group "problem"... done (took 1.542765926 seconds)
loading group "array"... done (took 24.339076851 seconds)
loading group "misc"... done (took 1.770457346 seconds)
loading group "scalar"... done (took 42.115957931 seconds)
loading group "sort"... done (took 3.307304748 seconds)
loading group "sparse"... done (took 12.385243033 seconds)
loading group "collection"... done (took 18.272658311 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.524506723 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124671944 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129664564 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.123012962 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.189701742 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.120838542 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.13138189 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.086317989 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.81621805 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.139191313 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.114715749 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.42949398 seconds)
done (took 5.324592522 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.167710867 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093299063 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083874862 seconds)
  done (took 1.356918024 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.070545084 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.06079432 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067596463 seconds)
  done (took 1.380074048 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065157373 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.133403228 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066493049 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067399195 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067502122 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066656162 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066971492 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066216642 seconds)
  done (took 1.721095281 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072507654 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068479048 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065772863 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067986647 seconds)
  done (took 1.455518355 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.06617024 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.123498705 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064932802 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064912362 seconds)
  done (took 1.497185133 seconds)
done (took 8.845439006 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.244009592 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.10250734 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.291868705 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.44425169 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.612061536 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.094017702 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075620868 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071136322 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.129894135 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.333260673 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.102637762 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.181048776 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089231123 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.16775985 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.024004421 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.120354869 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085790795 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.122862276 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.09447651 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.131805614 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.390475817 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.077464964 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.072455876 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.069815677 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068041233 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.649562017 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.669258339 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.120388972 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.083369417 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.161305994 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.11608291 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.65018619 seconds)
  done (took 10.857481712 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.091457972 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088993546 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.068903039 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124849354 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092486778 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068702913 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.074583701 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.0675663 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.087085914 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.121915077 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.088936003 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.097247301 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065443201 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.068393813 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.075881701 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.203411165 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078875708 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.079949702 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066703216 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081603712 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.10668618 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.076976069 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.077088445 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.077135578 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.129532694 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.168614089 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096221149 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.09738179 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.065292616 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078227725 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.114335718 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.124532769 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066330285 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064639288 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.118186557 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.094272325 seconds)
  done (took 4.580309421 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.840760474 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.095562419 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.101023046 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.626555858 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065602173 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.149491168 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.239566425 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072747809 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.336465888 seconds)
    (9/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.095252561 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.148302218 seconds)
    (11/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.111176041 seconds)
    (12/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.147017807 seconds)
    (13/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.063540575 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.116406267 seconds)
    (15/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 1.201055624 seconds)
    (16/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069944608 seconds)
    (17/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.116188549 seconds)
    (18/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.540437913 seconds)
    (19/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069501625 seconds)
    (20/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068904907 seconds)
    (21/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.06758544 seconds)
    (22/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.069754295 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06895102 seconds)
    (24/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064227531 seconds)
    (25/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.093555901 seconds)
    (26/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.070619573 seconds)
    (27/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.09629743 seconds)
    (28/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087770745 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.171904705 seconds)
    (30/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.984462626 seconds)
    (31/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.302491898 seconds)
    (32/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067472222 seconds)
    (33/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.168018309 seconds)
    (34/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.084987537 seconds)
    (35/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.35769026 seconds)
    (36/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068928993 seconds)
    (37/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.082305475 seconds)
    (38/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.448556127 seconds)
    (39/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.122357869 seconds)
    (40/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.084502341 seconds)
    (41/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.065071584 seconds)
    (42/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.163406357 seconds)
    (43/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.11755721 seconds)
    (44/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064509434 seconds)
    (45/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.120041277 seconds)
    (46/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.078128603 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.06841723 seconds)
    (48/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.063947092 seconds)
    (49/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069013078 seconds)
    (50/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.545393679 seconds)
    (51/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071041707 seconds)
    (52/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.073039529 seconds)
    (53/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.080101429 seconds)
    (54/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102611004 seconds)
    (55/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067464141 seconds)
    (56/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.065497374 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.170956135 seconds)
    (58/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.064743774 seconds)
    (59/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066799996 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.068610184 seconds)
    (61/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.150906883 seconds)
    (62/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064092983 seconds)
    (63/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141155126 seconds)
    (64/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.064783505 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069476217 seconds)
    (66/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.10376462 seconds)
    (67/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069573984 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088469858 seconds)
    (69/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.097145111 seconds)
    (70/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.334515347 seconds)
    (71/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.035517174 seconds)
    (72/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067352057 seconds)
    (73/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.901881002 seconds)
    (74/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.078077597 seconds)
    (75/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.067365569 seconds)
    (76/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071233684 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067748255 seconds)
    (78/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068805633 seconds)
    (79/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06806674 seconds)
    (80/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073649958 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071513984 seconds)
    (82/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069605653 seconds)
    (83/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.10998387 seconds)
    (84/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066182836 seconds)
    (85/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.063704876 seconds)
    (86/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070243046 seconds)
    (87/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066012809 seconds)
    (88/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071696715 seconds)
    (89/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.101393545 seconds)
    (90/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.064475338 seconds)
    (91/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.493800389 seconds)
    (92/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096368158 seconds)
    (93/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065644104 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.074347206 seconds)
    (95/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104564046 seconds)
    (96/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066153932 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.0698218 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.182002988 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067129724 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066363798 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067511839 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069789747 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.095958349 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069330404 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112913364 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.026056516 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068977434 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067422198 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.072959394 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070612847 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070726853 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068130138 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070404961 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069601601 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066299394 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.108809481 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.120271693 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068496605 seconds)
  done (took 22.701032332 seconds)
done (took 40.165362649 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.30757973 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.080200113 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.079603579 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.080015858 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.079669373 seconds)
  done (took 1.868857336 seconds)
done (took 3.153445707 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.130471429 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.08129289 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066770895 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100467362 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.068694889 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.102460655 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.109901479 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.105153149 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.068575044 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068042797 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.067809808 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.100795038 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.103252167 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.068089775 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.096803553 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.10180499 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069971387 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.06466989 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.069585873 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.0692075 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.069262263 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064791084 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069406389 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069514644 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.100127259 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069346046 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065086751 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.100296791 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069656858 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099575905 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069545621 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069848446 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069903368 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100876423 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069118474 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.100273344 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065989061 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.070073674 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069555528 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069398167 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.072806408 seconds)
  done (took 4.602064107 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07112454 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082315273 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08374157 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062530923 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072392939 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082197226 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062676221 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082111277 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088806047 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083809481 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083343903 seconds)
  done (took 2.143651319 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071055172 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082512559 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08437019 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062219391 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074393211 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082996272 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062887114 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082549555 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085875524 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083033475 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083293241 seconds)
  done (took 2.121303588 seconds)
done (took 10.126861471 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.097474937 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066248635 seconds)
  done (took 1.410946668 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.650551287 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.262202979 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067346118 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085045021 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.193843441 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092930093 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.198067453 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.069601912 seconds)
  done (took 8.059570092 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.097219803 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.07319552 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.06988953 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068920735 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067950869 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068489913 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067867683 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069262225 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069817349 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068465262 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.068306237 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068846892 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.070926671 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068781492 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070756189 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070199685 seconds)
  done (took 2.498890293 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.099796523 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.099003098 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.07258674 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.073350533 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.07225689 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071620535 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073782456 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.073439446 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.070883517 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.072171942 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.074378819 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.073080157 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.072088379 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.063388723 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073952454 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.074422056 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.070117841 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073910022 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.074061231 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.075131716 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.073601807 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.06335834 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.072070903 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.073164056 seconds)
  done (took 3.170598146 seconds)
done (took 16.411690079 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175881282 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075561203 seconds)
  done (took 1.512300864 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.067514662 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068678786 seconds)
  done (took 1.412819416 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072611661 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061126616 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078658872 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070952305 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062344367 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.062137757 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077956789 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061969912 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062083479 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062219736 seconds)
  done (took 1.948390073 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.062126801 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068666762 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066888462 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065088184 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067498317 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063079096 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.06552653 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063502658 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.06963313 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061950746 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066462997 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08317719 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066107212 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084537158 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065709478 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066883407 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068292763 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065963979 seconds)
  done (took 2.500571838 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061494558 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061837415 seconds)
  done (took 1.409091941 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064907727 seconds)
    (2/7) benchmarking "second"...
    done (took 0.061396196 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064628311 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064901911 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062434125 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062082225 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.06199236 seconds)
  done (took 1.7212716 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.42052491 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122936829 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.342477911 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069464191 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.07751058 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.254579565 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063242732 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067573652 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.06798385 seconds)
  done (took 2.810728424 seconds)
done (took 14.607536388 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080790801 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182948252 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.092625284 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.40906795 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.092797504 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.068073356 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113167975 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.169654226 seconds)
done (took 2.516076633 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.228499753 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.426736705 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.795119384 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.06804179 seconds)
  done (took 3.578831946 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.339840104 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.08022699 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.079027861 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068635818 seconds)
  done (took 1.870915737 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065966141 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072974718 seconds)
  done (took 1.432270351 seconds)
done (took 8.417821102 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065321522 seconds)
    (2/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.093956753 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064321284 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.064986792 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064633606 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.064339877 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.064701879 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064664555 seconds)
    (9/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.064698735 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.07472924 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.064703185 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.064612136 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064243071 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064844312 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064702869 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065428798 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064536654 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064520499 seconds)
    (19/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.064786546 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064535129 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.064086613 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064264013 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.064334617 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064829816 seconds)
  done (took 2.911132904 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.078747118 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.06574957 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067569448 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067287742 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.06789753 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067587495 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067602189 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.066300822 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067842026 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065535953 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068203861 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.068161213 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065844067 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.068494645 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066368986 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067711735 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067316297 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066578266 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066435103 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.068175108 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067686568 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066376758 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068040201 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067580541 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067944978 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068322756 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066270681 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066952509 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067889106 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.068244892 seconds)
  done (took 3.339833715 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066630117 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060252555 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061009941 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070180518 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060652359 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060937513 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061104734 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060122112 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.061123096 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061669748 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.06141253 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060585112 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.06176642 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.0608541 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060900957 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061453896 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066052356 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079772559 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061031529 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061055161 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064868269 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060939627 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060644503 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060594314 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061154766 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060620101 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060853899 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060927869 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060319717 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062205656 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060698405 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064806835 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.06577722 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.06119982 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070449184 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066076746 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.061338309 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065342645 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062108221 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061030691 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060989318 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060684088 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060927488 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060753756 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070865326 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061040101 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061310963 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061405185 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.061002368 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060216769 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060828914 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062620628 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.066557366 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062133814 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060523105 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061992753 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060472098 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061383188 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060657266 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.06073575 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060430012 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064533843 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062603274 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061491227 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080830514 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062550039 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070498437 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.063846283 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061624072 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064280883 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061329656 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078483753 seconds)
  done (took 5.846871178 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.081857432 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.084541437 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.064868013 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066166287 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06181891 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061513358 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.068905003 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061181874 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066367416 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.081931624 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061184299 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066000079 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065731451 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065512948 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061508606 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.066211778 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.069451477 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061808367 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061220561 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065459802 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061857582 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.068825789 seconds)
  done (took 2.796862857 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.137467677 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066577062 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.10607828 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.075682919 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069744787 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.07523553 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067043823 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06698048 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066623796 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067252991 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067325283 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067384312 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069288853 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067801745 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067622948 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067666714 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067183095 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067515665 seconds)
  done (took 2.654103264 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076233777 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065341466 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.085698225 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.06537465 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.06540642 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065528869 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070849443 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070704423 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.066377083 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066777143 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070698693 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066038985 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.066138341 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06706806 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066168327 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.06654191 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.06622565 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06778994 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070889804 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069892376 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070496707 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070541586 seconds)
  done (took 2.832436364 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076231181 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065060815 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.081012541 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066941999 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060879245 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061073828 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066477206 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066213173 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067017025 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065344637 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066141423 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061043229 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067565938 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066035065 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067636757 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066290062 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065323056 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066024093 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065923206 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061073467 seconds)
  done (took 2.645492545 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.085876215 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063135083 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063351823 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.083127872 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063695747 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063556001 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.083597689 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063855849 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063439304 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085489709 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063996932 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06371312 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.083296814 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.083049528 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063812454 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.083395865 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.08274073 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.083562652 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063867592 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064305464 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085845123 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063820175 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.083367296 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063765163 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063786302 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064863271 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063537021 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.083686969 seconds)
  done (took 3.344759732 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.063191619 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063348883 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064304256 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063842238 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.06473779 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064352629 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.06440076 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064452316 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.064451517 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064728504 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.064600725 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064863166 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.064456323 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.06421674 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064310541 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064061967 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064304637 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.06501915 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065376786 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065126518 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064610231 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064536131 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064273372 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063619634 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064613429 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.06431192 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064659827 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064684957 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064413017 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065225738 seconds)
  done (took 3.254478817 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.072881675 seconds)
    (2/2) benchmarking "in"...
    done (took 0.070631748 seconds)
  done (took 1.469747266 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062324174 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.076635351 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060797015 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.074077183 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070100998 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065274165 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070184584 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069213799 seconds)
  done (took 1.870860821 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066607801 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090049577 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062556669 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062932999 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.069460356 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.132232994 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.075753451 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074336603 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076517715 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065531271 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063110742 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.075318692 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062200801 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075934461 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063867341 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072333253 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069551906 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080089399 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075434458 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061528253 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074792035 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063813013 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061416333 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063097698 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062602782 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069460909 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.078636593 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.075162445 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071098986 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060832192 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081565115 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061597148 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062450091 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070902552 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.066202068 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061330504 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098478337 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062089341 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.067355354 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.061497391 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073881227 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.08268614 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075735797 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079656995 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.06325942 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.06392103 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061369958 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063466789 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065713189 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.071478402 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062140961 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068913897 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.061014277 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.063564045 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.07247593 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.062074624 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.067632675 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071382786 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075964573 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072130036 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070540365 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077293 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.069024031 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069357972 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061462414 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080089637 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063205621 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074535962 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.0763852 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062601144 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074716474 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060976911 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059835064 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.061105975 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094244104 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062956563 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062181799 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061171475 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061539901 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.063142132 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071000189 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066997869 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069007562 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065104416 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077294149 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.071064273 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061667184 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067976021 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079450879 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064919896 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061733834 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078873885 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065331022 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061235708 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079231418 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.07133086 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062917611 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061699785 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064913408 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074662969 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062507637 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060025852 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069063036 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062862879 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063747295 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065311872 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069292923 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061486594 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071503632 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065916329 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062345954 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059524852 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064842185 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061006316 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059201348 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.06957137 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.06051729 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074918777 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.067127345 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074725047 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.075603445 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071432456 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.076491883 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060486977 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059538132 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.078567909 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.070276217 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.061726325 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.07825885 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.060198646 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.070244132 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.060102325 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.199035813 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.071347592 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061967412 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065333129 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062352564 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068234728 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.0644331 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064197502 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067443226 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070662525 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073611482 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062823695 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070812855 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061990626 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.07724606 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.072397392 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.066564924 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064999673 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062390318 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073378503 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068412581 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.071070755 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061230615 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062133666 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.06185054 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072355953 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071249835 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063792065 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.069447195 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065837257 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062355611 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061703111 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.065925116 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065554238 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065231522 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062617335 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06909044 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070381772 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075508462 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.069299328 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071158441 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.06079001 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061257254 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063298501 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.06145373 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.06593753 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.071051711 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077468263 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073594765 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.08277498 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061776991 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071460348 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063577977 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078665971 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.075400697 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.06305909 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066691004 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061279327 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063685829 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.071481389 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073437688 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075722945 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076521308 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066971795 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066293632 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.06137198 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076782118 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.062084652 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070291902 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071479819 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.066376511 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061705308 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.063162339 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.07050185 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066266667 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.06189111 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077265957 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067734921 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061260449 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075801727 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061849605 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072325581 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061209177 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065215609 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066811527 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063487111 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071015192 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076873642 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.061499115 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062264877 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.077157305 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063732236 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063276896 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.07035673 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.077052922 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.066806206 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069777512 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072892974 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072035841 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.066479303 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071836583 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062417538 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.07094684 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.06452332 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073191058 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061667662 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079359607 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.06069679 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076569315 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061875409 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072688551 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.06187149 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070979687 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062539941 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.078426793 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063304584 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062001926 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073338397 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060068432 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070290319 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060556918 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.06598704 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066973057 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.06967296 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062407944 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070610046 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.062503033 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.070225969 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.065753536 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.069386372 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.070286227 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.065636726 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.06054769 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068847337 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071359421 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.069182649 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.061947065 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.204169737 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062361744 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072535407 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064925184 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06441765 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07156602 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.067697436 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.070480986 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063643624 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063662645 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063926433 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070838365 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071808797 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080020666 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070383686 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069262349 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.070929063 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061073945 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077416868 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.062111197 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069355129 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061063384 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069795819 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070870508 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061969183 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081111687 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063365229 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.070246132 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074070942 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070803878 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.06552659 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.0797398 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064690174 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070589832 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.070051068 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066737962 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068866074 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063714654 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070395343 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071865362 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072428881 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062689534 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069708298 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070957338 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063551413 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.06958091 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063336136 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069865095 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063457754 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060580047 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066294427 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073467193 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066811033 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.067081951 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.065265034 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060541075 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.062196551 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068454721 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066258878 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.07022049 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076918799 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060569535 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062979216 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061688534 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065538198 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.0794901 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071853696 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069772719 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.06687602 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.061083747 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063380652 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063523768 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.062208424 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065669425 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060971224 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061855904 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072360839 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.064103452 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066100221 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062098506 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.063056614 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071565909 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066630747 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062795623 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068552357 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.062047555 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067233216 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.061188781 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063777604 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066448135 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061617194 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065931012 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072225372 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.078644476 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068260448 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070912722 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062732648 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070086266 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077631252 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069521182 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06313991 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071514319 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061326427 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080523952 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071512758 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070681714 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071551555 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063411783 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.078248034 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066408829 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.072083723 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076924494 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062727859 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068074821 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.06082179 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07717405 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066306256 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061123977 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.070002293 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069380591 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067407144 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072523655 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.061647889 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.069337667 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065652279 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.064580391 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.062195864 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.062395621 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.069393963 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076243159 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060219528 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.06301901 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067039478 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.067841507 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.063961674 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072794455 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.069353367 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.206672494 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063801211 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.065701611 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.06488358 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075531791 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063705953 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067252383 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.067082497 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.062101214 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069434289 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07956082 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071940988 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071878346 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061948107 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061379998 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.080281973 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.067426614 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065910165 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070464568 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071040365 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073913223 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.07193351 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.079137099 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062491157 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068222396 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074719869 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.06327595 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061651035 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.06596308 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063610668 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070485838 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070379821 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068696973 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06247113 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.067317314 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074859359 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063226677 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066997241 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066873254 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063402624 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072673931 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070347134 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.07059041 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063374185 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061070067 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064484057 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.069725461 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.068074418 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.069665135 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062336281 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.066712939 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.074266831 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.067789102 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064910332 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061974563 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065198191 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.07135725 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.066449061 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061377474 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066881202 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066428138 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.069051524 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071374498 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066757646 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061412846 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.079229268 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.070825602 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.071414532 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063591818 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.0637636 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062377433 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061737449 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073365712 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061579177 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063550831 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066669571 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063825193 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.082626276 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.07032311 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078409062 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063017879 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066721788 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061933151 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071896697 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066989639 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.062676743 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072904361 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.061745808 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077892714 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.07423024 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.067746311 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.062382434 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.086662199 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.070512849 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.077134557 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072306341 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.071682933 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.065440345 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071796471 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063523798 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072754957 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062169389 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061036815 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071699339 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070927485 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075094926 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.062080248 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.072116371 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.063902712 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.070608195 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069702914 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.06357273 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063146515 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063095402 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071163237 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066391706 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070568751 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.066203253 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.078048873 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.062125754 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.072046387 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069861513 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.072322753 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074665045 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072745839 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069082271 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.061290134 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068446252 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069322498 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061722512 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065503777 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063667451 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081663459 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.062362599 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.062118054 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074396256 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.210489211 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061305369 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069745992 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.067687883 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072509097 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.06367273 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073406163 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.066155491 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.063225698 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.06686271 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066771722 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060973913 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061726882 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.06186923 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071814289 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066359329 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061996327 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08100774 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.06361965 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.07092495 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073267223 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068904837 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063554044 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060891077 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062930874 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.077172226 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077456049 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065595785 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070744329 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063443609 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.071350804 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060730576 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070864556 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.070421416 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07048988 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061722509 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062101776 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076873235 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077740085 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067062061 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.07170335 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.071719258 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.06342683 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.084106007 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070703122 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063177995 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.07319099 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064565926 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061095638 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.06108639 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063841411 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073342697 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061376783 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063948751 seconds)
  done (took 42.487817963 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.098219971 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061783523 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061605083 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061720227 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073147004 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062707286 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061865603 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063064292 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063188475 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064411623 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061813606 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061692123 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072541639 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075048482 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072248864 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065583716 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061590629 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062663913 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061301973 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062662412 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071903566 seconds)
  done (took 2.844204385 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.067928498 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.076604114 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072677747 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.078419586 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06981154 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06562875 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.072879833 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066019165 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.074048031 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071514731 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.073412442 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066034942 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.071483132 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.071177272 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071392405 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065745823 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.073573786 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069852015 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.066107876 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.073159052 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066252753 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.072949551 seconds)
  done (took 2.982328843 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063991012 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062165594 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070368133 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.064141137 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061097001 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064444928 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060748631 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065728147 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065563052 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065950153 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070536104 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062824888 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061438934 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067837624 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061740024 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.06240409 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.104258696 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062534007 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062604534 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060934776 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.06373363 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070799997 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.061166578 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061594914 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066070905 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064824725 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061457464 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063989046 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062184186 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066081578 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062607583 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.061281934 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070300205 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.070092478 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065916467 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065847224 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.063386031 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062040658 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061401601 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.061547012 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069820011 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.063198938 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061766504 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063020748 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070263302 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061711466 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061079845 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071220054 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.061420133 seconds)
  done (took 4.620945748 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072249297 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.114377958 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067695174 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094439264 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.07482717 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.068174583 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.067300795 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.09513655 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062638361 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.06391421 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.075930856 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075908725 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064689673 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.066065632 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068454048 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064670614 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06536997 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06386299 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067426387 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063732127 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.067035678 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.068512973 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.074608607 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074602158 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065815131 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06399526 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064309332 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065792461 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074703116 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067840226 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.066198591 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066764219 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074771757 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067324106 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063572507 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063766489 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.07587224 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064589032 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.064265583 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062831332 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.064574349 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.066458621 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068743213 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.076208024 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064765755 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.06954675 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065055992 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062532212 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.075226132 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.064692291 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067736859 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.073975839 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065267844 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065253985 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066110346 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.07562398 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064716306 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.063590504 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064999811 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.075250442 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062967401 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065519003 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.075593505 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.064713161 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067633446 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.07607591 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.069090648 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065569484 seconds)
  done (took 6.265965669 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071076895 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096766724 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073289328 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073207991 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072307978 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.072950085 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.072667656 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.072552419 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072452507 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073036715 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072668451 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.111996822 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068582104 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076630411 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072162387 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.072765048 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.072494656 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072781731 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.072780607 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073306549 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.072463079 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072720948 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.072165055 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073326557 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075330751 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068484751 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072453874 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072077033 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073640911 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072225863 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.075042757 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.07220254 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072520064 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073538268 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074814326 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.072547558 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062356342 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072443559 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.072527473 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071977601 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.070555866 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073147743 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.072764473 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068572429 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072435004 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.075058335 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07272346 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074578283 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078163457 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071072736 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.070286688 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071443951 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070262392 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071193849 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071187574 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.077490017 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071640113 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071152102 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07086685 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071399456 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073486307 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079648705 seconds)
  done (took 6.021702288 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074811301 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067525133 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080651484 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.06201512 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06169367 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071206453 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061494447 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061204959 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068616795 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068705828 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070059954 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070921183 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072907335 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069924428 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070861598 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072905564 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071198513 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.071251089 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.0682556 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.071029697 seconds)
  done (took 2.845004362 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.074918275 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.079975312 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067567167 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.071453653 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.067143221 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.071123046 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066524582 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067965046 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068178494 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067788167 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072228371 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072543023 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067849691 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.071425467 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071526115 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.071196505 seconds)
  done (took 2.574320551 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.067129033 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068160399 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068244186 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063328297 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.066334943 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062159662 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062638128 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.06134221 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.062011707 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.076384938 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062954991 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.075094847 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062242779 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061650885 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.061714016 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.068322172 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06200327 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062856447 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062769158 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.067316471 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068810425 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063346564 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066405052 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.06304673 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.068152043 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.069508413 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064095888 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.066606278 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062350013 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062959102 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.068866276 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.069390939 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062263933 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063367996 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061767259 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062570946 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062641463 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.063690064 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.068462508 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.063117691 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061065251 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.06785758 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.063091076 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063775597 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061789568 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.063200902 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061906117 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068013538 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.063075749 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.068173695 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.06267541 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064473519 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.063231361 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.070574107 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.065364025 seconds)
  done (took 5.020505493 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077171388 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066959616 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061317184 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060900519 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06615503 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.067690198 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067382964 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067106617 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067568405 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061365949 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06741157 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066161262 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067477648 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067247145 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067394013 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066937846 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061174815 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066575151 seconds)
  done (took 2.652859332 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.073956804 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066905284 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.071744374 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.06652712 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.066061303 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066149487 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061300513 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061646575 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061790183 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066329101 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066504332 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.066486096 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062196077 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.06599125 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06654811 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066281523 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.06636094 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062025275 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.066703992 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061850236 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066405516 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061647878 seconds)
  done (took 2.890708839 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.090256598 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.08505742 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.128263671 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080818898 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089322321 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.073000568 seconds)
  done (took 1.996772138 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.093622287 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.105186539 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066411007 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066263722 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075680128 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07378211 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06986853 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069750919 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075184633 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074025139 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070011798 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075914672 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075566663 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071253389 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075201511 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078317547 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07002167 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070234162 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067812988 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078299544 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070382863 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075540533 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069984716 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070026274 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0700095 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071963023 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078117214 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073954532 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069620609 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076099004 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07806883 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070062052 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075781926 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074533845 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067159342 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075774931 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070404138 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078099374 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076186163 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072213775 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067001887 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075764876 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075726242 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072003721 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077314889 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07025443 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072682303 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070695711 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070518942 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080707784 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076167667 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072238422 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075830399 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078691676 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078853905 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080415977 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075400053 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072452724 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0757497 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074563649 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072247273 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076428892 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072206426 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074712679 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078826164 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07243481 seconds)
  done (took 6.362802276 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.099643556 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067379108 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070221044 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07402527 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071466909 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070268231 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070129229 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070471821 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070407919 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068315784 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10596653 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070627721 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072118818 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072403662 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070677403 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070355592 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070674317 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071919102 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067575194 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080321243 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070526399 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072659242 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072004379 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072522658 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074556117 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078231966 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070274106 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070906511 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07028011 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070666219 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07226359 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070483253 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072317098 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067308845 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071836264 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070506102 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070297231 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071740472 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07017848 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075895511 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071678074 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078852236 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070070416 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071076613 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074773506 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070358295 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070132659 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067749126 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070261017 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067745551 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074316791 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074520441 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074596991 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072684578 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070133131 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070571659 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070301917 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070528683 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07068392 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078296476 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072089094 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070448101 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080011164 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070659719 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070215475 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072125104 seconds)
  done (took 6.276691541 seconds)
done (took 130.111205829 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.218855478 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.18994646 seconds)
  done (took 1.850643426 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075092264 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.097856188 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.077337744 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.140553726 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.071436062 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.107857432 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107054035 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.075467235 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.071404879 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.071223799 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.071261888 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.073692604 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.14103566 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.071881161 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.071277253 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.073956971 seconds)
  done (took 2.86033548 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.107907725 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.184156051 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.115690576 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.071323359 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.110027937 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.078297971 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.071385013 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.082583741 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074979625 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.082925821 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.078103917 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076456874 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.072891745 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076646155 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.075015511 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.080871422 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.073079894 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.078051248 seconds)
  done (took 3.05738082 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098200908 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086765252 seconds)
  done (took 1.655403468 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.154861427 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105702318 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144176963 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.325224861 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.128613038 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.124970574 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.128679468 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.124381769 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110828569 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.12114164 seconds)
  done (took 2.933482201 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.107007716 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.178137216 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.317105697 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.123224133 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077949326 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100404649 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.125068362 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082955834 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.078858408 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079191305 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079455294 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077017649 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.10140422 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.075742324 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.074371319 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.076002106 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.104010799 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.073724185 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.074532428 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.075394405 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104381774 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.070127501 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075845826 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074067219 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.077297256 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077650231 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.071939205 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071664269 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.077158818 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.076893425 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.079155337 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.098456028 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.079605636 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.100862065 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.076118994 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.101677592 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.076210782 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075336875 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.07661513 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075096806 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.078777288 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.078479501 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.081604514 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.078293606 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072990736 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075947512 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.07313104 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.07146423 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079973541 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.072704232 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.078400068 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.076964193 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.097350331 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070320141 seconds)
  done (took 6.263819426 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108857713 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.105093378 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069448565 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.11205978 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.104907352 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069252716 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.103354274 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.099396723 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.107611328 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069208557 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06826882 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068580502 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075550433 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.07813073 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.115457895 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.106807635 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070514463 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.06875115 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.106648164 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107022975 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068266003 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.10060371 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.09917764 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.105185435 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.067718461 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06901896 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067654007 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068312691 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075317755 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.077071842 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070283583 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077670327 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.086817956 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076880248 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069443607 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.070059809 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069913244 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.077589601 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07783421 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078065183 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.076246796 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06970276 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069715953 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070339449 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070554434 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069115511 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07622174 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.077513857 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.076320344 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068366566 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068698122 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068029469 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068951128 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.0749824 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.073537737 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075164106 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.074559055 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067893197 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067995512 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069166613 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075779474 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075683082 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074912963 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068698932 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076144152 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067950526 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079256332 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080231387 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067739243 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068148806 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067511704 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067696987 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068249203 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.073544088 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.073438298 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068202401 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067545278 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067637887 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077047758 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075790434 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069623728 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075565523 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.06934753 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069906191 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070349319 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07026794 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.075748714 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079940964 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069260904 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067848488 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068539309 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069639374 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068586025 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074394779 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075250459 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074414348 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.073784305 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067708209 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.073772188 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073546101 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06773388 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073209762 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066623975 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067124245 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066948432 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072291428 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.071631647 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074029092 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067300958 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066638289 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.072387824 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074547913 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066732845 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.07240136 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074194476 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.210025486 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069268263 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079531485 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069386546 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.081112586 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071978413 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079561651 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070915451 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076967772 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070417428 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069849029 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070564078 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076529743 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071025668 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070061051 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070204563 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069754495 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.077452986 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.080732238 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07148 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077069937 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.077386686 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071199158 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076839511 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070057514 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077966541 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.303431568 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068855581 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069289285 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079609149 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069883271 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.07014773 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070382677 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078814242 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07013956 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077980722 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075642359 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069196839 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.082988423 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076945873 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.076338438 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.079677113 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070709287 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069924949 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069836488 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069881691 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075132459 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076591262 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070996193 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070387999 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.076168498 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.079810916 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069782232 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.076636565 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076353641 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.076719891 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071162285 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.06998795 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079727028 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077537701 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.073844391 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.07564838 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077050605 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070454764 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075604181 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077030194 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07020384 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.084293839 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070394672 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.080672418 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.077539409 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075589443 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077028484 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.078346224 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.078894743 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.079743887 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.081889326 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.07036673 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069689997 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.076197027 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069987282 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070201259 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.07607095 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070086741 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070672414 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.08201836 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068528579 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.07658448 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.067645012 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.077796553 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069072369 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069459027 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07983928 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068265664 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069020204 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076282132 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070624361 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.076273377 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079905079 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.07544047 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069127717 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070593144 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076752581 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075307268 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06798767 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06956729 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069855591 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.074963134 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074285771 seconds)
  done (took 18.667448455 seconds)
done (took 38.775766381 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.210723333 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.169638239 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198225809 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.117453718 seconds)
  done (took 2.267361123 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.094000911 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.101580535 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.077461444 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.066927226 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.082000569 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.067106429 seconds)
  done (took 2.001759463 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.252121707 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.191343743 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.17363887 seconds)
  done (took 2.124730597 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.219733661 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.195694208 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.50313389 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.307415744 seconds)
  done (took 2.839287352 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.130481407 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.078847269 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.064218276 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.07826705 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.105349394 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134446608 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.087105252 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.10905226 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.07605089 seconds)
  done (took 2.438028471 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.131975296 seconds)
done (took 13.342193065 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.204781835 seconds)
    (2/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.1050078 seconds)
    (3/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.124552105 seconds)
    (4/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.240544664 seconds)
    (5/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.07754499 seconds)
    (6/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.271278583 seconds)
    (7/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.108483855 seconds)
    (8/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.07463297 seconds)
    (9/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.2084373 seconds)
    (10/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.171039968 seconds)
    (11/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.225576778 seconds)
    (12/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.15537465 seconds)
    (13/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.081068646 seconds)
    (14/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.068051051 seconds)
    (15/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.169148733 seconds)
    (16/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.077947524 seconds)
    (17/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.210393849 seconds)
    (18/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070513209 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.093318511 seconds)
    (20/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.141007557 seconds)
    (21/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.196979827 seconds)
    (22/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.095707717 seconds)
    (23/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.075481872 seconds)
    (24/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074708796 seconds)
    (25/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.189897714 seconds)
    (26/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.193434196 seconds)
    (27/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.076715466 seconds)
    (28/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.199004133 seconds)
    (29/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.161860897 seconds)
    (30/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.076755796 seconds)
    (31/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.134863678 seconds)
    (32/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.185324737 seconds)
    (33/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.074258994 seconds)
    (34/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.144285231 seconds)
    (35/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.071491041 seconds)
    (36/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.077966019 seconds)
    (37/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.074626994 seconds)
    (38/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.14861618 seconds)
    (39/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.068782239 seconds)
    (40/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.077749096 seconds)
    (41/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.076058777 seconds)
    (42/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.211897087 seconds)
    (43/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.075172609 seconds)
    (44/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.06503242 seconds)
    (45/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.068077964 seconds)
    (46/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.156130172 seconds)
    (47/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.189085885 seconds)
    (48/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.079438974 seconds)
    (49/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.087228916 seconds)
    (50/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.120330134 seconds)
    (51/341) benchmarking ("sort", Bool, false)...
    done (took 0.147789122 seconds)
    (52/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.201844287 seconds)
    (53/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.180174073 seconds)
    (54/341) benchmarking ("sort", Int64, false)...
    done (took 0.067965453 seconds)
    (55/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.090548241 seconds)
    (56/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.079945631 seconds)
    (57/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.182111049 seconds)
    (58/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.169525971 seconds)
    (59/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.127522535 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.083945493 seconds)
    (61/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.074770716 seconds)
    (62/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.150890796 seconds)
    (63/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.067818208 seconds)
    (64/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.168027592 seconds)
    (65/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.200731581 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.089487231 seconds)
    (67/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066094643 seconds)
    (68/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075372674 seconds)
    (69/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.093116996 seconds)
    (70/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.236661992 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.086439138 seconds)
    (72/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.188678719 seconds)
    (73/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.090114842 seconds)
    (74/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065259616 seconds)
    (75/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.070772617 seconds)
    (76/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.217078321 seconds)
    (77/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092471528 seconds)
    (78/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.062965999 seconds)
    (79/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.16718251 seconds)
    (80/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.063992667 seconds)
    (81/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.087843898 seconds)
    (82/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.064796447 seconds)
    (83/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.079650625 seconds)
    (84/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.077592661 seconds)
    (85/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.213338058 seconds)
    (86/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.233221285 seconds)
    (87/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.076244792 seconds)
    (88/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.225403705 seconds)
    (89/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.066644419 seconds)
    (90/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.078914788 seconds)
    (91/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.203151596 seconds)
    (92/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067487887 seconds)
    (93/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068148253 seconds)
    (94/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.153010856 seconds)
    (95/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.075733019 seconds)
    (96/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.214361063 seconds)
    (97/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068443592 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.143798387 seconds)
    (99/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.152718123 seconds)
    (100/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.126404464 seconds)
    (101/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.077932731 seconds)
    (102/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.082830307 seconds)
    (103/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.063574953 seconds)
    (104/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.090833363 seconds)
    (105/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.148047605 seconds)
    (106/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.082846072 seconds)
    (107/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.063670721 seconds)
    (108/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.067245969 seconds)
    (109/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.218099936 seconds)
    (110/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.074584919 seconds)
    (111/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.140117042 seconds)
    (112/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.161383322 seconds)
    (113/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.070657761 seconds)
    (114/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.170750183 seconds)
    (115/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.064140334 seconds)
    (116/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.138137756 seconds)
    (117/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.080207535 seconds)
    (118/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.209732523 seconds)
    (119/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.149215558 seconds)
    (120/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.063207803 seconds)
    (121/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.06430208 seconds)
    (122/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.175991907 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.081083088 seconds)
    (124/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.063895861 seconds)
    (125/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.080470448 seconds)
    (126/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.134858903 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076803882 seconds)
    (128/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.164054177 seconds)
    (129/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072945654 seconds)
    (130/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.063552481 seconds)
    (131/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.063894112 seconds)
    (132/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.064383938 seconds)
    (133/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.062600824 seconds)
    (134/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.064154874 seconds)
    (135/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.089867186 seconds)
    (136/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.066094053 seconds)
    (137/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.066266405 seconds)
    (138/341) benchmarking ("sort", Float32, false)...
    done (took 0.133730978 seconds)
    (139/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.065534019 seconds)
    (140/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.064611399 seconds)
    (141/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.065506691 seconds)
    (142/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.082030964 seconds)
    (143/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.074081292 seconds)
    (144/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.138829729 seconds)
    (145/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.072098771 seconds)
    (146/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.127961903 seconds)
    (147/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.142709793 seconds)
    (148/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.07113546 seconds)
    (149/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.084991666 seconds)
    (150/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.063843393 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.086854505 seconds)
    (152/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.186566262 seconds)
    (153/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.074909662 seconds)
    (154/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.062793602 seconds)
    (155/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.127862227 seconds)
    (156/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.0628952 seconds)
    (157/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.074360124 seconds)
    (158/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.074733965 seconds)
    (159/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.064173478 seconds)
    (160/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.073466441 seconds)
    (161/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.064708176 seconds)
    (162/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.063499582 seconds)
    (163/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.081053229 seconds)
    (164/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.080745117 seconds)
    (165/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.20584544 seconds)
    (166/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071151745 seconds)
    (167/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.177503176 seconds)
    (168/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.086059985 seconds)
    (169/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.062159819 seconds)
    (170/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.067311426 seconds)
    (171/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.064035957 seconds)
    (172/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.067357705 seconds)
    (173/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.083820085 seconds)
    (174/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.06260072 seconds)
    (175/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072016976 seconds)
    (176/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.142755963 seconds)
    (177/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.08522081 seconds)
    (178/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.115722055 seconds)
    (179/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.070068173 seconds)
    (180/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.080161169 seconds)
    (181/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.063210546 seconds)
    (182/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.186825707 seconds)
    (183/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.064927258 seconds)
    (184/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.146401071 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.084724839 seconds)
    (186/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.070900321 seconds)
    (187/341) benchmarking ("sort", Int8, false)...
    done (took 0.142747225 seconds)
    (188/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.062680731 seconds)
    (189/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.063458059 seconds)
    (190/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.066079413 seconds)
    (191/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.068401372 seconds)
    (192/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.06655506 seconds)
    (193/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.34981506 seconds)
    (194/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.142438406 seconds)
    (195/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.067711888 seconds)
    (196/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.074753204 seconds)
    (197/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.077285794 seconds)
    (198/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.070836891 seconds)
    (199/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.070326578 seconds)
    (200/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.162320448 seconds)
    (201/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.0946905 seconds)
    (202/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.091189075 seconds)
    (203/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.178551606 seconds)
    (204/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.079692596 seconds)
    (205/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.068642735 seconds)
    (206/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.147605015 seconds)
    (207/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.071811232 seconds)
    (208/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.067146371 seconds)
    (209/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.147701769 seconds)
    (210/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.143150486 seconds)
    (211/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.070408299 seconds)
    (212/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.081070286 seconds)
    (213/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.074809048 seconds)
    (214/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.06733755 seconds)
    (215/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.143267589 seconds)
    (216/341) benchmarking ("sort", BigInt, false)...
    done (took 0.268401985 seconds)
    (217/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.066384844 seconds)
    (218/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.067131394 seconds)
    (219/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.078427845 seconds)
    (220/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.161641001 seconds)
    (221/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.065483805 seconds)
    (222/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.066212321 seconds)
    (223/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.075485575 seconds)
    (224/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.112281084 seconds)
    (225/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.066543007 seconds)
    (226/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.159979131 seconds)
    (227/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073344973 seconds)
    (228/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073400607 seconds)
    (229/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.151479171 seconds)
    (230/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.069249721 seconds)
    (231/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.065410399 seconds)
    (232/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.074094103 seconds)
    (233/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.066144877 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077870175 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076191801 seconds)
    (236/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.0660476 seconds)
    (237/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.066396524 seconds)
    (238/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.075026648 seconds)
    (239/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.14732145 seconds)
    (240/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.122402389 seconds)
    (241/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.160545376 seconds)
    (242/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.064964291 seconds)
    (243/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.06597415 seconds)
    (244/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.066873148 seconds)
    (245/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072954953 seconds)
    (246/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068216328 seconds)
    (247/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.064602978 seconds)
    (248/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.066988193 seconds)
    (249/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.06493449 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.097672499 seconds)
    (251/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066546103 seconds)
    (252/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.075466381 seconds)
    (253/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.066162196 seconds)
    (254/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.151803625 seconds)
    (255/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.066308124 seconds)
    (256/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073851133 seconds)
    (257/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.07316202 seconds)
    (258/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.186885305 seconds)
    (259/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.066171381 seconds)
    (260/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067700751 seconds)
    (261/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.066192322 seconds)
    (262/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.068303622 seconds)
    (263/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068037394 seconds)
    (264/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.067405082 seconds)
    (265/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.068607173 seconds)
    (266/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.161215583 seconds)
    (267/341) benchmarking ("sort", Float64, false)...
    done (took 0.141104292 seconds)
    (268/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.068021449 seconds)
    (269/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.075595502 seconds)
    (270/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.066008037 seconds)
    (271/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.066695309 seconds)
    (272/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083863357 seconds)
    (273/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.066285872 seconds)
    (274/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.078509878 seconds)
    (275/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.067931896 seconds)
    (276/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.066875247 seconds)
    (277/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073072856 seconds)
    (278/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.094841628 seconds)
    (279/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.06731551 seconds)
    (280/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.067551692 seconds)
    (281/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.068471298 seconds)
    (282/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.068131917 seconds)
    (283/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.067613056 seconds)
    (284/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.066271517 seconds)
    (285/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.076164785 seconds)
    (286/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.073064265 seconds)
    (287/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.067462265 seconds)
    (288/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.084760766 seconds)
    (289/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.072533896 seconds)
    (290/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.09266383 seconds)
    (291/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.07303342 seconds)
    (292/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.067476839 seconds)
    (293/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.067879041 seconds)
    (294/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.071936414 seconds)
    (295/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.084384756 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.15008663 seconds)
    (297/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.068987736 seconds)
    (298/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.067013329 seconds)
    (299/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.066410116 seconds)
    (300/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.068617439 seconds)
    (301/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.068498922 seconds)
    (302/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074853764 seconds)
    (303/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.073510862 seconds)
    (304/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.086587516 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.136031312 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.125112717 seconds)
    (307/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.066632639 seconds)
    (308/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.070033703 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.092865865 seconds)
    (310/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.081687206 seconds)
    (311/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.066705214 seconds)
    (312/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.066737694 seconds)
    (313/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.072402017 seconds)
    (314/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.080917235 seconds)
    (315/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.177164286 seconds)
    (316/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.065807402 seconds)
    (317/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.071555232 seconds)
    (318/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077322499 seconds)
    (319/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.067686084 seconds)
    (320/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.064935711 seconds)
    (321/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.065584618 seconds)
    (322/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.064578507 seconds)
    (323/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.064352727 seconds)
    (324/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.245210619 seconds)
    (325/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.068168167 seconds)
    (326/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.07499771 seconds)
    (327/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.067970797 seconds)
    (328/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.13536338 seconds)
    (329/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.076213838 seconds)
    (330/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.067281071 seconds)
    (331/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.069174098 seconds)
    (332/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.070668048 seconds)
    (333/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067911764 seconds)
    (334/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.068811424 seconds)
    (335/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.075817028 seconds)
    (336/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067733333 seconds)
    (337/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.072472064 seconds)
    (338/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.070236017 seconds)
    (339/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.069409227 seconds)
    (340/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.092032308 seconds)
    (341/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.06808527 seconds)
  done (took 36.49556608 seconds)
done (took 38.029765382 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.086025896 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.093119335 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.075283396 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.087110686 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.083496317 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.103099775 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.076308243 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.080743791 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.083641741 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.081886098 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.081354599 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.075469143 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.077796874 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.077830535 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.075669026 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.091908202 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084211876 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.076513632 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.077162398 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.067420659 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.076999125 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.068353406 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.067289959 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.075021278 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.080434648 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.075382996 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.078392439 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.077947039 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.068822301 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.068836425 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.073451758 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.077633433 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.068406795 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.080044123 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.07724143 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.077695086 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.078261312 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.082047488 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.068200298 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.069204283 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.08006813 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.068492419 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.077258438 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.075432859 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.073626936 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.075869268 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.077229249 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.080737632 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.092540635 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073688019 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080076013 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.080026611 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.080192242 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.07450145 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.073885765 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.077224896 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.074958127 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.08882521 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075046923 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07086907 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076795755 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.075916245 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073314813 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.074904359 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.074906355 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.077626548 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077257635 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.073528416 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077808922 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.073997752 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.065638065 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074435983 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.07127795 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.065945426 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.078437479 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.080655111 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.064766285 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070709788 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074444495 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.074871593 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.065677894 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070571436 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065346052 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071469611 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07157861 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.074178442 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.071542871 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.073778465 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065292352 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.074902535 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074017291 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074917764 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.065216479 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.077633015 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.065501086 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.072925126 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.068054895 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066350657 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065327092 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.073107551 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066365153 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070398284 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.0744551 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064895475 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071187752 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.078960189 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066037129 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074243772 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.065214944 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.065360419 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076259466 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.077726244 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066364727 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070822706 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065048111 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073783492 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.06734065 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.067673561 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.067610183 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.069190713 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.075641419 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.067822805 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.072860507 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.073631479 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.080130486 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.0675582 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073179668 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073255217 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.068095604 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.074750134 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.068299417 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.066622117 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.065519154 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.079557134 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070447017 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.066118816 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.074069268 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073276296 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.077446619 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067079603 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.07715606 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.074270171 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.072947295 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.075320035 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.067006599 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.079778359 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073249513 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073161093 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.067426128 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.214052014 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.065565321 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066219692 seconds)
done (took 13.121195595 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.069645189 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105540033 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.073215673 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082380084 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079566572 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.067864169 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070377402 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.085262684 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.073008832 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089108496 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.096923179 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.09102852 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.096141977 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.068008853 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.069092951 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.069958197 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.067788857 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076325151 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.083598491 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.092056468 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.098433337 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.068926092 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.071114232 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.085628729 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.079616559 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.085754133 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.069861057 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.069957391 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.071266613 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.124806459 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.094055939 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.068297318 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.070009011 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.082682845 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.083831435 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.076041333 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.069702464 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.073237542 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.069617004 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.068491892 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.070316856 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083046782 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072243273 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070969749 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.067900694 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.067755803 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067231743 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.069780133 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.079788897 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070045145 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.07409744 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.078110382 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.070659373 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.068576657 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.067050169 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072612443 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.068505258 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.069334275 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.068593027 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.068386253 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.068985906 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.071252135 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069702332 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.069413748 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.072217312 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.070905056 seconds)
  done (took 6.694523033 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084246354 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.097870672 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.082050521 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.08235176 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.068529529 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069275765 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.069761374 seconds)
  done (took 2.269260632 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.06936202 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.082378728 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.085614742 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.085321167 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.078585925 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.087554157 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.069422698 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.100392587 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.068057852 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.08299518 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.116163134 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.086392919 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.072273897 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.081227333 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.069221955 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.076169977 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.069234049 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07930365 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.076990281 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.085038697 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070681859 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096364076 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081833321 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.067332465 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.087177776 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.070861871 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.066147578 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.06711494 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068308231 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.06905447 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069918949 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.107679651 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.072868469 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.081603661 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067383622 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.06837803 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.075581826 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.073399818 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071283512 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.077976092 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.07444949 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.070420108 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067572983 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.07056584 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.07242556 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.072388035 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.06797725 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.070558819 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.070125847 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.081125599 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.068002191 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073267432 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.074116423 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.074140184 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.079505205 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07340864 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07954922 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.071004731 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.081509003 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.077934536 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.070961685 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.077421447 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.076637177 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.074118371 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.076727645 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.073714268 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.072558474 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.074453162 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.070090101 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.071519473 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.071313959 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.076452565 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.06853802 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.071004465 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.072756443 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.071175702 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.072488971 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.086718884 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.086367542 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081812789 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.071456972 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.070333935 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.073073991 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.085925809 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073892383 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.070469968 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.07297681 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.068116415 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.073674788 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.070491252 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.076037004 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.070820287 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.078105278 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.071795719 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.073948164 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.077330691 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.069463675 seconds)
  done (took 9.048440999 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.069284851 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.068195408 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.068509455 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.067813187 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.067558815 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.070260171 seconds)
  done (took 2.166184673 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092135812 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069604679 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.086303656 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.069761456 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.108734489 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.076335732 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.07668744 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.077691726 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.075937791 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.083462198 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.076187293 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.078917621 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.07570615 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.074471958 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.075848401 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.070855418 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.075864551 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.072981147 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.082893077 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.074425774 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.082747345 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.073873562 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.074153938 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.080818989 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.072302491 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069999627 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070526952 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.083252268 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.082730823 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.077712619 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.073528132 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.072423076 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.077576431 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.077038748 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.076012393 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.077559021 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069212414 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.074857212 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071523577 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.072135232 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.078135745 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.073713969 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.071703557 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.074628952 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.076672132 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.078108898 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.075202261 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073013813 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.075595454 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.074550028 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.08082065 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.069596603 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.071685058 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.074710461 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.07767093 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.077515485 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.074809771 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.075397706 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.074017986 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.078040182 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.069306485 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.072044116 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.076925105 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.071896336 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.074105134 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.074816146 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.077822688 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.074137227 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.073995965 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.069194357 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.074729034 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.069593868 seconds)
  done (took 7.178117347 seconds)
done (took 29.056045779 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.541706886 seconds)
  done (took 2.236715332 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.595595658 seconds)
  done (took 2.327702702 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 9.692674551 seconds)
  done (took 11.425426819 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.296150226 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.323539279 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.736674958 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.137191197 seconds)
  done (took 3.266042846 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.747065484 seconds)
  done (took 2.497556907 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.231395477 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.225473147 seconds)
  done (took 2.205804119 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.344958911 seconds)
  done (took 2.083339977 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.15666823 seconds)
  done (took 2.887647287 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.222408722 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.15931586 seconds)
  done (took 2.132451237 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.508406539 seconds)
  done (took 2.250355297 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.336382445 seconds)
  done (took 6.085837182 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.236826819 seconds)
  done (took 2.013305057 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.235769561 seconds)
  done (took 1.979559054 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.16474046 seconds)
  done (took 3.900966152 seconds)
done (took 49.041529315 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086420984 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087544496 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086682801 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082291156 seconds)
  done (took 2.054435924 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076285475 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.072088367 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.075396003 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.075505674 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.073594304 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.074455128 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074779676 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070594428 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.073216407 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.072003729 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070695073 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071744705 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.07746656 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.072094087 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.074563951 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.075431897 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071793484 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.072139443 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.074954252 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071837726 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.074706069 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071877147 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.07026651 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.072035044 seconds)
  done (took 3.495683196 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.081164022 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.074036773 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.077515139 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.073375542 seconds)
  done (took 2.05537783 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077856835 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077610934 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087183645 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.092726073 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.078755061 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078515384 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084565255 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.08657952 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.06786918 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.088213053 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069993681 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.068903215 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068978249 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.08759992 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084866532 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.064713563 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.066198103 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078487878 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077517195 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080150721 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.070812194 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.067649182 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.079228544 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077775041 seconds)
  done (took 3.61154321 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.081308785 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067455779 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.080354276 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.093029154 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.095010779 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.067925305 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.081126681 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.095472611 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.126532208 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.06772732 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073831572 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.067620762 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.107022023 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.068147058 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.08299928 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109051108 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111967963 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.072578652 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.101141584 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.067645006 seconds)
  done (took 3.479435453 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.07870655 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.07172493 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.072284284 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.067834902 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078806034 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.075166417 seconds)
  done (took 2.209953035 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.07097746 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.070030724 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068653363 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.068925836 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.07445447 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.069047039 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067633081 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.069309471 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.069439652 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.069383585 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068971976 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.068191179 seconds)
  done (took 2.590678112 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.158461314 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.072174442 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.072881777 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.068644466 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.073221515 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068967855 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.083427619 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.071533469 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.088170634 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.069602906 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.070302621 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.071509055 seconds)
  done (took 2.728798842 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102613247 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103013308 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14823563 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11996673 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117403043 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099376396 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.1216437 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.096772153 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.162544851 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.13921713 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117974081 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125786087 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089382482 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.071456251 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102827133 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104817971 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137507391 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075254346 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114949863 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.199290728 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117546289 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.114872015 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12512103 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117846204 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083307459 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124616955 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097694017 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105661113 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.156824117 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11296292 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122471576 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.100199725 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.074378954 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.073537311 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153544016 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.103798777 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139323961 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.095698606 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102288745 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090540391 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109677507 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.071271324 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.090003067 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.10881912 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087484337 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118559094 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.089690577 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10631154 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083467546 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.13502969 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109364869 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100900835 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08771179 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106242969 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134455629 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097478187 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113348703 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109489276 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084910027 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.121124439 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102822562 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100980502 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095352706 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.235026098 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161880163 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092991809 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.114175232 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115948215 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.084875708 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095009417 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104876061 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.133345181 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109320625 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.109899949 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117329767 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.126637379 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112705521 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.0939959 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.132660622 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096281606 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074034518 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.107171587 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.132902494 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087525148 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103196076 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131857258 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093882633 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109720976 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.094384042 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.120991604 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084086354 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.098989822 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07218517 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.100990736 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109625148 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100313968 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114602259 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.109529737 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081214678 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130602745 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111455054 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075291105 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119830969 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101380986 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158040062 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099232605 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077517213 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103934272 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096706493 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.152811538 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08726213 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082729052 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1008458 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147932167 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096653296 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.173041379 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098627644 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131583557 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099250391 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090078948 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077363182 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.091997649 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104594625 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109394632 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104827348 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092165371 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.079615337 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089348776 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099125423 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094575925 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083508041 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115832935 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.104376812 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.077197721 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.248501726 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.076707376 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12577341 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.080694299 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112539308 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126466759 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.081918085 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108518426 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.130779656 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141331941 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.099744778 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109884381 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146094177 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.121310581 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08215766 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.087084967 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110935673 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.1441337 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.116209052 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088073933 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.079768511 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103684906 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113684228 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101239323 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.139656752 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129294989 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111261569 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100586512 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141466432 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120554624 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093631248 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097582958 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099200395 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.126682863 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109350866 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159819798 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097320163 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120855913 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117182772 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141289427 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.117758228 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092902606 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087223917 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098219827 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.106208425 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109021122 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145004421 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.098913786 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.074397115 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096593187 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135111979 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078927966 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102102887 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.092311458 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.095718323 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121260296 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.086427572 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084671721 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.070474281 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104783777 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140039869 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.07259633 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115892553 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.11762633 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106959843 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.105439116 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.0707779 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100927461 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.305578219 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104902381 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143551412 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118960363 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100190542 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118409784 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.102517218 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.107975369 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081767272 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.127346463 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.136674276 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099407418 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093040617 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140778076 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12053804 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.136495038 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.098891225 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117318186 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.107425933 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102500334 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105704753 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102958158 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145528618 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123604903 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.128075773 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117944394 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111317078 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110658034 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142478934 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085376849 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120232352 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.078416708 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116329994 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.079957394 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110512175 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.082585268 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.114996991 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082815945 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103912159 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.072431837 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.077199812 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144447429 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114165345 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092010366 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089049541 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.138936443 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134027512 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.084354485 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103620878 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.137840949 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103337675 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105046736 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.111864599 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.088251597 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098162295 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142413468 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081948356 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.085028946 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.101450426 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098645323 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109953789 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085442161 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077737164 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13977237 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106110255 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.258604216 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108636956 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095185222 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.12292167 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092867504 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090771845 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107772999 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106963041 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141582259 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.093058007 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.099884021 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121076621 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083840974 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.094877994 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.07252434 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086977477 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.078883653 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.111901174 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078242786 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110807218 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070922154 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131305026 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089593084 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.095287664 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104836527 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100180236 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131165989 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094378299 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131320622 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092555035 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104389396 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110350211 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097887692 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113019879 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1065854 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098847467 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112550514 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.099416132 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108567104 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114018775 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096914581 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143537884 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09268745 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123947166 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108801603 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109183083 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108801798 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120954282 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140260213 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115064814 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144547338 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077606827 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085348115 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107340346 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103131209 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149605746 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105574283 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.075186152 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119941338 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093632126 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099601178 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107858313 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085368319 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14764886 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089979012 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.090070432 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116475584 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091705725 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096919995 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077349824 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095573973 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.100228254 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094878653 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.252126555 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133898383 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120829134 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117208599 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.135693471 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.101950819 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.096909701 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.121149806 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112153018 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112664831 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089189531 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089091594 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127340482 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103920239 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.131745325 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.104830269 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097366366 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102899122 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093256682 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101300268 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099159309 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.111644876 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083280531 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.078133135 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.07071417 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.074617937 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121196526 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110947777 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101696052 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101078555 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.074722794 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105372545 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097021864 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072259467 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087810535 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094269142 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.12875576 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.087060095 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095017439 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.117887333 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.094336996 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106840223 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.133432297 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13570685 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.104446185 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092850519 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145636341 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131951966 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091225225 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09625392 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.074604968 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082159729 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104438945 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150681052 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122311228 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.080125401 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086716873 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.080099297 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09021921 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.074348809 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.092008009 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.092603735 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107608698 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12141093 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.116091165 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107546545 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078170316 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.106216118 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100756412 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094693721 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09947848 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105129102 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108142786 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.287395022 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102684829 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100897897 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079329663 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.08396057 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078819105 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082586886 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105141412 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.080629283 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079546008 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132865138 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.094320889 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106414748 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112199708 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087592945 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078411938 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134752578 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.072042441 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136137852 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.074827368 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085184336 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.083313635 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082204654 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096582209 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108565864 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098228198 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115606472 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109045263 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106004901 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115541071 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154810644 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071083492 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.15032477 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077639698 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078350395 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07966193 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115019974 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093797562 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10724614 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148623834 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092893966 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095992004 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080133834 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132144065 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.100370675 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106560526 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085717131 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081608815 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132175943 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082291628 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.074015658 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089754683 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114064176 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.075087466 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.136553821 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116923221 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083058499 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118648203 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.510713368 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093321467 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.078222018 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091625894 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.150615722 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132269274 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086404017 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111655852 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.121837709 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092314268 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116875703 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110225019 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.187855596 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077007449 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098502353 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.266696889 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099026365 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092557334 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.092562372 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.087057128 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.092018139 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.085318701 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082836995 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109722639 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090631039 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094734085 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125959793 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085237279 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.083455227 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13261324 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.106479508 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.085023709 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091257103 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.104116696 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091707809 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093360942 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.071913762 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.145898195 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.123791633 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10439527 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.094069202 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110061187 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120862646 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091767121 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114942791 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.090979263 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.112401531 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087600593 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.081358191 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10478731 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.080696265 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080630704 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120455217 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.08758202 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.097138163 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107123913 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.098752768 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117533809 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121624727 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115095414 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10194681 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082315003 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089356781 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.091277609 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078436587 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081421426 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.077533241 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.0774809 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110930493 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088577541 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11573702 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115270877 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091363106 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105951402 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.103389719 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.112208597 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0856958 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103142684 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109553229 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093571354 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107529602 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103517386 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131563089 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149345977 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101414476 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127267723 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136210281 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.079625661 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.239439178 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.072176806 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.149645181 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083162928 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.083719521 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11399561 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134871536 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.084349616 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097862213 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.242930213 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082121008 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084468607 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099432446 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.072769952 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085637575 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110485509 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087137162 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083034757 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101515155 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115266553 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120888019 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114283243 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092489907 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085381559 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084115198 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096358867 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.113069976 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.132694282 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092492422 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.078124718 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111180967 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10544445 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126895896 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.075919536 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083433493 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.132434297 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095716835 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107852201 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083428231 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127496871 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.135386752 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093300549 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136502479 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074167946 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086016551 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092657791 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.130800153 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077611923 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091501064 seconds)
  done (took 67.284687128 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.150217798 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.142183486 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.08206843 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.097481351 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.186251917 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.19612296 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.11910751 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.095428737 seconds)
  done (took 2.992290497 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 0.071021402 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.085716807 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 0.103568194 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.086211009 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 0.069437451 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 0.070199336 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.206510572 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.084620984 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.069481186 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.110094895 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.077540504 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.071996583 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.369361838 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.068885259 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.07029605 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.077762332 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 0.070270068 seconds)
  done (took 3.655623203 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.3697854 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.628178499 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.323562349 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.078252349 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.892842312 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.089131342 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.156969803 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.136518358 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.082235807 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.532192874 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.36976576 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.133625636 seconds)
  done (took 18.698350789 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.079853669 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.078065347 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.080769624 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.080704042 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.077317596 seconds)
  done (took 2.299960423 seconds)
done (took 118.916725118 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.08607453 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.172279588 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.070165497 seconds)
  done (took 2.177368813 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083934506 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.083133561 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.083478706 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.080642195 seconds)
  done (took 2.241592869 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076497529 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.078858808 seconds)
  done (took 2.058689877 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.238119586 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.178338279 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.094155635 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085162409 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.082294709 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.082574458 seconds)
  done (took 2.164704074 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.074634207 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.07354415 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.074191649 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.074492079 seconds)
  done (took 2.197537032 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.069144114 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067460552 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070827531 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.073768151 seconds)
  done (took 2.185698142 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086928111 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085490577 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.115659927 seconds)
  done (took 2.190593894 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084396501 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.080357224 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.08044972 seconds)
  done (took 2.152765561 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110616456 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.099751363 seconds)
  done (took 2.11298447 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.08464671 seconds)
  done (took 1.989598029 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.090984106 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.099562896 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.143739525 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108913414 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.144450961 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.130772205 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.080348853 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079596739 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.076039007 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.075225303 seconds)
  done (took 2.934905289 seconds)
done (took 26.905506426 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.081413337 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.372527921 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.359735371 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086596776 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.675953263 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.356337171 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.00109198 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.095114187 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.103020762 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071697791 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.089040227 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.653849519 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.998142204 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.335824295 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.985443416 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.332711538 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.655548702 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071820218 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070923471 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071254089 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.988007602 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070401073 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071276255 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071553196 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.653922485 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.37860799 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07304964 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.329046318 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072002786 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072828793 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.35988164 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.072705099 seconds)
  done (took 16.552744728 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.072721065 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.126821614 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075458732 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087339458 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.073320077 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072129193 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.074294351 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.071501964 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113715897 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071348715 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.088905298 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.07075816 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.075385677 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.073178482 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.091802304 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.072199826 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.073802896 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073195103 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.073301795 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.072801638 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089221768 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069409439 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069839683 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070026494 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069629781 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081841451 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070795708 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069179093 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069651145 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071566155 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072897604 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070497549 seconds)
  done (took 4.394654393 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.12268826 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.129429788 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075945099 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.112927053 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.121824055 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073459303 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.156068347 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.09507791 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.117442145 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.072331502 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.089306569 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.071550273 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.107320465 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.074051894 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.093603146 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.072721559 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.073911827 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071360299 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068981895 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070295674 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087956196 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068708197 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070103847 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070007852 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069958728 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084244184 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070263518 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070115551 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06918123 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07146331 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073116367 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071411064 seconds)
  done (took 4.665844056 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.07171728 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073983268 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.082237285 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.083413606 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.069067666 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.071361956 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072557355 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.069327101 seconds)
  done (took 2.517028408 seconds)
done (took 30.048838134 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080813115 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070694931 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073525217 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090704585 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076446221 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.073132146 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.067345159 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076937891 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073525421 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.074036285 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.076216525 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.069365653 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072753497 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.067819692 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.074588679 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.068689472 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.075733465 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.073744123 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071616756 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.072813977 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069348089 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.07277051 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.075652003 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.071661682 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.071307528 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072067964 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076019591 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073319224 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.06739931 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069979306 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.070325185 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081144805 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073829852 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074087568 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.067351996 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067272794 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071264966 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069119923 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.073494694 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076104189 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.072156706 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.075351924 seconds)
  done (took 4.957288283 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.088791093 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.093305192 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.086372267 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.082610328 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.104898349 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.084536494 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.093659148 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.082750417 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.081279512 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.092969994 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.076754255 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.08202079 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082844428 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.075385801 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.081703935 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.077982348 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.083305009 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.076640115 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.081992185 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.081885082 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.094523693 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.075395273 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.082474223 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.083647766 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.077778245 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.083464263 seconds)
  done (took 4.117830382 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074304781 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.088300289 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091677504 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.140611557 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109929735 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.082878917 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.081941836 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.102987167 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101630353 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.068398246 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.072171898 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.094864786 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09913419 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.078135845 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.110527323 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.08937395 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082557285 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.072345936 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.077656569 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.1052847 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.093958729 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.089012146 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.103982901 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090512366 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069729105 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079464029 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.077095447 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.085246478 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077821918 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082864727 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.07488724 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072366496 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.068381428 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080061332 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.072371031 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067047999 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091462125 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083291863 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.086821706 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.109903226 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.080316755 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.072017795 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.10010544 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.135732194 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.070086026 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.073520355 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.074107246 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.083113885 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.071493938 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100736734 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.089050855 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.071506396 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.089685849 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.072236985 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.07199491 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086964999 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.071761063 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.072825912 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082470051 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.07624435 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.091230214 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.075738541 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090959993 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.070013438 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081699674 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071950302 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.072468165 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.069083674 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.107339879 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.078140849 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.123346788 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.071602097 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.068352589 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082962038 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081920596 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.077384837 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069918572 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089811998 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.082412543 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.07442664 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081964616 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.073344639 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.073593481 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.106356219 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.069209998 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.06820262 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.068154553 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.07302559 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.073684553 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.070916813 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.084261708 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.069814773 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.074295977 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085479605 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.071168332 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.071294358 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.073308747 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.071739998 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.070107185 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.081622652 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.07397788 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.072608394 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.082960867 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.071609998 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.07379183 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.085232928 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.080199808 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.070128711 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.072030022 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.072683006 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.072135977 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.074870169 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073555051 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.072287415 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076668265 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077944939 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075943107 seconds)
  done (took 11.480110337 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.164612801 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.157051376 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.071713915 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.1520882 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.080017599 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.075357924 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.152604117 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.091202628 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.071316121 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.07258749 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.07058127 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.099577589 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.094772884 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.112856635 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.075716462 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071825162 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.097169612 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.104448669 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.15476306 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.150187533 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.09532549 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.079075736 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.074254784 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.072720853 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.072711422 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.080017112 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.089840913 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078451696 seconds)
  done (took 4.737095481 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076445483 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.113781276 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.075190785 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.095443873 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.089811998 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.071122971 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.073252813 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.07209306 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.088512889 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.078218961 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.071254107 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.075841027 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073206114 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070917887 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.068935609 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.074803565 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.074742619 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.06815613 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.07254742 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.075612711 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.08113854 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.096565291 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.07556734 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.071116532 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.073347577 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070884449 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.078215644 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.081265645 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.070536146 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.101934118 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.068140392 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.075140893 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.085114486 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071768711 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.070636151 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.071561651 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.071412003 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.07104768 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.071163556 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.069268284 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.069270644 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.075866802 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069929349 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.07717331 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.085607599 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.079202259 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.072329384 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.074010858 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.07337972 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.068151056 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.074092491 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.074459925 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.07382598 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.079751067 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074736938 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.073320588 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.072394718 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.101544245 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076788459 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.070449867 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069913937 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.069066636 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071930232 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.079064305 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.087906476 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072454911 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.069364993 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.071091326 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.076178556 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.085360381 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.0707588 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.076109605 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.068180949 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070911855 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.073100677 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.073593014 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.072008641 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.069476805 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.070521404 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070709101 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.071221192 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.07039595 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.07051081 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.07356981 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.069049079 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.069538218 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.07140484 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.072046799 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.077272674 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069825047 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073574264 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.072234978 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069761812 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073550785 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075807037 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073700984 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.090615071 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.079998179 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.071825899 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068886769 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.085678601 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.072697027 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.070916991 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.077738141 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.075572476 seconds)
  done (took 9.87639448 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.093505 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071772755 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.09086697 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.09768036 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.08161443 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07685889 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084885964 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.071898843 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.087061933 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.070604832 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.080459457 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.069670225 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083603869 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.080853128 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072525779 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.082100015 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.073526228 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.091506997 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.086216423 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069425645 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079824073 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.083485959 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083702999 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088801733 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088500747 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.089241017 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.083323545 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.073709167 seconds)
  done (took 4.265491939 seconds)
done (took 41.354001079 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.001546478 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.164498504 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.991961668 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.20109866 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.047552894 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.236018203 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.202995259 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.986509187 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.148737055 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.014758827 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.25144241 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.396836209 seconds)
done (took 69.624866814 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.082209874 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.145345317 seconds)
    (2/2) benchmarking "String"...
    done (took 2.210609455 seconds)
  done (took 6.276104008 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.586695759 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.986744313 seconds)
    (3/3) benchmarking "different"...
    done (took 2.036488523 seconds)
  done (took 8.528223171 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.157698529 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.629130835 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.268578981 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.987831909 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.995110946 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.499856314 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.798549591 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.463926579 seconds)
  done (took 32.561450328 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.153989414 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.187984267 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.705461281 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.738226409 seconds)
  done (took 16.748282563 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.599484363 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.243675749 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.246197748 seconds)
    (4/4) benchmarking "different"...
    done (took 2.237529512 seconds)
  done (took 11.29758615 seconds)
done (took 87.659345337 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.983388066 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.984786801 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.055589598 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.02470422 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.991968882 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.987146356 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.98507766 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.989686929 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.992077197 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.044744156 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.985158321 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.985462096 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.986791734 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.007552961 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.55812979 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.021799691 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.979166195 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.974175988 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.992661888 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.994841026 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.970008848 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.972952433 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.448640882 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.126397221 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.587894478 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.242280192 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.414301039 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.388512886 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.967927521 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.96317442 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.187782115 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.293995843 seconds)
  done (took 211.006987107 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.966850015 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.753996608 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.911676661 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.982356173 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.219260671 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.163752216 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.101958587 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.365682382 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.970608381 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.980493519 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.123262035 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.963540907 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.152871143 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.954847152 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.958234688 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.056776923 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.124517191 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.155620083 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.961118327 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.139068697 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.964466629 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.937636897 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.880812755 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.095783223 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.980448241 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.970601878 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.97554276 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.985754797 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.142862262 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.087942791 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.988766345 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.986767778 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.160183942 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.822000456 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.984835157 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.974045247 seconds)
  done (took 175.843822099 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.144488413 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.968837679 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.961628684 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.013495365 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.094766586 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.96331166 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.638069994 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.969009215 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.133358472 seconds)
    (9/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.962792919 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.960614809 seconds)
    (11/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.958409597 seconds)
    (12/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.958559171 seconds)
    (13/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.95874954 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.957504018 seconds)
    (15/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.083867088 seconds)
    (16/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.973826574 seconds)
    (17/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.958735062 seconds)
    (18/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.972332381 seconds)
    (19/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.959546531 seconds)
    (20/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.983374709 seconds)
    (21/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.958671073 seconds)
    (22/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.952440187 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.953901873 seconds)
    (24/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.953891732 seconds)
    (25/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.953095218 seconds)
    (26/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.955243837 seconds)
    (27/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.953909102 seconds)
    (28/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.953876023 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.565959874 seconds)
    (30/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.204900719 seconds)
    (31/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.958120976 seconds)
    (32/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.953715353 seconds)
    (33/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.281013332 seconds)
    (34/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.966220627 seconds)
    (35/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.021640961 seconds)
    (36/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.958566907 seconds)
    (37/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.042714563 seconds)
    (38/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.009629462 seconds)
    (39/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.050473913 seconds)
    (40/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.954547856 seconds)
    (41/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.952773196 seconds)
    (42/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.172289239 seconds)
    (43/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.071059443 seconds)
    (44/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.954565558 seconds)
    (45/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.95316399 seconds)
    (46/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.015490985 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.965861657 seconds)
    (48/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.953280993 seconds)
    (49/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.953692083 seconds)
    (50/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.953556525 seconds)
    (51/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.95618283 seconds)
    (52/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.961448156 seconds)
    (53/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.016859602 seconds)
    (54/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.183831905 seconds)
    (55/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.955438746 seconds)
    (56/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.089829305 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.445243521 seconds)
    (58/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.955224885 seconds)
    (59/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.954739287 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.953783078 seconds)
    (61/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.55974852 seconds)
    (62/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.95630659 seconds)
    (63/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.954765399 seconds)
    (64/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.962146568 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.962424325 seconds)
    (66/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.954984405 seconds)
    (67/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.957406247 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.341229097 seconds)
    (69/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.02627352 seconds)
    (70/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.335782877 seconds)
    (71/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.644294403 seconds)
    (72/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.96271909 seconds)
    (73/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.093671592 seconds)
    (74/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.027224801 seconds)
    (75/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.955683484 seconds)
    (76/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.955689399 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.955231849 seconds)
    (78/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.956732259 seconds)
    (79/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.954448933 seconds)
    (80/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.95820276 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.089363177 seconds)
    (82/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.966397688 seconds)
    (83/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.047248543 seconds)
    (84/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.035744303 seconds)
    (85/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.955498851 seconds)
    (86/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.09072537 seconds)
    (87/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.960691441 seconds)
    (88/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.965996418 seconds)
    (89/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.768390829 seconds)
    (90/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.024979988 seconds)
    (91/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.992584789 seconds)
    (92/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.770925045 seconds)
    (93/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.955862893 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.328525097 seconds)
    (95/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.704261864 seconds)
    (96/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.956350441 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.9561189 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.969099029 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.958053252 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.956260761 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.957380172 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.034935317 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.957540383 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.090645831 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.693965628 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.641491465 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.957505886 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.957231826 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.96463012 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.036731885 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.090945782 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.961502403 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.021465587 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.965049977 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.958991665 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.083869207 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.958118358 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.957848392 seconds)
  done (took 430.581190388 seconds)
done (took 821.536297593 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.696094256 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 2.577802742 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.721401968 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 2.593039514 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 2.571897526 seconds)
  done (took 15.051388802 seconds)
done (took 16.939056401 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.987143983 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.973672138 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.964123405 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.012732132 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.98177906 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.970236444 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.005035284 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.001609878 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.98787684 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.969855856 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.011710667 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.973355973 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.98856722 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.991959701 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.032099174 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.994542723 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.974810044 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.966850077 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.010778779 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.973048975 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.974587796 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.973152326 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.970228894 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.008486717 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.040555781 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.980937958 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.971429023 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.005092953 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.9815133 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.006533233 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.025008524 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.991547278 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.004332746 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.037359313 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.017150064 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.038334096 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.982629862 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.027595922 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.977757103 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.043787241 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.014063946 seconds)
  done (took 83.736896535 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.968750209 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.102179582 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.180745466 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.000288091 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.968555001 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.185175087 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.02330512 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.094199245 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.105237473 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.208985753 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.184432837 seconds)
  done (took 24.918592002 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.96819717 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.10752142 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.191057142 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.002918992 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.970474781 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.182945359 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.030485606 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.096567296 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.107936317 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.183014737 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.194602219 seconds)
  done (took 24.93649354 seconds)
done (took 135.480721939 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.334965925 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.988109927 seconds)
  done (took 6.218539897 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.983600696 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.157226646 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.963883591 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.963758683 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.965469268 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.964401154 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.964934952 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.964278032 seconds)
  done (took 17.822939427 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.962703318 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.96291806 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.963661126 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.962524707 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.964525103 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.963814912 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.964351487 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.964595023 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.964526631 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.964546081 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.963737675 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.96388868 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.963872417 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.962922955 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.964439986 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.964385806 seconds)
  done (took 33.317609954 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.96575366 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 1.964909711 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 1.964923001 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 1.965208841 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.965333816 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.965289435 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 1.966285259 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 1.964854127 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 1.965311949 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 1.965287538 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 1.965085267 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 1.964123234 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 1.965234802 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 1.965867047 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.965772591 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 1.965957181 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.965248708 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 1.965170847 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 1.970785328 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 1.965535409 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 1.965819011 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 1.96505918 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 1.966219529 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 1.966689457 seconds)
  done (took 49.071625483 seconds)
done (took 108.328949686 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.134524305 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.446079336 seconds)
  done (took 8.477996444 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.967158972 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.965949928 seconds)
  done (took 5.876150318 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.966940861 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.965938685 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.967155443 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.966883924 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.966784555 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.966909487 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.965416147 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.966739755 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.966273461 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.966389911 seconds)
  done (took 21.563307123 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.965339878 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.966495966 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.967164901 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.967652062 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.967611713 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.966392485 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.966283203 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.966915422 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.966408373 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.966651162 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.967111473 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.967778408 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.966463237 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.967874338 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.968086653 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.967291738 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.968013894 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.967274336 seconds)
  done (took 37.304360743 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.967691708 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.967107275 seconds)
  done (took 5.8335939 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.96667602 seconds)
    (2/7) benchmarking "second"...
    done (took 1.968191324 seconds)
    (3/7) benchmarking "month"...
    done (took 1.967372885 seconds)
    (4/7) benchmarking "year"...
    done (took 1.968080365 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.968320744 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.967889141 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.967133489 seconds)
  done (took 15.671862665 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.96966168 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.113513353 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.166592514 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.605305333 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.969607355 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.970885454 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.844031047 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.970335237 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.972360962 seconds)
  done (took 21.481326669 seconds)
done (took 118.103100594 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.73416297 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.970639693 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.220756011 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.023670025 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.00391692 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.30723488 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.013132265 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.552857844 seconds)
done (took 43.721985905 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.003981091 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.966761629 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.993588487 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.99476847 seconds)
  done (took 22.856422135 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.969085152 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.266671057 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.987119647 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.831675215 seconds)
  done (took 22.968125609 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.348986457 seconds)
    (2/2) benchmarking "read"...
    done (took 2.307877104 seconds)
  done (took 6.562113055 seconds)
done (took 61.288408895 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.970530184 seconds)
    (2/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.969777829 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.970135597 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.969948488 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.969927427 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.969154899 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.969362729 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.970798557 seconds)
    (9/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.96930556 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.969963658 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.969101748 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.968691415 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.968118456 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.967288915 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.968232535 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.966476536 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.968407281 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.968168083 seconds)
    (19/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.967766548 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.969270524 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.969104923 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.967947321 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.968551654 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.968935052 seconds)
  done (took 49.156810677 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.968094675 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.968074718 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.967841729 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.968414821 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.968455652 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.96849385 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.969275811 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.968514419 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.968705432 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.967964325 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.968134284 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.968942809 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.968750953 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.96853422 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.969246255 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.969130493 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.969564877 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.969024402 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.969584092 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.969096692 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.96896531 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.968969379 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.969476718 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.970311011 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.968402272 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.9697107 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.969341328 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.970034041 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.969880391 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.969506254 seconds)
  done (took 60.9694399 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.970259315 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.970153665 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.970339874 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.970325827 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.970167475 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.970656706 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.970752396 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.970599818 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.970303866 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.971375543 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.970149744 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.970372303 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.970666422 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.970022288 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.971039765 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.971346181 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.970362372 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.970989933 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.970377657 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.971025659 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.971230185 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.971192065 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.97133847 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.971228353 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.971528946 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.970796175 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.971694092 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.971787045 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.972332536 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.971671591 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.97178378 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.971319732 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.971971452 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.971972328 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.970969295 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.972740952 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.972659677 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.9712482 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.973349611 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.972481066 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.971938388 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.972818062 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.972099201 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.972127098 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.972246375 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.97138889 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.97259694 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.973045933 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.973279515 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.972954131 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.971696892 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.972771362 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.973136745 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.972743794 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.972686301 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.97348309 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.974097583 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.973009493 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.974035349 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.974211289 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.973767526 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.972873144 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.972938644 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.974383177 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.973958212 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.97467144 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.972993744 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.973684903 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.973774207 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.973633539 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.974068064 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.974893274 seconds)
  done (took 143.89178945 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.975065008 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.974903802 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.975086534 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.973969309 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.973380235 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.976230301 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.974564854 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.975256819 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.97448606 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.975421282 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.974674804 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.975275352 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.973905237 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.974812436 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.974383996 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.975113023 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.974995628 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.975371141 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.975461013 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.975405819 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.97529977 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.975015885 seconds)
  done (took 45.353328634 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.975190389 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.974904682 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.973823538 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.976502635 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.975550775 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.97430674 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.976187534 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.975194737 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.975586098 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.975543257 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.975298597 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.975907964 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.975904123 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.974909677 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.976755012 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.975596069 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.975169248 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.977048995 seconds)
  done (took 37.465159877 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.976559374 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.976957644 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.97628698 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.975353434 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.976210529 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.975228092 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.976408592 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.976675711 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.976477346 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.975858672 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.976805515 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.976378045 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.976135533 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.975861933 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.976519667 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.977568434 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.977008504 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.975465624 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.976453898 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.976785492 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.976390778 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.97634612 seconds)
  done (took 45.386997136 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.97625902 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.977291931 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.977410349 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.976783785 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.977230202 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.9771741 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.977363815 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.978029738 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.976947265 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.976855732 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.978111267 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.977025711 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.976915135 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.977113716 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.978645471 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.978167603 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.977151618 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.977841936 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.977530134 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.97836239 seconds)
  done (took 41.456855485 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.979893363 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.979521176 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.980317947 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.980288148 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.979549851 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.979984306 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.979704639 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.979859983 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.980397673 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.980638411 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.981706465 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.980355655 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.981198168 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.980500369 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.980230281 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.980640882 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.980850565 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.981571491 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.981030763 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.979251918 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.98027646 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.980900752 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.981383723 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.981097772 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.981951064 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.979994261 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.981090972 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.980956905 seconds)
  done (took 57.365020111 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.979034611 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.979098933 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.980138194 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.980083384 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.980845789 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.979595914 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.979636161 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.981114279 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.980108006 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.979396274 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.980521466 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.97943404 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.980010418 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.97960721 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.979805118 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.980440311 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980490744 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.980861039 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.980939883 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.980308945 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.980634433 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.980424199 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.98031421 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.980866949 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.981447401 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.981604464 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.980937959 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.980428772 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.981058644 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.980179339 seconds)
  done (took 61.320526219 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.00367017 seconds)
    (2/2) benchmarking "in"...
    done (took 2.001775511 seconds)
  done (took 5.917275109 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.981965444 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.981320527 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.981680248 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.981650827 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.981649633 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.981014488 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.981847481 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.982218809 seconds)
  done (took 17.764995706 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.98217813 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.985046883 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.982217868 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.981313632 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.98397781 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.990042281 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.984381592 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.984187055 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.985673961 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.984673753 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.988499284 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.98651348 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.990864008 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.98761495 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.982809407 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.983858697 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.985895457 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.987193989 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.985083431 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.983935006 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.987902608 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.985625961 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.983692037 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.986068842 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.983823623 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.985260156 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.992735973 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.986076507 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.984968894 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.983300764 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.991000283 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.983186389 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.985992458 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.985171314 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.986231637 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.984627951 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.992977387 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.986364815 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.986098912 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.983740192 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.988029701 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.987831121 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.989234025 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.99297206 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.986677274 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.985074018 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.984932853 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.987042654 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.984998284 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.988875139 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.991971565 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.987470234 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.985288471 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.985376981 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.987014045 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.987603138 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.98698956 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.989061894 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.991059832 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.99262415 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.989852193 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.004034067 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.993006947 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.988638212 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.987894338 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.99479445 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.007032734 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.987816123 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.987391572 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.985867813 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.995602099 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.987912212 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.987514683 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.987248171 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.000632576 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.995101845 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.989652096 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.987068169 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.990490227 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.989338424 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.989528435 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.989146543 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.987778134 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.989564715 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.996849609 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.007697784 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.989394039 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.989594771 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.990611455 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.990373736 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.993342007 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.990651967 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.988950666 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.987777727 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.990747784 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.991745055 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.990216796 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.989231911 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.989159754 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.998576857 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.988903342 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.989523995 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.99316353 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.99830713 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.989076048 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.991230492 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.989673171 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.991422315 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.998461753 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.990820219 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.991931945 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.988640691 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.992288202 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.994425555 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.989609426 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.993883669 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.997782405 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.998903596 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.992508604 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.995662497 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.994694871 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.993311967 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.999044813 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.012252884 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.991708274 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.993743637 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.995037164 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.003087412 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.995178123 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.991191729 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.993880097 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.990633147 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.990879804 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.992653798 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.990291558 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.993013205 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.990544233 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.992596442 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.991582289 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.992630128 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.995502583 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.993385522 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.994141104 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.993118163 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.996024895 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.992768454 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.993931237 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.999468831 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.992806713 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.992704155 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.991914073 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.994457625 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.994661259 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.99297757 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.991831391 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.992053073 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.993729219 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.992169213 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.994390641 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.994037087 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.992886423 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.993641694 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.995704331 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.994616416 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.994944364 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.993847104 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.994177053 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.993423012 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.994721323 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.993471827 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.996044571 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.995618846 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.997065822 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.993574255 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.993206886 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.994500997 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.993001225 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.993994289 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.996728054 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.003391866 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.99758632 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.002808002 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.994010672 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.001872502 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.993934457 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.995507066 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.995350474 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.995558998 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.995921528 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.994466208 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.994686548 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.998141448 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.014863162 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.003153123 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.998471061 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.997357647 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.999362705 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.998010482 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.000850166 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.994064704 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.99576623 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.998014141 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.996918884 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.997040795 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.995376401 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.999289192 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.994744998 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.994931515 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.999826795 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.997424268 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.994702355 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.996862842 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.995500904 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.997542571 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.995790288 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.996404828 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.997088929 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.996507512 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.003766896 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.998464269 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.995483783 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.998010345 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.997571614 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.997766241 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.996212188 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.998725705 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.000302664 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.997516516 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.997755424 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.005198477 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.9974543 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.997521001 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.997922208 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.997230177 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.998492927 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.996206885 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.99969542 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.00364516 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.000094975 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.997883557 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.00335295 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.997094938 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.00027989 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.999264 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.998668976 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.998603082 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.99901147 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.002342095 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.996524145 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.004896095 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.997429868 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.998973539 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.9978556 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.002613891 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.999973769 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.000177775 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.99928259 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.002132235 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.005371225 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.003969903 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.998972615 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.003011502 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.000134199 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.999746748 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.001130671 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.999788983 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.011835778 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.005829345 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.998621498 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.998932346 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.999907714 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.000917345 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.999040677 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.999404041 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.006835619 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.000534493 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.000201376 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.002467593 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.000814744 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.001560328 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.006263081 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.000695126 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.002839537 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.00161028 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.000374458 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.000784306 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.998955051 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.002832876 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.001761764 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.002186224 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.002451656 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.999826001 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.000628513 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.99926955 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.008223669 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.999804157 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.000637957 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.007664012 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.001835405 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.002051858 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.002165522 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.999200953 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.001105243 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.002160652 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.001160064 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.002723654 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.000490533 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.004484765 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.009347844 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.005129812 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.009288302 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.003143647 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.012201979 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.001703298 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.000946885 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.002389415 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.004575238 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.009060912 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.000857017 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.001635681 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.009588712 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.002970783 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.002775735 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.0066886 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.001952454 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.003442426 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.003254635 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.003628517 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.006684203 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.005456072 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.000823332 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.003896235 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.002125311 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.002815646 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.00463348 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.004590234 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.004206226 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.004915748 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.002788515 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.003937631 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.004708377 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.004246068 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.003848266 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.001302018 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.00312421 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.011630023 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.005063175 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.004453599 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.009190946 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.00345575 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.013126907 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.005494622 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.005369861 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.005509413 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.00435948 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.007664998 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.003967351 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.006405891 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.00478142 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.005147997 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.005440282 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.015646063 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.012022677 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.008818548 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.006251857 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.006720932 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.005992808 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.013532979 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.023666988 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.005718372 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.007103074 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.008296202 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.012005289 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.00726894 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.011137316 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.007857788 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.013371042 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.006427311 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.005521663 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.008160579 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.016669111 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.007373436 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.005952739 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.00542011 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.010572829 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.008348778 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.006022204 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.007241354 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.009488143 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.007443032 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.016866934 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.005429577 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.007797537 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.008169864 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.004464109 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.007001451 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.005822727 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.007662877 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.008641143 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.007835784 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.007956469 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.008046785 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.01069707 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.006668587 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.010476084 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.014636118 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.008933035 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.008253582 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.009501875 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.009296455 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.009314439 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.008974234 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.008116628 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.010261854 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.006395821 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.008876476 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.010292615 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.01451116 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.008708205 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.006844695 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.00682312 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.011737482 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.008079416 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.00855946 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.009471794 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.017464852 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.011104061 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.017300311 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.015656287 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.009260803 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.00919113 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.014603355 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.015600095 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.0090457 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.009151901 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.00931317 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.011685513 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.011711936 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.009288925 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.010150477 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.009944185 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.013326974 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.0087161 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.010201919 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.011160842 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.009497194 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.011597783 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.010769353 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.013892716 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.011072335 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.008503706 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.008536569 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.009347123 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.010515781 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.012442285 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.010494315 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.010253791 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.012090944 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.010902635 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.012181948 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.008902912 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.008560424 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.01158902 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.009039972 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.00971127 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.010520625 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.010689543 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.010164321 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.013922348 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.016675278 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.010022428 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.010815705 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.011556857 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.014599678 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.01175542 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.01265111 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.011601246 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.009523436 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.017732394 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.009659049 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.011502693 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.012024382 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.010472133 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.016494837 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.012916532 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.015271936 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.012031358 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.011450339 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.01162504 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.014284328 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.019244054 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.015038927 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.014282086 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.017192973 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.016244717 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.013399118 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.01128462 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.011718296 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.012650212 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.013001563 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.014905891 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.013822808 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.015309872 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.44584562 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.014890404 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.013657397 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.013898197 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.012356159 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.012054166 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.015622537 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.020731871 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.021100857 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.011980386 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.014007584 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.013274408 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.016834317 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.022750828 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.014527919 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.015573406 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.014385027 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.014260374 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.014226425 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.018638334 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.021092472 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.018251696 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.01500896 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.017523377 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.030099045 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.016684983 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.024961869 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.042298916 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.014972223 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.01465732 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.014071436 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.014198685 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.014305212 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.015577045 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.014420811 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.020779804 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.014560685 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.013866928 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.022467803 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.013912159 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.013168041 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.015983372 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.015324963 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.020133952 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.015998404 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.021473115 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.015899852 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.014651534 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.015289057 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.018850363 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.013832573 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.01496348 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.014600529 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.017006288 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.014927063 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.016947484 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.024946105 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.017619435 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.016834813 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.028544862 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.025182044 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.017624391 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.01551985 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.016870019 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.022477417 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.018933353 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.014324044 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.017556376 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.021202313 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.018619099 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.021675628 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.016696709 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.016372097 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.016618356 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.015743169 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.017329767 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.028807458 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.02629057 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.017377766 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.01686025 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.021897546 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.016281261 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.023084077 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.023369951 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.018499225 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.018361251 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.018649529 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.017300474 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.015981533 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.016017105 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.021016491 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.023400965 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.019360738 seconds)
  done (took 1196.161407467 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.015561767 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.016431303 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.016836943 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.016095375 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.016902525 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.016235457 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.016039026 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.016074296 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.016811837 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.017130715 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.016647417 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.018176941 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.017656576 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.01737099 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.017457397 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.017873298 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.017247154 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.017679076 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.017790102 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.017441082 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.01758744 seconds)
  done (took 44.303461872 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.017906735 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.018037901 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.017033537 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.017294609 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.016306987 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.017191542 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.017913653 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.016879198 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.017979539 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.018926722 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.016868803 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.018191945 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.018781025 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.019037903 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.018272346 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.018572263 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.018449785 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.018613019 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.018888989 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.018526203 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.019904098 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.018903527 seconds)
  done (took 46.345755288 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.020388076 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.020002511 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.01946809 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.018520503 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.019183152 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.0211081 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.018436243 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.022313985 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.020526157 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.020231653 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.026994903 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.025495034 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.020082379 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.023078205 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.019910111 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.02134541 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.164854867 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.021436308 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.022322842 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.0198629 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.022044637 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.026441058 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.020969951 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.02032507 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.020524469 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.023037451 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.020596572 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.02061519 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.02082638 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.023522018 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.025306383 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.020466613 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.022493001 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.024368195 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.022038871 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.021975648 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.026617694 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.022919799 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.021921218 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.021043908 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.030180087 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.041156209 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.021435631 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.022804855 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.029963475 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.021412507 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.021320174 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.025292362 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.027760072 seconds)
  done (took 101.204850641 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.021736339 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.022253981 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.021681742 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.022301268 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.021563233 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.022133486 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.021584955 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.021592381 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.021504024 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.022417573 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.022329592 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.02248435 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.023135917 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.022728358 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.022768827 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.022250521 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.023349082 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.023041793 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.023242225 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.023179111 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.022439214 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.023264837 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.022691539 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.02238477 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.022844083 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.023949135 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.024084744 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.024368072 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.023281009 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.023709923 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.024113466 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.023858777 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.023652264 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.023246451 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.023231965 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.022698135 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.022989367 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.024581809 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.023537447 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.023163219 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.024216447 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.023883462 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.024012165 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.024485942 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.024595006 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.024213828 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.024656084 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.02432963 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.024708001 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.024227729 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.025728577 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.024740168 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.02565646 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.025270026 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.024619143 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.024687824 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.024204768 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.024978031 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.02525243 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.025011413 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.025473115 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.024087874 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.024586176 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.025505558 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.024069485 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.025171529 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.025431847 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.024980347 seconds)
  done (took 139.561433762 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.027256207 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.027506314 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.027742923 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.027747483 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.027309945 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.028074841 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.028007084 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.028535714 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.027923802 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.028703417 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.028990859 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.026290105 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.028809961 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.026103073 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.028611021 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.02832257 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.028500012 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.029010391 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.028674189 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.028498579 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.028251295 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.027714582 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.027911436 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.028717072 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.029866672 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.028931475 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.028261301 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.027489527 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.028191879 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.033665429 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.033910785 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.034003438 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.034128426 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.033381534 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.033518587 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.034055251 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.033960863 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.033810207 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.033600797 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.034325555 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.034942441 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.034574564 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.034788317 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.034339272 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.0346423 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.034955157 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.035598515 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.034892691 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.033575603 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.035210818 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.034517175 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.035229721 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.035324115 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.036027765 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.035637339 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.033575502 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.036146766 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.035344025 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.03538712 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.035267542 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.03583876 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.034330005 seconds)
  done (took 127.914795339 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.033555484 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.033389846 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.034367551 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.036071108 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.034221177 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.034976479 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.033943097 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.032933686 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.034832081 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.034977459 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.034441287 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.035139178 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.03518105 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.034801817 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.035145812 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.035484747 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.034511278 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.035248002 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.035343576 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.035159413 seconds)
  done (took 42.656303464 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.034111293 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.034970607 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.035650023 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.035041626 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.034859829 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.035060653 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.034451452 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.034537453 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.035650515 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.034811499 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.035434648 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.034715019 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.03571324 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.035071893 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.035433571 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.034937085 seconds)
  done (took 34.524910987 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.036328351 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.034244492 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.036814801 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.037847254 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.037490624 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.036431213 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.035628525 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.035554128 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.035954068 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.036630634 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.035053707 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.03588934 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.036724074 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.037013283 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.036461994 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.036388694 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.036596903 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.036733793 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.036326712 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.038021079 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.037508773 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.037699834 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.036612192 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.03800036 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.037151148 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.037661353 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.036069135 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.037114134 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.036618752 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.037170282 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.03651412 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.036606818 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.036783515 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.037221304 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.038750109 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.037736136 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.037481472 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.038342755 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.037670963 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.037857141 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.037712166 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.037228785 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.038625301 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.03814937 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.037267216 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.03800587 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.037643112 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.038593637 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.037580946 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.037443196 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.038247113 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.039772636 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.038510359 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.038861264 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.03825437 seconds)
  done (took 114.012601271 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.037804113 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.037936956 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.039153258 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.038518507 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.037618803 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.039139231 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.038926855 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.037786959 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.038315519 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.038688034 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.039165538 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.039304756 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.03895105 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.03865438 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.039264528 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.037530034 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.04016629 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.039765352 seconds)
  done (took 38.664353331 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.039380002 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.039505929 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.039047601 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.038499808 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.038949594 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.039276185 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.038557777 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.039712025 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.039921808 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.039583983 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.039405222 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.04026592 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.039302573 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.039268531 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.039693067 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.040137293 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.039685415 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.039708317 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.039560674 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.040032466 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.040599078 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.040646556 seconds)
  done (took 46.839234216 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.042149336 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.041648968 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.055740848 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.060218606 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.061621867 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.073022058 seconds)
  done (took 14.30388319 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.041914728 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.041508029 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.04094665 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.040628117 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.040972036 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.042109264 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.042132164 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.042019884 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.041387668 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.041980389 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042131506 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.041505465 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.041416212 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042007954 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.040847269 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.041054758 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.042195113 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.042356494 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.040463957 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.041332675 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.041485987 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.041771136 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042219231 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.042756956 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.042553453 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.04250529 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.041984182 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.043053835 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.042034163 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043372333 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042422589 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04325821 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.042888223 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.043572648 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.043999073 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.042742414 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043405463 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.04321905 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042044672 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042511763 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.043445655 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.04366655 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0426636 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.044145429 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.042735911 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.043104794 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.043812078 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.043834688 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.044296608 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.045561372 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.044300193 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.044692015 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.045452153 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.044609182 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044023841 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.043964061 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.044855485 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.044191486 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.045072266 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.044768861 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.04530397 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.043718811 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.044699136 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.045590506 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044503125 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04402698 seconds)
  done (took 136.807193415 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.045891304 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.04470745 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044427526 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.04467798 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.045710547 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.044822274 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.045010289 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.044356559 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.043996786 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.043861436 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.044893296 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.044985492 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.045380712 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.044899591 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.045745503 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.044983818 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.045346686 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045370155 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.045479019 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.045731962 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.046051736 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.045740709 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046141995 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046087285 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.045586251 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.045160905 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046630861 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.044849463 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.046211038 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.045178183 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.045997804 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.04508694 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.04545079 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.046009852 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046399304 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046402918 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.045300657 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.047025359 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046459462 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.046450889 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.0477691 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.04583409 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045818656 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.04649893 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046545336 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046543451 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.046278747 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.045827096 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.047791722 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.047225452 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046794445 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.047617157 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047976582 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.047652399 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.046984282 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04687625 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.046747636 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.047829998 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.047817736 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.047887605 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048274108 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.047445725 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048266297 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.04764639 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.047401115 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048131957 seconds)
  done (took 137.020705787 seconds)
done (took 2788.275117869 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.083347404 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.178558388 seconds)
  done (took 16.238317971 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.221842112 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.175242852 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.061133888 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.085625845 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.061406621 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.067702154 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.069482642 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.06129095 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 2.062188218 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 2.061293611 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.061030485 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.245646112 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.06264916 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.061859972 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.060989759 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.15340858 seconds)
  done (took 55.779502962 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.066374047 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.065736624 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.075894163 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.067519262 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.065583482 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.083518753 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 2.098478235 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 2.071111191 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 2.127206196 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.081212055 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.190285404 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.075165768 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 2.062774444 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.115325421 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 2.078830047 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.078264495 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 2.156150312 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.143613151 seconds)
  done (took 39.689852555 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.145098226 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.070694215 seconds)
  done (took 11.210978638 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.086399954 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.088883 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.075299184 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.068840541 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.06620099 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.071481691 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.09538167 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.095132255 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.078805767 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.087121682 seconds)
  done (took 72.8018856 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.066180258 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.064347175 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.06423109 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.06167332 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.059125091 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.06365233 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.061798776 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.063405199 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.774335835 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 2.101135728 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 2.072454381 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.070884293 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.062918626 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.063045238 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.059096978 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.088208147 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.23861702 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.058739635 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.057616089 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.06793761 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.063621823 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.159015394 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.077235677 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.061694528 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.095679446 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.769517865 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.072625838 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.0679217 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.212925213 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.059013404 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.062181812 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.222601155 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.067106936 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.484744485 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.343354313 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.06896748 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.07450074 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.069936492 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.059380522 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.239839398 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.064244189 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.069668824 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.909033541 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.317250381 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.158474085 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.110264584 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.422688989 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.068273625 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.064074265 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.096404746 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.067428745 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.064605281 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 2.079573518 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.566754657 seconds)
  done (took 143.596574679 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.062103975 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.32095966 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.212949274 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.060840838 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.320897234 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.273139346 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.063080859 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.107241369 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.063393043 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.259230009 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.317696674 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.16456487 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.063244359 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.062610242 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.061437859 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.060944804 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.204303812 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.130552414 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.063235129 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.060836648 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.085506714 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.262966055 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.183354839 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.065390975 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.087594736 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.270402603 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.183647301 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.164652846 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.854461446 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.062010146 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.123400066 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.064905405 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.064641705 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.061461984 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.21667515 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.154582996 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.143484553 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.065075688 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.062815428 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.061913757 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.737479537 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.264881559 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.157745524 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.183899909 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.314178985 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.279895224 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.676148637 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.062120656 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.703415144 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.230037531 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.268258146 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.265014443 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.184525351 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.065651842 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.358768131 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.062944484 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.062318546 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.286559149 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.283753419 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.162458021 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.066993162 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.063951525 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.063638817 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.303146573 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.067258998 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.154498888 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.068158113 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.065030958 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.155283674 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.165054258 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.292136333 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.28415458 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.09512014 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.414730189 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.576567362 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.267439981 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.130159751 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.291199043 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.066907663 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.063736102 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.141412298 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.904640037 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.319774793 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.306809625 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.265031306 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.096028975 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.693684824 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.064111632 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.251826318 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.250864935 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.301645405 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.310532416 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.300567154 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.416012789 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.065036254 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.065021915 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.372076337 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.17830009 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.019262565 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.4136341 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.29910189 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.555556706 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.090741309 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.351369765 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.194623872 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.069138255 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.711377285 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.064736807 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.273244545 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.103533022 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.067765827 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.064905584 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.25308251 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.973100442 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.066641108 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.776701382 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.126653758 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.068823161 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.266946368 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.070201999 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.314094597 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.068913484 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.299283144 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.205067674 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.09788003 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.244030456 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.312836704 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.691795713 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.311616766 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.309743719 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.181655264 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.29342996 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.889456462 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.068152546 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.329986846 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.070230846 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.068148159 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.235105711 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.069705273 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.210897423 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.069260526 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.335970518 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.089530665 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.296628275 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.071664246 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.300908619 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.10030687 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.119067189 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.072221911 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.197799428 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.070965407 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.890704282 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.228679365 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.071614592 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.069143546 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.666582659 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.069902829 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.215468226 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.294061406 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.089605493 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.138396224 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.610896679 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.068242657 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.149376835 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.091070384 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.371501139 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.068697678 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.319274768 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.020444425 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.543051364 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.067856172 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.304551899 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.256757919 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.072747447 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.070245361 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.911857465 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.044390026 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.067832771 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.226501317 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.516034504 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.845900553 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.270809689 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.073956097 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.198236311 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.074223869 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.151216273 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.408980759 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.06908564 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.068744739 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.069749185 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.069960686 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.070517556 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.282438181 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.097110569 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.516366736 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.207210234 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.33528676 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.376508417 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.269032446 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.111730744 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.079793089 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.298194587 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.080168129 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.134261254 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.074197915 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.094086468 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.302786407 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.076385741 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.279689142 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.306118762 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.938876409 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.119378201 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.07528803 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.0728609 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.008754958 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.216781584 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.1616878 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.073982758 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.075290292 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.185787263 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.19326672 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.258469628 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.758400857 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.239734825 seconds)
  done (took 944.805233728 seconds)
done (took 1286.097916918 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.074889967 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.071222471 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.078708835 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.077625044 seconds)
  done (took 30.30136541 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 2.074143182 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.076872288 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.074049543 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.073487784 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 2.073761658 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 2.073651743 seconds)
  done (took 14.445784337 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.072971053 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.074705395 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.076790246 seconds)
  done (took 23.228864155 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 2.149828377 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.497836517 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 2.217024131 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.521345006 seconds)
  done (took 11.388431195 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.075125822 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 2.075629486 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.07608351 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 2.075363728 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.075629735 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.075840243 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 2.074462253 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.07606157 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 2.07697429 seconds)
  done (took 20.681520729 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.209136319 seconds)
done (took 106.251224572 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.353422244 seconds)
    (2/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.228339011 seconds)
    (3/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.005465371 seconds)
    (4/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.17890125 seconds)
    (5/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.100997722 seconds)
    (6/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.395060157 seconds)
    (7/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.730454049 seconds)
    (8/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.098585094 seconds)
    (9/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.336948077 seconds)
    (10/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.525217457 seconds)
    (11/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.289332502 seconds)
    (12/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.943680877 seconds)
    (13/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.082308615 seconds)
    (14/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.438026696 seconds)
    (15/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.178740164 seconds)
    (16/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.093552636 seconds)
    (17/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.367063285 seconds)
    (18/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.142337155 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.380875727 seconds)
    (20/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.155602125 seconds)
    (21/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.454254404 seconds)
    (22/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.07784494 seconds)
    (23/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 3.932198186 seconds)
    (24/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.085365173 seconds)
    (25/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.817367496 seconds)
    (26/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.721220687 seconds)
    (27/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.169173583 seconds)
    (28/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.372314452 seconds)
    (29/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.223081324 seconds)
    (30/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.897579147 seconds)
    (31/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.166382601 seconds)
    (32/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.277594373 seconds)
    (33/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.161236334 seconds)
    (34/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.175407933 seconds)
    (35/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.346202325 seconds)
    (36/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.343243201 seconds)
    (37/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.208339005 seconds)
    (38/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.087288535 seconds)
    (39/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.488617 seconds)
    (40/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.078739962 seconds)
    (41/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.207693393 seconds)
    (42/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.447857041 seconds)
    (43/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.221182047 seconds)
    (44/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.165660453 seconds)
    (45/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.076009121 seconds)
    (46/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 3.907889759 seconds)
    (47/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.077569409 seconds)
    (48/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.187159277 seconds)
    (49/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.488818936 seconds)
    (50/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.145573377 seconds)
    (51/341) benchmarking ("sort", Bool, false)...
    done (took 2.300154804 seconds)
    (52/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.972077039 seconds)
    (53/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.084861768 seconds)
    (54/341) benchmarking ("sort", Int64, false)...
    done (took 5.70262115 seconds)
    (55/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.950259384 seconds)
    (56/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.250227728 seconds)
    (57/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.282088263 seconds)
    (58/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.04445229 seconds)
    (59/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.99772041 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.419673208 seconds)
    (61/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.257733961 seconds)
    (62/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.164496085 seconds)
    (63/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.473380837 seconds)
    (64/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.532128443 seconds)
    (65/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.399722972 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.434212181 seconds)
    (67/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.196229293 seconds)
    (68/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.098142598 seconds)
    (69/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.076517696 seconds)
    (70/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.08331881 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.026608645 seconds)
    (72/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.087256821 seconds)
    (73/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.204440801 seconds)
    (74/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.159758102 seconds)
    (75/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.166031585 seconds)
    (76/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.0354519 seconds)
    (77/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.754345835 seconds)
    (78/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.26959674 seconds)
    (79/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.083502843 seconds)
    (80/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.217635455 seconds)
    (81/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.411905489 seconds)
    (82/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.836410175 seconds)
    (83/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.632308218 seconds)
    (84/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.113009489 seconds)
    (85/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.365652468 seconds)
    (86/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.188050378 seconds)
    (87/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.183980773 seconds)
    (88/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.398153742 seconds)
    (89/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.433925577 seconds)
    (90/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.08391334 seconds)
    (91/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.552804336 seconds)
    (92/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.285869463 seconds)
    (93/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.08446033 seconds)
    (94/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.128709003 seconds)
    (95/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.081271659 seconds)
    (96/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.399612469 seconds)
    (97/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.298220493 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.216748229 seconds)
    (99/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.078711951 seconds)
    (100/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.08472713 seconds)
    (101/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.142938791 seconds)
    (102/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.28264584 seconds)
    (103/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.168922493 seconds)
    (104/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.741232141 seconds)
    (105/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.124707 seconds)
    (106/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.971731597 seconds)
    (107/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.489365125 seconds)
    (108/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.286025321 seconds)
    (109/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.395625816 seconds)
    (110/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.995848495 seconds)
    (111/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.68176716 seconds)
    (112/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.378005512 seconds)
    (113/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.108407167 seconds)
    (114/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.219323138 seconds)
    (115/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.086940465 seconds)
    (116/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.228336717 seconds)
    (117/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.880502552 seconds)
    (118/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.087945439 seconds)
    (119/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.166685539 seconds)
    (120/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.854601761 seconds)
    (121/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.298272857 seconds)
    (122/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.083319171 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.393051974 seconds)
    (124/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.478985845 seconds)
    (125/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.161823779 seconds)
    (126/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.215851858 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.386548431 seconds)
    (128/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.288237046 seconds)
    (129/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.093464803 seconds)
    (130/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.383787485 seconds)
    (131/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.141018097 seconds)
    (132/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.176052529 seconds)
    (133/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.335068026 seconds)
    (134/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.437420875 seconds)
    (135/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.102956527 seconds)
    (136/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.403313305 seconds)
    (137/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.224521866 seconds)
    (138/341) benchmarking ("sort", Float32, false)...
    done (took 5.771537142 seconds)
    (139/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.396895144 seconds)
    (140/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.209643249 seconds)
    (141/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.55038519 seconds)
    (142/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.352716968 seconds)
    (143/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.165253072 seconds)
    (144/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.450792823 seconds)
    (145/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.098654107 seconds)
    (146/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.213848561 seconds)
    (147/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.081947416 seconds)
    (148/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.388188369 seconds)
    (149/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.477000283 seconds)
    (150/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.084721451 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.702434963 seconds)
    (152/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.278725071 seconds)
    (153/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.338778448 seconds)
    (154/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.444113628 seconds)
    (155/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.182774966 seconds)
    (156/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.467186473 seconds)
    (157/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.087317348 seconds)
    (158/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.815040762 seconds)
    (159/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.175378578 seconds)
    (160/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.379385 seconds)
    (161/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.394293785 seconds)
    (162/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.093063943 seconds)
    (163/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.511502436 seconds)
    (164/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.295905901 seconds)
    (165/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.561822109 seconds)
    (166/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.20867166 seconds)
    (167/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.085168516 seconds)
    (168/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.978265191 seconds)
    (169/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.396486652 seconds)
    (170/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.170940135 seconds)
    (171/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.083609503 seconds)
    (172/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.178297042 seconds)
    (173/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.777349181 seconds)
    (174/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.101314409 seconds)
    (175/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.095010551 seconds)
    (176/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.212603306 seconds)
    (177/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.092312137 seconds)
    (178/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.214681716 seconds)
    (179/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.09425776 seconds)
    (180/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.986294496 seconds)
    (181/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.196921486 seconds)
    (182/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.399767468 seconds)
    (183/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.091926057 seconds)
    (184/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.102418102 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.227917719 seconds)
    (186/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.315214388 seconds)
    (187/341) benchmarking ("sort", Int8, false)...
    done (took 5.056919053 seconds)
    (188/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.213374743 seconds)
    (189/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.231878542 seconds)
    (190/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.262156615 seconds)
    (191/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.2604499 seconds)
    (192/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.144424664 seconds)
    (193/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.163035998 seconds)
    (194/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.162610018 seconds)
    (195/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.378545851 seconds)
    (196/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.179684725 seconds)
    (197/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.486671095 seconds)
    (198/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.485712144 seconds)
    (199/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.088724253 seconds)
    (200/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.134994533 seconds)
    (201/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.866462231 seconds)
    (202/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.446700382 seconds)
    (203/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.008950312 seconds)
    (204/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.222790309 seconds)
    (205/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.422821049 seconds)
    (206/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.207552842 seconds)
    (207/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.479048686 seconds)
    (208/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.483575977 seconds)
    (209/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.343314032 seconds)
    (210/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.189355979 seconds)
    (211/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.149880568 seconds)
    (212/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.556556242 seconds)
    (213/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.176475597 seconds)
    (214/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.222902831 seconds)
    (215/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.197688334 seconds)
    (216/341) benchmarking ("sort", BigInt, false)...
    done (took 7.091489775 seconds)
    (217/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.339444817 seconds)
    (218/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.223526544 seconds)
    (219/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.101813632 seconds)
    (220/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.183752382 seconds)
    (221/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.355151398 seconds)
    (222/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.202977767 seconds)
    (223/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.051440258 seconds)
    (224/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.300580022 seconds)
    (225/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.168022755 seconds)
    (226/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.194732718 seconds)
    (227/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.32098417 seconds)
    (228/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.101671922 seconds)
    (229/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.086552687 seconds)
    (230/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.187505769 seconds)
    (231/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.264359445 seconds)
    (232/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.10233941 seconds)
    (233/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.549467947 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.754017594 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.386565419 seconds)
    (236/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.058512155 seconds)
    (237/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.484627635 seconds)
    (238/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.07513644 seconds)
    (239/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.194116881 seconds)
    (240/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.095374482 seconds)
    (241/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.223408861 seconds)
    (242/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.619347984 seconds)
    (243/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.088235366 seconds)
    (244/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.340144677 seconds)
    (245/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.105268081 seconds)
    (246/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.184573299 seconds)
    (247/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.350217216 seconds)
    (248/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.090594136 seconds)
    (249/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.19535116 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.085865063 seconds)
    (251/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.878142218 seconds)
    (252/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.093948304 seconds)
    (253/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.219296698 seconds)
    (254/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.070314129 seconds)
    (255/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.366083131 seconds)
    (256/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.102617677 seconds)
    (257/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.099946864 seconds)
    (258/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.088202743 seconds)
    (259/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.242224495 seconds)
    (260/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.684716568 seconds)
    (261/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.31528804 seconds)
    (262/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 9.002727224 seconds)
    (263/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.228422362 seconds)
    (264/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 8.500828671 seconds)
    (265/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.136303758 seconds)
    (266/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.232322383 seconds)
    (267/341) benchmarking ("sort", Float64, false)...
    done (took 5.783027987 seconds)
    (268/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.494340284 seconds)
    (269/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.105967173 seconds)
    (270/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.089203163 seconds)
    (271/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 3.951712832 seconds)
    (272/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.265305498 seconds)
    (273/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.267573656 seconds)
    (274/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.579123379 seconds)
    (275/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.09935421 seconds)
    (276/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 8.775367272 seconds)
    (277/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 3.617543382 seconds)
    (278/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.129611111 seconds)
    (279/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.221558266 seconds)
    (280/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.351495354 seconds)
    (281/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.340142746 seconds)
    (282/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.088882526 seconds)
    (283/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.843473216 seconds)
    (284/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.094725096 seconds)
    (285/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.109217882 seconds)
    (286/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.10224851 seconds)
    (287/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.195580422 seconds)
    (288/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.045902738 seconds)
    (289/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.10950508 seconds)
    (290/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.092276239 seconds)
    (291/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.153892667 seconds)
    (292/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.487125088 seconds)
    (293/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.352091151 seconds)
    (294/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.173609306 seconds)
    (295/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.197168046 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.120121963 seconds)
    (297/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.105025798 seconds)
    (298/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.40046766 seconds)
    (299/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.481810755 seconds)
    (300/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.091567491 seconds)
    (301/341) benchmarking ("map", abs, Float32, true)...
    done (took 3.867549661 seconds)
    (302/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.122150956 seconds)
    (303/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.151939696 seconds)
    (304/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.19719114 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.222983114 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.308505871 seconds)
    (307/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.392304824 seconds)
    (308/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.9907681 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.890410511 seconds)
    (310/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.923960563 seconds)
    (311/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.507825027 seconds)
    (312/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.35986355 seconds)
    (313/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.557329706 seconds)
    (314/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.994117646 seconds)
    (315/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.09714259 seconds)
    (316/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.231445159 seconds)
    (317/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.377167144 seconds)
    (318/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.026779292 seconds)
    (319/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.076161145 seconds)
    (320/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.407334974 seconds)
    (321/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.796897708 seconds)
    (322/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.528293706 seconds)
    (323/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.414624528 seconds)
    (324/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.213080558 seconds)
    (325/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.211214286 seconds)
    (326/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.107625042 seconds)
    (327/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.29596112 seconds)
    (328/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.218031686 seconds)
    (329/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.09526783 seconds)
    (330/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.275390078 seconds)
    (331/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.528369417 seconds)
    (332/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.682820393 seconds)
    (333/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.410341428 seconds)
    (334/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.249619699 seconds)
    (335/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.113902749 seconds)
    (336/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.303270905 seconds)
    (337/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.344415082 seconds)
    (338/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.488310971 seconds)
    (339/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.855235898 seconds)
    (340/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.109960175 seconds)
    (341/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.376548555 seconds)
  done (took 1165.93790484 seconds)
done (took 1168.025255303 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.12350127 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.117749351 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.098722757 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.121840524 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.213293012 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.143158559 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.112902987 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.102399777 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.149654178 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.148634217 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.098069521 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.140964264 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.100021625 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.101043832 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.099739872 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.116236008 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.49727211 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.147331489 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.119766087 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.112038837 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.118118209 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.098618252 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.149990773 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.141173604 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.103790691 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.105114442 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.104580016 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.120311694 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.212718693 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.104491379 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.105530261 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.112949226 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.497854691 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.144728209 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.099194178 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.120829845 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.113158057 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.112616234 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.104912577 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.133592266 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.656635306 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.109196975 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.102500182 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.10371804 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.102608103 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.108109231 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.114875134 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.110185328 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.117809313 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.119011453 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.644154296 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.12670202 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.105255394 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.101796253 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.115297398 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.102870142 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.106104775 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.120027227 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.121032008 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.119149524 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.482562066 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.154826085 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.106681173 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.120301449 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.111686489 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.678780305 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.10935857 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.108792525 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.656661016 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.118734785 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.679709068 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.121902402 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.105579812 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.118120855 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.135398932 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.498141359 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.14510993 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.102889556 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.11370301 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.102385272 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.11513809 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.119319304 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.107706836 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.103854189 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.121428426 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.148142795 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.117020502 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.104392859 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.116270636 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.123657623 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.113540452 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.116249984 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.108240789 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.102171208 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.11609691 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.109189277 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.108154399 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.107447113 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.109510476 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.118054317 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.656146498 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.130406216 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.102735265 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.102906887 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.105134703 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.120200592 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.657500021 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.113572035 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.128397682 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.15579124 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.110838085 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.483145969 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.154593663 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.12329897 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.116688724 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.107833379 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.103262534 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.482993341 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.691735883 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.129415702 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.106524408 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.103611158 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.123007218 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.108304384 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.103240221 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.502021487 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.152258129 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.123292365 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.22889721 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.119984029 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.138817878 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.104324852 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.111110232 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.151716434 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.124356951 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.138837154 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.109333856 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.124334109 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.125967375 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.104749474 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.119710845 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.119630463 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.107469731 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.11467404 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.104283934 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.152409074 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.123370256 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.123568096 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.128876045 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.230903961 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.105163147 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.485797485 seconds)
done (took 331.654835137 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.193717629 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.103608607 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.196751387 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.106375107 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.196600164 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.181179201 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.103954023 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.103983324 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.103617223 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.616707243 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.104168817 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.109221365 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.105822708 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.105240757 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.180006349 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.104829791 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.104456226 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.388706357 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.107148247 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.190299237 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.105162715 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.104770517 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.104530291 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.619165268 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.106337186 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.1051997 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.189315804 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.105237418 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.396427131 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.104285277 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.104986002 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.394525322 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.188185188 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.117616518 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.111521647 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.111944001 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.198313468 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.113190578 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.176949012 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.176948277 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.197904293 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.139645176 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.106152852 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.107259067 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.108488894 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.108181706 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.105492234 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.13685808 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.106242568 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.110250307 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.38922242 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.112862662 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.111468538 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.106360181 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.105175905 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.122546728 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.106036072 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.108826015 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.190087514 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.108976605 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.178607194 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.621496085 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.616653522 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.106931274 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.106608524 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.108308516 seconds)
  done (took 200.499010233 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.21115028 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.180831009 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.213548047 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.113296906 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.157106465 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.215273505 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.114376725 seconds)
  done (took 17.237550223 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.114830328 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.10874336 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.168692417 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.167606642 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.110031701 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.289073592 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.120560298 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.114381625 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.135827372 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.109386478 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.745302751 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.168123486 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.115383433 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.10828394 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.119986378 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.17354309 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.111663389 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.109664173 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.218913548 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.257729547 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.115342441 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.113121452 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.13508668 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.120656759 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.108802978 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.109603165 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.109796197 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.11682239 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.109372512 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.108224984 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.109509434 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.173685658 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.108639003 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.107589568 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.108894694 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.109897645 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.110394659 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.109495992 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.109431486 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.108359621 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.109257107 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.110068121 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.11054444 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.110041183 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.110169496 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.134009043 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.109848599 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.10979137 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.111283573 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.111566202 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.136716718 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.110995809 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.110268397 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.115548397 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.155225097 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.11626365 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.111432716 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.111336187 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.11140838 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.110599395 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.110465574 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.260023818 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.172225661 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.110329506 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.17092504 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.267779566 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.110849949 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.110726312 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.11049147 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.205644032 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.111356998 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.170950588 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.112222244 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.229124475 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.110904243 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.291008317 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.135792994 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.115756685 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.117257802 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.111462471 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.120843248 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.112223836 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.114781608 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.120079998 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.116548377 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.112167763 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.1121548 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.114195626 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.120095817 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.111625912 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.16578048 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.113094653 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.115222214 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.252245553 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.111890911 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.224123639 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.140576575 seconds)
  done (took 229.635812384 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.120286856 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.121398185 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.116002648 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.129058325 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.11456092 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.114584496 seconds)
  done (took 14.753634098 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.115263296 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.116896101 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.113353556 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.112806345 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.115057601 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.115759931 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.11373167 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.115982687 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.118969393 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.114122143 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.115785344 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.114792665 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.116418974 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.115007163 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.114457663 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.114931617 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.114761556 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.114167319 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.113711669 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.115528726 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.244091277 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.116720919 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.115982631 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.118249126 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.121508328 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.115873032 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.127745574 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.114157547 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.115151552 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.123210224 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.120379844 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.116830861 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.119586138 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.122486211 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.119837723 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.118864502 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.119368709 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.116734536 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.114275484 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.116821612 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.116354377 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.115698091 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.115285717 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.116606327 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.118332073 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.123037593 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.121673566 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.12838925 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.115292798 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.116841338 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.115794734 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.115132235 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.11826285 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.117367076 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.121095378 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.123501364 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.122674527 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.115696341 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.119510755 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.120813185 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.121018933 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.117918257 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.119213851 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.121943119 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.123949414 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.117655447 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.121894739 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.123563833 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.11806307 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.117469847 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.11809999 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.117683036 seconds)
  done (took 155.653864941 seconds)
done (took 619.832669348 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.185052794 seconds)
  done (took 9.226580406 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.213630015 seconds)
  done (took 9.338695823 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.044306735 seconds)
  done (took 14.087260656 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.153246072 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.142532928 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.134240652 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.116391291 seconds)
  done (took 30.601326035 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.389591638 seconds)
  done (took 9.43098964 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.130376496 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.115351264 seconds)
  done (took 16.351180691 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.121978457 seconds)
  done (took 9.164638642 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.590794033 seconds)
  done (took 9.651955412 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.122035944 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.142220898 seconds)
  done (took 16.327462683 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.121220659 seconds)
  done (took 9.163049589 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.908543448 seconds)
  done (took 10.027807879 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.124261133 seconds)
  done (took 9.183966934 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.188700451 seconds)
  done (took 9.231540776 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.730885602 seconds)
  done (took 10.773128825 seconds)
done (took 174.598922494 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.126368323 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.120382382 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.122457987 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.121367995 seconds)
  done (took 30.532976419 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.153002367 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.153228548 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.16217547 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.153054028 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.144411859 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.144303502 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.152809547 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.1539605 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.143555865 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.150312066 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.154501201 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.149522277 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.152139677 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.1610634 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.161175981 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.150646328 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.153251736 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.153760017 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.143440045 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.1619706 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.150786491 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.152764078 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.118747385 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.118139559 seconds)
  done (took 53.637430115 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.304708097 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.185193894 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.271969518 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.164887794 seconds)
  done (took 10.968611145 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.118670204 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.18233764 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.170501652 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.165335635 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.212239329 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.221992381 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.173326328 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.328851918 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.236189314 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.245622584 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.126321727 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.141358274 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.139907188 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.165131129 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.222209631 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.119866464 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.119451353 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.234027454 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.181281873 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.329912052 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.119096135 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.173398408 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.205516707 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.174448323 seconds)
  done (took 54.550601419 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.120358883 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.128653833 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.12851955 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.122649729 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.122513833 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.122076221 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.128842455 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.122892952 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.143515427 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.124041317 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.122179696 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.122268763 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.129119036 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.1220737 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.122178595 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.134148431 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.136090067 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.121276114 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.125858618 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.128999953 seconds)
  done (took 44.57263843 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.120173611 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.966268539 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.468159686 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.372232531 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.119668792 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.123638399 seconds)
  done (took 33.214490652 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.134086681 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 2.128497711 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.121470877 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 2.179432575 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.260230109 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.129443494 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.122547905 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 2.13315466 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 2.170891554 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 2.189874492 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.144628442 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 2.15295857 seconds)
  done (took 27.91384039 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.124133192 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.127233858 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.126415483 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.138148468 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.134682704 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.131691767 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.132181411 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.121381007 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.139059982 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.142840842 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.132354254 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.134396361 seconds)
  done (took 47.635584006 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.336271051 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.347693653 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.337520592 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.743265478 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.732403191 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.097934726 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.423351639 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.022584014 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.718310723 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.752697342 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.409087997 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.179188655 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.07678432 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.047670966 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.021085196 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.365146231 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.124007259 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.995848108 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.378503458 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.182720339 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12429477 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.123281216 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.123481879 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.415974176 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.443767117 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.121897949 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.335056474 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.138959288 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.147386722 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.352801897 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.601639733 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.176589072 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.325055246 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.386056034 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.460831877 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.173349023 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.146535424 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.326948766 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.168161377 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.158722529 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.133616632 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.134313271 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.193615906 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.135565075 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.395908975 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.125138195 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.126905476 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.130347715 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.049975318 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.392081312 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.227752793 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.629084518 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.159408999 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.557192719 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.244358863 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.366442877 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.12889279 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.328708916 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.183643363 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.332828782 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.229554436 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.137411457 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.337370131 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.050657187 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.409057444 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.238831339 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.127296701 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.129722027 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.825113672 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.364292205 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.206251098 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.401477798 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.053710734 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.126084011 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.127848108 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.139768038 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.214588896 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.124714301 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.421631563 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.230710238 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.051737819 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.229428631 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.523366299 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.131142632 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.125486095 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.133545659 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.447158464 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.148461584 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.223294778 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.337335616 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.439031604 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.126032421 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.126204372 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.147381888 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129256648 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.070927382 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.716118957 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.19382384 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.053389996 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.694076219 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.616379595 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.092007664 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.61168587 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.170169546 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.397648355 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.277999534 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.531834739 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.336791294 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.373343733 seconds)
    (110/608) benchmarking "5d"...
    done (took 4.054184807 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.137834201 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.688604239 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.211805131 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.205638843 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.13010127 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.442485499 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.340871842 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.389613783 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.235295432 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.1296252 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.056286646 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.142085104 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.332979614 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.62279224 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.185424867 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.130525596 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.136385131 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.130885208 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.135188676 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.731251089 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.145581122 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.417193702 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.196302164 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.131521607 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.068592189 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.136808032 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.417293863 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.828040426 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.191084205 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.382484205 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.118800408 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.830087351 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.133926071 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.149793078 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.395718301 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.199138105 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207094605 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.71267812 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.264167508 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.228752393 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.13192044 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.267328015 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.139315633 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.134820284 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.580676456 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.55101387 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.559150347 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.174713536 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.155893675 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.152971797 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.345223609 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.374842938 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.14109167 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.162896265 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.137136248 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.217449667 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.360097297 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.134886938 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.153006538 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.371370519 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.37120303 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.431106086 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.198477901 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.140739441 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.203830071 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.143427726 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.345593511 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.215437434 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.793339714 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.678625158 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.344492086 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.729664011 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.09771392 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.813547959 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.36128906 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.503374668 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.148648352 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.586493285 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.344236614 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.88728198 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.164977966 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.661693834 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.060275704 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.138691917 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.461670173 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.087118092 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.760256152 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.190771995 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.210843044 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.135488345 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.135931927 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.142780157 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.135912141 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.236874129 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.203340858 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207430607 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.061432233 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.812764607 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.175215655 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.137722918 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.135510421 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.36929732 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.839516482 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.088038639 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.13493371 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.214285895 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.587723706 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.68230956 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.140643771 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.138626913 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.743803863 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.756220832 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.048364676 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.139415862 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.844934827 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.162531126 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.351171274 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.243539266 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.433225356 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.827617706 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.212962012 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.135596253 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.145077181 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.835940879 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.145498539 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.837843109 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.425104408 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.130199811 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.596945456 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.192560188 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.346085949 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.151769204 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.138297612 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.597337366 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.163744262 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.138828725 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.341412856 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.645078503 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.423099508 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.46007701 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.223314479 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.153596099 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.404548002 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.310637302 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.621949351 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.808820099 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.130176315 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.141535206 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.381349613 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.803622149 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.139295702 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.114876765 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.146680179 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.349943536 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.341469123 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.4044431 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.427281866 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.577333804 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.168205203 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.144154117 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.157801387 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.379979091 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.13945907 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.174968316 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.584203392 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.145684217 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.567440118 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.417214275 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.49288742 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.765108582 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.398072592 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.19792211 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.151033945 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.775706625 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.258362508 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.073610611 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.258045609 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.065078273 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.753600064 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.431199416 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.158341001 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.407686126 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.11695867 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.472665843 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.429036622 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.357751781 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.175740698 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.169951157 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.140926685 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.191143922 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.146596425 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.370787976 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.257794555 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.150207904 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.705640911 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.179846206 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.186382428 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.145534462 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.580367271 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.162836487 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.144205385 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.835861851 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.793985769 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.261209858 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.216549138 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.843592623 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.659403845 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.188582435 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.031296623 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.969268854 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.407724446 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.192700461 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.579731891 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.176649509 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.546230685 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.171957504 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.354996604 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.146930923 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.745733717 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.188929454 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.404998159 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.095714309 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.35580723 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.338274466 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.165820981 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.148135989 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.069324721 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.250962552 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.02555302 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.126577037 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.146002501 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.168791114 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.533116474 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.383363287 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.569557128 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.018791451 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.145536736 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.390437963 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.538235793 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.793833718 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17766151 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.145877383 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.435857158 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.912597079 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.404470362 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.428532941 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.152338408 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.814544991 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.356249029 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.266482849 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.062697315 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.636050329 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.727985732 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.845327625 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.15588825 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.347838789 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.433609194 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.455899056 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.181952181 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.214963732 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.550310866 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.413080302 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.846410434 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.071180355 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.146460525 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.532832725 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.164411363 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.242222127 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.386059449 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.445935533 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.811538049 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.648700622 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.198917546 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.45371391 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.54833848 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.556347955 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.350243104 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.498712322 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.467777941 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.031374711 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.557765372 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.359101435 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.239422881 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.419646399 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.032053129 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.855515205 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.387036248 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.149888641 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.074067818 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.353575726 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.156888434 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.582121118 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.670299241 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.154870984 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.370193986 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.609289608 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.686143271 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.371175041 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.174195223 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.608591266 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.17105133 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.167856432 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.147397009 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.63849516 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.425686264 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.161744624 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.087939171 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.820559703 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.074169912 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.360863665 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.366374893 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.184263252 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.704700657 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.374847094 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.246468594 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.440716685 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.416683742 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.184031787 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.074679034 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.760538769 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.095388235 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.154281465 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.57532649 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.165199092 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.151389626 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.35215421 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.077694313 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.195401721 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.767733123 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.340725724 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.724078164 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.420482523 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.2709397 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.386381351 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.44714928 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.156688804 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.108740278 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.421693484 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.077155833 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.794128472 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.806132968 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.859524098 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.222165604 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.150740754 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.152759296 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.422073982 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.432411689 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.24051345 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.656521932 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.184427841 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.173830501 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.443839306 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.230426633 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.152662901 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.156096621 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.657499975 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.385900021 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.164940659 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.185618589 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.363851288 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.226923919 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.279203998 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.224860265 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.665232557 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.155035712 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.152308884 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.183464996 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.275880721 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.151506283 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.782741766 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.212229732 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.155073639 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.423710865 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.888129354 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.354594557 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.545230332 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.023647144 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.365968756 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.194911121 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.153912442 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.153735788 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.435619919 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.447092137 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.152013314 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.421361163 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.195218185 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.157005609 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.167362431 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.121964728 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.151170505 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.763150006 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.053016363 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.883679221 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.545024722 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.166117722 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.208695363 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.155600305 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.080052102 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.169324023 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.166834997 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.259312174 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.157344668 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.418952556 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.149124921 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.232806842 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.154917386 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.154752273 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.162368947 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.367432803 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.668061186 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.16993219 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.853420872 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.357451674 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.159468669 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.644822445 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.612174818 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.430955065 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.193776692 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.378890482 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.390080949 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.689707233 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.381407569 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.131422045 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.380654931 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.156053734 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.425019064 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.428408191 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.155942234 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.366552647 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.654736091 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.442483649 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.158535676 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.736870749 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.213009139 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.393643485 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.069236813 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.156030514 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.156789811 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.417247835 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.20351744 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.155928557 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.16390051 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.710666347 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.764717124 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.622328602 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.303945166 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.439570818 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.848811283 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.90950714 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.159176445 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.08320302 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.171047655 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.179132664 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.159714129 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.179746464 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.763749748 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.887843153 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.369454577 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.444000955 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.082382272 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.359245816 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.789425884 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.08325499 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.125001754 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.156870211 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.413113126 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.084894747 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.159364509 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.177523298 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.139094519 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.890123889 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.427908345 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.158124502 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.101507146 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.1634624 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.732307318 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.157605751 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.242837655 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.158504224 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.275347268 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.421659955 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.47927407 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.253335111 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.797760759 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.783429188 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.096256711 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.202452715 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.716501563 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.728006115 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.130036428 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.952158628 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.775152347 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.103532207 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.161069381 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.175146505 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.399506009 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.164494595 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.161535248 seconds)
  done (took 2319.133098964 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.162928888 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.189945946 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.206480501 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.216255803 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.293455627 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.259936043 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.204184499 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.226185414 seconds)
  done (took 59.841647099 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 7.160323505 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.139262194 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 2.167706201 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.159457811 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 2.169874158 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 7.160816694 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.375989849 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 7.178385572 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.186762625 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 2.164902078 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 7.162232941 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.170042908 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 2.529437005 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 2.194105334 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 7.161624793 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 7.16052718 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 2.16653886 seconds)
  done (took 81.501406728 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.16115805 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.264439867 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.20897076 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.16352566 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.815316918 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.172028013 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.063478605 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.219244054 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.167523381 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.535511506 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.460820698 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.209646261 seconds)
  done (took 93.526171391 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 2.169390468 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 2.161495872 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.162912558 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.162745704 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.162285912 seconds)
  done (took 12.908360477 seconds)
done (took 2872.038834617 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.406117792 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.220402692 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.263762635 seconds)
  done (took 6.568412494 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.311520846 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.354951028 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.467136704 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.475481529 seconds)
  done (took 11.701793909 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.447308888 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.537564147 seconds)
  done (took 7.068549373 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.529051607 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.173099786 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.553203536 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.164254642 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.171307465 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.169188262 seconds)
  done (took 23.595448088 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.164524387 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.163717407 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.16327689 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.163369787 seconds)
  done (took 10.740518721 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.160881078 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.843027988 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.166106772 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.175310588 seconds)
  done (took 22.430752769 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.356681451 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.222277355 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.933892851 seconds)
  done (took 9.598830649 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.976509457 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.198888237 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.770715362 seconds)
  done (took 10.03171624 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.310237364 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.151444403 seconds)
  done (took 8.54867815 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.308447054 seconds)
  done (took 4.394914187 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.026708019 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.475984828 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.659803335 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.720300898 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.789921024 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.402291339 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.492235893 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.442038421 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.578325813 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.586740963 seconds)
  done (took 28.261049777 seconds)
done (took 159.683213389 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.534489909 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.186735868 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.381639601 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.534109042 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.41335743 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.375224053 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.465882312 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.521054223 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.211845382 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.197031217 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.534819766 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.412852466 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.418135348 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.180415239 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.420596859 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.181042506 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.402079942 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.547354677 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.206943707 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.450689131 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.475196177 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.182043128 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.374740043 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.197988828 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.407840074 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.322778071 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.726237615 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.184886267 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.360620494 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.738831393 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.325755089 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.605798971 seconds)
  done (took 178.567434236 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.165425123 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.166775318 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.167565944 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.167511021 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.489994694 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.16707915 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.170359692 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.167329641 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.407232551 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.393051344 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.167183027 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.476056088 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.169869811 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.167825249 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.16842573 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.168015178 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.55495438 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.167722143 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.167941008 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.168456554 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.166945795 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.328024739 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.168870694 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.339696381 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.542239331 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.169157653 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.168542696 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.170259747 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.169103532 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.169259707 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.170039395 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.168157397 seconds)
  done (took 217.659859081 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.169911349 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.170055734 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.168754345 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.169565358 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.1707931 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.170688322 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.170046364 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.169362323 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.801304627 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.793045684 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.170885782 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.169326205 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.177659853 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.169386312 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.177075876 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.169613563 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.177623241 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.180744149 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.177483568 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.185352399 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.18774772 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.82969642 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.17155971 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.83226882 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.171409492 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.174896829 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.170512403 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.1805926 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.18054614 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.18089651 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.171200986 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.172229171 seconds)
  done (took 230.224926776 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.414614519 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.17083875 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.171298547 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.177068512 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.171778819 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.171444664 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.170569323 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.421805329 seconds)
  done (took 21.962859518 seconds)
done (took 650.512020134 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.524609031 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.916936835 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.314979084 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.197519915 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.426079772 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.244550324 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.191506765 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.252464624 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 3.02758475 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.269334508 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.605274593 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.202560399 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.981724516 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.223791613 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.313118195 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.250124976 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.536769094 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.855544008 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.336017853 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.871749698 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.352832664 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.148293123 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.274231353 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.061608195 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.627469736 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.180688709 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.221641459 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.541598174 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.19834733 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.348463167 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.830872527 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.463487069 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.211270211 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.194169498 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.245621993 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.225905968 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.4077166 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.208851396 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.309969709 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.939856678 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.862202905 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.913862473 seconds)
  done (took 113.40464664 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.186650564 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.181193576 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.180009503 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.18021651 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.189336105 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.180248697 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.180231374 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.180831745 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.181317624 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.181011508 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.181259242 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.191098242 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.182078011 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.190758116 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.181367158 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.182170268 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.181253916 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.191351205 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.18064307 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.18238247 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.181133745 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.181664914 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.179314359 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.183113404 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.183490965 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.181899755 seconds)
  done (took 58.868508948 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.177788616 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.338827523 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.418369664 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.199447675 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.17780448 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.180908722 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.206955277 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.184791663 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.180704167 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.180362286 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.297299527 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.182703071 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.192876234 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.415018645 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.196268773 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.177791634 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.177942525 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.179243224 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.347322974 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.194148262 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.209782318 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.186502535 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.208940177 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.195142689 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.182169345 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.17896006 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.182196499 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.587775141 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.190889918 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.297965624 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.223327079 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.21466964 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.532734712 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.430559682 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.235161766 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.188105847 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.178867626 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.303841012 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.186070393 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.180431627 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.208223991 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.191141803 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.424038206 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.710553528 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.195963117 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.180264463 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.588213171 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.315279627 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.223959613 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.191670848 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.429347926 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.199690889 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.179803888 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.181839482 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.217646698 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.19401861 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.181001365 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.443653136 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.197474939 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.210459644 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.191195224 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.183482128 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.355713068 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.190381378 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.34273133 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.191668365 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.190119466 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.182714156 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.424955404 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.199154553 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.725930052 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.19673577 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.182218326 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.301706079 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.34910502 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.624065648 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.196217494 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.358143064 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.540633826 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.219232525 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.196780545 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.576141629 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.223389585 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.195285404 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.182091368 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.181670089 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.181719918 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.227098377 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.209948909 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.6357124 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.723043582 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.463644152 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.223830385 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.197881164 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.184903832 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.455102636 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.193207706 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.182953541 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.414875701 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.736297863 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.199464602 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.190340614 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.705085476 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.200173259 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.212662132 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.195705948 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.436709007 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.201610668 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.228783964 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.18368365 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.191122069 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.18698696 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.214491547 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.19581034 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.183464024 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.696823849 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.323162531 seconds)
  done (took 268.94637566 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.185551805 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.184155214 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.183416056 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.183595269 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.183308503 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.185045906 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.183400812 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.18490969 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.184413853 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.184090165 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.181718481 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.185428005 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.185248751 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.184946119 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.711041063 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.188998948 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.673069273 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.185421084 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.186498563 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.189214756 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.793696308 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.192237093 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.186235482 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.189193355 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.187836717 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.188606631 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.195663736 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.230189094 seconds)
  done (took 176.985991838 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.187862449 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.2666518 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.202239742 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.235925349 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.200399346 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.187782587 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.362610147 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.212975119 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.194148071 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.188880955 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.187621875 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.220298695 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.194886643 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.28579865 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.22644158 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.29424399 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.293935865 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.197576212 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.188585879 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.189345976 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.237740125 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.203782237 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.219692628 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.252956873 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.20285705 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.246701319 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.205702394 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.189050173 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.188561318 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.333768341 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.212033866 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.220976918 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.226374546 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.211786516 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.309359653 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.311036658 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.29443623 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.295251417 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.197083501 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.189555388 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.190010028 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.192069656 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.246399133 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.207388416 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.192138926 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.307164905 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.211194538 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.189997507 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.190469296 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.190114176 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.204692121 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.209080312 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.228621154 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.317237268 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.243035365 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.216560636 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.288529853 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.319601075 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.193324571 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.287371597 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.200223996 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.303708883 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.215472038 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.192933022 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.192130492 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.195261964 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.241674107 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.305277078 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.297046092 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.200372155 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.288338176 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.248718459 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.208264801 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.191981598 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.192850646 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.248624021 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.305890285 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.248960536 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.2575888 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.231185833 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.202128165 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.191227128 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.193546848 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.220853569 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.200024205 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.307226163 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.311359532 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.200559646 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.192700525 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.192348521 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.192338405 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.218667414 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.257227561 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.237771471 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.302291682 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.233413304 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.232985319 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.200630997 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.206534592 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.197465462 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.227449072 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.201415788 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.204558303 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.488779416 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.225348078 seconds)
  done (took 236.610333975 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.546284665 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.240308357 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.266429337 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.461428981 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.583809411 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.046797292 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.232861796 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.245362067 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.252321731 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.374962969 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.307459399 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.290594484 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.236493903 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.215997678 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.23781014 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.255581616 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.269020229 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.548324442 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.44304617 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.734057561 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.239502204 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.506672085 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.564813052 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.599875917 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.291976778 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.627282829 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.855811091 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.339477496 seconds)
  done (took 71.933287759 seconds)
done (took 928.839547661 seconds)
SAVING RESULT...
DONE!
